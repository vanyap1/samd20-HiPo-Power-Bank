
LifePo4 HighPower power bank.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ba24  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000ba24  0000ba24  0001ba24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c8  20000000  0000ba2c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000070c  200009c8  0000c3f4  000209c8  2**2
                  ALLOC
  4 .stack        00002004  200010d4  0000cb00  000209c8  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  000209c8  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209f2  2**0
                  CONTENTS, READONLY
  7 .debug_info   000eba35  00000000  00000000  00020a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005c66  00000000  00000000  0010c480  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00053354  00000000  00000000  001120e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00003758  00000000  00000000  0016543a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003668  00000000  00000000  00168b92  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000160b4  00000000  00000000  0016c1fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001b6d5  00000000  00000000  001822ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0007870a  00000000  00000000  0019d983  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c398  00000000  00000000  00216090  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 30 00 20 55 13 00 00 51 13 00 00 51 13 00 00     .0. U...Q...Q...
	...
      2c:	51 13 00 00 00 00 00 00 00 00 00 00 51 13 00 00     Q...........Q...
      3c:	51 13 00 00 51 13 00 00 51 13 00 00 51 13 00 00     Q...Q...Q...Q...
      4c:	51 13 00 00 d1 1b 00 00 51 13 00 00 51 13 00 00     Q.......Q...Q...
      5c:	51 13 00 00 51 13 00 00 51 13 00 00 51 13 00 00     Q...Q...Q...Q...
      6c:	51 13 00 00 51 13 00 00 51 13 00 00 51 13 00 00     Q...Q...Q...Q...
      7c:	51 13 00 00 51 13 00 00 51 13 00 00 51 13 00 00     Q...Q...Q...Q...
      8c:	51 13 00 00 51 13 00 00 51 13 00 00 51 13 00 00     Q...Q...Q...Q...
      9c:	51 13 00 00 51 13 00 00                             Q...Q...

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	200009c8 	.word	0x200009c8
      c4:	00000000 	.word	0x00000000
      c8:	0000ba2c 	.word	0x0000ba2c

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	200009cc 	.word	0x200009cc
      f8:	0000ba2c 	.word	0x0000ba2c
      fc:	0000ba2c 	.word	0x0000ba2c
     100:	00000000 	.word	0x00000000

00000104 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     104:	b510      	push	{r4, lr}
	system_init();
     106:	f001 f99b 	bl	1440 <system_init>
}
     10a:	bd10      	pop	{r4, pc}

0000010c <u8g2_DrawRFrame>:
  }
}


void u8g2_DrawRFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
     10c:	b5f0      	push	{r4, r5, r6, r7, lr}
     10e:	46de      	mov	lr, fp
     110:	4657      	mov	r7, sl
     112:	464e      	mov	r6, r9
     114:	4645      	mov	r5, r8
     116:	b5e0      	push	{r5, r6, r7, lr}
     118:	b087      	sub	sp, #28
     11a:	9003      	str	r0, [sp, #12]
     11c:	000d      	movs	r5, r1
     11e:	9204      	str	r2, [sp, #16]
     120:	4698      	mov	r8, r3
     122:	ab10      	add	r3, sp, #64	; 0x40
     124:	881b      	ldrh	r3, [r3, #0]
     126:	469a      	mov	sl, r3
     128:	ab11      	add	r3, sp, #68	; 0x44
     12a:	881e      	ldrh	r6, [r3, #0]
  u8g2_uint_t xl, yu;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
     12c:	4643      	mov	r3, r8
     12e:	18cc      	adds	r4, r1, r3
     130:	b2a4      	uxth	r4, r4
     132:	0013      	movs	r3, r2
     134:	4453      	add	r3, sl
     136:	b29f      	uxth	r7, r3
     138:	9700      	str	r7, [sp, #0]
     13a:	0023      	movs	r3, r4
     13c:	f000 fd84 	bl	c48 <u8g2_IsIntersection>
     140:	2800      	cmp	r0, #0
     142:	d106      	bne.n	152 <u8g2_DrawRFrame+0x46>
      w--;
      u8g2_DrawVLine(u8g2, x, yu, hh);
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
    }
  }
}
     144:	b007      	add	sp, #28
     146:	bc3c      	pop	{r2, r3, r4, r5}
     148:	4690      	mov	r8, r2
     14a:	4699      	mov	r9, r3
     14c:	46a2      	mov	sl, r4
     14e:	46ab      	mov	fp, r5
     150:	bdf0      	pop	{r4, r5, r6, r7, pc}
  xl += r;
     152:	19ab      	adds	r3, r5, r6
     154:	b29b      	uxth	r3, r3
     156:	469b      	mov	fp, r3
  yu += r;
     158:	9b04      	ldr	r3, [sp, #16]
     15a:	199b      	adds	r3, r3, r6
     15c:	b29b      	uxth	r3, r3
     15e:	001a      	movs	r2, r3
    xr -= r;
     160:	1ba4      	subs	r4, r4, r6
     162:	b2a4      	uxth	r4, r4
    xr -= 1;
     164:	3c01      	subs	r4, #1
     166:	b2a3      	uxth	r3, r4
     168:	9305      	str	r3, [sp, #20]
    yl -= r; 
     16a:	1bbc      	subs	r4, r7, r6
     16c:	b2a4      	uxth	r4, r4
    yl -= 1;
     16e:	3c01      	subs	r4, #1
     170:	b2a4      	uxth	r4, r4
    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
     172:	2302      	movs	r3, #2
     174:	9300      	str	r3, [sp, #0]
     176:	0033      	movs	r3, r6
     178:	4691      	mov	r9, r2
     17a:	4659      	mov	r1, fp
     17c:	9f03      	ldr	r7, [sp, #12]
     17e:	0038      	movs	r0, r7
     180:	f000 f93d 	bl	3fe <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
     184:	2301      	movs	r3, #1
     186:	9300      	str	r3, [sp, #0]
     188:	0033      	movs	r3, r6
     18a:	464a      	mov	r2, r9
     18c:	9905      	ldr	r1, [sp, #20]
     18e:	0038      	movs	r0, r7
     190:	f000 f935 	bl	3fe <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
     194:	2304      	movs	r3, #4
     196:	9300      	str	r3, [sp, #0]
     198:	0033      	movs	r3, r6
     19a:	0022      	movs	r2, r4
     19c:	4659      	mov	r1, fp
     19e:	0038      	movs	r0, r7
     1a0:	f000 f92d 	bl	3fe <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
     1a4:	2308      	movs	r3, #8
     1a6:	9300      	str	r3, [sp, #0]
     1a8:	0033      	movs	r3, r6
     1aa:	0022      	movs	r2, r4
     1ac:	9905      	ldr	r1, [sp, #20]
     1ae:	0038      	movs	r0, r7
     1b0:	f000 f925 	bl	3fe <u8g2_DrawCircle>
    ww -= r;
     1b4:	4641      	mov	r1, r8
     1b6:	1b8f      	subs	r7, r1, r6
     1b8:	b2bf      	uxth	r7, r7
    ww -= r;
     1ba:	1bbf      	subs	r7, r7, r6
     1bc:	b2bf      	uxth	r7, r7
    hh -= r;
     1be:	4651      	mov	r1, sl
     1c0:	1b8c      	subs	r4, r1, r6
     1c2:	b2a4      	uxth	r4, r4
    hh -= r;
     1c4:	1ba4      	subs	r4, r4, r6
     1c6:	b2a4      	uxth	r4, r4
    xl++;
     1c8:	4659      	mov	r1, fp
     1ca:	1c4b      	adds	r3, r1, #1
     1cc:	b299      	uxth	r1, r3
     1ce:	468b      	mov	fp, r1
    yu++;
     1d0:	464a      	mov	r2, r9
     1d2:	1c53      	adds	r3, r2, #1
     1d4:	b29b      	uxth	r3, r3
     1d6:	4699      	mov	r9, r3
    if ( ww >= 3 )
     1d8:	2f02      	cmp	r7, #2
     1da:	d815      	bhi.n	208 <u8g2_DrawRFrame+0xfc>
    if ( hh >= 3 )
     1dc:	2c02      	cmp	r4, #2
     1de:	d9b1      	bls.n	144 <u8g2_DrawRFrame+0x38>
      hh -= 2;
     1e0:	3c02      	subs	r4, #2
     1e2:	b2a4      	uxth	r4, r4
      w--;
     1e4:	4646      	mov	r6, r8
     1e6:	3e01      	subs	r6, #1
     1e8:	b2b6      	uxth	r6, r6
      u8g2_DrawVLine(u8g2, x, yu, hh);
     1ea:	0023      	movs	r3, r4
     1ec:	464a      	mov	r2, r9
     1ee:	0029      	movs	r1, r5
     1f0:	9f03      	ldr	r7, [sp, #12]
     1f2:	0038      	movs	r0, r7
     1f4:	f000 fcf0 	bl	bd8 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
     1f8:	19ad      	adds	r5, r5, r6
     1fa:	b2a9      	uxth	r1, r5
     1fc:	0023      	movs	r3, r4
     1fe:	464a      	mov	r2, r9
     200:	0038      	movs	r0, r7
     202:	f000 fce9 	bl	bd8 <u8g2_DrawVLine>
     206:	e79d      	b.n	144 <u8g2_DrawRFrame+0x38>
      ww -= 2;
     208:	3f02      	subs	r7, #2
     20a:	b2bf      	uxth	r7, r7
      h--;
     20c:	4652      	mov	r2, sl
     20e:	3a01      	subs	r2, #1
     210:	b293      	uxth	r3, r2
     212:	469a      	mov	sl, r3
      u8g2_DrawHLine(u8g2, xl, y, ww);
     214:	003b      	movs	r3, r7
     216:	9e04      	ldr	r6, [sp, #16]
     218:	0032      	movs	r2, r6
     21a:	9803      	ldr	r0, [sp, #12]
     21c:	f000 fcd4 	bl	bc8 <u8g2_DrawHLine>
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
     220:	0033      	movs	r3, r6
     222:	4453      	add	r3, sl
     224:	b29a      	uxth	r2, r3
     226:	003b      	movs	r3, r7
     228:	4659      	mov	r1, fp
     22a:	9803      	ldr	r0, [sp, #12]
     22c:	f000 fccc 	bl	bc8 <u8g2_DrawHLine>
     230:	e7d4      	b.n	1dc <u8g2_DrawRFrame+0xd0>

00000232 <u8g2_send_tile_row>:
}

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
     232:	b510      	push	{r4, lr}
     234:	b082      	sub	sp, #8
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
     236:	6803      	ldr	r3, [r0, #0]
     238:	7c1b      	ldrb	r3, [r3, #16]
  offset = src_tile_row;
  ptr = u8g2->tile_buf_ptr;
  offset *= w;
     23a:	4359      	muls	r1, r3
  offset *= 8;
     23c:	00c9      	lsls	r1, r1, #3
     23e:	b289      	uxth	r1, r1
  ptr += offset;
     240:	6b44      	ldr	r4, [r0, #52]	; 0x34
     242:	46a4      	mov	ip, r4
     244:	4461      	add	r1, ip
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
     246:	9100      	str	r1, [sp, #0]
     248:	2100      	movs	r1, #0
     24a:	f000 ff73 	bl	1134 <u8x8_DrawTile>
}
     24e:	b002      	add	sp, #8
     250:	bd10      	pop	{r4, pc}

00000252 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
     252:	b5f0      	push	{r4, r5, r6, r7, lr}
     254:	46c6      	mov	lr, r8
     256:	b500      	push	{lr}
     258:	0006      	movs	r6, r0
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
     25a:	2338      	movs	r3, #56	; 0x38
     25c:	5cc7      	ldrb	r7, [r0, r3]
  dest_row = u8g2->tile_curr_row;
     25e:	3301      	adds	r3, #1
     260:	5cc5      	ldrb	r5, [r0, r3]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
     262:	6803      	ldr	r3, [r0, #0]
     264:	7c5b      	ldrb	r3, [r3, #17]
     266:	4698      	mov	r8, r3
  src_row = 0;
     268:	2400      	movs	r4, #0
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
     26a:	002a      	movs	r2, r5
     26c:	0021      	movs	r1, r4
     26e:	0030      	movs	r0, r6
     270:	f7ff ffdf 	bl	232 <u8g2_send_tile_row>
    src_row++;
     274:	3401      	adds	r4, #1
     276:	b2e4      	uxtb	r4, r4
    dest_row++;
     278:	3501      	adds	r5, #1
     27a:	b2ed      	uxtb	r5, r5
  } while( src_row < src_max && dest_row < dest_max );
     27c:	42a7      	cmp	r7, r4
     27e:	d901      	bls.n	284 <u8g2_send_buffer+0x32>
     280:	45a8      	cmp	r8, r5
     282:	d8f2      	bhi.n	26a <u8g2_send_buffer+0x18>
}
     284:	bc04      	pop	{r2}
     286:	4690      	mov	r8, r2
     288:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000028a <u8g2_ClearBuffer>:
{
     28a:	b510      	push	{r4, lr}
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
     28c:	6803      	ldr	r3, [r0, #0]
     28e:	7c1b      	ldrb	r3, [r3, #16]
  cnt *= u8g2->tile_buf_height;
     290:	2238      	movs	r2, #56	; 0x38
     292:	5c82      	ldrb	r2, [r0, r2]
     294:	435a      	muls	r2, r3
  cnt *= 8;
     296:	00d2      	lsls	r2, r2, #3
  memset(u8g2->tile_buf_ptr, 0, cnt);
     298:	6b40      	ldr	r0, [r0, #52]	; 0x34
     29a:	2100      	movs	r1, #0
     29c:	f006 f92e 	bl	64fc <memset>
}
     2a0:	bd10      	pop	{r4, pc}

000002a2 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
     2a2:	b510      	push	{r4, lr}
     2a4:	0004      	movs	r4, r0
  u8g2_send_buffer(u8g2);
     2a6:	f7ff ffd4 	bl	252 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
     2aa:	0020      	movs	r0, r4
     2ac:	f000 ff74 	bl	1198 <u8x8_RefreshDisplay>
}
     2b0:	bd10      	pop	{r4, pc}

000002b2 <u8g2_draw_circle_section>:
/* Circle */

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
     2b2:	b5f0      	push	{r4, r5, r6, r7, lr}
     2b4:	46ce      	mov	lr, r9
     2b6:	b500      	push	{lr}
     2b8:	b082      	sub	sp, #8
     2ba:	9001      	str	r0, [sp, #4]
     2bc:	000e      	movs	r6, r1
     2be:	0015      	movs	r5, r2
     2c0:	001c      	movs	r4, r3
     2c2:	ab08      	add	r3, sp, #32
     2c4:	881b      	ldrh	r3, [r3, #0]
     2c6:	4699      	mov	r9, r3
     2c8:	ab09      	add	r3, sp, #36	; 0x24
     2ca:	781f      	ldrb	r7, [r3, #0]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
     2cc:	07fb      	lsls	r3, r7, #31
     2ce:	d409      	bmi.n	2e4 <u8g2_draw_circle_section+0x32>
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
     2d0:	07bb      	lsls	r3, r7, #30
     2d2:	d417      	bmi.n	304 <u8g2_draw_circle_section+0x52>
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
     2d4:	073b      	lsls	r3, r7, #28
     2d6:	d426      	bmi.n	326 <u8g2_draw_circle_section+0x74>
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
     2d8:	077b      	lsls	r3, r7, #29
     2da:	d435      	bmi.n	348 <u8g2_draw_circle_section+0x96>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
    }
}
     2dc:	b002      	add	sp, #8
     2de:	bc04      	pop	{r2}
     2e0:	4691      	mov	r9, r2
     2e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
     2e4:	464b      	mov	r3, r9
     2e6:	1a9a      	subs	r2, r3, r2
     2e8:	b292      	uxth	r2, r2
     2ea:	1861      	adds	r1, r4, r1
     2ec:	b289      	uxth	r1, r1
     2ee:	f000 fc7b 	bl	be8 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
     2f2:	464b      	mov	r3, r9
     2f4:	1b9a      	subs	r2, r3, r6
     2f6:	b292      	uxth	r2, r2
     2f8:	1961      	adds	r1, r4, r5
     2fa:	b289      	uxth	r1, r1
     2fc:	9801      	ldr	r0, [sp, #4]
     2fe:	f000 fc73 	bl	be8 <u8g2_DrawPixel>
     302:	e7e5      	b.n	2d0 <u8g2_draw_circle_section+0x1e>
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
     304:	464b      	mov	r3, r9
     306:	1b5a      	subs	r2, r3, r5
     308:	b292      	uxth	r2, r2
     30a:	1ba1      	subs	r1, r4, r6
     30c:	b289      	uxth	r1, r1
     30e:	9801      	ldr	r0, [sp, #4]
     310:	f000 fc6a 	bl	be8 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
     314:	464b      	mov	r3, r9
     316:	1b9a      	subs	r2, r3, r6
     318:	b292      	uxth	r2, r2
     31a:	1b61      	subs	r1, r4, r5
     31c:	b289      	uxth	r1, r1
     31e:	9801      	ldr	r0, [sp, #4]
     320:	f000 fc62 	bl	be8 <u8g2_DrawPixel>
     324:	e7d6      	b.n	2d4 <u8g2_draw_circle_section+0x22>
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
     326:	464b      	mov	r3, r9
     328:	195a      	adds	r2, r3, r5
     32a:	b292      	uxth	r2, r2
     32c:	19a1      	adds	r1, r4, r6
     32e:	b289      	uxth	r1, r1
     330:	9801      	ldr	r0, [sp, #4]
     332:	f000 fc59 	bl	be8 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
     336:	464b      	mov	r3, r9
     338:	18f2      	adds	r2, r6, r3
     33a:	b292      	uxth	r2, r2
     33c:	1961      	adds	r1, r4, r5
     33e:	b289      	uxth	r1, r1
     340:	9801      	ldr	r0, [sp, #4]
     342:	f000 fc51 	bl	be8 <u8g2_DrawPixel>
     346:	e7c7      	b.n	2d8 <u8g2_draw_circle_section+0x26>
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
     348:	464b      	mov	r3, r9
     34a:	195a      	adds	r2, r3, r5
     34c:	b292      	uxth	r2, r2
     34e:	1ba1      	subs	r1, r4, r6
     350:	b289      	uxth	r1, r1
     352:	9f01      	ldr	r7, [sp, #4]
     354:	0038      	movs	r0, r7
     356:	f000 fc47 	bl	be8 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
     35a:	444e      	add	r6, r9
     35c:	b2b2      	uxth	r2, r6
     35e:	1b61      	subs	r1, r4, r5
     360:	b289      	uxth	r1, r1
     362:	0038      	movs	r0, r7
     364:	f000 fc40 	bl	be8 <u8g2_DrawPixel>
}
     368:	e7b8      	b.n	2dc <u8g2_draw_circle_section+0x2a>

0000036a <u8g2_draw_circle>:

static void u8g2_draw_circle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
     36a:	b5f0      	push	{r4, r5, r6, r7, lr}
     36c:	46de      	mov	lr, fp
     36e:	4657      	mov	r7, sl
     370:	464e      	mov	r6, r9
     372:	4645      	mov	r5, r8
     374:	b5e0      	push	{r5, r6, r7, lr}
     376:	b085      	sub	sp, #20
     378:	9002      	str	r0, [sp, #8]
     37a:	9103      	str	r1, [sp, #12]
     37c:	4692      	mov	sl, r2
     37e:	001f      	movs	r7, r3
     380:	ab0e      	add	r3, sp, #56	; 0x38
     382:	781b      	ldrb	r3, [r3, #0]
     384:	469b      	mov	fp, r3
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
    f -= rad;
     386:	2301      	movs	r3, #1
     388:	1bdb      	subs	r3, r3, r7
     38a:	b21b      	sxth	r3, r3
     38c:	4699      	mov	r9, r3
    ddF_x = 1;
    ddF_y = 0;
    ddF_y -= rad;
    ddF_y *= 2;
     38e:	03fb      	lsls	r3, r7, #15
     390:	1bdb      	subs	r3, r3, r7
     392:	005d      	lsls	r5, r3, #1
     394:	b22d      	sxth	r5, r5
    x = 0;
    y = rad;

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
     396:	465b      	mov	r3, fp
     398:	9301      	str	r3, [sp, #4]
     39a:	9200      	str	r2, [sp, #0]
     39c:	000b      	movs	r3, r1
     39e:	003a      	movs	r2, r7
     3a0:	2100      	movs	r1, #0
     3a2:	f7ff ff86 	bl	2b2 <u8g2_draw_circle_section>
    x = 0;
     3a6:	2600      	movs	r6, #0
    ddF_x = 1;
     3a8:	2401      	movs	r4, #1
     3aa:	46a8      	mov	r8, r5
     3ac:	0025      	movs	r5, r4
     3ae:	464c      	mov	r4, r9
    
    while ( x < y )
     3b0:	e010      	b.n	3d4 <u8g2_draw_circle+0x6a>
      {
        y--;
        ddF_y += 2;
        f += ddF_y;
      }
      x++;
     3b2:	3601      	adds	r6, #1
     3b4:	b2b6      	uxth	r6, r6
      ddF_x += 2;
     3b6:	3502      	adds	r5, #2
     3b8:	b2ab      	uxth	r3, r5
     3ba:	b21d      	sxth	r5, r3
      f += ddF_x;
     3bc:	191c      	adds	r4, r3, r4
     3be:	b224      	sxth	r4, r4

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
     3c0:	465b      	mov	r3, fp
     3c2:	9301      	str	r3, [sp, #4]
     3c4:	4653      	mov	r3, sl
     3c6:	9300      	str	r3, [sp, #0]
     3c8:	9b03      	ldr	r3, [sp, #12]
     3ca:	003a      	movs	r2, r7
     3cc:	0031      	movs	r1, r6
     3ce:	9802      	ldr	r0, [sp, #8]
     3d0:	f7ff ff6f 	bl	2b2 <u8g2_draw_circle_section>
    while ( x < y )
     3d4:	42be      	cmp	r6, r7
     3d6:	d20b      	bcs.n	3f0 <u8g2_draw_circle+0x86>
      if (f >= 0) 
     3d8:	2c00      	cmp	r4, #0
     3da:	dbea      	blt.n	3b2 <u8g2_draw_circle+0x48>
        y--;
     3dc:	3f01      	subs	r7, #1
     3de:	b2bf      	uxth	r7, r7
        ddF_y += 2;
     3e0:	4643      	mov	r3, r8
     3e2:	3302      	adds	r3, #2
     3e4:	b29b      	uxth	r3, r3
     3e6:	b21a      	sxth	r2, r3
     3e8:	4690      	mov	r8, r2
        f += ddF_y;
     3ea:	191c      	adds	r4, r3, r4
     3ec:	b224      	sxth	r4, r4
     3ee:	e7e0      	b.n	3b2 <u8g2_draw_circle+0x48>
    }
}
     3f0:	b005      	add	sp, #20
     3f2:	bc3c      	pop	{r2, r3, r4, r5}
     3f4:	4690      	mov	r8, r2
     3f6:	4699      	mov	r9, r3
     3f8:	46a2      	mov	sl, r4
     3fa:	46ab      	mov	fp, r5
     3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000003fe <u8g2_DrawCircle>:

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
     3fe:	b5f0      	push	{r4, r5, r6, r7, lr}
     400:	b085      	sub	sp, #20
     402:	9003      	str	r0, [sp, #12]
     404:	000e      	movs	r6, r1
     406:	0017      	movs	r7, r2
     408:	001d      	movs	r5, r3
     40a:	ab0a      	add	r3, sp, #40	; 0x28
     40c:	781c      	ldrb	r4, [r3, #0]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
     40e:	194b      	adds	r3, r1, r5
     410:	b29b      	uxth	r3, r3
     412:	18a8      	adds	r0, r5, r2
     414:	b280      	uxth	r0, r0
     416:	3301      	adds	r3, #1
     418:	b29b      	uxth	r3, r3
     41a:	1b52      	subs	r2, r2, r5
     41c:	b292      	uxth	r2, r2
     41e:	1b49      	subs	r1, r1, r5
     420:	b289      	uxth	r1, r1
     422:	3001      	adds	r0, #1
     424:	b280      	uxth	r0, r0
     426:	9000      	str	r0, [sp, #0]
     428:	9803      	ldr	r0, [sp, #12]
     42a:	f000 fc0d 	bl	c48 <u8g2_IsIntersection>
     42e:	2800      	cmp	r0, #0
     430:	d101      	bne.n	436 <u8g2_DrawCircle+0x38>
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
}
     432:	b005      	add	sp, #20
     434:	bdf0      	pop	{r4, r5, r6, r7, pc}
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
     436:	9400      	str	r4, [sp, #0]
     438:	002b      	movs	r3, r5
     43a:	003a      	movs	r2, r7
     43c:	0031      	movs	r1, r6
     43e:	9803      	ldr	r0, [sp, #12]
     440:	f7ff ff93 	bl	36a <u8g2_draw_circle>
     444:	e7f5      	b.n	432 <u8g2_DrawCircle+0x34>
	...

00000448 <u8g2_m_16_8_f>:
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
     448:	2308      	movs	r3, #8
     44a:	7003      	strb	r3, [r0, #0]
  return buf;
  #endif
}
     44c:	4800      	ldr	r0, [pc, #0]	; (450 <u8g2_m_16_8_f+0x8>)
     44e:	4770      	bx	lr
     450:	200009e4 	.word	0x200009e4

00000454 <u8g2_Setup_st7565_zolen_128x64_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_64128n, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_zolen_128x64_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
     454:	b570      	push	{r4, r5, r6, lr}
     456:	b084      	sub	sp, #16
     458:	0004      	movs	r4, r0
     45a:	000e      	movs	r6, r1
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_zolen_128x64, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
     45c:	9300      	str	r3, [sp, #0]
     45e:	0013      	movs	r3, r2
     460:	4a08      	ldr	r2, [pc, #32]	; (484 <u8g2_Setup_st7565_zolen_128x64_f+0x30>)
     462:	4909      	ldr	r1, [pc, #36]	; (488 <u8g2_Setup_st7565_zolen_128x64_f+0x34>)
     464:	f000 ff64 	bl	1330 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
     468:	250f      	movs	r5, #15
     46a:	446d      	add	r5, sp
     46c:	0028      	movs	r0, r5
     46e:	f7ff ffeb 	bl	448 <u8g2_m_16_8_f>
     472:	0001      	movs	r1, r0
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
     474:	782a      	ldrb	r2, [r5, #0]
     476:	9600      	str	r6, [sp, #0]
     478:	4b04      	ldr	r3, [pc, #16]	; (48c <u8g2_Setup_st7565_zolen_128x64_f+0x38>)
     47a:	0020      	movs	r0, r4
     47c:	f000 fd53 	bl	f26 <u8g2_SetupBuffer>
}
     480:	b004      	add	sp, #16
     482:	bd70      	pop	{r4, r5, r6, pc}
     484:	0000106d 	.word	0x0000106d
     488:	0000127d 	.word	0x0000127d
     48c:	00000d55 	.word	0x00000d55

00000490 <u8g2_font_get_byte>:
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
     490:	5c40      	ldrb	r0, [r0, r1]
}
     492:	4770      	bx	lr

00000494 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
     494:	1841      	adds	r1, r0, r1
    pos = u8x8_pgm_read( font );
     496:	7808      	ldrb	r0, [r1, #0]
    font++;
    pos <<= 8;
     498:	0200      	lsls	r0, r0, #8
    pos += u8x8_pgm_read( font);
     49a:	784b      	ldrb	r3, [r1, #1]
     49c:	18c0      	adds	r0, r0, r3
     49e:	b280      	uxth	r0, r0
    return pos;
}
     4a0:	4770      	bx	lr

000004a2 <u8g2_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
  return 0;
}
     4a2:	2000      	movs	r0, #0
     4a4:	4770      	bx	lr

000004a6 <u8g2_read_font_info>:
{
     4a6:	b570      	push	{r4, r5, r6, lr}
     4a8:	0004      	movs	r4, r0
     4aa:	000d      	movs	r5, r1
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
     4ac:	2100      	movs	r1, #0
     4ae:	0028      	movs	r0, r5
     4b0:	f7ff ffee 	bl	490 <u8g2_font_get_byte>
     4b4:	7020      	strb	r0, [r4, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
     4b6:	2101      	movs	r1, #1
     4b8:	0028      	movs	r0, r5
     4ba:	f7ff ffe9 	bl	490 <u8g2_font_get_byte>
     4be:	7060      	strb	r0, [r4, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
     4c0:	2102      	movs	r1, #2
     4c2:	0028      	movs	r0, r5
     4c4:	f7ff ffe4 	bl	490 <u8g2_font_get_byte>
     4c8:	70a0      	strb	r0, [r4, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
     4ca:	2103      	movs	r1, #3
     4cc:	0028      	movs	r0, r5
     4ce:	f7ff ffdf 	bl	490 <u8g2_font_get_byte>
     4d2:	70e0      	strb	r0, [r4, #3]
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
     4d4:	2104      	movs	r1, #4
     4d6:	0028      	movs	r0, r5
     4d8:	f7ff ffda 	bl	490 <u8g2_font_get_byte>
     4dc:	7120      	strb	r0, [r4, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
     4de:	2105      	movs	r1, #5
     4e0:	0028      	movs	r0, r5
     4e2:	f7ff ffd5 	bl	490 <u8g2_font_get_byte>
     4e6:	7160      	strb	r0, [r4, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
     4e8:	2106      	movs	r1, #6
     4ea:	0028      	movs	r0, r5
     4ec:	f7ff ffd0 	bl	490 <u8g2_font_get_byte>
     4f0:	71a0      	strb	r0, [r4, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
     4f2:	2107      	movs	r1, #7
     4f4:	0028      	movs	r0, r5
     4f6:	f7ff ffcb 	bl	490 <u8g2_font_get_byte>
     4fa:	71e0      	strb	r0, [r4, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
     4fc:	2108      	movs	r1, #8
     4fe:	0028      	movs	r0, r5
     500:	f7ff ffc6 	bl	490 <u8g2_font_get_byte>
     504:	7220      	strb	r0, [r4, #8]
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
     506:	2109      	movs	r1, #9
     508:	0028      	movs	r0, r5
     50a:	f7ff ffc1 	bl	490 <u8g2_font_get_byte>
     50e:	7260      	strb	r0, [r4, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
     510:	210a      	movs	r1, #10
     512:	0028      	movs	r0, r5
     514:	f7ff ffbc 	bl	490 <u8g2_font_get_byte>
     518:	72a0      	strb	r0, [r4, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
     51a:	210b      	movs	r1, #11
     51c:	0028      	movs	r0, r5
     51e:	f7ff ffb7 	bl	490 <u8g2_font_get_byte>
     522:	72e0      	strb	r0, [r4, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
     524:	210c      	movs	r1, #12
     526:	0028      	movs	r0, r5
     528:	f7ff ffb2 	bl	490 <u8g2_font_get_byte>
     52c:	7320      	strb	r0, [r4, #12]
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
     52e:	210d      	movs	r1, #13
     530:	0028      	movs	r0, r5
     532:	f7ff ffad 	bl	490 <u8g2_font_get_byte>
     536:	7360      	strb	r0, [r4, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
     538:	210e      	movs	r1, #14
     53a:	0028      	movs	r0, r5
     53c:	f7ff ffa8 	bl	490 <u8g2_font_get_byte>
     540:	73a0      	strb	r0, [r4, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
     542:	210f      	movs	r1, #15
     544:	0028      	movs	r0, r5
     546:	f7ff ffa3 	bl	490 <u8g2_font_get_byte>
     54a:	73e0      	strb	r0, [r4, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
     54c:	2110      	movs	r1, #16
     54e:	0028      	movs	r0, r5
     550:	f7ff ff9e 	bl	490 <u8g2_font_get_byte>
     554:	7420      	strb	r0, [r4, #16]
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
     556:	2111      	movs	r1, #17
     558:	0028      	movs	r0, r5
     55a:	f7ff ff9b 	bl	494 <u8g2_font_get_word>
     55e:	8260      	strh	r0, [r4, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
     560:	2113      	movs	r1, #19
     562:	0028      	movs	r0, r5
     564:	f7ff ff96 	bl	494 <u8g2_font_get_word>
     568:	82a0      	strh	r0, [r4, #20]
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
     56a:	2115      	movs	r1, #21
     56c:	0028      	movs	r0, r5
     56e:	f7ff ff91 	bl	494 <u8g2_font_get_word>
     572:	82e0      	strh	r0, [r4, #22]
}
     574:	bd70      	pop	{r4, r5, r6, pc}

00000576 <u8g2_font_decode_get_unsigned_bits>:
{
     576:	b5f0      	push	{r4, r5, r6, r7, lr}
     578:	0005      	movs	r5, r0
  uint8_t bit_pos = f->decode_bit_pos;
     57a:	7b06      	ldrb	r6, [r0, #12]
  val = u8x8_pgm_read( f->decode_ptr );  
     57c:	6807      	ldr	r7, [r0, #0]
     57e:	7838      	ldrb	r0, [r7, #0]
  val >>= bit_pos;
     580:	4130      	asrs	r0, r6
     582:	b2c4      	uxtb	r4, r0
  bit_pos_plus_cnt += cnt;
     584:	1872      	adds	r2, r6, r1
     586:	b2d2      	uxtb	r2, r2
  if ( bit_pos_plus_cnt >= 8 )
     588:	2a07      	cmp	r2, #7
     58a:	d90a      	bls.n	5a2 <u8g2_font_decode_get_unsigned_bits+0x2c>
    s -= bit_pos;
     58c:	2308      	movs	r3, #8
     58e:	1b9b      	subs	r3, r3, r6
     590:	b2db      	uxtb	r3, r3
    f->decode_ptr++;
     592:	1c7c      	adds	r4, r7, #1
     594:	602c      	str	r4, [r5, #0]
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
     596:	787c      	ldrb	r4, [r7, #1]
     598:	409c      	lsls	r4, r3
     59a:	4304      	orrs	r4, r0
     59c:	b2e4      	uxtb	r4, r4
    bit_pos_plus_cnt -= 8;
     59e:	3a08      	subs	r2, #8
     5a0:	b2d2      	uxtb	r2, r2
  val &= (1U<<cnt)-1;
     5a2:	2301      	movs	r3, #1
     5a4:	408b      	lsls	r3, r1
     5a6:	3b01      	subs	r3, #1
     5a8:	4023      	ands	r3, r4
     5aa:	0018      	movs	r0, r3
  f->decode_bit_pos = bit_pos_plus_cnt;
     5ac:	732a      	strb	r2, [r5, #12]
}
     5ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000005b0 <u8g2_font_setup_decode>:
{
     5b0:	b570      	push	{r4, r5, r6, lr}
     5b2:	0005      	movs	r5, r0
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
     5b4:	0004      	movs	r4, r0
     5b6:	3460      	adds	r4, #96	; 0x60
  decode->decode_ptr = glyph_data;
     5b8:	6601      	str	r1, [r0, #96]	; 0x60
  decode->decode_bit_pos = 0;
     5ba:	2300      	movs	r3, #0
     5bc:	7323      	strb	r3, [r4, #12]
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
     5be:	3378      	adds	r3, #120	; 0x78
     5c0:	5cc1      	ldrb	r1, [r0, r3]
     5c2:	0020      	movs	r0, r4
     5c4:	f7ff ffd7 	bl	576 <u8g2_font_decode_get_unsigned_bits>
     5c8:	72a0      	strb	r0, [r4, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
     5ca:	2379      	movs	r3, #121	; 0x79
     5cc:	5ce9      	ldrb	r1, [r5, r3]
     5ce:	0020      	movs	r0, r4
     5d0:	f7ff ffd1 	bl	576 <u8g2_font_decode_get_unsigned_bits>
     5d4:	72e0      	strb	r0, [r4, #11]
  decode->fg_color = u8g2->draw_color;
     5d6:	2392      	movs	r3, #146	; 0x92
     5d8:	5ceb      	ldrb	r3, [r5, r3]
     5da:	73a3      	strb	r3, [r4, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
     5dc:	425a      	negs	r2, r3
     5de:	4153      	adcs	r3, r2
     5e0:	73e3      	strb	r3, [r4, #15]
}
     5e2:	bd70      	pop	{r4, r5, r6, pc}

000005e4 <u8g2_font_decode_get_signed_bits>:
{
     5e4:	b510      	push	{r4, lr}
     5e6:	000c      	movs	r4, r1
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
     5e8:	f7ff ffc5 	bl	576 <u8g2_font_decode_get_unsigned_bits>
  cnt--;
     5ec:	3c01      	subs	r4, #1
     5ee:	b2e4      	uxtb	r4, r4
  d <<= cnt;
     5f0:	2301      	movs	r3, #1
     5f2:	40a3      	lsls	r3, r4
  v -= d;
     5f4:	1ac0      	subs	r0, r0, r3
     5f6:	b240      	sxtb	r0, r0
}
     5f8:	bd10      	pop	{r4, pc}

000005fa <u8g2_add_vector_y>:
  switch(dir)
     5fa:	2b01      	cmp	r3, #1
     5fc:	d009      	beq.n	612 <u8g2_add_vector_y+0x18>
     5fe:	2b00      	cmp	r3, #0
     600:	d004      	beq.n	60c <u8g2_add_vector_y+0x12>
     602:	2b02      	cmp	r3, #2
     604:	d008      	beq.n	618 <u8g2_add_vector_y+0x1e>
      dy -= x;
     606:	1a40      	subs	r0, r0, r1
     608:	b280      	uxth	r0, r0
      break;      
     60a:	e001      	b.n	610 <u8g2_add_vector_y+0x16>
      dy += y;
     60c:	1880      	adds	r0, r0, r2
     60e:	b280      	uxth	r0, r0
}
     610:	4770      	bx	lr
      dy += x;
     612:	1840      	adds	r0, r0, r1
     614:	b280      	uxth	r0, r0
      break;
     616:	e7fb      	b.n	610 <u8g2_add_vector_y+0x16>
      dy -= y;
     618:	1a80      	subs	r0, r0, r2
     61a:	b280      	uxth	r0, r0
      break;
     61c:	e7f8      	b.n	610 <u8g2_add_vector_y+0x16>

0000061e <u8g2_add_vector_x>:
  switch(dir)
     61e:	2b01      	cmp	r3, #1
     620:	d009      	beq.n	636 <u8g2_add_vector_x+0x18>
     622:	2b00      	cmp	r3, #0
     624:	d004      	beq.n	630 <u8g2_add_vector_x+0x12>
     626:	2b02      	cmp	r3, #2
     628:	d008      	beq.n	63c <u8g2_add_vector_x+0x1e>
      dx += y;
     62a:	1880      	adds	r0, r0, r2
     62c:	b280      	uxth	r0, r0
      break;      
     62e:	e001      	b.n	634 <u8g2_add_vector_x+0x16>
      dx += x;
     630:	1840      	adds	r0, r0, r1
     632:	b280      	uxth	r0, r0
}
     634:	4770      	bx	lr
      dx -= y;
     636:	1a80      	subs	r0, r0, r2
     638:	b280      	uxth	r0, r0
      break;
     63a:	e7fb      	b.n	634 <u8g2_add_vector_x+0x16>
      dx -= x;
     63c:	1a40      	subs	r0, r0, r1
     63e:	b280      	uxth	r0, r0
      break;
     640:	e7f8      	b.n	634 <u8g2_add_vector_x+0x16>

00000642 <u8g2_font_decode_len>:
{
     642:	b5f0      	push	{r4, r5, r6, r7, lr}
     644:	46de      	mov	lr, fp
     646:	4657      	mov	r7, sl
     648:	464e      	mov	r6, r9
     64a:	4645      	mov	r5, r8
     64c:	b5e0      	push	{r5, r6, r7, lr}
     64e:	b089      	sub	sp, #36	; 0x24
     650:	4692      	mov	sl, r2
  lx = decode->x;
     652:	0003      	movs	r3, r0
     654:	3360      	adds	r3, #96	; 0x60
     656:	7a1a      	ldrb	r2, [r3, #8]
     658:	4691      	mov	r9, r2
  ly = decode->y;
     65a:	7a5b      	ldrb	r3, [r3, #9]
     65c:	000e      	movs	r6, r1
     65e:	0005      	movs	r5, r0
     660:	001f      	movs	r7, r3
     662:	46d0      	mov	r8, sl
     664:	e029      	b.n	6ba <u8g2_font_decode_len+0x78>
      current = cnt;
     666:	9606      	str	r6, [sp, #24]
    x = decode->target_x;
     668:	002b      	movs	r3, r5
     66a:	3360      	adds	r3, #96	; 0x60
     66c:	8898      	ldrh	r0, [r3, #4]
    y = decode->target_y;
     66e:	88da      	ldrh	r2, [r3, #6]
     670:	4693      	mov	fp, r2
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
     672:	464a      	mov	r2, r9
     674:	4669      	mov	r1, sp
     676:	730a      	strb	r2, [r1, #12]
     678:	466a      	mov	r2, sp
     67a:	210c      	movs	r1, #12
     67c:	5651      	ldrsb	r1, [r2, r1]
     67e:	b27a      	sxtb	r2, r7
     680:	7c1b      	ldrb	r3, [r3, #16]
     682:	9303      	str	r3, [sp, #12]
     684:	9204      	str	r2, [sp, #16]
     686:	9105      	str	r1, [sp, #20]
     688:	f7ff ffc9 	bl	61e <u8g2_add_vector_x>
     68c:	9007      	str	r0, [sp, #28]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
     68e:	9b03      	ldr	r3, [sp, #12]
     690:	9a04      	ldr	r2, [sp, #16]
     692:	9905      	ldr	r1, [sp, #20]
     694:	4658      	mov	r0, fp
     696:	f7ff ffb0 	bl	5fa <u8g2_add_vector_y>
    if ( is_foreground )
     69a:	4643      	mov	r3, r8
     69c:	2b00      	cmp	r3, #0
     69e:	d116      	bne.n	6ce <u8g2_font_decode_len+0x8c>
    else if ( decode->is_transparent == 0 )    
     6a0:	002b      	movs	r3, r5
     6a2:	3360      	adds	r3, #96	; 0x60
     6a4:	7b5b      	ldrb	r3, [r3, #13]
     6a6:	2b00      	cmp	r3, #0
     6a8:	d020      	beq.n	6ec <u8g2_font_decode_len+0xaa>
    if ( cnt < rem )
     6aa:	42a6      	cmp	r6, r4
     6ac:	d32d      	bcc.n	70a <u8g2_font_decode_len+0xc8>
    cnt -= rem;
     6ae:	1b36      	subs	r6, r6, r4
     6b0:	b2f6      	uxtb	r6, r6
    ly++;
     6b2:	3701      	adds	r7, #1
     6b4:	b2ff      	uxtb	r7, r7
    lx = 0;
     6b6:	2300      	movs	r3, #0
     6b8:	4699      	mov	r9, r3
    rem = decode->glyph_width;
     6ba:	002b      	movs	r3, r5
     6bc:	3360      	adds	r3, #96	; 0x60
     6be:	7a9c      	ldrb	r4, [r3, #10]
    rem -= lx;
     6c0:	464b      	mov	r3, r9
     6c2:	1ae4      	subs	r4, r4, r3
     6c4:	b2e4      	uxtb	r4, r4
    if ( cnt < rem )
     6c6:	42a6      	cmp	r6, r4
     6c8:	d3cd      	bcc.n	666 <u8g2_font_decode_len+0x24>
    current = rem;
     6ca:	9406      	str	r4, [sp, #24]
     6cc:	e7cc      	b.n	668 <u8g2_font_decode_len+0x26>
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
     6ce:	002b      	movs	r3, r5
     6d0:	3360      	adds	r3, #96	; 0x60
     6d2:	7b9a      	ldrb	r2, [r3, #14]
     6d4:	2392      	movs	r3, #146	; 0x92
     6d6:	54ea      	strb	r2, [r5, r3]
      u8g2_DrawHVLine(u8g2, 
     6d8:	466b      	mov	r3, sp
     6da:	8b1b      	ldrh	r3, [r3, #24]
     6dc:	9a03      	ldr	r2, [sp, #12]
     6de:	9200      	str	r2, [sp, #0]
     6e0:	0002      	movs	r2, r0
     6e2:	9907      	ldr	r1, [sp, #28]
     6e4:	0028      	movs	r0, r5
     6e6:	f000 fa08 	bl	afa <u8g2_DrawHVLine>
     6ea:	e7de      	b.n	6aa <u8g2_font_decode_len+0x68>
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
     6ec:	002b      	movs	r3, r5
     6ee:	3360      	adds	r3, #96	; 0x60
     6f0:	7bda      	ldrb	r2, [r3, #15]
     6f2:	2392      	movs	r3, #146	; 0x92
     6f4:	54ea      	strb	r2, [r5, r3]
      u8g2_DrawHVLine(u8g2, 
     6f6:	466b      	mov	r3, sp
     6f8:	8b1b      	ldrh	r3, [r3, #24]
     6fa:	9a03      	ldr	r2, [sp, #12]
     6fc:	9200      	str	r2, [sp, #0]
     6fe:	0002      	movs	r2, r0
     700:	9907      	ldr	r1, [sp, #28]
     702:	0028      	movs	r0, r5
     704:	f000 f9f9 	bl	afa <u8g2_DrawHVLine>
     708:	e7cf      	b.n	6aa <u8g2_font_decode_len+0x68>
     70a:	002f      	movs	r7, r5
  lx += cnt;
     70c:	0032      	movs	r2, r6
     70e:	444a      	add	r2, r9
  decode->x = lx;
     710:	003b      	movs	r3, r7
     712:	3360      	adds	r3, #96	; 0x60
     714:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
     716:	466a      	mov	r2, sp
     718:	7c12      	ldrb	r2, [r2, #16]
     71a:	725a      	strb	r2, [r3, #9]
}
     71c:	b009      	add	sp, #36	; 0x24
     71e:	bc3c      	pop	{r2, r3, r4, r5}
     720:	4690      	mov	r8, r2
     722:	4699      	mov	r9, r3
     724:	46a2      	mov	sl, r4
     726:	46ab      	mov	fp, r5
     728:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000072a <u8g2_font_decode_glyph>:
{
     72a:	b5f0      	push	{r4, r5, r6, r7, lr}
     72c:	46d6      	mov	lr, sl
     72e:	464f      	mov	r7, r9
     730:	4646      	mov	r6, r8
     732:	b5c0      	push	{r6, r7, lr}
     734:	b086      	sub	sp, #24
     736:	0004      	movs	r4, r0
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
     738:	0007      	movs	r7, r0
     73a:	3760      	adds	r7, #96	; 0x60
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
     73c:	f7ff ff38 	bl	5b0 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
     740:	236b      	movs	r3, #107	; 0x6b
     742:	56e3      	ldrsb	r3, [r4, r3]
     744:	4698      	mov	r8, r3
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
     746:	237a      	movs	r3, #122	; 0x7a
     748:	5ce1      	ldrb	r1, [r4, r3]
     74a:	0038      	movs	r0, r7
     74c:	f7ff ff4a 	bl	5e4 <u8g2_font_decode_get_signed_bits>
     750:	9002      	str	r0, [sp, #8]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
     752:	237b      	movs	r3, #123	; 0x7b
     754:	5ce1      	ldrb	r1, [r4, r3]
     756:	0038      	movs	r0, r7
     758:	f7ff ff44 	bl	5e4 <u8g2_font_decode_get_signed_bits>
     75c:	0005      	movs	r5, r0
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
     75e:	237c      	movs	r3, #124	; 0x7c
     760:	5ce1      	ldrb	r1, [r4, r3]
     762:	0038      	movs	r0, r7
     764:	f7ff ff3e 	bl	5e4 <u8g2_font_decode_get_signed_bits>
     768:	9003      	str	r0, [sp, #12]
  if ( decode->glyph_width > 0 )
     76a:	230a      	movs	r3, #10
     76c:	56fb      	ldrsb	r3, [r7, r3]
     76e:	4699      	mov	r9, r3
     770:	2b00      	cmp	r3, #0
     772:	dd5b      	ble.n	82c <u8g2_font_decode_glyph+0x102>
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
     774:	4445      	add	r5, r8
     776:	b2ed      	uxtb	r5, r5
     778:	426d      	negs	r5, r5
     77a:	b26b      	sxtb	r3, r5
     77c:	001a      	movs	r2, r3
     77e:	7c3d      	ldrb	r5, [r7, #16]
     780:	88b8      	ldrh	r0, [r7, #4]
     782:	002b      	movs	r3, r5
     784:	9205      	str	r2, [sp, #20]
     786:	9902      	ldr	r1, [sp, #8]
     788:	f7ff ff49 	bl	61e <u8g2_add_vector_x>
     78c:	4682      	mov	sl, r0
     78e:	9004      	str	r0, [sp, #16]
     790:	80b8      	strh	r0, [r7, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
     792:	88f8      	ldrh	r0, [r7, #6]
     794:	002b      	movs	r3, r5
     796:	9a05      	ldr	r2, [sp, #20]
     798:	9902      	ldr	r1, [sp, #8]
     79a:	f7ff ff2e 	bl	5fa <u8g2_add_vector_y>
     79e:	0002      	movs	r2, r0
     7a0:	80f8      	strh	r0, [r7, #6]
      switch(decode->dir)
     7a2:	2d01      	cmp	r5, #1
     7a4:	d049      	beq.n	83a <u8g2_font_decode_glyph+0x110>
     7a6:	2d00      	cmp	r5, #0
     7a8:	d005      	beq.n	7b6 <u8g2_font_decode_glyph+0x8c>
     7aa:	2d02      	cmp	r5, #2
     7ac:	d055      	beq.n	85a <u8g2_font_decode_glyph+0x130>
     7ae:	2d03      	cmp	r5, #3
     7b0:	d067      	beq.n	882 <u8g2_font_decode_glyph+0x158>
      x1 = x0;
     7b2:	4653      	mov	r3, sl
     7b4:	e007      	b.n	7c6 <u8g2_font_decode_glyph+0x9c>
	    x1 += decode->glyph_width;
     7b6:	464b      	mov	r3, r9
     7b8:	4669      	mov	r1, sp
     7ba:	810b      	strh	r3, [r1, #8]
     7bc:	890b      	ldrh	r3, [r1, #8]
     7be:	4453      	add	r3, sl
     7c0:	b29b      	uxth	r3, r3
	    y1 += h;
     7c2:	4440      	add	r0, r8
     7c4:	b280      	uxth	r0, r0
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
     7c6:	9000      	str	r0, [sp, #0]
     7c8:	9904      	ldr	r1, [sp, #16]
     7ca:	0020      	movs	r0, r4
     7cc:	f000 fa3c 	bl	c48 <u8g2_IsIntersection>
     7d0:	2800      	cmp	r0, #0
     7d2:	d02b      	beq.n	82c <u8g2_font_decode_glyph+0x102>
    decode->x = 0;
     7d4:	0023      	movs	r3, r4
     7d6:	3360      	adds	r3, #96	; 0x60
     7d8:	2200      	movs	r2, #0
     7da:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
     7dc:	725a      	strb	r2, [r3, #9]
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
     7de:	2376      	movs	r3, #118	; 0x76
     7e0:	5ce1      	ldrb	r1, [r4, r3]
     7e2:	0038      	movs	r0, r7
     7e4:	f7ff fec7 	bl	576 <u8g2_font_decode_get_unsigned_bits>
     7e8:	0006      	movs	r6, r0
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
     7ea:	2377      	movs	r3, #119	; 0x77
     7ec:	5ce1      	ldrb	r1, [r4, r3]
     7ee:	0038      	movs	r0, r7
     7f0:	f7ff fec1 	bl	576 <u8g2_font_decode_get_unsigned_bits>
     7f4:	0005      	movs	r5, r0
	u8g2_font_decode_len(u8g2, a, 0);
     7f6:	2200      	movs	r2, #0
     7f8:	0031      	movs	r1, r6
     7fa:	0020      	movs	r0, r4
     7fc:	f7ff ff21 	bl	642 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
     800:	2201      	movs	r2, #1
     802:	0029      	movs	r1, r5
     804:	0020      	movs	r0, r4
     806:	f7ff ff1c 	bl	642 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
     80a:	2101      	movs	r1, #1
     80c:	0038      	movs	r0, r7
     80e:	f7ff feb2 	bl	576 <u8g2_font_decode_get_unsigned_bits>
     812:	2800      	cmp	r0, #0
     814:	d1ef      	bne.n	7f6 <u8g2_font_decode_glyph+0xcc>
      if ( decode->y >= h )
     816:	0023      	movs	r3, r4
     818:	3360      	adds	r3, #96	; 0x60
     81a:	7a5b      	ldrb	r3, [r3, #9]
     81c:	b25b      	sxtb	r3, r3
     81e:	4598      	cmp	r8, r3
     820:	dcdd      	bgt.n	7de <u8g2_font_decode_glyph+0xb4>
    u8g2->draw_color = decode->fg_color;
     822:	0023      	movs	r3, r4
     824:	3360      	adds	r3, #96	; 0x60
     826:	7b9a      	ldrb	r2, [r3, #14]
     828:	2392      	movs	r3, #146	; 0x92
     82a:	54e2      	strb	r2, [r4, r3]
}
     82c:	9803      	ldr	r0, [sp, #12]
     82e:	b006      	add	sp, #24
     830:	bc1c      	pop	{r2, r3, r4}
     832:	4690      	mov	r8, r2
     834:	4699      	mov	r9, r3
     836:	46a2      	mov	sl, r4
     838:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    x0 -= h;
     83a:	4653      	mov	r3, sl
     83c:	4641      	mov	r1, r8
     83e:	1a59      	subs	r1, r3, r1
     840:	b289      	uxth	r1, r1
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
     842:	3101      	adds	r1, #1
	    x1++;
     844:	1c5d      	adds	r5, r3, #1
     846:	b2ab      	uxth	r3, r5
	    y1 += decode->glyph_width;
     848:	464d      	mov	r5, r9
     84a:	466e      	mov	r6, sp
     84c:	8135      	strh	r5, [r6, #8]
     84e:	8936      	ldrh	r6, [r6, #8]
     850:	1980      	adds	r0, r0, r6
     852:	b280      	uxth	r0, r0
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
     854:	b289      	uxth	r1, r1
     856:	9104      	str	r1, [sp, #16]
	    break;
     858:	e7b5      	b.n	7c6 <u8g2_font_decode_glyph+0x9c>
	    x0 -= decode->glyph_width;
     85a:	464b      	mov	r3, r9
     85c:	466a      	mov	r2, sp
     85e:	8113      	strh	r3, [r2, #8]
     860:	8911      	ldrh	r1, [r2, #8]
     862:	4653      	mov	r3, sl
     864:	1a59      	subs	r1, r3, r1
     866:	b289      	uxth	r1, r1
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
     868:	3101      	adds	r1, #1
	    x1++;
     86a:	1c5d      	adds	r5, r3, #1
     86c:	b2ab      	uxth	r3, r5
	    y0 -= h;
     86e:	4642      	mov	r2, r8
     870:	1a82      	subs	r2, r0, r2
     872:	b292      	uxth	r2, r2
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
     874:	3201      	adds	r2, #1
	    y1++;
     876:	3001      	adds	r0, #1
     878:	b280      	uxth	r0, r0
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
     87a:	b292      	uxth	r2, r2
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
     87c:	b289      	uxth	r1, r1
     87e:	9104      	str	r1, [sp, #16]
	    break;	  
     880:	e7a1      	b.n	7c6 <u8g2_font_decode_glyph+0x9c>
	    x1 += h;
     882:	4655      	mov	r5, sl
     884:	4445      	add	r5, r8
     886:	b2ab      	uxth	r3, r5
	    y0 -= decode->glyph_width;
     888:	464a      	mov	r2, r9
     88a:	4669      	mov	r1, sp
     88c:	810a      	strh	r2, [r1, #8]
     88e:	890a      	ldrh	r2, [r1, #8]
     890:	1a82      	subs	r2, r0, r2
     892:	b292      	uxth	r2, r2
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
     894:	3201      	adds	r2, #1
	    y1++;
     896:	3001      	adds	r0, #1
     898:	b280      	uxth	r0, r0
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
     89a:	b292      	uxth	r2, r2
	    break;	  
     89c:	e793      	b.n	7c6 <u8g2_font_decode_glyph+0x9c>

0000089e <u8g2_font_get_glyph_data>:
{
     89e:	b570      	push	{r4, r5, r6, lr}
     8a0:	000e      	movs	r6, r1
  font += U8G2_FONT_DATA_STRUCT_SIZE;
     8a2:	6d84      	ldr	r4, [r0, #88]	; 0x58
     8a4:	3417      	adds	r4, #23
  if ( encoding <= 255 )
     8a6:	29ff      	cmp	r1, #255	; 0xff
     8a8:	d814      	bhi.n	8d4 <u8g2_font_get_glyph_data+0x36>
    if ( encoding >= 'a' )
     8aa:	2960      	cmp	r1, #96	; 0x60
     8ac:	d90a      	bls.n	8c4 <u8g2_font_get_glyph_data+0x26>
      font += u8g2->font_info.start_pos_lower_a;
     8ae:	2388      	movs	r3, #136	; 0x88
     8b0:	5ac3      	ldrh	r3, [r0, r3]
     8b2:	18e4      	adds	r4, r4, r3
      if ( u8x8_pgm_read( font + 1 ) == 0 )
     8b4:	7863      	ldrb	r3, [r4, #1]
     8b6:	2b00      	cmp	r3, #0
     8b8:	d028      	beq.n	90c <u8g2_font_get_glyph_data+0x6e>
      if ( u8x8_pgm_read( font ) == encoding )
     8ba:	7822      	ldrb	r2, [r4, #0]
     8bc:	4296      	cmp	r6, r2
     8be:	d007      	beq.n	8d0 <u8g2_font_get_glyph_data+0x32>
      font += u8x8_pgm_read( font + 1 );
     8c0:	18e4      	adds	r4, r4, r3
      if ( u8x8_pgm_read( font + 1 ) == 0 )
     8c2:	e7f7      	b.n	8b4 <u8g2_font_get_glyph_data+0x16>
    else if ( encoding >= 'A' )
     8c4:	2940      	cmp	r1, #64	; 0x40
     8c6:	d9f5      	bls.n	8b4 <u8g2_font_get_glyph_data+0x16>
      font += u8g2->font_info.start_pos_upper_A;
     8c8:	2386      	movs	r3, #134	; 0x86
     8ca:	5ac3      	ldrh	r3, [r0, r3]
     8cc:	18e4      	adds	r4, r4, r3
     8ce:	e7f1      	b.n	8b4 <u8g2_font_get_glyph_data+0x16>
	return font+2;	/* skip encoding and glyph size */
     8d0:	1ca0      	adds	r0, r4, #2
     8d2:	e01c      	b.n	90e <u8g2_font_get_glyph_data+0x70>
    font += u8g2->font_info.start_pos_unicode;
     8d4:	238a      	movs	r3, #138	; 0x8a
     8d6:	5ac0      	ldrh	r0, [r0, r3]
     8d8:	1824      	adds	r4, r4, r0
    unicode_lookup_table = font; 
     8da:	0025      	movs	r5, r4
      font += u8g2_font_get_word(unicode_lookup_table, 0);
     8dc:	2100      	movs	r1, #0
     8de:	0028      	movs	r0, r5
     8e0:	f7ff fdd8 	bl	494 <u8g2_font_get_word>
     8e4:	1824      	adds	r4, r4, r0
      e = u8g2_font_get_word(unicode_lookup_table, 2);
     8e6:	2102      	movs	r1, #2
     8e8:	0028      	movs	r0, r5
     8ea:	f7ff fdd3 	bl	494 <u8g2_font_get_word>
      unicode_lookup_table+=4;
     8ee:	3504      	adds	r5, #4
    } while( e < encoding );
     8f0:	4286      	cmp	r6, r0
     8f2:	d8f3      	bhi.n	8dc <u8g2_font_get_glyph_data+0x3e>
      e = u8x8_pgm_read( font );
     8f4:	7823      	ldrb	r3, [r4, #0]
      e <<= 8;
     8f6:	021b      	lsls	r3, r3, #8
      e |= u8x8_pgm_read( font + 1 );
     8f8:	7862      	ldrb	r2, [r4, #1]
     8fa:	4313      	orrs	r3, r2
      if ( e == 0 )
     8fc:	d008      	beq.n	910 <u8g2_font_get_glyph_data+0x72>
      if ( e == encoding )
     8fe:	429e      	cmp	r6, r3
     900:	d002      	beq.n	908 <u8g2_font_get_glyph_data+0x6a>
      font += u8x8_pgm_read( font + 2 );
     902:	78a3      	ldrb	r3, [r4, #2]
     904:	18e4      	adds	r4, r4, r3
      e = u8x8_pgm_read( font );
     906:	e7f5      	b.n	8f4 <u8g2_font_get_glyph_data+0x56>
	return font+3;	/* skip encoding and glyph size */
     908:	1ce0      	adds	r0, r4, #3
     90a:	e000      	b.n	90e <u8g2_font_get_glyph_data+0x70>
  return NULL;
     90c:	2000      	movs	r0, #0
}
     90e:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
     910:	2000      	movs	r0, #0
     912:	e7fc      	b.n	90e <u8g2_font_get_glyph_data+0x70>

00000914 <u8g2_font_draw_glyph>:
{
     914:	b510      	push	{r4, lr}
     916:	0004      	movs	r4, r0
  u8g2->font_decode.target_x = x;
     918:	2064      	movs	r0, #100	; 0x64
     91a:	5221      	strh	r1, [r4, r0]
  u8g2->font_decode.target_y = y;
     91c:	2166      	movs	r1, #102	; 0x66
     91e:	5262      	strh	r2, [r4, r1]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
     920:	0019      	movs	r1, r3
     922:	0020      	movs	r0, r4
     924:	f7ff ffbb 	bl	89e <u8g2_font_get_glyph_data>
  if ( glyph_data != NULL )
     928:	2800      	cmp	r0, #0
     92a:	d005      	beq.n	938 <u8g2_font_draw_glyph+0x24>
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
     92c:	0001      	movs	r1, r0
     92e:	0020      	movs	r0, r4
     930:	f7ff fefb 	bl	72a <u8g2_font_decode_glyph>
     934:	b280      	uxth	r0, r0
}
     936:	bd10      	pop	{r4, pc}
  u8g2_uint_t dx = 0;
     938:	2000      	movs	r0, #0
     93a:	e7fc      	b.n	936 <u8g2_font_draw_glyph+0x22>

0000093c <u8g2_DrawGlyph>:
{
     93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     93e:	0004      	movs	r4, r0
     940:	000d      	movs	r5, r1
     942:	0016      	movs	r6, r2
     944:	001f      	movs	r7, r3
  switch(u8g2->font_decode.dir)
     946:	2370      	movs	r3, #112	; 0x70
     948:	5cc3      	ldrb	r3, [r0, r3]
     94a:	2b01      	cmp	r3, #1
     94c:	d011      	beq.n	972 <u8g2_DrawGlyph+0x36>
     94e:	2b00      	cmp	r3, #0
     950:	d00a      	beq.n	968 <u8g2_DrawGlyph+0x2c>
     952:	2b02      	cmp	r3, #2
     954:	d012      	beq.n	97c <u8g2_DrawGlyph+0x40>
     956:	2b03      	cmp	r3, #3
     958:	d015      	beq.n	986 <u8g2_DrawGlyph+0x4a>
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
     95a:	003b      	movs	r3, r7
     95c:	0032      	movs	r2, r6
     95e:	0029      	movs	r1, r5
     960:	0020      	movs	r0, r4
     962:	f7ff ffd7 	bl	914 <u8g2_font_draw_glyph>
}
     966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      y += u8g2->font_calc_vref(u8g2);
     968:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
     96a:	4798      	blx	r3
     96c:	1836      	adds	r6, r6, r0
     96e:	b2b6      	uxth	r6, r6
      break;
     970:	e7f3      	b.n	95a <u8g2_DrawGlyph+0x1e>
      x -= u8g2->font_calc_vref(u8g2);
     972:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
     974:	4798      	blx	r3
     976:	1a2d      	subs	r5, r5, r0
     978:	b2ad      	uxth	r5, r5
      break;
     97a:	e7ee      	b.n	95a <u8g2_DrawGlyph+0x1e>
      y -= u8g2->font_calc_vref(u8g2);
     97c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
     97e:	4798      	blx	r3
     980:	1a36      	subs	r6, r6, r0
     982:	b2b6      	uxth	r6, r6
      break;
     984:	e7e9      	b.n	95a <u8g2_DrawGlyph+0x1e>
      x += u8g2->font_calc_vref(u8g2);
     986:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
     988:	4798      	blx	r3
     98a:	182d      	adds	r5, r5, r0
     98c:	b2ad      	uxth	r5, r5
      break;
     98e:	e7e4      	b.n	95a <u8g2_DrawGlyph+0x1e>

00000990 <u8g2_draw_string>:
{
     990:	b5f0      	push	{r4, r5, r6, r7, lr}
     992:	46c6      	mov	lr, r8
     994:	b500      	push	{lr}
     996:	0004      	movs	r4, r0
     998:	000f      	movs	r7, r1
     99a:	0016      	movs	r6, r2
     99c:	001d      	movs	r5, r3
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
     99e:	f000 faf1 	bl	f84 <u8x8_utf8_init>
  sum = 0;
     9a2:	2300      	movs	r3, #0
     9a4:	4698      	mov	r8, r3
     9a6:	e004      	b.n	9b2 <u8g2_draw_string+0x22>
	  x += delta;
     9a8:	183f      	adds	r7, r7, r0
     9aa:	b2bf      	uxth	r7, r7
      sum += delta;    
     9ac:	4440      	add	r0, r8
     9ae:	b283      	uxth	r3, r0
     9b0:	4698      	mov	r8, r3
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
     9b2:	7829      	ldrb	r1, [r5, #0]
     9b4:	0020      	movs	r0, r4
     9b6:	6863      	ldr	r3, [r4, #4]
     9b8:	4798      	blx	r3
    if ( e == 0x0ffff )
     9ba:	4b12      	ldr	r3, [pc, #72]	; (a04 <u8g2_draw_string+0x74>)
     9bc:	4298      	cmp	r0, r3
     9be:	d01c      	beq.n	9fa <u8g2_draw_string+0x6a>
    str++;
     9c0:	3501      	adds	r5, #1
    if ( e != 0x0fffe )
     9c2:	4b11      	ldr	r3, [pc, #68]	; (a08 <u8g2_draw_string+0x78>)
     9c4:	4298      	cmp	r0, r3
     9c6:	d0f4      	beq.n	9b2 <u8g2_draw_string+0x22>
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
     9c8:	0003      	movs	r3, r0
     9ca:	0032      	movs	r2, r6
     9cc:	0039      	movs	r1, r7
     9ce:	0020      	movs	r0, r4
     9d0:	f7ff ffb4 	bl	93c <u8g2_DrawGlyph>
      switch(u8g2->font_decode.dir)
     9d4:	2370      	movs	r3, #112	; 0x70
     9d6:	5ce3      	ldrb	r3, [r4, r3]
     9d8:	2b01      	cmp	r3, #1
     9da:	d008      	beq.n	9ee <u8g2_draw_string+0x5e>
     9dc:	2b00      	cmp	r3, #0
     9de:	d0e3      	beq.n	9a8 <u8g2_draw_string+0x18>
     9e0:	2b02      	cmp	r3, #2
     9e2:	d007      	beq.n	9f4 <u8g2_draw_string+0x64>
     9e4:	2b03      	cmp	r3, #3
     9e6:	d1e1      	bne.n	9ac <u8g2_draw_string+0x1c>
	  y -= delta;
     9e8:	1a36      	subs	r6, r6, r0
     9ea:	b2b6      	uxth	r6, r6
	  break;
     9ec:	e7de      	b.n	9ac <u8g2_draw_string+0x1c>
	  y += delta;
     9ee:	1836      	adds	r6, r6, r0
     9f0:	b2b6      	uxth	r6, r6
	  break;
     9f2:	e7db      	b.n	9ac <u8g2_draw_string+0x1c>
	  x -= delta;
     9f4:	1a3f      	subs	r7, r7, r0
     9f6:	b2bf      	uxth	r7, r7
	  break;
     9f8:	e7d8      	b.n	9ac <u8g2_draw_string+0x1c>
}
     9fa:	4640      	mov	r0, r8
     9fc:	bc04      	pop	{r2}
     9fe:	4690      	mov	r8, r2
     a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a02:	46c0      	nop			; (mov r8, r8)
     a04:	0000ffff 	.word	0x0000ffff
     a08:	0000fffe 	.word	0x0000fffe

00000a0c <u8g2_DrawStr>:
{
     a0c:	b510      	push	{r4, lr}
  u8g2->u8x8.next_cb = u8x8_ascii_next;
     a0e:	4c02      	ldr	r4, [pc, #8]	; (a18 <u8g2_DrawStr+0xc>)
     a10:	6044      	str	r4, [r0, #4]
  return u8g2_draw_string(u8g2, x, y, str);
     a12:	f7ff ffbd 	bl	990 <u8g2_draw_string>
}
     a16:	bd10      	pop	{r4, pc}
     a18:	00000f6d 	.word	0x00000f6d

00000a1c <u8g2_UpdateRefHeight>:
{
     a1c:	b530      	push	{r4, r5, lr}
  if ( u8g2->font == NULL )
     a1e:	6d83      	ldr	r3, [r0, #88]	; 0x58
     a20:	2b00      	cmp	r3, #0
     a22:	d01d      	beq.n	a60 <u8g2_UpdateRefHeight+0x44>
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
     a24:	2381      	movs	r3, #129	; 0x81
     a26:	56c1      	ldrsb	r1, [r0, r3]
     a28:	330d      	adds	r3, #13
     a2a:	54c1      	strb	r1, [r0, r3]
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
     a2c:	3b0c      	subs	r3, #12
     a2e:	56c2      	ldrsb	r2, [r0, r3]
     a30:	330d      	adds	r3, #13
     a32:	54c2      	strb	r2, [r0, r3]
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
     a34:	3b02      	subs	r3, #2
     a36:	5cc3      	ldrb	r3, [r0, r3]
     a38:	2b00      	cmp	r3, #0
     a3a:	d011      	beq.n	a60 <u8g2_UpdateRefHeight+0x44>
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
     a3c:	2b01      	cmp	r3, #1
     a3e:	d010      	beq.n	a62 <u8g2_UpdateRefHeight+0x46>
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
     a40:	237e      	movs	r3, #126	; 0x7e
     a42:	56c3      	ldrsb	r3, [r0, r3]
     a44:	2480      	movs	r4, #128	; 0x80
     a46:	5704      	ldrsb	r4, [r0, r4]
     a48:	191d      	adds	r5, r3, r4
     a4a:	42a9      	cmp	r1, r5
     a4c:	da04      	bge.n	a58 <u8g2_UpdateRefHeight+0x3c>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
     a4e:	b2db      	uxtb	r3, r3
     a50:	b2e1      	uxtb	r1, r4
     a52:	185b      	adds	r3, r3, r1
     a54:	218e      	movs	r1, #142	; 0x8e
     a56:	5443      	strb	r3, [r0, r1]
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
     a58:	42a2      	cmp	r2, r4
     a5a:	dd01      	ble.n	a60 <u8g2_UpdateRefHeight+0x44>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
     a5c:	238f      	movs	r3, #143	; 0x8f
     a5e:	54c4      	strb	r4, [r0, r3]
}
     a60:	bd30      	pop	{r4, r5, pc}
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
     a62:	3382      	adds	r3, #130	; 0x82
     a64:	56c3      	ldrsb	r3, [r0, r3]
     a66:	4299      	cmp	r1, r3
     a68:	da01      	bge.n	a6e <u8g2_UpdateRefHeight+0x52>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
     a6a:	218e      	movs	r1, #142	; 0x8e
     a6c:	5443      	strb	r3, [r0, r1]
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
     a6e:	2384      	movs	r3, #132	; 0x84
     a70:	56c3      	ldrsb	r3, [r0, r3]
     a72:	429a      	cmp	r2, r3
     a74:	ddf4      	ble.n	a60 <u8g2_UpdateRefHeight+0x44>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
     a76:	228f      	movs	r2, #143	; 0x8f
     a78:	5483      	strb	r3, [r0, r2]
     a7a:	e7f1      	b.n	a60 <u8g2_UpdateRefHeight+0x44>

00000a7c <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
     a7c:	4b01      	ldr	r3, [pc, #4]	; (a84 <u8g2_SetFontPosBaseline+0x8>)
     a7e:	65c3      	str	r3, [r0, #92]	; 0x5c
}
     a80:	4770      	bx	lr
     a82:	46c0      	nop			; (mov r8, r8)
     a84:	000004a3 	.word	0x000004a3

00000a88 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
     a88:	b510      	push	{r4, lr}
     a8a:	0004      	movs	r4, r0
  if ( u8g2->font != font )
     a8c:	6d83      	ldr	r3, [r0, #88]	; 0x58
     a8e:	428b      	cmp	r3, r1
     a90:	d006      	beq.n	aa0 <u8g2_SetFont+0x18>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
     a92:	6581      	str	r1, [r0, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
     a94:	3074      	adds	r0, #116	; 0x74
     a96:	f7ff fd06 	bl	4a6 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
     a9a:	0020      	movs	r0, r4
     a9c:	f7ff ffbe 	bl	a1c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
     aa0:	bd10      	pop	{r4, pc}

00000aa2 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
     aa2:	b530      	push	{r4, r5, lr}
  u8g2_uint_t a = *ap;
     aa4:	8805      	ldrh	r5, [r0, #0]
  u8g2_uint_t b;
  b  = a;
  b += *len;
     aa6:	880c      	ldrh	r4, [r1, #0]
     aa8:	192c      	adds	r4, r5, r4
     aaa:	b2a4      	uxth	r4, r4
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
     aac:	42a5      	cmp	r5, r4
     aae:	d903      	bls.n	ab8 <u8g2_clip_intersection2+0x16>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
     ab0:	429d      	cmp	r5, r3
     ab2:	d210      	bcs.n	ad6 <u8g2_clip_intersection2+0x34>
    {
      b = d;
      b--;
     ab4:	1e5c      	subs	r4, r3, #1
     ab6:	b2a4      	uxth	r4, r4
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
     ab8:	429d      	cmp	r5, r3
     aba:	d20e      	bcs.n	ada <u8g2_clip_intersection2+0x38>
    return 0;
  if ( b <= c )
     abc:	4294      	cmp	r4, r2
     abe:	d90e      	bls.n	ade <u8g2_clip_intersection2+0x3c>
    return 0;
  if ( a < c )		
     ac0:	4295      	cmp	r5, r2
     ac2:	d300      	bcc.n	ac6 <u8g2_clip_intersection2+0x24>
     ac4:	002a      	movs	r2, r5
    a = c;
  if ( b > d )
     ac6:	429c      	cmp	r4, r3
     ac8:	d800      	bhi.n	acc <u8g2_clip_intersection2+0x2a>
     aca:	0023      	movs	r3, r4
    b = d;
  
  *ap = a;
     acc:	8002      	strh	r2, [r0, #0]
  b -= a;
     ace:	1a9b      	subs	r3, r3, r2
  *len = b;
     ad0:	800b      	strh	r3, [r1, #0]
  return 1;
     ad2:	2001      	movs	r0, #1
     ad4:	e002      	b.n	adc <u8g2_clip_intersection2+0x3a>
      a = c;
     ad6:	0015      	movs	r5, r2
     ad8:	e7ee      	b.n	ab8 <u8g2_clip_intersection2+0x16>
    return 0;
     ada:	2000      	movs	r0, #0
}
     adc:	bd30      	pop	{r4, r5, pc}
    return 0;
     ade:	2000      	movs	r0, #0
     ae0:	e7fc      	b.n	adc <u8g2_clip_intersection2+0x3a>

00000ae2 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
     ae2:	b530      	push	{r4, r5, lr}
     ae4:	b083      	sub	sp, #12
     ae6:	ac06      	add	r4, sp, #24
     ae8:	7825      	ldrb	r5, [r4, #0]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
     aea:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
     aec:	1b12      	subs	r2, r2, r4
     aee:	b292      	uxth	r2, r2
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
     af0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
     af2:	9500      	str	r5, [sp, #0]
     af4:	47a0      	blx	r4
}
     af6:	b003      	add	sp, #12
     af8:	bd30      	pop	{r4, r5, pc}

00000afa <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
     afa:	b570      	push	{r4, r5, r6, lr}
     afc:	b084      	sub	sp, #16
     afe:	0004      	movs	r4, r0
     b00:	a808      	add	r0, sp, #32
     b02:	7805      	ldrb	r5, [r0, #0]
     b04:	200e      	movs	r0, #14
     b06:	4468      	add	r0, sp
     b08:	8001      	strh	r1, [r0, #0]
     b0a:	a903      	add	r1, sp, #12
     b0c:	800a      	strh	r2, [r1, #0]
     b0e:	220a      	movs	r2, #10
     b10:	446a      	add	r2, sp
     b12:	8013      	strh	r3, [r2, #0]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
     b14:	238c      	movs	r3, #140	; 0x8c
     b16:	5ce3      	ldrb	r3, [r4, r3]
     b18:	2b00      	cmp	r3, #0
     b1a:	d015      	beq.n	b48 <u8g2_DrawHVLine+0x4e>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
     b1c:	8813      	ldrh	r3, [r2, #0]
     b1e:	2b00      	cmp	r3, #0
     b20:	d012      	beq.n	b48 <u8g2_DrawHVLine+0x4e>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
     b22:	2b01      	cmp	r3, #1
     b24:	d903      	bls.n	b2e <u8g2_DrawHVLine+0x34>
      {
	if ( dir == 2 )
     b26:	2d02      	cmp	r5, #2
     b28:	d010      	beq.n	b4c <u8g2_DrawHVLine+0x52>
	{
	  x -= len;
	  x++;
	}
	else if ( dir == 3 )
     b2a:	2d03      	cmp	r5, #3
     b2c:	d014      	beq.n	b58 <u8g2_DrawHVLine+0x5e>
	{
	  y -= len;
	  y++;
	}
      }
      dir &= 1;  
     b2e:	2301      	movs	r3, #1
     b30:	401d      	ands	r5, r3
      
      /* clip against the user window */
      if ( dir == 0 )
     b32:	d132      	bne.n	b9a <u8g2_DrawHVLine+0xa0>
      {
	if ( y < u8g2->user_y0 )
     b34:	334b      	adds	r3, #75	; 0x4b
     b36:	5ae2      	ldrh	r2, [r4, r3]
     b38:	ab03      	add	r3, sp, #12
     b3a:	881b      	ldrh	r3, [r3, #0]
     b3c:	429a      	cmp	r2, r3
     b3e:	d803      	bhi.n	b48 <u8g2_DrawHVLine+0x4e>
	  return;
	if ( y >= u8g2->user_y1 )
     b40:	224e      	movs	r2, #78	; 0x4e
     b42:	5aa2      	ldrh	r2, [r4, r2]
     b44:	4293      	cmp	r3, r2
     b46:	d30e      	bcc.n	b66 <u8g2_DrawHVLine+0x6c>
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    }
}
     b48:	b004      	add	sp, #16
     b4a:	bd70      	pop	{r4, r5, r6, pc}
	  x -= len;
     b4c:	8802      	ldrh	r2, [r0, #0]
     b4e:	1ad3      	subs	r3, r2, r3
     b50:	b29b      	uxth	r3, r3
	  x++;
     b52:	3301      	adds	r3, #1
     b54:	8003      	strh	r3, [r0, #0]
     b56:	e7ea      	b.n	b2e <u8g2_DrawHVLine+0x34>
	  y -= len;
     b58:	a903      	add	r1, sp, #12
     b5a:	880a      	ldrh	r2, [r1, #0]
     b5c:	1ad3      	subs	r3, r2, r3
     b5e:	b29b      	uxth	r3, r3
	  y++;
     b60:	3301      	adds	r3, #1
     b62:	800b      	strh	r3, [r1, #0]
     b64:	e7e3      	b.n	b2e <u8g2_DrawHVLine+0x34>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
     b66:	234a      	movs	r3, #74	; 0x4a
     b68:	5ae3      	ldrh	r3, [r4, r3]
     b6a:	2248      	movs	r2, #72	; 0x48
     b6c:	5aa2      	ldrh	r2, [r4, r2]
     b6e:	210a      	movs	r1, #10
     b70:	4469      	add	r1, sp
     b72:	200e      	movs	r0, #14
     b74:	4468      	add	r0, sp
     b76:	f7ff ff94 	bl	aa2 <u8g2_clip_intersection2>
     b7a:	2800      	cmp	r0, #0
     b7c:	d0e4      	beq.n	b48 <u8g2_DrawHVLine+0x4e>
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
     b7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
     b80:	689e      	ldr	r6, [r3, #8]
     b82:	230a      	movs	r3, #10
     b84:	446b      	add	r3, sp
     b86:	881b      	ldrh	r3, [r3, #0]
     b88:	aa03      	add	r2, sp, #12
     b8a:	8812      	ldrh	r2, [r2, #0]
     b8c:	210e      	movs	r1, #14
     b8e:	4469      	add	r1, sp
     b90:	8809      	ldrh	r1, [r1, #0]
     b92:	9500      	str	r5, [sp, #0]
     b94:	0020      	movs	r0, r4
     b96:	47b0      	blx	r6
     b98:	e7d6      	b.n	b48 <u8g2_DrawHVLine+0x4e>
	if ( x < u8g2->user_x0 )
     b9a:	2348      	movs	r3, #72	; 0x48
     b9c:	5ae2      	ldrh	r2, [r4, r3]
     b9e:	3b3a      	subs	r3, #58	; 0x3a
     ba0:	446b      	add	r3, sp
     ba2:	881b      	ldrh	r3, [r3, #0]
     ba4:	429a      	cmp	r2, r3
     ba6:	d8cf      	bhi.n	b48 <u8g2_DrawHVLine+0x4e>
	if ( x >= u8g2->user_x1 )
     ba8:	224a      	movs	r2, #74	; 0x4a
     baa:	5aa2      	ldrh	r2, [r4, r2]
     bac:	4293      	cmp	r3, r2
     bae:	d2cb      	bcs.n	b48 <u8g2_DrawHVLine+0x4e>
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
     bb0:	234e      	movs	r3, #78	; 0x4e
     bb2:	5ae3      	ldrh	r3, [r4, r3]
     bb4:	224c      	movs	r2, #76	; 0x4c
     bb6:	5aa2      	ldrh	r2, [r4, r2]
     bb8:	210a      	movs	r1, #10
     bba:	4469      	add	r1, sp
     bbc:	a803      	add	r0, sp, #12
     bbe:	f7ff ff70 	bl	aa2 <u8g2_clip_intersection2>
     bc2:	2800      	cmp	r0, #0
     bc4:	d1db      	bne.n	b7e <u8g2_DrawHVLine+0x84>
     bc6:	e7bf      	b.n	b48 <u8g2_DrawHVLine+0x4e>

00000bc8 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
     bc8:	b510      	push	{r4, lr}
     bca:	b082      	sub	sp, #8
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
     bcc:	2400      	movs	r4, #0
     bce:	9400      	str	r4, [sp, #0]
     bd0:	f7ff ff93 	bl	afa <u8g2_DrawHVLine>
}
     bd4:	b002      	add	sp, #8
     bd6:	bd10      	pop	{r4, pc}

00000bd8 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
     bd8:	b510      	push	{r4, lr}
     bda:	b082      	sub	sp, #8
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
     bdc:	2401      	movs	r4, #1
     bde:	9400      	str	r4, [sp, #0]
     be0:	f7ff ff8b 	bl	afa <u8g2_DrawHVLine>
}
     be4:	b002      	add	sp, #8
     be6:	bd10      	pop	{r4, pc}

00000be8 <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
     be8:	b500      	push	{lr}
     bea:	b083      	sub	sp, #12
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
     bec:	234c      	movs	r3, #76	; 0x4c
     bee:	5ac3      	ldrh	r3, [r0, r3]
     bf0:	4293      	cmp	r3, r2
     bf2:	d80b      	bhi.n	c0c <u8g2_DrawPixel+0x24>
    return;
  if ( y >= u8g2->user_y1 )
     bf4:	234e      	movs	r3, #78	; 0x4e
     bf6:	5ac3      	ldrh	r3, [r0, r3]
     bf8:	429a      	cmp	r2, r3
     bfa:	d207      	bcs.n	c0c <u8g2_DrawPixel+0x24>
    return;
  if ( x < u8g2->user_x0 )
     bfc:	2348      	movs	r3, #72	; 0x48
     bfe:	5ac3      	ldrh	r3, [r0, r3]
     c00:	428b      	cmp	r3, r1
     c02:	d803      	bhi.n	c0c <u8g2_DrawPixel+0x24>
    return;
  if ( x >= u8g2->user_x1 )
     c04:	234a      	movs	r3, #74	; 0x4a
     c06:	5ac3      	ldrh	r3, [r0, r3]
     c08:	4299      	cmp	r1, r3
     c0a:	d301      	bcc.n	c10 <u8g2_DrawPixel+0x28>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
}
     c0c:	b003      	add	sp, #12
     c0e:	bd00      	pop	{pc}
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
     c10:	2300      	movs	r3, #0
     c12:	9300      	str	r3, [sp, #0]
     c14:	3301      	adds	r3, #1
     c16:	f7ff ff70 	bl	afa <u8g2_DrawHVLine>
     c1a:	e7f7      	b.n	c0c <u8g2_DrawPixel+0x24>

00000c1c <u8g2_is_intersection_decision_tree>:
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
     c1c:	428a      	cmp	r2, r1
     c1e:	d205      	bcs.n	c2c <u8g2_is_intersection_decision_tree+0x10>
  {
    if ( v1 > a0 )	// v1 >= a0
     c20:	4283      	cmp	r3, r0
     c22:	d80b      	bhi.n	c3c <u8g2_is_intersection_decision_tree+0x20>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
     c24:	429a      	cmp	r2, r3
     c26:	d90b      	bls.n	c40 <u8g2_is_intersection_decision_tree+0x24>
      {
	return 1;
     c28:	2001      	movs	r0, #1
     c2a:	e008      	b.n	c3e <u8g2_is_intersection_decision_tree+0x22>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
     c2c:	4283      	cmp	r3, r0
     c2e:	d909      	bls.n	c44 <u8g2_is_intersection_decision_tree+0x28>
    {
      if ( v0 > v1 )	// v0 > v1
     c30:	429a      	cmp	r2, r3
     c32:	d801      	bhi.n	c38 <u8g2_is_intersection_decision_tree+0x1c>
      {
	return 1;
      }
      else
      {
	return 0;
     c34:	2000      	movs	r0, #0
     c36:	e002      	b.n	c3e <u8g2_is_intersection_decision_tree+0x22>
	return 1;
     c38:	2001      	movs	r0, #1
     c3a:	e000      	b.n	c3e <u8g2_is_intersection_decision_tree+0x22>
      return 1;
     c3c:	2001      	movs	r0, #1
    else
    {
      return 0;
    }
  }
}
     c3e:	4770      	bx	lr
	return 0;
     c40:	2000      	movs	r0, #0
     c42:	e7fc      	b.n	c3e <u8g2_is_intersection_decision_tree+0x22>
      return 0;
     c44:	2000      	movs	r0, #0
     c46:	e7fa      	b.n	c3e <u8g2_is_intersection_decision_tree+0x22>

00000c48 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
     c48:	b570      	push	{r4, r5, r6, lr}
     c4a:	0006      	movs	r6, r0
     c4c:	000c      	movs	r4, r1
     c4e:	001d      	movs	r5, r3
     c50:	ab04      	add	r3, sp, #16
     c52:	881b      	ldrh	r3, [r3, #0]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
     c54:	214e      	movs	r1, #78	; 0x4e
     c56:	5a41      	ldrh	r1, [r0, r1]
     c58:	204c      	movs	r0, #76	; 0x4c
     c5a:	5a30      	ldrh	r0, [r6, r0]
     c5c:	f7ff ffde 	bl	c1c <u8g2_is_intersection_decision_tree>
     c60:	2800      	cmp	r0, #0
     c62:	d007      	beq.n	c74 <u8g2_IsIntersection+0x2c>
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
     c64:	234a      	movs	r3, #74	; 0x4a
     c66:	5af1      	ldrh	r1, [r6, r3]
     c68:	3b02      	subs	r3, #2
     c6a:	5af0      	ldrh	r0, [r6, r3]
     c6c:	002b      	movs	r3, r5
     c6e:	0022      	movs	r2, r4
     c70:	f7ff ffd4 	bl	c1c <u8g2_is_intersection_decision_tree>
}
     c74:	bd70      	pop	{r4, r5, r6, pc}
	...

00000c78 <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
     c78:	b5f0      	push	{r4, r5, r6, r7, lr}
     c7a:	46de      	mov	lr, fp
     c7c:	4657      	mov	r7, sl
     c7e:	464e      	mov	r6, r9
     c80:	b5c0      	push	{r6, r7, lr}
     c82:	b082      	sub	sp, #8
     c84:	9000      	str	r0, [sp, #0]
     c86:	0017      	movs	r7, r2
     c88:	001e      	movs	r6, r3
     c8a:	ab0a      	add	r3, sp, #40	; 0x28
     c8c:	881c      	ldrh	r4, [r3, #0]

  uint8_t swapxy = 0;
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
     c8e:	42b1      	cmp	r1, r6
     c90:	d929      	bls.n	ce6 <u8g2_DrawLine+0x6e>
     c92:	1b8b      	subs	r3, r1, r6
     c94:	b29b      	uxth	r3, r3
     c96:	4699      	mov	r9, r3
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
     c98:	42a7      	cmp	r7, r4
     c9a:	d928      	bls.n	cee <u8g2_DrawLine+0x76>
     c9c:	1b3b      	subs	r3, r7, r4
     c9e:	b29b      	uxth	r3, r3
     ca0:	469b      	mov	fp, r3

  if ( dy > dx ) 
     ca2:	45d9      	cmp	r9, fp
     ca4:	d327      	bcc.n	cf6 <u8g2_DrawLine+0x7e>
     ca6:	465b      	mov	r3, fp
     ca8:	46cb      	mov	fp, r9
     caa:	4699      	mov	r9, r3
     cac:	0023      	movs	r3, r4
     cae:	0034      	movs	r4, r6
     cb0:	001e      	movs	r6, r3
     cb2:	003b      	movs	r3, r7
     cb4:	000f      	movs	r7, r1
     cb6:	0019      	movs	r1, r3
  uint8_t swapxy = 0;
     cb8:	2300      	movs	r3, #0
     cba:	469a      	mov	sl, r3
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
     cbc:	42a7      	cmp	r7, r4
     cbe:	d805      	bhi.n	ccc <u8g2_DrawLine+0x54>
     cc0:	0033      	movs	r3, r6
     cc2:	000e      	movs	r6, r1
     cc4:	0019      	movs	r1, r3
     cc6:	0023      	movs	r3, r4
     cc8:	003c      	movs	r4, r7
     cca:	001f      	movs	r7, r3
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
     ccc:	465b      	mov	r3, fp
     cce:	085d      	lsrs	r5, r3, #1
     cd0:	b22d      	sxth	r5, r5
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
     cd2:	428e      	cmp	r6, r1
     cd4:	d212      	bcs.n	cfc <u8g2_DrawLine+0x84>
     cd6:	2301      	movs	r3, #1
     cd8:	9301      	str	r3, [sp, #4]

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
    x2--;
#else
  if ( x2 == 0xffff )
     cda:	4b1d      	ldr	r3, [pc, #116]	; (d50 <u8g2_DrawLine+0xd8>)
     cdc:	429f      	cmp	r7, r3
     cde:	d11e      	bne.n	d1e <u8g2_DrawLine+0xa6>
    x2--;
     ce0:	3f01      	subs	r7, #1
     ce2:	b2bf      	uxth	r7, r7
#endif

  for( x = x1; x <= x2; x++ )
     ce4:	e01b      	b.n	d1e <u8g2_DrawLine+0xa6>
  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
     ce6:	1a73      	subs	r3, r6, r1
     ce8:	b29b      	uxth	r3, r3
     cea:	4699      	mov	r9, r3
     cec:	e7d4      	b.n	c98 <u8g2_DrawLine+0x20>
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
     cee:	1be3      	subs	r3, r4, r7
     cf0:	b29b      	uxth	r3, r3
     cf2:	469b      	mov	fp, r3
     cf4:	e7d5      	b.n	ca2 <u8g2_DrawLine+0x2a>
    swapxy = 1;
     cf6:	2301      	movs	r3, #1
     cf8:	469a      	mov	sl, r3
     cfa:	e7df      	b.n	cbc <u8g2_DrawLine+0x44>
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
     cfc:	2301      	movs	r3, #1
     cfe:	425b      	negs	r3, r3
     d00:	9301      	str	r3, [sp, #4]
     d02:	e7ea      	b.n	cda <u8g2_DrawLine+0x62>
  {
    if ( swapxy == 0 ) 
      u8g2_DrawPixel(u8g2, x, y); 
    else 
      u8g2_DrawPixel(u8g2, y, x); 
     d04:	0022      	movs	r2, r4
     d06:	0031      	movs	r1, r6
     d08:	9800      	ldr	r0, [sp, #0]
     d0a:	f7ff ff6d 	bl	be8 <u8g2_DrawPixel>
    err -= (u8g2_uint_t)dy;
     d0e:	464b      	mov	r3, r9
     d10:	1aed      	subs	r5, r5, r3
     d12:	b2ab      	uxth	r3, r5
     d14:	b21d      	sxth	r5, r3
    if ( err < 0 ) 
     d16:	2d00      	cmp	r5, #0
     d18:	db0c      	blt.n	d34 <u8g2_DrawLine+0xbc>
  for( x = x1; x <= x2; x++ )
     d1a:	3401      	adds	r4, #1
     d1c:	b2a4      	uxth	r4, r4
     d1e:	42a7      	cmp	r7, r4
     d20:	d30f      	bcc.n	d42 <u8g2_DrawLine+0xca>
    if ( swapxy == 0 ) 
     d22:	4653      	mov	r3, sl
     d24:	2b00      	cmp	r3, #0
     d26:	d1ed      	bne.n	d04 <u8g2_DrawLine+0x8c>
      u8g2_DrawPixel(u8g2, x, y); 
     d28:	0032      	movs	r2, r6
     d2a:	0021      	movs	r1, r4
     d2c:	9800      	ldr	r0, [sp, #0]
     d2e:	f7ff ff5b 	bl	be8 <u8g2_DrawPixel>
     d32:	e7ec      	b.n	d0e <u8g2_DrawLine+0x96>
    {
      y += (u8g2_uint_t)ystep;
     d34:	466a      	mov	r2, sp
     d36:	8892      	ldrh	r2, [r2, #4]
     d38:	18b6      	adds	r6, r6, r2
     d3a:	b2b6      	uxth	r6, r6
      err += (u8g2_uint_t)dx;
     d3c:	445b      	add	r3, fp
     d3e:	b21d      	sxth	r5, r3
     d40:	e7eb      	b.n	d1a <u8g2_DrawLine+0xa2>
    }
  }
}
     d42:	b002      	add	sp, #8
     d44:	bc1c      	pop	{r2, r3, r4}
     d46:	4691      	mov	r9, r2
     d48:	469a      	mov	sl, r3
     d4a:	46a3      	mov	fp, r4
     d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d4e:	46c0      	nop			; (mov r8, r8)
     d50:	0000ffff 	.word	0x0000ffff

00000d54 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
     d54:	b5f0      	push	{r4, r5, r6, r7, lr}
     d56:	46c6      	mov	lr, r8
     d58:	b500      	push	{lr}
     d5a:	4688      	mov	r8, r1
     d5c:	ac06      	add	r4, sp, #24
     d5e:	7827      	ldrb	r7, [r4, #0]
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
     d60:	2407      	movs	r4, #7
     d62:	4014      	ands	r4, r2
  mask = 1;
  mask <<= bit_pos;
     d64:	2501      	movs	r5, #1
     d66:	40a5      	lsls	r5, r4
     d68:	b2ed      	uxtb	r5, r5

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
     d6a:	2692      	movs	r6, #146	; 0x92
     d6c:	5d86      	ldrb	r6, [r0, r6]
     d6e:	46b4      	mov	ip, r6
     d70:	2e01      	cmp	r6, #1
     d72:	d91f      	bls.n	db4 <u8g2_ll_hvline_vertical_top_lsb+0x60>
  or_mask = 0;
     d74:	2600      	movs	r6, #0
    or_mask  = mask;
  if ( u8g2->draw_color != 1 )
     d76:	4661      	mov	r1, ip
     d78:	2901      	cmp	r1, #1
     d7a:	d01d      	beq.n	db8 <u8g2_ll_hvline_vertical_top_lsb+0x64>
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
     d7c:	2107      	movs	r1, #7
     d7e:	438a      	bics	r2, r1
     d80:	4694      	mov	ip, r2
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
     d82:	6802      	ldr	r2, [r0, #0]
     d84:	7c12      	ldrb	r2, [r2, #16]
     d86:	4661      	mov	r1, ip
     d88:	434a      	muls	r2, r1
     d8a:	b292      	uxth	r2, r2
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
     d8c:	4442      	add	r2, r8
     d8e:	0011      	movs	r1, r2
     d90:	6b42      	ldr	r2, [r0, #52]	; 0x34
     d92:	4694      	mov	ip, r2
     d94:	4461      	add	r1, ip
  
  if ( dir == 0 )
     d96:	2f00      	cmp	r7, #0
     d98:	d118      	bne.n	dcc <u8g2_ll_hvline_vertical_top_lsb+0x78>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
     d9a:	780a      	ldrb	r2, [r1, #0]
     d9c:	4332      	orrs	r2, r6
     d9e:	b2d2      	uxtb	r2, r2
	*ptr ^= xor_mask;
     da0:	406a      	eors	r2, r5
     da2:	700a      	strb	r2, [r1, #0]
	ptr++;
     da4:	3101      	adds	r1, #1
	len--;
     da6:	3b01      	subs	r3, #1
     da8:	b29b      	uxth	r3, r3
      } while( len != 0 );
     daa:	2b00      	cmp	r3, #0
     dac:	d1f5      	bne.n	d9a <u8g2_ll_hvline_vertical_top_lsb+0x46>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
     dae:	bc04      	pop	{r2}
     db0:	4690      	mov	r8, r2
     db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    or_mask  = mask;
     db4:	002e      	movs	r6, r5
     db6:	e7de      	b.n	d76 <u8g2_ll_hvline_vertical_top_lsb+0x22>
  xor_mask = 0;
     db8:	2500      	movs	r5, #0
     dba:	e7df      	b.n	d7c <u8g2_ll_hvline_vertical_top_lsb+0x28>
	  or_mask  = 1;
     dbc:	2601      	movs	r6, #1
     dbe:	e017      	b.n	df0 <u8g2_ll_hvline_vertical_top_lsb+0x9c>
	or_mask <<= 1;
     dc0:	0076      	lsls	r6, r6, #1
     dc2:	b2f6      	uxtb	r6, r6
	xor_mask <<= 1;
     dc4:	006d      	lsls	r5, r5, #1
     dc6:	b2ed      	uxtb	r5, r5
    } while( len != 0 );
     dc8:	2b00      	cmp	r3, #0
     dca:	d0f0      	beq.n	dae <u8g2_ll_hvline_vertical_top_lsb+0x5a>
      *ptr |= or_mask;
     dcc:	780a      	ldrb	r2, [r1, #0]
     dce:	4332      	orrs	r2, r6
     dd0:	b2d2      	uxtb	r2, r2
      *ptr ^= xor_mask;
     dd2:	406a      	eors	r2, r5
     dd4:	700a      	strb	r2, [r1, #0]
      bit_pos++;
     dd6:	3401      	adds	r4, #1
      bit_pos &= 7;
     dd8:	2207      	movs	r2, #7
     dda:	4014      	ands	r4, r2
      len--;
     ddc:	3b01      	subs	r3, #1
     dde:	b29b      	uxth	r3, r3
      if ( bit_pos == 0 )
     de0:	2c00      	cmp	r4, #0
     de2:	d1ed      	bne.n	dc0 <u8g2_ll_hvline_vertical_top_lsb+0x6c>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
     de4:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
     de6:	1889      	adds	r1, r1, r2
	if ( u8g2->draw_color <= 1 )
     de8:	2292      	movs	r2, #146	; 0x92
     dea:	5c82      	ldrb	r2, [r0, r2]
     dec:	2a01      	cmp	r2, #1
     dee:	d9e5      	bls.n	dbc <u8g2_ll_hvline_vertical_top_lsb+0x68>
	if ( u8g2->draw_color != 1 )
     df0:	2a01      	cmp	r2, #1
     df2:	d0e9      	beq.n	dc8 <u8g2_ll_hvline_vertical_top_lsb+0x74>
	  xor_mask = 1;
     df4:	2501      	movs	r5, #1
     df6:	e7e7      	b.n	dc8 <u8g2_ll_hvline_vertical_top_lsb+0x74>

00000df8 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
     df8:	b5f0      	push	{r4, r5, r6, r7, lr}
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
     dfa:	6801      	ldr	r1, [r0, #0]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
     dfc:	2338      	movs	r3, #56	; 0x38
     dfe:	5cc4      	ldrb	r4, [r0, r3]
     e00:	b2a3      	uxth	r3, r4
  t *= 8;
     e02:	00da      	lsls	r2, r3, #3
  u8g2->pixel_buf_height = t;
     e04:	8782      	strh	r2, [r0, #60]	; 0x3c
  
  t = display_info->tile_width;
     e06:	7c0a      	ldrb	r2, [r1, #16]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
     e08:	00d2      	lsls	r2, r2, #3
  u8g2->pixel_buf_width = t;
     e0a:	8742      	strh	r2, [r0, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
     e0c:	2239      	movs	r2, #57	; 0x39
     e0e:	5c86      	ldrb	r6, [r0, r2]
     e10:	b2b7      	uxth	r7, r6
  t *= 8;
     e12:	00fa      	lsls	r2, r7, #3
  u8g2->pixel_curr_row = t;
     e14:	87c2      	strh	r2, [r0, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
     e16:	19a4      	adds	r4, r4, r6
     e18:	7c4d      	ldrb	r5, [r1, #17]
     e1a:	42ac      	cmp	r4, r5
     e1c:	dd01      	ble.n	e22 <u8g2_update_dimension_common+0x2a>
    t = display_info->tile_height - u8g2->tile_curr_row;
     e1e:	1beb      	subs	r3, r5, r7
     e20:	b29b      	uxth	r3, r3
  t *= 8;
     e22:	00db      	lsls	r3, r3, #3
     e24:	b29b      	uxth	r3, r3
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
     e26:	2440      	movs	r4, #64	; 0x40
     e28:	5302      	strh	r2, [r0, r4]
  u8g2->buf_y1 = u8g2->buf_y0;
  u8g2->buf_y1 += t;
     e2a:	18d3      	adds	r3, r2, r3
     e2c:	2242      	movs	r2, #66	; 0x42
     e2e:	5283      	strh	r3, [r0, r2]

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
     e30:	8a8a      	ldrh	r2, [r1, #20]
     e32:	2344      	movs	r3, #68	; 0x44
     e34:	52c2      	strh	r2, [r0, r3]
  u8g2->height = display_info->pixel_height;
     e36:	8aca      	ldrh	r2, [r1, #22]
     e38:	3302      	adds	r3, #2
     e3a:	52c2      	strh	r2, [r0, r3]
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
     e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000e3e <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
     e3e:	b510      	push	{r4, lr}
  u8g2_update_dimension_common(u8g2);  
     e40:	f7ff ffda 	bl	df8 <u8g2_update_dimension_common>
}
     e44:	bd10      	pop	{r4, pc}

00000e46 <u8g2_apply_clip_window>:
{
     e46:	b510      	push	{r4, lr}
     e48:	b082      	sub	sp, #8
     e4a:	0004      	movs	r4, r0
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
     e4c:	2352      	movs	r3, #82	; 0x52
     e4e:	5ac3      	ldrh	r3, [r0, r3]
     e50:	2254      	movs	r2, #84	; 0x54
     e52:	5a82      	ldrh	r2, [r0, r2]
     e54:	2150      	movs	r1, #80	; 0x50
     e56:	5a41      	ldrh	r1, [r0, r1]
     e58:	2056      	movs	r0, #86	; 0x56
     e5a:	5a20      	ldrh	r0, [r4, r0]
     e5c:	9000      	str	r0, [sp, #0]
     e5e:	0020      	movs	r0, r4
     e60:	f7ff fef2 	bl	c48 <u8g2_IsIntersection>
     e64:	2800      	cmp	r0, #0
     e66:	d023      	beq.n	eb0 <u8g2_apply_clip_window+0x6a>
    u8g2->is_page_clip_window_intersection = 1;
     e68:	2201      	movs	r2, #1
     e6a:	238c      	movs	r3, #140	; 0x8c
     e6c:	54e2      	strb	r2, [r4, r3]
    if ( u8g2->user_x0 < u8g2->clip_x0 )
     e6e:	3b44      	subs	r3, #68	; 0x44
     e70:	5ae2      	ldrh	r2, [r4, r3]
     e72:	3308      	adds	r3, #8
     e74:	5ae3      	ldrh	r3, [r4, r3]
     e76:	429a      	cmp	r2, r3
     e78:	d201      	bcs.n	e7e <u8g2_apply_clip_window+0x38>
      u8g2->user_x0 = u8g2->clip_x0;
     e7a:	2248      	movs	r2, #72	; 0x48
     e7c:	52a3      	strh	r3, [r4, r2]
    if ( u8g2->user_x1 > u8g2->clip_x1 )
     e7e:	234a      	movs	r3, #74	; 0x4a
     e80:	5ae2      	ldrh	r2, [r4, r3]
     e82:	3308      	adds	r3, #8
     e84:	5ae3      	ldrh	r3, [r4, r3]
     e86:	429a      	cmp	r2, r3
     e88:	d901      	bls.n	e8e <u8g2_apply_clip_window+0x48>
      u8g2->user_x1 = u8g2->clip_x1;
     e8a:	224a      	movs	r2, #74	; 0x4a
     e8c:	52a3      	strh	r3, [r4, r2]
    if ( u8g2->user_y0 < u8g2->clip_y0 )
     e8e:	234c      	movs	r3, #76	; 0x4c
     e90:	5ae2      	ldrh	r2, [r4, r3]
     e92:	3308      	adds	r3, #8
     e94:	5ae3      	ldrh	r3, [r4, r3]
     e96:	429a      	cmp	r2, r3
     e98:	d201      	bcs.n	e9e <u8g2_apply_clip_window+0x58>
      u8g2->user_y0 = u8g2->clip_y0;
     e9a:	224c      	movs	r2, #76	; 0x4c
     e9c:	52a3      	strh	r3, [r4, r2]
    if ( u8g2->user_y1 > u8g2->clip_y1 )
     e9e:	234e      	movs	r3, #78	; 0x4e
     ea0:	5ae2      	ldrh	r2, [r4, r3]
     ea2:	3308      	adds	r3, #8
     ea4:	5ae3      	ldrh	r3, [r4, r3]
     ea6:	429a      	cmp	r2, r3
     ea8:	d905      	bls.n	eb6 <u8g2_apply_clip_window+0x70>
      u8g2->user_y1 = u8g2->clip_y1;
     eaa:	224e      	movs	r2, #78	; 0x4e
     eac:	52a3      	strh	r3, [r4, r2]
}
     eae:	e002      	b.n	eb6 <u8g2_apply_clip_window+0x70>
    u8g2->is_page_clip_window_intersection = 0;
     eb0:	2200      	movs	r2, #0
     eb2:	238c      	movs	r3, #140	; 0x8c
     eb4:	54e2      	strb	r2, [r4, r3]
}
     eb6:	b002      	add	sp, #8
     eb8:	bd10      	pop	{r4, pc}

00000eba <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
     eba:	b510      	push	{r4, lr}
  u8g2->user_x0 = 0;
     ebc:	2200      	movs	r2, #0
     ebe:	2348      	movs	r3, #72	; 0x48
     ec0:	52c2      	strh	r2, [r0, r3]
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
     ec2:	3b04      	subs	r3, #4
     ec4:	5ac2      	ldrh	r2, [r0, r3]
     ec6:	3306      	adds	r3, #6
     ec8:	52c2      	strh	r2, [r0, r3]
  
  u8g2->user_y0 = u8g2->buf_y0;
     eca:	3b0a      	subs	r3, #10
     ecc:	5ac2      	ldrh	r2, [r0, r3]
     ece:	330c      	adds	r3, #12
     ed0:	52c2      	strh	r2, [r0, r3]
  u8g2->user_y1 = u8g2->buf_y1;
     ed2:	3b0a      	subs	r3, #10
     ed4:	5ac2      	ldrh	r2, [r0, r3]
     ed6:	330c      	adds	r3, #12
     ed8:	52c2      	strh	r2, [r0, r3]
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
     eda:	f7ff ffb4 	bl	e46 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
     ede:	bd10      	pop	{r4, pc}

00000ee0 <u8g2_draw_mirror_vertical_r0>:
  }
  u8g2_draw_hv_line_2dir(u8g2, xx, y, len, dir);
}

void u8g2_draw_mirror_vertical_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
     ee0:	b530      	push	{r4, r5, lr}
     ee2:	b083      	sub	sp, #12
     ee4:	ac06      	add	r4, sp, #24
     ee6:	7825      	ldrb	r5, [r4, #0]
  u8g2_uint_t yy;
  yy = u8g2->height;
     ee8:	2446      	movs	r4, #70	; 0x46
     eea:	5b04      	ldrh	r4, [r0, r4]
  yy -= y;
     eec:	1aa2      	subs	r2, r4, r2
     eee:	b292      	uxth	r2, r2
  if ( (dir & 1) == 1 )
     ef0:	07ec      	lsls	r4, r5, #31
     ef2:	d406      	bmi.n	f02 <u8g2_draw_mirror_vertical_r0+0x22>
  {
    yy -= len;
  }
  else
  {
    yy--;
     ef4:	3a01      	subs	r2, #1
     ef6:	b292      	uxth	r2, r2
  }
  u8g2_draw_hv_line_2dir(u8g2, x, yy, len, dir);
     ef8:	9500      	str	r5, [sp, #0]
     efa:	f7ff fdf2 	bl	ae2 <u8g2_draw_hv_line_2dir>
}
     efe:	b003      	add	sp, #12
     f00:	bd30      	pop	{r4, r5, pc}
    yy -= len;
     f02:	1ad2      	subs	r2, r2, r3
     f04:	b292      	uxth	r2, r2
     f06:	e7f7      	b.n	ef8 <u8g2_draw_mirror_vertical_r0+0x18>

00000f08 <u8g2_SetMaxClipWindow>:
{
     f08:	b510      	push	{r4, lr}
  u8g2->clip_x0 = 0;
     f0a:	2300      	movs	r3, #0
     f0c:	2250      	movs	r2, #80	; 0x50
     f0e:	5283      	strh	r3, [r0, r2]
  u8g2->clip_y0 = 0;
     f10:	3204      	adds	r2, #4
     f12:	5283      	strh	r3, [r0, r2]
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
     f14:	3b01      	subs	r3, #1
     f16:	3a02      	subs	r2, #2
     f18:	5283      	strh	r3, [r0, r2]
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
     f1a:	3204      	adds	r2, #4
     f1c:	5283      	strh	r3, [r0, r2]
  u8g2->cb->update_page_win(u8g2);
     f1e:	6b03      	ldr	r3, [r0, #48]	; 0x30
     f20:	685b      	ldr	r3, [r3, #4]
     f22:	4798      	blx	r3
}
     f24:	bd10      	pop	{r4, pc}

00000f26 <u8g2_SetupBuffer>:
{
     f26:	b570      	push	{r4, r5, r6, lr}
     f28:	0004      	movs	r4, r0
     f2a:	9804      	ldr	r0, [sp, #16]
  u8g2->font = NULL;
     f2c:	2500      	movs	r5, #0
     f2e:	65a5      	str	r5, [r4, #88]	; 0x58
  u8g2->ll_hvline = ll_hvline_cb;
     f30:	62e3      	str	r3, [r4, #44]	; 0x2c
  u8g2->tile_buf_ptr = buf;
     f32:	6361      	str	r1, [r4, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
     f34:	2338      	movs	r3, #56	; 0x38
     f36:	54e2      	strb	r2, [r4, r3]
  u8g2->tile_curr_row = 0;
     f38:	3301      	adds	r3, #1
     f3a:	54e5      	strb	r5, [r4, r3]
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
     f3c:	3334      	adds	r3, #52	; 0x34
     f3e:	54e5      	strb	r5, [r4, r3]
  u8g2->bitmap_transparency = 0;
     f40:	3324      	adds	r3, #36	; 0x24
     f42:	54e5      	strb	r5, [r4, r3]
  u8g2->font_height_mode = 0; /* issue 2046 */
     f44:	3b04      	subs	r3, #4
     f46:	54e5      	strb	r5, [r4, r3]
  u8g2->draw_color = 1;
     f48:	3b8c      	subs	r3, #140	; 0x8c
     f4a:	2292      	movs	r2, #146	; 0x92
     f4c:	54a3      	strb	r3, [r4, r2]
  u8g2->is_auto_page_clear = 1;
     f4e:	3201      	adds	r2, #1
     f50:	54a3      	strb	r3, [r4, r2]
  u8g2->cb = u8g2_cb;
     f52:	6320      	str	r0, [r4, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
     f54:	6803      	ldr	r3, [r0, #0]
     f56:	0020      	movs	r0, r4
     f58:	4798      	blx	r3
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
     f5a:	0020      	movs	r0, r4
     f5c:	f7ff ffd4 	bl	f08 <u8g2_SetMaxClipWindow>
  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
     f60:	0020      	movs	r0, r4
     f62:	f7ff fd8b 	bl	a7c <u8g2_SetFontPosBaseline>
  u8g2->font_decode.dir = 0;
     f66:	2370      	movs	r3, #112	; 0x70
     f68:	54e5      	strb	r5, [r4, r3]
}
     f6a:	bd70      	pop	{r4, r5, r6, pc}

00000f6c <u8x8_ascii_next>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
}

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
     f6c:	2900      	cmp	r1, #0
     f6e:	d101      	bne.n	f74 <u8x8_ascii_next+0x8>
    return 0x0ffff;	/* end of string detected*/
     f70:	4803      	ldr	r0, [pc, #12]	; (f80 <u8x8_ascii_next+0x14>)
  return b;
}
     f72:	4770      	bx	lr
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
     f74:	290a      	cmp	r1, #10
     f76:	d001      	beq.n	f7c <u8x8_ascii_next+0x10>
  return b;
     f78:	b288      	uxth	r0, r1
     f7a:	e7fa      	b.n	f72 <u8x8_ascii_next+0x6>
    return 0x0ffff;	/* end of string detected*/
     f7c:	4800      	ldr	r0, [pc, #0]	; (f80 <u8x8_ascii_next+0x14>)
     f7e:	e7f8      	b.n	f72 <u8x8_ascii_next+0x6>
     f80:	0000ffff 	.word	0x0000ffff

00000f84 <u8x8_utf8_init>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
     f84:	2200      	movs	r2, #0
     f86:	2326      	movs	r3, #38	; 0x26
     f88:	54c2      	strb	r2, [r0, r3]
}
     f8a:	4770      	bx	lr

00000f8c <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
     f8c:	b510      	push	{r4, lr}
     f8e:	000a      	movs	r2, r1
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
     f90:	6904      	ldr	r4, [r0, #16]
     f92:	2300      	movs	r3, #0
     f94:	2120      	movs	r1, #32
     f96:	47a0      	blx	r4
}
     f98:	bd10      	pop	{r4, pc}

00000f9a <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
     f9a:	b510      	push	{r4, lr}
     f9c:	0013      	movs	r3, r2
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
     f9e:	6904      	ldr	r4, [r0, #16]
     fa0:	000a      	movs	r2, r1
     fa2:	2117      	movs	r1, #23
     fa4:	47a0      	blx	r4
}
     fa6:	bd10      	pop	{r4, pc}

00000fa8 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
     fa8:	b500      	push	{lr}
     faa:	b083      	sub	sp, #12
     fac:	466b      	mov	r3, sp
     fae:	1dda      	adds	r2, r3, #7
     fb0:	7011      	strb	r1, [r2, #0]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
     fb2:	2101      	movs	r1, #1
     fb4:	f7ff fff1 	bl	f9a <u8x8_byte_SendBytes>
}
     fb8:	b003      	add	sp, #12
     fba:	bd00      	pop	{pc}

00000fbc <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
     fbc:	b510      	push	{r4, lr}
     fbe:	000a      	movs	r2, r1
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
     fc0:	68c4      	ldr	r4, [r0, #12]
     fc2:	2300      	movs	r3, #0
     fc4:	2115      	movs	r1, #21
     fc6:	47a0      	blx	r4
}
     fc8:	bd10      	pop	{r4, pc}

00000fca <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
     fca:	b510      	push	{r4, lr}
     fcc:	000a      	movs	r2, r1
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
     fce:	68c4      	ldr	r4, [r0, #12]
     fd0:	2300      	movs	r3, #0
     fd2:	2116      	movs	r1, #22
     fd4:	47a0      	blx	r4
}
     fd6:	bd10      	pop	{r4, pc}

00000fd8 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
     fd8:	b510      	push	{r4, lr}
     fda:	0013      	movs	r3, r2
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
     fdc:	68c4      	ldr	r4, [r0, #12]
     fde:	000a      	movs	r2, r1
     fe0:	2117      	movs	r1, #23
     fe2:	47a0      	blx	r4
}
     fe4:	bd10      	pop	{r4, pc}

00000fe6 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
     fe6:	b510      	push	{r4, lr}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
     fe8:	68c4      	ldr	r4, [r0, #12]
     fea:	2300      	movs	r3, #0
     fec:	2200      	movs	r2, #0
     fee:	2118      	movs	r1, #24
     ff0:	47a0      	blx	r4
}
     ff2:	bd10      	pop	{r4, pc}

00000ff4 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
     ff4:	b510      	push	{r4, lr}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
     ff6:	68c4      	ldr	r4, [r0, #12]
     ff8:	2300      	movs	r3, #0
     ffa:	2200      	movs	r2, #0
     ffc:	2119      	movs	r1, #25
     ffe:	47a0      	blx	r4
}
    1000:	bd10      	pop	{r4, pc}

00001002 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
    1002:	b570      	push	{r4, r5, r6, lr}
    1004:	b082      	sub	sp, #8
    1006:	0006      	movs	r6, r0
    1008:	000c      	movs	r4, r1
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
    100a:	7821      	ldrb	r1, [r4, #0]
    data++;
    100c:	1c65      	adds	r5, r4, #1
    switch( cmd )
    100e:	2917      	cmp	r1, #23
    1010:	d018      	beq.n	1044 <u8x8_cad_SendSequence+0x42>
    1012:	d90c      	bls.n	102e <u8x8_cad_SendSequence+0x2c>
    1014:	2919      	cmp	r1, #25
    1016:	d91f      	bls.n	1058 <u8x8_cad_SendSequence+0x56>
    1018:	29fe      	cmp	r1, #254	; 0xfe
    101a:	d124      	bne.n	1066 <u8x8_cad_SendSequence+0x64>
      case U8X8_MSG_CAD_START_TRANSFER:
      case U8X8_MSG_CAD_END_TRANSFER:
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
	  break;
      case 0x0fe:
	  v = *data;
    101c:	782a      	ldrb	r2, [r5, #0]
    101e:	466b      	mov	r3, sp
    1020:	71da      	strb	r2, [r3, #7]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
    1022:	2129      	movs	r1, #41	; 0x29
    1024:	0030      	movs	r0, r6
    1026:	f000 f967 	bl	12f8 <u8x8_gpio_call>
	  data++;
    102a:	3402      	adds	r4, #2
	  break;
    102c:	e7ed      	b.n	100a <u8x8_cad_SendSequence+0x8>
    switch( cmd )
    102e:	2915      	cmp	r1, #21
    1030:	d319      	bcc.n	1066 <u8x8_cad_SendSequence+0x64>
	  v = *data;
    1032:	782a      	ldrb	r2, [r5, #0]
    1034:	466b      	mov	r3, sp
    1036:	71da      	strb	r2, [r3, #7]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
    1038:	2300      	movs	r3, #0
    103a:	0030      	movs	r0, r6
    103c:	68f5      	ldr	r5, [r6, #12]
    103e:	47a8      	blx	r5
	  data++;
    1040:	3402      	adds	r4, #2
	  break;
    1042:	e7e2      	b.n	100a <u8x8_cad_SendSequence+0x8>
	  v = *data;
    1044:	7863      	ldrb	r3, [r4, #1]
    1046:	466a      	mov	r2, sp
    1048:	3207      	adds	r2, #7
    104a:	7013      	strb	r3, [r2, #0]
	  u8x8_cad_SendData(u8x8, 1, &v);
    104c:	2101      	movs	r1, #1
    104e:	0030      	movs	r0, r6
    1050:	f7ff ffc2 	bl	fd8 <u8x8_cad_SendData>
	  data++;
    1054:	3402      	adds	r4, #2
	  break;
    1056:	e7d8      	b.n	100a <u8x8_cad_SendSequence+0x8>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
    1058:	2300      	movs	r3, #0
    105a:	2200      	movs	r2, #0
    105c:	0030      	movs	r0, r6
    105e:	68f4      	ldr	r4, [r6, #12]
    1060:	47a0      	blx	r4
    data++;
    1062:	002c      	movs	r4, r5
	  break;
    1064:	e7d1      	b.n	100a <u8x8_cad_SendSequence+0x8>
      default:
	return;
    }
  }
}
    1066:	b002      	add	sp, #8
    1068:	bd70      	pop	{r4, r5, r6, pc}
	...

0000106c <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    106c:	b5f0      	push	{r4, r5, r6, r7, lr}
    106e:	b083      	sub	sp, #12
    1070:	0004      	movs	r4, r0
    1072:	000d      	movs	r5, r1
    1074:	0016      	movs	r6, r2
    1076:	9301      	str	r3, [sp, #4]
  switch(msg)
    1078:	000b      	movs	r3, r1
    107a:	3b14      	subs	r3, #20
    107c:	b2da      	uxtb	r2, r3
    107e:	2a05      	cmp	r2, #5
    1080:	d820      	bhi.n	10c4 <u8x8_cad_001+0x58>
    1082:	0093      	lsls	r3, r2, #2
    1084:	4a10      	ldr	r2, [pc, #64]	; (10c8 <u8x8_cad_001+0x5c>)
    1086:	58d3      	ldr	r3, [r2, r3]
    1088:	469f      	mov	pc, r3
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
    108a:	2100      	movs	r1, #0
    108c:	f7ff ff7e 	bl	f8c <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
    1090:	0031      	movs	r1, r6
    1092:	0020      	movs	r0, r4
    1094:	f7ff ff88 	bl	fa8 <u8x8_byte_SendByte>
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
    1098:	2001      	movs	r0, #1
      break;
    109a:	e011      	b.n	10c0 <u8x8_cad_001+0x54>
      u8x8_byte_SetDC(u8x8, 0);
    109c:	2100      	movs	r1, #0
    109e:	f7ff ff75 	bl	f8c <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
    10a2:	0031      	movs	r1, r6
    10a4:	0020      	movs	r0, r4
    10a6:	f7ff ff7f 	bl	fa8 <u8x8_byte_SendByte>
  return 1;
    10aa:	2001      	movs	r0, #1
      break;
    10ac:	e008      	b.n	10c0 <u8x8_cad_001+0x54>
      u8x8_byte_SetDC(u8x8, 1);
    10ae:	2101      	movs	r1, #1
    10b0:	f7ff ff6c 	bl	f8c <u8x8_byte_SetDC>
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    10b4:	6927      	ldr	r7, [r4, #16]
    10b6:	9b01      	ldr	r3, [sp, #4]
    10b8:	0032      	movs	r2, r6
    10ba:	0029      	movs	r1, r5
    10bc:	0020      	movs	r0, r4
    10be:	47b8      	blx	r7
}
    10c0:	b003      	add	sp, #12
    10c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return 0;
    10c4:	2000      	movs	r0, #0
    10c6:	e7fb      	b.n	10c0 <u8x8_cad_001+0x54>
    10c8:	0000b24c 	.word	0x0000b24c

000010cc <u8x8_d_helper_display_setup_memory>:
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
      /* 1) set display info struct */
      u8x8->display_info = display_info;
    10cc:	6001      	str	r1, [r0, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
    10ce:	7c8a      	ldrb	r2, [r1, #18]
    10d0:	2322      	movs	r3, #34	; 0x22
    10d2:	54c2      	strb	r2, [r0, r3]
}
    10d4:	4770      	bx	lr

000010d6 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
    10d6:	b570      	push	{r4, r5, r6, lr}
    10d8:	0004      	movs	r4, r0
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
    10da:	2300      	movs	r3, #0
    10dc:	2200      	movs	r2, #0
    10de:	2128      	movs	r1, #40	; 0x28
    10e0:	6945      	ldr	r5, [r0, #20]
    10e2:	47a8      	blx	r5
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
    10e4:	2300      	movs	r3, #0
    10e6:	2200      	movs	r2, #0
    10e8:	2114      	movs	r1, #20
    10ea:	0020      	movs	r0, r4
    10ec:	68e5      	ldr	r5, [r4, #12]
    10ee:	47a8      	blx	r5

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
    10f0:	2201      	movs	r2, #1
    10f2:	214b      	movs	r1, #75	; 0x4b
    10f4:	0020      	movs	r0, r4
    10f6:	f000 f8ff 	bl	12f8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
    10fa:	6823      	ldr	r3, [r4, #0]
    10fc:	791a      	ldrb	r2, [r3, #4]
    10fe:	2129      	movs	r1, #41	; 0x29
    1100:	0020      	movs	r0, r4
    1102:	f000 f8f9 	bl	12f8 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
    1106:	2200      	movs	r2, #0
    1108:	214b      	movs	r1, #75	; 0x4b
    110a:	0020      	movs	r0, r4
    110c:	f000 f8f4 	bl	12f8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
    1110:	6823      	ldr	r3, [r4, #0]
    1112:	791a      	ldrb	r2, [r3, #4]
    1114:	2129      	movs	r1, #41	; 0x29
    1116:	0020      	movs	r0, r4
    1118:	f000 f8ee 	bl	12f8 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
    111c:	2201      	movs	r2, #1
    111e:	214b      	movs	r1, #75	; 0x4b
    1120:	0020      	movs	r0, r4
    1122:	f000 f8e9 	bl	12f8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
    1126:	6823      	ldr	r3, [r4, #0]
    1128:	795a      	ldrb	r2, [r3, #5]
    112a:	2129      	movs	r1, #41	; 0x29
    112c:	0020      	movs	r0, r4
    112e:	f000 f8e3 	bl	12f8 <u8x8_gpio_call>
}    
    1132:	bd70      	pop	{r4, r5, r6, pc}

00001134 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
    1134:	b510      	push	{r4, lr}
    1136:	b082      	sub	sp, #8
  u8x8_tile_t tile;
  tile.x_pos = x;
    1138:	466c      	mov	r4, sp
    113a:	7161      	strb	r1, [r4, #5]
  tile.y_pos = y;
    113c:	71a2      	strb	r2, [r4, #6]
  tile.cnt = cnt;
    113e:	7123      	strb	r3, [r4, #4]
  tile.tile_ptr = tile_ptr;
    1140:	9b04      	ldr	r3, [sp, #16]
    1142:	9300      	str	r3, [sp, #0]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
    1144:	6884      	ldr	r4, [r0, #8]
    1146:	466b      	mov	r3, sp
    1148:	2201      	movs	r2, #1
    114a:	210f      	movs	r1, #15
    114c:	47a0      	blx	r4
}
    114e:	b002      	add	sp, #8
    1150:	bd10      	pop	{r4, pc}

00001152 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
    1152:	b510      	push	{r4, lr}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
    1154:	6884      	ldr	r4, [r0, #8]
    1156:	2300      	movs	r3, #0
    1158:	2200      	movs	r2, #0
    115a:	2109      	movs	r1, #9
    115c:	47a0      	blx	r4
}
    115e:	bd10      	pop	{r4, pc}

00001160 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
    1160:	b510      	push	{r4, lr}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
    1162:	6884      	ldr	r4, [r0, #8]
    1164:	2300      	movs	r3, #0
    1166:	2200      	movs	r2, #0
    1168:	210a      	movs	r1, #10
    116a:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
    116c:	bd10      	pop	{r4, pc}

0000116e <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
    116e:	b510      	push	{r4, lr}
    1170:	000a      	movs	r2, r1
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
    1172:	6884      	ldr	r4, [r0, #8]
    1174:	2300      	movs	r3, #0
    1176:	210b      	movs	r1, #11
    1178:	47a0      	blx	r4
}
    117a:	bd10      	pop	{r4, pc}

0000117c <u8x8_SetFlipMode>:

void u8x8_SetFlipMode(u8x8_t *u8x8, uint8_t mode)
{
    117c:	b510      	push	{r4, lr}
    117e:	000a      	movs	r2, r1
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
    1180:	6884      	ldr	r4, [r0, #8]
    1182:	2300      	movs	r3, #0
    1184:	210d      	movs	r1, #13
    1186:	47a0      	blx	r4
}
    1188:	bd10      	pop	{r4, pc}

0000118a <u8x8_SetContrast>:

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
    118a:	b510      	push	{r4, lr}
    118c:	000a      	movs	r2, r1
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
    118e:	6884      	ldr	r4, [r0, #8]
    1190:	2300      	movs	r3, #0
    1192:	210e      	movs	r1, #14
    1194:	47a0      	blx	r4
}
    1196:	bd10      	pop	{r4, pc}

00001198 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
    1198:	b510      	push	{r4, lr}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    119a:	6884      	ldr	r4, [r0, #8]
    119c:	2300      	movs	r3, #0
    119e:	2200      	movs	r2, #0
    11a0:	2110      	movs	r1, #16
    11a2:	47a0      	blx	r4
}
    11a4:	bd10      	pop	{r4, pc}
	...

000011a8 <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    11a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    11aa:	46c6      	mov	lr, r8
    11ac:	b500      	push	{lr}
    11ae:	0005      	movs	r5, r0
    11b0:	0014      	movs	r4, r2
    11b2:	001f      	movs	r7, r3
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
    11b4:	290e      	cmp	r1, #14
    11b6:	d04d      	beq.n	1254 <u8x8_d_st7565_common+0xac>
    11b8:	290f      	cmp	r1, #15
    11ba:	d003      	beq.n	11c4 <u8x8_d_st7565_common+0x1c>
    11bc:	290b      	cmp	r1, #11
    11be:	d03d      	beq.n	123c <u8x8_d_st7565_common+0x94>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
      u8x8_cad_EndTransfer(u8x8);
      break;
#endif
    default:
      return 0;
    11c0:	2000      	movs	r0, #0
    11c2:	e038      	b.n	1236 <u8x8_d_st7565_common+0x8e>
      u8x8_cad_StartTransfer(u8x8);
    11c4:	f7ff ff0f 	bl	fe6 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
    11c8:	797e      	ldrb	r6, [r7, #5]
      x *= 8;
    11ca:	00f6      	lsls	r6, r6, #3
    11cc:	b2f6      	uxtb	r6, r6
      x += u8x8->x_offset;
    11ce:	2322      	movs	r3, #34	; 0x22
    11d0:	5ceb      	ldrb	r3, [r5, r3]
    11d2:	18f6      	adds	r6, r6, r3
    11d4:	b2f3      	uxtb	r3, r6
    11d6:	4698      	mov	r8, r3
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
    11d8:	0919      	lsrs	r1, r3, #4
    11da:	2310      	movs	r3, #16
    11dc:	4319      	orrs	r1, r3
    11de:	b2c9      	uxtb	r1, r1
    11e0:	0028      	movs	r0, r5
    11e2:	f7ff feeb 	bl	fbc <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
    11e6:	210f      	movs	r1, #15
    11e8:	4643      	mov	r3, r8
    11ea:	4019      	ands	r1, r3
    11ec:	0028      	movs	r0, r5
    11ee:	f7ff fee5 	bl	fbc <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
    11f2:	79bb      	ldrb	r3, [r7, #6]
    11f4:	2150      	movs	r1, #80	; 0x50
    11f6:	4249      	negs	r1, r1
    11f8:	4319      	orrs	r1, r3
    11fa:	b2c9      	uxtb	r1, r1
    11fc:	0028      	movs	r0, r5
    11fe:	f7ff fedd 	bl	fbc <u8x8_cad_SendCmd>
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
    1202:	793e      	ldrb	r6, [r7, #4]
      c *= 8;
    1204:	00f6      	lsls	r6, r6, #3
    1206:	b2f6      	uxtb	r6, r6
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
    1208:	683f      	ldr	r7, [r7, #0]
      if ( c + x > 132u )
    120a:	4643      	mov	r3, r8
    120c:	18f3      	adds	r3, r6, r3
    120e:	2b84      	cmp	r3, #132	; 0x84
    1210:	d904      	bls.n	121c <u8x8_d_st7565_common+0x74>
	c -= x;
    1212:	267c      	movs	r6, #124	; 0x7c
    1214:	4276      	negs	r6, r6
    1216:	4643      	mov	r3, r8
    1218:	1af6      	subs	r6, r6, r3
    121a:	b2f6      	uxtb	r6, r6
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
    121c:	003a      	movs	r2, r7
    121e:	0031      	movs	r1, r6
    1220:	0028      	movs	r0, r5
    1222:	f7ff fed9 	bl	fd8 <u8x8_cad_SendData>
	arg_int--;
    1226:	3c01      	subs	r4, #1
    1228:	b2e4      	uxtb	r4, r4
      } while( arg_int > 0 );
    122a:	2c00      	cmp	r4, #0
    122c:	d1f6      	bne.n	121c <u8x8_d_st7565_common+0x74>
      u8x8_cad_EndTransfer(u8x8);
    122e:	0028      	movs	r0, r5
    1230:	f7ff fee0 	bl	ff4 <u8x8_cad_EndTransfer>
  }
  return 1;
    1234:	2001      	movs	r0, #1
}
    1236:	bc04      	pop	{r2}
    1238:	4690      	mov	r8, r2
    123a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ( arg_int == 0 )
    123c:	2a00      	cmp	r2, #0
    123e:	d104      	bne.n	124a <u8x8_d_st7565_common+0xa2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
    1240:	490c      	ldr	r1, [pc, #48]	; (1274 <u8x8_d_st7565_common+0xcc>)
    1242:	f7ff fede 	bl	1002 <u8x8_cad_SendSequence>
  return 1;
    1246:	2001      	movs	r0, #1
    1248:	e7f5      	b.n	1236 <u8x8_d_st7565_common+0x8e>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
    124a:	490b      	ldr	r1, [pc, #44]	; (1278 <u8x8_d_st7565_common+0xd0>)
    124c:	f7ff fed9 	bl	1002 <u8x8_cad_SendSequence>
  return 1;
    1250:	2001      	movs	r0, #1
    1252:	e7f0      	b.n	1236 <u8x8_d_st7565_common+0x8e>
      u8x8_cad_StartTransfer(u8x8);
    1254:	f7ff fec7 	bl	fe6 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
    1258:	2181      	movs	r1, #129	; 0x81
    125a:	0028      	movs	r0, r5
    125c:	f7ff feae 	bl	fbc <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
    1260:	08a1      	lsrs	r1, r4, #2
    1262:	0028      	movs	r0, r5
    1264:	f7ff feb1 	bl	fca <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
    1268:	0028      	movs	r0, r5
    126a:	f7ff fec3 	bl	ff4 <u8x8_cad_EndTransfer>
  return 1;
    126e:	2001      	movs	r0, #1
      break;
    1270:	e7e1      	b.n	1236 <u8x8_d_st7565_common+0x8e>
    1272:	46c0      	nop			; (mov r8, r8)
    1274:	0000b264 	.word	0x0000b264
    1278:	0000b26c 	.word	0x0000b26c

0000127c <u8x8_d_st7565_zolen_128x64>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_st7565_zolen_128x64(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    127c:	b570      	push	{r4, r5, r6, lr}
    127e:	0005      	movs	r5, r0
    1280:	000c      	movs	r4, r1
    1282:	0016      	movs	r6, r2
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
    1284:	f7ff ff90 	bl	11a8 <u8x8_d_st7565_common>
    1288:	2800      	cmp	r0, #0
    128a:	d12a      	bne.n	12e2 <u8x8_d_st7565_zolen_128x64+0x66>
  {
    /* msg not handled, then try here */
    switch(msg)
    128c:	2c0a      	cmp	r4, #10
    128e:	d009      	beq.n	12a4 <u8x8_d_st7565_zolen_128x64+0x28>
    1290:	2c0d      	cmp	r4, #13
    1292:	d010      	beq.n	12b6 <u8x8_d_st7565_zolen_128x64+0x3a>
    1294:	2c09      	cmp	r4, #9
    1296:	d125      	bne.n	12e4 <u8x8_d_st7565_zolen_128x64+0x68>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_128x64_display_info);
    1298:	4913      	ldr	r1, [pc, #76]	; (12e8 <u8x8_d_st7565_zolen_128x64+0x6c>)
    129a:	0028      	movs	r0, r5
    129c:	f7ff ff16 	bl	10cc <u8x8_d_helper_display_setup_memory>
	break;
      default:
	return 0;		/* msg unknown */
    }
  }
  return 1;
    12a0:	2001      	movs	r0, #1
	break;
    12a2:	e01f      	b.n	12e4 <u8x8_d_st7565_zolen_128x64+0x68>
	u8x8_d_helper_display_init(u8x8);
    12a4:	0028      	movs	r0, r5
    12a6:	f7ff ff16 	bl	10d6 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_zolen_128x64_init_seq);
    12aa:	4910      	ldr	r1, [pc, #64]	; (12ec <u8x8_d_st7565_zolen_128x64+0x70>)
    12ac:	0028      	movs	r0, r5
    12ae:	f7ff fea8 	bl	1002 <u8x8_cad_SendSequence>
  return 1;
    12b2:	2001      	movs	r0, #1
	break;
    12b4:	e016      	b.n	12e4 <u8x8_d_st7565_zolen_128x64+0x68>
	if ( arg_int == 0 )
    12b6:	2e00      	cmp	r6, #0
    12b8:	d009      	beq.n	12ce <u8x8_d_st7565_zolen_128x64+0x52>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_zflip1_seq);
    12ba:	490d      	ldr	r1, [pc, #52]	; (12f0 <u8x8_d_st7565_zolen_128x64+0x74>)
    12bc:	0028      	movs	r0, r5
    12be:	f7ff fea0 	bl	1002 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
    12c2:	682b      	ldr	r3, [r5, #0]
    12c4:	7cda      	ldrb	r2, [r3, #19]
    12c6:	2322      	movs	r3, #34	; 0x22
    12c8:	54ea      	strb	r2, [r5, r3]
  return 1;
    12ca:	2001      	movs	r0, #1
    12cc:	e00a      	b.n	12e4 <u8x8_d_st7565_zolen_128x64+0x68>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_zflip0_seq);
    12ce:	4909      	ldr	r1, [pc, #36]	; (12f4 <u8x8_d_st7565_zolen_128x64+0x78>)
    12d0:	0028      	movs	r0, r5
    12d2:	f7ff fe96 	bl	1002 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
    12d6:	682b      	ldr	r3, [r5, #0]
    12d8:	7c9a      	ldrb	r2, [r3, #18]
    12da:	2322      	movs	r3, #34	; 0x22
    12dc:	54ea      	strb	r2, [r5, r3]
  return 1;
    12de:	2001      	movs	r0, #1
    12e0:	e000      	b.n	12e4 <u8x8_d_st7565_zolen_128x64+0x68>
    12e2:	2001      	movs	r0, #1
}
    12e4:	bd70      	pop	{r4, r5, r6, pc}
    12e6:	46c0      	nop			; (mov r8, r8)
    12e8:	0000b2a8 	.word	0x0000b2a8
    12ec:	0000b284 	.word	0x0000b284
    12f0:	0000b27c 	.word	0x0000b27c
    12f4:	0000b274 	.word	0x0000b274

000012f8 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
    12f8:	b510      	push	{r4, lr}
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    12fa:	6944      	ldr	r4, [r0, #20]
    12fc:	2300      	movs	r3, #0
    12fe:	47a0      	blx	r4
}
    1300:	bd10      	pop	{r4, pc}

00001302 <u8x8_dummy_cb>:
/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
}
    1302:	2000      	movs	r0, #0
    1304:	4770      	bx	lr
	...

00001308 <u8x8_SetupDefaults>:
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    u8x8->display_info = NULL;
    1308:	2300      	movs	r3, #0
    130a:	6003      	str	r3, [r0, #0]
    u8x8->display_cb = u8x8_dummy_cb;
    130c:	4a07      	ldr	r2, [pc, #28]	; (132c <u8x8_SetupDefaults+0x24>)
    130e:	6082      	str	r2, [r0, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
    1310:	60c2      	str	r2, [r0, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
    1312:	6102      	str	r2, [r0, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    1314:	6142      	str	r2, [r0, #20]
    u8x8->is_font_inverse_mode = 0;
    1316:	2223      	movs	r2, #35	; 0x23
    1318:	5483      	strb	r3, [r0, r2]
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    131a:	3203      	adds	r2, #3
    131c:	5483      	strb	r3, [r0, r2]
    u8x8->bus_clock = 0;		/* issue 769 */
    131e:	6183      	str	r3, [r0, #24]
    u8x8->i2c_address = 255;
    1320:	33ff      	adds	r3, #255	; 0xff
    1322:	3a02      	subs	r2, #2
    1324:	5483      	strb	r3, [r0, r2]
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
    1326:	3204      	adds	r2, #4
    1328:	5483      	strb	r3, [r0, r2]
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
    132a:	4770      	bx	lr
    132c:	00001303 	.word	0x00001303

00001330 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    1330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1332:	0004      	movs	r4, r0
    1334:	000f      	movs	r7, r1
    1336:	0016      	movs	r6, r2
    1338:	001d      	movs	r5, r3
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
    133a:	f7ff ffe5 	bl	1308 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
    133e:	60a7      	str	r7, [r4, #8]
  u8x8->cad_cb = cad_cb;
    1340:	60e6      	str	r6, [r4, #12]
  u8x8->byte_cb = byte_cb;
    1342:	6125      	str	r5, [r4, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
    1344:	9b06      	ldr	r3, [sp, #24]
    1346:	6163      	str	r3, [r4, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    1348:	0020      	movs	r0, r4
    134a:	f7ff ff02 	bl	1152 <u8x8_SetupMemory>
}
    134e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001350 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1350:	e7fe      	b.n	1350 <Dummy_Handler>
	...

00001354 <Reset_Handler>:
{
    1354:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    1356:	4a12      	ldr	r2, [pc, #72]	; (13a0 <Reset_Handler+0x4c>)
    1358:	4b12      	ldr	r3, [pc, #72]	; (13a4 <Reset_Handler+0x50>)
    135a:	429a      	cmp	r2, r3
    135c:	d009      	beq.n	1372 <Reset_Handler+0x1e>
    135e:	4b11      	ldr	r3, [pc, #68]	; (13a4 <Reset_Handler+0x50>)
    1360:	4a0f      	ldr	r2, [pc, #60]	; (13a0 <Reset_Handler+0x4c>)
    1362:	e003      	b.n	136c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
    1364:	6811      	ldr	r1, [r2, #0]
    1366:	6019      	str	r1, [r3, #0]
    1368:	3304      	adds	r3, #4
    136a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    136c:	490e      	ldr	r1, [pc, #56]	; (13a8 <Reset_Handler+0x54>)
    136e:	428b      	cmp	r3, r1
    1370:	d3f8      	bcc.n	1364 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
    1372:	4b0e      	ldr	r3, [pc, #56]	; (13ac <Reset_Handler+0x58>)
    1374:	e002      	b.n	137c <Reset_Handler+0x28>
                *pDest++ = 0;
    1376:	2200      	movs	r2, #0
    1378:	601a      	str	r2, [r3, #0]
    137a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
    137c:	4a0c      	ldr	r2, [pc, #48]	; (13b0 <Reset_Handler+0x5c>)
    137e:	4293      	cmp	r3, r2
    1380:	d3f9      	bcc.n	1376 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1382:	4a0c      	ldr	r2, [pc, #48]	; (13b4 <Reset_Handler+0x60>)
    1384:	21ff      	movs	r1, #255	; 0xff
    1386:	4b0c      	ldr	r3, [pc, #48]	; (13b8 <Reset_Handler+0x64>)
    1388:	438b      	bics	r3, r1
    138a:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    138c:	4a0b      	ldr	r2, [pc, #44]	; (13bc <Reset_Handler+0x68>)
    138e:	6851      	ldr	r1, [r2, #4]
    1390:	2380      	movs	r3, #128	; 0x80
    1392:	430b      	orrs	r3, r1
    1394:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1396:	f005 f84b 	bl	6430 <__libc_init_array>
        main();
    139a:	f002 f9b3 	bl	3704 <main>
    139e:	e7fe      	b.n	139e <Reset_Handler+0x4a>
    13a0:	0000ba2c 	.word	0x0000ba2c
    13a4:	20000000 	.word	0x20000000
    13a8:	200009c8 	.word	0x200009c8
    13ac:	200009c8 	.word	0x200009c8
    13b0:	200010d4 	.word	0x200010d4
    13b4:	e000ed00 	.word	0xe000ed00
    13b8:	00000000 	.word	0x00000000
    13bc:	41004000 	.word	0x41004000

000013c0 <EXTERNAL_IRQ_0_init>:
//struct usart_sync_descriptor DEBUG_SERIAL;

//struct i2c_m_sync_desc EXT_I2C;

void EXTERNAL_IRQ_0_init(void)
{
    13c0:	b570      	push	{r4, r5, r6, lr}
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
    13c2:	4a16      	ldr	r2, [pc, #88]	; (141c <EXTERNAL_IRQ_0_init+0x5c>)
    13c4:	4b16      	ldr	r3, [pc, #88]	; (1420 <EXTERNAL_IRQ_0_init+0x60>)
    13c6:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    13c8:	2102      	movs	r1, #2
    13ca:	2384      	movs	r3, #132	; 0x84
    13cc:	22c0      	movs	r2, #192	; 0xc0
    13ce:	05d2      	lsls	r2, r2, #23
    13d0:	50d1      	str	r1, [r2, r3]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    13d2:	4b14      	ldr	r3, [pc, #80]	; (1424 <EXTERNAL_IRQ_0_init+0x64>)
    13d4:	22a8      	movs	r2, #168	; 0xa8
    13d6:	4914      	ldr	r1, [pc, #80]	; (1428 <EXTERNAL_IRQ_0_init+0x68>)
    13d8:	5099      	str	r1, [r3, r2]
    13da:	4914      	ldr	r1, [pc, #80]	; (142c <EXTERNAL_IRQ_0_init+0x6c>)
    13dc:	5099      	str	r1, [r3, r2]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    13de:	20c1      	movs	r0, #193	; 0xc1
    13e0:	5c1a      	ldrb	r2, [r3, r0]
    13e2:	2104      	movs	r1, #4
    13e4:	438a      	bics	r2, r1
    13e6:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    13e8:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    13ea:	2501      	movs	r5, #1
    13ec:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    13ee:	2401      	movs	r4, #1
    13f0:	4321      	orrs	r1, r4
    13f2:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    13f4:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    13f6:	22b0      	movs	r2, #176	; 0xb0
    13f8:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    13fa:	38b2      	subs	r0, #178	; 0xb2
    13fc:	4001      	ands	r1, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    13fe:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1400:	21c8      	movs	r1, #200	; 0xc8
    1402:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1404:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1406:	4322      	orrs	r2, r4
    1408:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    140a:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    140c:	3914      	subs	r1, #20
    140e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1410:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1412:	545a      	strb	r2, [r3, r1]
	gpio_set_pin_function(BTN, PINMUX_PB01A_EIC_EXTINT1);

	
	gpio_set_pin_function(EXT_I2C_IRQ, PORT_PB08A_EIC_EXTINT8);

	ext_irq_init();
    1414:	f000 f89a 	bl	154c <ext_irq_init>
}
    1418:	bd70      	pop	{r4, r5, r6, pc}
    141a:	46c0      	nop			; (mov r8, r8)
    141c:	00004003 	.word	0x00004003
    1420:	40000c00 	.word	0x40000c00
    1424:	41004400 	.word	0x41004400
    1428:	40020002 	.word	0x40020002
    142c:	c0020000 	.word	0xc0020000

00001430 <delay_driver_init>:




void delay_driver_init(void)
{
    1430:	b510      	push	{r4, lr}
	delay_init(SysTick);
    1432:	4802      	ldr	r0, [pc, #8]	; (143c <delay_driver_init+0xc>)
    1434:	f000 f848 	bl	14c8 <delay_init>
}
    1438:	bd10      	pop	{r4, pc}
    143a:	46c0      	nop			; (mov r8, r8)
    143c:	e000e010 	.word	0xe000e010

00001440 <system_init>:

void system_init(void)
{
    1440:	b5f0      	push	{r4, r5, r6, r7, lr}
    1442:	46c6      	mov	lr, r8
    1444:	b500      	push	{lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    1446:	f000 fb33 	bl	1ab0 <_init_chip>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    144a:	22c0      	movs	r2, #192	; 0xc0
    144c:	05d2      	lsls	r2, r2, #23
    144e:	2494      	movs	r4, #148	; 0x94
    1450:	2001      	movs	r0, #1
    1452:	5110      	str	r0, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1454:	2588      	movs	r5, #136	; 0x88
    1456:	5150      	str	r0, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1458:	4b17      	ldr	r3, [pc, #92]	; (14b8 <system_init+0x78>)
    145a:	21a8      	movs	r1, #168	; 0xa8
    145c:	4e17      	ldr	r6, [pc, #92]	; (14bc <system_init+0x7c>)
    145e:	505e      	str	r6, [r3, r1]
    1460:	26c0      	movs	r6, #192	; 0xc0
    1462:	0636      	lsls	r6, r6, #24
    1464:	46b0      	mov	r8, r6
    1466:	505e      	str	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1468:	26c0      	movs	r6, #192	; 0xc0
    146a:	46b4      	mov	ip, r6
    146c:	5d9e      	ldrb	r6, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    146e:	4386      	bics	r6, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1470:	4667      	mov	r7, ip
    1472:	55de      	strb	r6, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1474:	2680      	movs	r6, #128	; 0x80
    1476:	5116      	str	r6, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1478:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    147a:	4e11      	ldr	r6, [pc, #68]	; (14c0 <system_init+0x80>)
    147c:	505e      	str	r6, [r3, r1]
    147e:	4646      	mov	r6, r8
    1480:	505e      	str	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1482:	3707      	adds	r7, #7
    1484:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1486:	4386      	bics	r6, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1488:	55de      	strb	r6, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    148a:	2680      	movs	r6, #128	; 0x80
    148c:	0076      	lsls	r6, r6, #1
    148e:	5116      	str	r6, [r2, r4]
    1490:	2680      	movs	r6, #128	; 0x80
    1492:	0636      	lsls	r6, r6, #24
    1494:	5116      	str	r6, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1496:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1498:	2280      	movs	r2, #128	; 0x80
    149a:	05d2      	lsls	r2, r2, #23
    149c:	505a      	str	r2, [r3, r1]
    149e:	4a09      	ldr	r2, [pc, #36]	; (14c4 <system_init+0x84>)
    14a0:	505a      	str	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    14a2:	3137      	adds	r1, #55	; 0x37
    14a4:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    14a6:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    14a8:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(LED_R, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED_R, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
    14aa:	f7ff ff89 	bl	13c0 <EXTERNAL_IRQ_0_init>

	//RF_SPI_init();

	//DEBUG_SERIAL_init();

	delay_driver_init();
    14ae:	f7ff ffbf 	bl	1430 <delay_driver_init>
}
    14b2:	bc04      	pop	{r2}
    14b4:	4690      	mov	r8, r2
    14b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14b8:	41004400 	.word	0x41004400
    14bc:	40000001 	.word	0x40000001
    14c0:	40000080 	.word	0x40000080
    14c4:	c0008000 	.word	0xc0008000

000014c8 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    14c8:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
    14ca:	4b02      	ldr	r3, [pc, #8]	; (14d4 <delay_init+0xc>)
    14cc:	6018      	str	r0, [r3, #0]
    14ce:	f001 f907 	bl	26e0 <_delay_init>
}
    14d2:	bd10      	pop	{r4, pc}
    14d4:	20000de4 	.word	0x20000de4

000014d8 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    14d8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    14da:	4b04      	ldr	r3, [pc, #16]	; (14ec <delay_us+0x14>)
    14dc:	681c      	ldr	r4, [r3, #0]
    14de:	f000 fad7 	bl	1a90 <_get_cycles_for_us>
    14e2:	0001      	movs	r1, r0
    14e4:	0020      	movs	r0, r4
    14e6:	f001 f8ff 	bl	26e8 <_delay_cycles>
}
    14ea:	bd10      	pop	{r4, pc}
    14ec:	20000de4 	.word	0x20000de4

000014f0 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    14f0:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    14f2:	4b04      	ldr	r3, [pc, #16]	; (1504 <delay_ms+0x14>)
    14f4:	681c      	ldr	r4, [r3, #0]
    14f6:	f000 fad5 	bl	1aa4 <_get_cycles_for_ms>
    14fa:	0001      	movs	r1, r0
    14fc:	0020      	movs	r0, r4
    14fe:	f001 f8f3 	bl	26e8 <_delay_cycles>
}
    1502:	bd10      	pop	{r4, pc}
    1504:	20000de4 	.word	0x20000de4

00001508 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1508:	b570      	push	{r4, r5, r6, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    150a:	2503      	movs	r5, #3
    150c:	2400      	movs	r4, #0

	while (upper >= lower) {
    150e:	e007      	b.n	1520 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
    1510:	4a0d      	ldr	r2, [pc, #52]	; (1548 <process_ext_irq+0x40>)
    1512:	58b3      	ldr	r3, [r6, r2]
    1514:	2b00      	cmp	r3, #0
    1516:	d000      	beq.n	151a <process_ext_irq+0x12>
				ext_irqs[middle].cb();
    1518:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
    151a:	bd70      	pop	{r4, r5, r6, pc}
			upper = middle - 1;
    151c:	3a01      	subs	r2, #1
    151e:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
    1520:	42ac      	cmp	r4, r5
    1522:	d8fa      	bhi.n	151a <process_ext_irq+0x12>
		middle = (upper + lower) >> 1;
    1524:	192b      	adds	r3, r5, r4
    1526:	105b      	asrs	r3, r3, #1
    1528:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
    152a:	2a02      	cmp	r2, #2
    152c:	d8f5      	bhi.n	151a <process_ext_irq+0x12>
    152e:	21ff      	movs	r1, #255	; 0xff
    1530:	400b      	ands	r3, r1
		if (ext_irqs[middle].pin == pin) {
    1532:	00de      	lsls	r6, r3, #3
    1534:	4904      	ldr	r1, [pc, #16]	; (1548 <process_ext_irq+0x40>)
    1536:	1989      	adds	r1, r1, r6
    1538:	6849      	ldr	r1, [r1, #4]
    153a:	4281      	cmp	r1, r0
    153c:	d0e8      	beq.n	1510 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
    153e:	d2ed      	bcs.n	151c <process_ext_irq+0x14>
			lower = middle + 1;
    1540:	3201      	adds	r2, #1
    1542:	b2d4      	uxtb	r4, r2
    1544:	e7ec      	b.n	1520 <process_ext_irq+0x18>
    1546:	46c0      	nop			; (mov r8, r8)
    1548:	20000de8 	.word	0x20000de8

0000154c <ext_irq_init>:
{
    154c:	b510      	push	{r4, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    154e:	2300      	movs	r3, #0
    1550:	e009      	b.n	1566 <ext_irq_init+0x1a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    1552:	4a08      	ldr	r2, [pc, #32]	; (1574 <ext_irq_init+0x28>)
    1554:	00d9      	lsls	r1, r3, #3
    1556:	1850      	adds	r0, r2, r1
    1558:	2401      	movs	r4, #1
    155a:	4264      	negs	r4, r4
    155c:	6044      	str	r4, [r0, #4]
		ext_irqs[i].cb  = NULL;
    155e:	2000      	movs	r0, #0
    1560:	5088      	str	r0, [r1, r2]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1562:	3301      	adds	r3, #1
    1564:	b29b      	uxth	r3, r3
    1566:	2b02      	cmp	r3, #2
    1568:	d9f3      	bls.n	1552 <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
    156a:	4803      	ldr	r0, [pc, #12]	; (1578 <ext_irq_init+0x2c>)
    156c:	f000 fab6 	bl	1adc <_ext_irq_init>
}
    1570:	bd10      	pop	{r4, pc}
    1572:	46c0      	nop			; (mov r8, r8)
    1574:	20000de8 	.word	0x20000de8
    1578:	00001509 	.word	0x00001509

0000157c <ext_irq_register>:
{
    157c:	b5f0      	push	{r4, r5, r6, r7, lr}
    157e:	46d6      	mov	lr, sl
    1580:	464f      	mov	r7, r9
    1582:	4646      	mov	r6, r8
    1584:	b5c0      	push	{r6, r7, lr}
    1586:	b084      	sub	sp, #16
	uint8_t i = 0, j = 0;
    1588:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
    158a:	2b02      	cmp	r3, #2
    158c:	d80c      	bhi.n	15a8 <ext_irq_register+0x2c>
		if (ext_irqs[i].pin == pin) {
    158e:	00dc      	lsls	r4, r3, #3
    1590:	4a32      	ldr	r2, [pc, #200]	; (165c <ext_irq_register+0xe0>)
    1592:	1912      	adds	r2, r2, r4
    1594:	6852      	ldr	r2, [r2, #4]
    1596:	4282      	cmp	r2, r0
    1598:	d002      	beq.n	15a0 <ext_irq_register+0x24>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    159a:	3301      	adds	r3, #1
    159c:	b2db      	uxtb	r3, r3
    159e:	e7f4      	b.n	158a <ext_irq_register+0xe>
			ext_irqs[i].cb = cb;
    15a0:	4b2e      	ldr	r3, [pc, #184]	; (165c <ext_irq_register+0xe0>)
    15a2:	50e1      	str	r1, [r4, r3]
			found          = true;
    15a4:	2601      	movs	r6, #1
			break;
    15a6:	e000      	b.n	15aa <ext_irq_register+0x2e>
	bool    found = false;
    15a8:	2600      	movs	r6, #0
	if (NULL == cb) {
    15aa:	2900      	cmp	r1, #0
    15ac:	d00c      	beq.n	15c8 <ext_irq_register+0x4c>
	if (!found) {
    15ae:	2e00      	cmp	r6, #0
    15b0:	d142      	bne.n	1638 <ext_irq_register+0xbc>
    15b2:	2300      	movs	r3, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    15b4:	2b02      	cmp	r3, #2
    15b6:	d811      	bhi.n	15dc <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
    15b8:	00da      	lsls	r2, r3, #3
    15ba:	4d28      	ldr	r5, [pc, #160]	; (165c <ext_irq_register+0xe0>)
    15bc:	5952      	ldr	r2, [r2, r5]
    15be:	2a00      	cmp	r2, #0
    15c0:	d007      	beq.n	15d2 <ext_irq_register+0x56>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    15c2:	3301      	adds	r3, #1
    15c4:	b2db      	uxtb	r3, r3
    15c6:	e7f5      	b.n	15b4 <ext_irq_register+0x38>
		if (!found) {
    15c8:	2e00      	cmp	r6, #0
    15ca:	d040      	beq.n	164e <ext_irq_register+0xd2>
		return _ext_irq_enable(pin, false);
    15cc:	f000 fad6 	bl	1b7c <_ext_irq_enable>
    15d0:	e037      	b.n	1642 <ext_irq_register+0xc6>
				ext_irqs[i].cb  = cb;
    15d2:	00dc      	lsls	r4, r3, #3
    15d4:	5161      	str	r1, [r4, r5]
				ext_irqs[i].pin = pin;
    15d6:	192c      	adds	r4, r5, r4
    15d8:	6060      	str	r0, [r4, #4]
				found           = true;
    15da:	2601      	movs	r6, #1
    15dc:	2200      	movs	r2, #0
    15de:	e001      	b.n	15e4 <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    15e0:	3201      	adds	r2, #1
    15e2:	b2d2      	uxtb	r2, r2
    15e4:	2a02      	cmp	r2, #2
    15e6:	d827      	bhi.n	1638 <ext_irq_register+0xbc>
    15e8:	2b02      	cmp	r3, #2
    15ea:	d825      	bhi.n	1638 <ext_irq_register+0xbc>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    15ec:	9301      	str	r3, [sp, #4]
    15ee:	491b      	ldr	r1, [pc, #108]	; (165c <ext_irq_register+0xe0>)
    15f0:	00dc      	lsls	r4, r3, #3
    15f2:	190c      	adds	r4, r1, r4
    15f4:	6867      	ldr	r7, [r4, #4]
    15f6:	00d4      	lsls	r4, r2, #3
    15f8:	1909      	adds	r1, r1, r4
    15fa:	6849      	ldr	r1, [r1, #4]
    15fc:	428f      	cmp	r7, r1
    15fe:	d2ef      	bcs.n	15e0 <ext_irq_register+0x64>
    1600:	1c4c      	adds	r4, r1, #1
    1602:	d0ed      	beq.n	15e0 <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
    1604:	a902      	add	r1, sp, #8
    1606:	468c      	mov	ip, r1
    1608:	4c14      	ldr	r4, [pc, #80]	; (165c <ext_irq_register+0xe0>)
    160a:	46a0      	mov	r8, r4
    160c:	00d4      	lsls	r4, r2, #3
    160e:	46a1      	mov	r9, r4
    1610:	4644      	mov	r4, r8
    1612:	444c      	add	r4, r9
    1614:	4665      	mov	r5, ip
    1616:	cc82      	ldmia	r4!, {r1, r7}
    1618:	c582      	stmia	r5!, {r1, r7}
				ext_irqs[j] = ext_irqs[i];
    161a:	9901      	ldr	r1, [sp, #4]
    161c:	00c9      	lsls	r1, r1, #3
    161e:	468a      	mov	sl, r1
    1620:	4649      	mov	r1, r9
    1622:	4441      	add	r1, r8
    1624:	4644      	mov	r4, r8
    1626:	4454      	add	r4, sl
    1628:	cca0      	ldmia	r4!, {r5, r7}
    162a:	c1a0      	stmia	r1!, {r5, r7}
				ext_irqs[i] = tmp;
    162c:	4645      	mov	r5, r8
    162e:	4455      	add	r5, sl
    1630:	4661      	mov	r1, ip
    1632:	c990      	ldmia	r1!, {r4, r7}
    1634:	c590      	stmia	r5!, {r4, r7}
    1636:	e7d3      	b.n	15e0 <ext_irq_register+0x64>
	if (!found) {
    1638:	2e00      	cmp	r6, #0
    163a:	d00b      	beq.n	1654 <ext_irq_register+0xd8>
	return _ext_irq_enable(pin, true);
    163c:	2101      	movs	r1, #1
    163e:	f000 fa9d 	bl	1b7c <_ext_irq_enable>
}
    1642:	b004      	add	sp, #16
    1644:	bc1c      	pop	{r2, r3, r4}
    1646:	4690      	mov	r8, r2
    1648:	4699      	mov	r9, r3
    164a:	46a2      	mov	sl, r4
    164c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
    164e:	200d      	movs	r0, #13
    1650:	4240      	negs	r0, r0
    1652:	e7f6      	b.n	1642 <ext_irq_register+0xc6>
		return ERR_INVALID_ARG;
    1654:	200d      	movs	r0, #13
    1656:	4240      	negs	r0, r0
    1658:	e7f3      	b.n	1642 <ext_irq_register+0xc6>
    165a:	46c0      	nop			; (mov r8, r8)
    165c:	20000de8 	.word	0x20000de8

00001660 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    1660:	b510      	push	{r4, lr}
    1662:	b084      	sub	sp, #16
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    1664:	3814      	subs	r0, #20
    1666:	8b84      	ldrh	r4, [r0, #28]
    1668:	ab01      	add	r3, sp, #4
    166a:	801c      	strh	r4, [r3, #0]
	msg.len    = n;
    166c:	0014      	movs	r4, r2
    166e:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    1670:	4a06      	ldr	r2, [pc, #24]	; (168c <i2c_m_sync_write+0x2c>)
    1672:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
    1674:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    1676:	0019      	movs	r1, r3
    1678:	f000 fd48 	bl	210c <_i2c_m_sync_transfer>

	if (ret) {
    167c:	2800      	cmp	r0, #0
    167e:	d102      	bne.n	1686 <i2c_m_sync_write+0x26>
		return ret;
	}

	return n;
}
    1680:	0020      	movs	r0, r4
    1682:	b004      	add	sp, #16
    1684:	bd10      	pop	{r4, pc}
		return ret;
    1686:	0004      	movs	r4, r0
    1688:	e7fa      	b.n	1680 <i2c_m_sync_write+0x20>
    168a:	46c0      	nop			; (mov r8, r8)
    168c:	ffff8000 	.word	0xffff8000

00001690 <i2c_m_sync_read>:
{
    1690:	b510      	push	{r4, lr}
    1692:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
    1694:	3814      	subs	r0, #20
    1696:	8b84      	ldrh	r4, [r0, #28]
    1698:	ab01      	add	r3, sp, #4
    169a:	801c      	strh	r4, [r3, #0]
	msg.len    = n;
    169c:	0014      	movs	r4, r2
    169e:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    16a0:	4a06      	ldr	r2, [pc, #24]	; (16bc <i2c_m_sync_read+0x2c>)
    16a2:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
    16a4:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    16a6:	0019      	movs	r1, r3
    16a8:	f000 fd30 	bl	210c <_i2c_m_sync_transfer>
	if (ret) {
    16ac:	2800      	cmp	r0, #0
    16ae:	d102      	bne.n	16b6 <i2c_m_sync_read+0x26>
}
    16b0:	0020      	movs	r0, r4
    16b2:	b004      	add	sp, #16
    16b4:	bd10      	pop	{r4, pc}
		return ret;
    16b6:	0004      	movs	r4, r0
    16b8:	e7fa      	b.n	16b0 <i2c_m_sync_read+0x20>
    16ba:	46c0      	nop			; (mov r8, r8)
    16bc:	ffff8001 	.word	0xffff8001

000016c0 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    16c0:	b570      	push	{r4, r5, r6, lr}
    16c2:	0004      	movs	r4, r0
    16c4:	000d      	movs	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    16c6:	1e43      	subs	r3, r0, #1
    16c8:	4198      	sbcs	r0, r3
    16ca:	b2c0      	uxtb	r0, r0
    16cc:	225e      	movs	r2, #94	; 0x5e
    16ce:	4907      	ldr	r1, [pc, #28]	; (16ec <i2c_m_sync_init+0x2c>)
    16d0:	f000 f9c8 	bl	1a64 <assert>

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    16d4:	0029      	movs	r1, r5
    16d6:	0020      	movs	r0, r4
    16d8:	f000 fc8c 	bl	1ff4 <_i2c_m_sync_init>
	if (init_status) {
    16dc:	2800      	cmp	r0, #0
    16de:	d103      	bne.n	16e8 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    16e0:	4b03      	ldr	r3, [pc, #12]	; (16f0 <i2c_m_sync_init+0x30>)
    16e2:	61a3      	str	r3, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
    16e4:	4b03      	ldr	r3, [pc, #12]	; (16f4 <i2c_m_sync_init+0x34>)
    16e6:	6163      	str	r3, [r4, #20]

	return ERR_NONE;
}
    16e8:	bd70      	pop	{r4, r5, r6, pc}
    16ea:	46c0      	nop			; (mov r8, r8)
    16ec:	0000b2c0 	.word	0x0000b2c0
    16f0:	00001691 	.word	0x00001691
    16f4:	00001661 	.word	0x00001661

000016f8 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    16f8:	b510      	push	{r4, lr}
	return _i2c_m_sync_enable(&i2c->device);
    16fa:	f000 fccd 	bl	2098 <_i2c_m_sync_enable>
}
    16fe:	bd10      	pop	{r4, pc}

00001700 <i2c_m_sync_set_slaveaddr>:
/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    1700:	0589      	lsls	r1, r1, #22
    1702:	0d89      	lsrs	r1, r1, #22
    1704:	2380      	movs	r3, #128	; 0x80
    1706:	00db      	lsls	r3, r3, #3
    1708:	401a      	ands	r2, r3
    170a:	430a      	orrs	r2, r1
    170c:	8382      	strh	r2, [r0, #28]
}
    170e:	0010      	movs	r0, r2
    1710:	4770      	bx	lr
	...

00001714 <i2c_m_sync_cmd_read>:

/**
 * \brief Sync version of i2c read command
 */
int32_t i2c_m_sync_cmd_read(struct i2c_m_sync_desc *i2c, uint8_t reg, uint8_t *buffer, uint8_t length)
{
    1714:	b570      	push	{r4, r5, r6, lr}
    1716:	b086      	sub	sp, #24
    1718:	0004      	movs	r4, r0
    171a:	0016      	movs	r6, r2
    171c:	001d      	movs	r5, r3
    171e:	466b      	mov	r3, sp
    1720:	71d9      	strb	r1, [r3, #7]
    1722:	3307      	adds	r3, #7
	struct _i2c_m_msg msg;
	int32_t           ret;

	msg.addr   = i2c->slave_addr;
    1724:	8b82      	ldrh	r2, [r0, #28]
    1726:	a903      	add	r1, sp, #12
    1728:	800a      	strh	r2, [r1, #0]
	msg.len    = 1;
    172a:	2201      	movs	r2, #1
    172c:	604a      	str	r2, [r1, #4]
	msg.flags  = 0;
    172e:	2200      	movs	r2, #0
    1730:	804a      	strh	r2, [r1, #2]
	msg.buffer = &reg;
    1732:	608b      	str	r3, [r1, #8]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    1734:	f000 fcea 	bl	210c <_i2c_m_sync_transfer>

	if (ret != 0) {
    1738:	2800      	cmp	r0, #0
    173a:	d001      	beq.n	1740 <i2c_m_sync_cmd_read+0x2c>
		/* error occurred */
		return ret;
	}

	return ERR_NONE;
}
    173c:	b006      	add	sp, #24
    173e:	bd70      	pop	{r4, r5, r6, pc}
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    1740:	a903      	add	r1, sp, #12
    1742:	4b04      	ldr	r3, [pc, #16]	; (1754 <i2c_m_sync_cmd_read+0x40>)
    1744:	804b      	strh	r3, [r1, #2]
	msg.buffer = buffer;
    1746:	608e      	str	r6, [r1, #8]
	msg.len    = length;
    1748:	604d      	str	r5, [r1, #4]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    174a:	0020      	movs	r0, r4
    174c:	f000 fcde 	bl	210c <_i2c_m_sync_transfer>
    1750:	e7f4      	b.n	173c <i2c_m_sync_cmd_read+0x28>
    1752:	46c0      	nop			; (mov r8, r8)
    1754:	ffff8001 	.word	0xffff8001

00001758 <i2c_m_sync_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
    1758:	3014      	adds	r0, #20
    175a:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
    175c:	2000      	movs	r0, #0
    175e:	4770      	bx	lr

00001760 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1760:	b570      	push	{r4, r5, r6, lr}
    1762:	0004      	movs	r4, r0
    1764:	000d      	movs	r5, r1
    1766:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
    1768:	2800      	cmp	r0, #0
    176a:	d00e      	beq.n	178a <io_write+0x2a>
    176c:	2900      	cmp	r1, #0
    176e:	d00a      	beq.n	1786 <io_write+0x26>
    1770:	2001      	movs	r0, #1
    1772:	2234      	movs	r2, #52	; 0x34
    1774:	4906      	ldr	r1, [pc, #24]	; (1790 <io_write+0x30>)
    1776:	f000 f975 	bl	1a64 <assert>
	return io_descr->write(io_descr, buf, length);
    177a:	6823      	ldr	r3, [r4, #0]
    177c:	0032      	movs	r2, r6
    177e:	0029      	movs	r1, r5
    1780:	0020      	movs	r0, r4
    1782:	4798      	blx	r3
}
    1784:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
    1786:	2000      	movs	r0, #0
    1788:	e7f3      	b.n	1772 <io_write+0x12>
    178a:	2000      	movs	r0, #0
    178c:	e7f1      	b.n	1772 <io_write+0x12>
    178e:	46c0      	nop			; (mov r8, r8)
    1790:	0000b2dc 	.word	0x0000b2dc

00001794 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1794:	b570      	push	{r4, r5, r6, lr}
    1796:	0004      	movs	r4, r0
    1798:	000d      	movs	r5, r1
    179a:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
    179c:	2800      	cmp	r0, #0
    179e:	d00e      	beq.n	17be <io_read+0x2a>
    17a0:	2900      	cmp	r1, #0
    17a2:	d00a      	beq.n	17ba <io_read+0x26>
    17a4:	2001      	movs	r0, #1
    17a6:	223d      	movs	r2, #61	; 0x3d
    17a8:	4906      	ldr	r1, [pc, #24]	; (17c4 <io_read+0x30>)
    17aa:	f000 f95b 	bl	1a64 <assert>
	return io_descr->read(io_descr, buf, length);
    17ae:	6863      	ldr	r3, [r4, #4]
    17b0:	0032      	movs	r2, r6
    17b2:	0029      	movs	r1, r5
    17b4:	0020      	movs	r0, r4
    17b6:	4798      	blx	r3
}
    17b8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
    17ba:	2000      	movs	r0, #0
    17bc:	e7f3      	b.n	17a6 <io_read+0x12>
    17be:	2000      	movs	r0, #0
    17c0:	e7f1      	b.n	17a6 <io_read+0x12>
    17c2:	46c0      	nop			; (mov r8, r8)
    17c4:	0000b2dc 	.word	0x0000b2dc

000017c8 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    17c8:	b570      	push	{r4, r5, r6, lr}
    17ca:	0004      	movs	r4, r0
    17cc:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    17ce:	2800      	cmp	r0, #0
    17d0:	d017      	beq.n	1802 <spi_m_sync_init+0x3a>
    17d2:	2900      	cmp	r1, #0
    17d4:	d013      	beq.n	17fe <spi_m_sync_init+0x36>
    17d6:	2001      	movs	r0, #1
    17d8:	2240      	movs	r2, #64	; 0x40
    17da:	490b      	ldr	r1, [pc, #44]	; (1808 <spi_m_sync_init+0x40>)
    17dc:	f000 f942 	bl	1a64 <assert>
	spi->dev.prvt = (void *)hw;
    17e0:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    17e2:	1d20      	adds	r0, r4, #4
    17e4:	0029      	movs	r1, r5
    17e6:	f000 fd9d 	bl	2324 <_spi_m_sync_init>

	if (rc < 0) {
    17ea:	2800      	cmp	r0, #0
    17ec:	db06      	blt.n	17fc <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    17ee:	4b07      	ldr	r3, [pc, #28]	; (180c <spi_m_sync_init+0x44>)
    17f0:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    17f2:	4b07      	ldr	r3, [pc, #28]	; (1810 <spi_m_sync_init+0x48>)
    17f4:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    17f6:	4b07      	ldr	r3, [pc, #28]	; (1814 <spi_m_sync_init+0x4c>)
    17f8:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    17fa:	2000      	movs	r0, #0
}
    17fc:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && hw);
    17fe:	2000      	movs	r0, #0
    1800:	e7ea      	b.n	17d8 <spi_m_sync_init+0x10>
    1802:	2000      	movs	r0, #0
    1804:	e7e8      	b.n	17d8 <spi_m_sync_init+0x10>
    1806:	46c0      	nop			; (mov r8, r8)
    1808:	0000b2f0 	.word	0x0000b2f0
    180c:	ffff8000 	.word	0xffff8000
    1810:	000018ad 	.word	0x000018ad
    1814:	00001879 	.word	0x00001879

00001818 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    1818:	b510      	push	{r4, lr}
    181a:	0004      	movs	r4, r0
	ASSERT(spi);
    181c:	1e43      	subs	r3, r0, #1
    181e:	4198      	sbcs	r0, r3
    1820:	b2c0      	uxtb	r0, r0
    1822:	2257      	movs	r2, #87	; 0x57
    1824:	4903      	ldr	r1, [pc, #12]	; (1834 <spi_m_sync_enable+0x1c>)
    1826:	f000 f91d 	bl	1a64 <assert>
	_spi_m_sync_enable(&spi->dev);
    182a:	1d20      	adds	r0, r4, #4
    182c:	f000 fe54 	bl	24d8 <_spi_m_sync_enable>
}
    1830:	bd10      	pop	{r4, pc}
    1832:	46c0      	nop			; (mov r8, r8)
    1834:	0000b2f0 	.word	0x0000b2f0

00001838 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    1838:	b530      	push	{r4, r5, lr}
    183a:	b087      	sub	sp, #28
    183c:	0004      	movs	r4, r0
    183e:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    1840:	2800      	cmp	r0, #0
    1842:	d015      	beq.n	1870 <spi_m_sync_transfer+0x38>
    1844:	2900      	cmp	r1, #0
    1846:	d011      	beq.n	186c <spi_m_sync_transfer+0x34>
    1848:	2001      	movs	r0, #1
    184a:	22b3      	movs	r2, #179	; 0xb3
    184c:	4909      	ldr	r1, [pc, #36]	; (1874 <spi_m_sync_transfer+0x3c>)
    184e:	f000 f909 	bl	1a64 <assert>

	msg.txbuf = p_xfer->txbuf;
    1852:	682b      	ldr	r3, [r5, #0]
    1854:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
    1856:	686b      	ldr	r3, [r5, #4]
    1858:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
    185a:	68ab      	ldr	r3, [r5, #8]
    185c:	9301      	str	r3, [sp, #4]
    185e:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    1860:	1d20      	adds	r0, r4, #4
    1862:	a903      	add	r1, sp, #12
    1864:	f000 fe50 	bl	2508 <_spi_m_sync_trans>
}
    1868:	b007      	add	sp, #28
    186a:	bd30      	pop	{r4, r5, pc}
	ASSERT(spi && p_xfer);
    186c:	2000      	movs	r0, #0
    186e:	e7ec      	b.n	184a <spi_m_sync_transfer+0x12>
    1870:	2000      	movs	r0, #0
    1872:	e7ea      	b.n	184a <spi_m_sync_transfer+0x12>
    1874:	0000b2f0 	.word	0x0000b2f0

00001878 <_spi_m_sync_io_write>:
{
    1878:	b570      	push	{r4, r5, r6, lr}
    187a:	b084      	sub	sp, #16
    187c:	0004      	movs	r4, r0
    187e:	000e      	movs	r6, r1
    1880:	0015      	movs	r5, r2
	ASSERT(io);
    1882:	1e43      	subs	r3, r0, #1
    1884:	4198      	sbcs	r0, r3
    1886:	b2c0      	uxtb	r0, r0
    1888:	22a3      	movs	r2, #163	; 0xa3
    188a:	4907      	ldr	r1, [pc, #28]	; (18a8 <_spi_m_sync_io_write+0x30>)
    188c:	f000 f8ea 	bl	1a64 <assert>
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    1890:	0020      	movs	r0, r4
    1892:	380c      	subs	r0, #12
	xfer.rxbuf = 0;
    1894:	2300      	movs	r3, #0
    1896:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    1898:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    189a:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    189c:	a901      	add	r1, sp, #4
    189e:	f7ff ffcb 	bl	1838 <spi_m_sync_transfer>
}
    18a2:	b004      	add	sp, #16
    18a4:	bd70      	pop	{r4, r5, r6, pc}
    18a6:	46c0      	nop			; (mov r8, r8)
    18a8:	0000b2f0 	.word	0x0000b2f0

000018ac <_spi_m_sync_io_read>:
{
    18ac:	b570      	push	{r4, r5, r6, lr}
    18ae:	b084      	sub	sp, #16
    18b0:	0004      	movs	r4, r0
    18b2:	000e      	movs	r6, r1
    18b4:	0015      	movs	r5, r2
	ASSERT(io);
    18b6:	1e43      	subs	r3, r0, #1
    18b8:	4198      	sbcs	r0, r3
    18ba:	b2c0      	uxtb	r0, r0
    18bc:	2287      	movs	r2, #135	; 0x87
    18be:	4907      	ldr	r1, [pc, #28]	; (18dc <_spi_m_sync_io_read+0x30>)
    18c0:	f000 f8d0 	bl	1a64 <assert>
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    18c4:	0020      	movs	r0, r4
    18c6:	380c      	subs	r0, #12
	xfer.rxbuf = buf;
    18c8:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    18ca:	2300      	movs	r3, #0
    18cc:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    18ce:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    18d0:	a901      	add	r1, sp, #4
    18d2:	f7ff ffb1 	bl	1838 <spi_m_sync_transfer>
}
    18d6:	b004      	add	sp, #16
    18d8:	bd70      	pop	{r4, r5, r6, pc}
    18da:	46c0      	nop			; (mov r8, r8)
    18dc:	0000b2f0 	.word	0x0000b2f0

000018e0 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    18e0:	b570      	push	{r4, r5, r6, lr}
    18e2:	0004      	movs	r4, r0
    18e4:	000d      	movs	r5, r1
	ASSERT(spi && io);
    18e6:	2800      	cmp	r0, #0
    18e8:	d00c      	beq.n	1904 <spi_m_sync_get_io_descriptor+0x24>
    18ea:	2900      	cmp	r1, #0
    18ec:	d008      	beq.n	1900 <spi_m_sync_get_io_descriptor+0x20>
    18ee:	2001      	movs	r0, #1
    18f0:	22bd      	movs	r2, #189	; 0xbd
    18f2:	4905      	ldr	r1, [pc, #20]	; (1908 <spi_m_sync_get_io_descriptor+0x28>)
    18f4:	f000 f8b6 	bl	1a64 <assert>
	*io = &spi->io;
    18f8:	340c      	adds	r4, #12
    18fa:	602c      	str	r4, [r5, #0]
	return 0;
}
    18fc:	2000      	movs	r0, #0
    18fe:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && io);
    1900:	2000      	movs	r0, #0
    1902:	e7f5      	b.n	18f0 <spi_m_sync_get_io_descriptor+0x10>
    1904:	2000      	movs	r0, #0
    1906:	e7f3      	b.n	18f0 <spi_m_sync_get_io_descriptor+0x10>
    1908:	0000b2f0 	.word	0x0000b2f0

0000190c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    190c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    190e:	0005      	movs	r5, r0
    1910:	000e      	movs	r6, r1
    1912:	0017      	movs	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    1914:	2800      	cmp	r0, #0
    1916:	d023      	beq.n	1960 <usart_sync_write+0x54>
    1918:	2900      	cmp	r1, #0
    191a:	d023      	beq.n	1964 <usart_sync_write+0x58>
    191c:	2a00      	cmp	r2, #0
    191e:	d123      	bne.n	1968 <usart_sync_write+0x5c>
    1920:	2000      	movs	r0, #0
    1922:	22f1      	movs	r2, #241	; 0xf1
    1924:	4911      	ldr	r1, [pc, #68]	; (196c <usart_sync_write+0x60>)
    1926:	f000 f89d 	bl	1a64 <assert>
	while (!_usart_sync_is_ready_to_send(&descr->device))
    192a:	002c      	movs	r4, r5
    192c:	3408      	adds	r4, #8
    192e:	0020      	movs	r0, r4
    1930:	f000 fb4f 	bl	1fd2 <_usart_sync_is_ready_to_send>
    1934:	2800      	cmp	r0, #0
    1936:	d0f8      	beq.n	192a <usart_sync_write+0x1e>
    1938:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    193a:	5d71      	ldrb	r1, [r6, r5]
    193c:	0020      	movs	r0, r4
    193e:	f000 fb40 	bl	1fc2 <_usart_sync_write_byte>
		while (!_usart_sync_is_ready_to_send(&descr->device))
    1942:	0020      	movs	r0, r4
    1944:	f000 fb45 	bl	1fd2 <_usart_sync_is_ready_to_send>
    1948:	2800      	cmp	r0, #0
    194a:	d0fa      	beq.n	1942 <usart_sync_write+0x36>
			;
	} while (++offset < length);
    194c:	3501      	adds	r5, #1
    194e:	42bd      	cmp	r5, r7
    1950:	d3f3      	bcc.n	193a <usart_sync_write+0x2e>
	while (!_usart_sync_is_transmit_done(&descr->device))
    1952:	0020      	movs	r0, r4
    1954:	f000 fb42 	bl	1fdc <_usart_sync_is_transmit_done>
    1958:	2800      	cmp	r0, #0
    195a:	d0fa      	beq.n	1952 <usart_sync_write+0x46>
		;
	return (int32_t)offset;
}
    195c:	0028      	movs	r0, r5
    195e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
    1960:	2000      	movs	r0, #0
    1962:	e7de      	b.n	1922 <usart_sync_write+0x16>
    1964:	2000      	movs	r0, #0
    1966:	e7dc      	b.n	1922 <usart_sync_write+0x16>
    1968:	2001      	movs	r0, #1
    196a:	e7da      	b.n	1922 <usart_sync_write+0x16>
    196c:	0000b30c 	.word	0x0000b30c

00001970 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1972:	46ce      	mov	lr, r9
    1974:	4647      	mov	r7, r8
    1976:	b580      	push	{r7, lr}
    1978:	1e05      	subs	r5, r0, #0
    197a:	4688      	mov	r8, r1
    197c:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    197e:	d01f      	beq.n	19c0 <usart_sync_read+0x50>
    1980:	2900      	cmp	r1, #0
    1982:	d01f      	beq.n	19c4 <usart_sync_read+0x54>
    1984:	2a00      	cmp	r2, #0
    1986:	d11f      	bne.n	19c8 <usart_sync_read+0x58>
    1988:	2000      	movs	r0, #0
    198a:	2286      	movs	r2, #134	; 0x86
    198c:	0052      	lsls	r2, r2, #1
    198e:	490f      	ldr	r1, [pc, #60]	; (19cc <usart_sync_read+0x5c>)
    1990:	f000 f868 	bl	1a64 <assert>
	uint32_t                      offset = 0;
    1994:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    1996:	002c      	movs	r4, r5
    1998:	3408      	adds	r4, #8
    199a:	0020      	movs	r0, r4
    199c:	f000 fb24 	bl	1fe8 <_usart_sync_is_byte_received>
    19a0:	2800      	cmp	r0, #0
    19a2:	d0f8      	beq.n	1996 <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    19a4:	4643      	mov	r3, r8
    19a6:	199f      	adds	r7, r3, r6
    19a8:	0020      	movs	r0, r4
    19aa:	f000 fb0e 	bl	1fca <_usart_sync_read_byte>
    19ae:	7038      	strb	r0, [r7, #0]
	} while (++offset < length);
    19b0:	3601      	adds	r6, #1
    19b2:	454e      	cmp	r6, r9
    19b4:	d3ef      	bcc.n	1996 <usart_sync_read+0x26>

	return (int32_t)offset;
}
    19b6:	0030      	movs	r0, r6
    19b8:	bc0c      	pop	{r2, r3}
    19ba:	4690      	mov	r8, r2
    19bc:	4699      	mov	r9, r3
    19be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
    19c0:	2000      	movs	r0, #0
    19c2:	e7e2      	b.n	198a <usart_sync_read+0x1a>
    19c4:	2000      	movs	r0, #0
    19c6:	e7e0      	b.n	198a <usart_sync_read+0x1a>
    19c8:	2001      	movs	r0, #1
    19ca:	e7de      	b.n	198a <usart_sync_read+0x1a>
    19cc:	0000b30c 	.word	0x0000b30c

000019d0 <usart_sync_init>:
{
    19d0:	b570      	push	{r4, r5, r6, lr}
    19d2:	0004      	movs	r4, r0
    19d4:	000d      	movs	r5, r1
	ASSERT(descr && hw);
    19d6:	2800      	cmp	r0, #0
    19d8:	d014      	beq.n	1a04 <usart_sync_init+0x34>
    19da:	2900      	cmp	r1, #0
    19dc:	d010      	beq.n	1a00 <usart_sync_init+0x30>
    19de:	2001      	movs	r0, #1
    19e0:	2234      	movs	r2, #52	; 0x34
    19e2:	4909      	ldr	r1, [pc, #36]	; (1a08 <usart_sync_init+0x38>)
    19e4:	f000 f83e 	bl	1a64 <assert>
	init_status = _usart_sync_init(&descr->device, hw);
    19e8:	0020      	movs	r0, r4
    19ea:	3008      	adds	r0, #8
    19ec:	0029      	movs	r1, r5
    19ee:	f000 facd 	bl	1f8c <_usart_sync_init>
	if (init_status) {
    19f2:	2800      	cmp	r0, #0
    19f4:	d103      	bne.n	19fe <usart_sync_init+0x2e>
	descr->io.read  = usart_sync_read;
    19f6:	4b05      	ldr	r3, [pc, #20]	; (1a0c <usart_sync_init+0x3c>)
    19f8:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_sync_write;
    19fa:	4b05      	ldr	r3, [pc, #20]	; (1a10 <usart_sync_init+0x40>)
    19fc:	6023      	str	r3, [r4, #0]
}
    19fe:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
    1a00:	2000      	movs	r0, #0
    1a02:	e7ed      	b.n	19e0 <usart_sync_init+0x10>
    1a04:	2000      	movs	r0, #0
    1a06:	e7eb      	b.n	19e0 <usart_sync_init+0x10>
    1a08:	0000b30c 	.word	0x0000b30c
    1a0c:	00001971 	.word	0x00001971
    1a10:	0000190d 	.word	0x0000190d

00001a14 <usart_sync_enable>:
{
    1a14:	b510      	push	{r4, lr}
    1a16:	0004      	movs	r4, r0
	ASSERT(descr);
    1a18:	1e43      	subs	r3, r0, #1
    1a1a:	4198      	sbcs	r0, r3
    1a1c:	b2c0      	uxtb	r0, r0
    1a1e:	2253      	movs	r2, #83	; 0x53
    1a20:	4904      	ldr	r1, [pc, #16]	; (1a34 <usart_sync_enable+0x20>)
    1a22:	f000 f81f 	bl	1a64 <assert>
	_usart_sync_enable(&descr->device);
    1a26:	0020      	movs	r0, r4
    1a28:	3008      	adds	r0, #8
    1a2a:	f000 fac1 	bl	1fb0 <_usart_sync_enable>
}
    1a2e:	2000      	movs	r0, #0
    1a30:	bd10      	pop	{r4, pc}
    1a32:	46c0      	nop			; (mov r8, r8)
    1a34:	0000b30c 	.word	0x0000b30c

00001a38 <usart_sync_get_io_descriptor>:
{
    1a38:	b570      	push	{r4, r5, r6, lr}
    1a3a:	0004      	movs	r4, r0
    1a3c:	000d      	movs	r5, r1
	ASSERT(descr && io);
    1a3e:	2800      	cmp	r0, #0
    1a40:	d00b      	beq.n	1a5a <usart_sync_get_io_descriptor+0x22>
    1a42:	2900      	cmp	r1, #0
    1a44:	d007      	beq.n	1a56 <usart_sync_get_io_descriptor+0x1e>
    1a46:	2001      	movs	r0, #1
    1a48:	2269      	movs	r2, #105	; 0x69
    1a4a:	4905      	ldr	r1, [pc, #20]	; (1a60 <usart_sync_get_io_descriptor+0x28>)
    1a4c:	f000 f80a 	bl	1a64 <assert>
	*io = &descr->io;
    1a50:	602c      	str	r4, [r5, #0]
}
    1a52:	2000      	movs	r0, #0
    1a54:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && io);
    1a56:	2000      	movs	r0, #0
    1a58:	e7f6      	b.n	1a48 <usart_sync_get_io_descriptor+0x10>
    1a5a:	2000      	movs	r0, #0
    1a5c:	e7f4      	b.n	1a48 <usart_sync_get_io_descriptor+0x10>
    1a5e:	46c0      	nop			; (mov r8, r8)
    1a60:	0000b30c 	.word	0x0000b30c

00001a64 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1a64:	2800      	cmp	r0, #0
    1a66:	d100      	bne.n	1a6a <assert+0x6>
		__asm("BKPT #0");
    1a68:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    1a6a:	4770      	bx	lr

00001a6c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    1a6c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    1a6e:	4a06      	ldr	r2, [pc, #24]	; (1a88 <_sbrk+0x1c>)
    1a70:	6812      	ldr	r2, [r2, #0]
    1a72:	2a00      	cmp	r2, #0
    1a74:	d004      	beq.n	1a80 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1a76:	4a04      	ldr	r2, [pc, #16]	; (1a88 <_sbrk+0x1c>)
    1a78:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1a7a:	18c3      	adds	r3, r0, r3
    1a7c:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    1a7e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1a80:	4902      	ldr	r1, [pc, #8]	; (1a8c <_sbrk+0x20>)
    1a82:	4a01      	ldr	r2, [pc, #4]	; (1a88 <_sbrk+0x1c>)
    1a84:	6011      	str	r1, [r2, #0]
    1a86:	e7f6      	b.n	1a76 <_sbrk+0xa>
    1a88:	20000e00 	.word	0x20000e00
    1a8c:	200030d8 	.word	0x200030d8

00001a90 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    1a90:	b510      	push	{r4, lr}
		return (us * (freq / 100000) - 1) / 10 + 1;
    1a92:	0103      	lsls	r3, r0, #4
    1a94:	1a1b      	subs	r3, r3, r0
    1a96:	0158      	lsls	r0, r3, #5
    1a98:	3801      	subs	r0, #1
    1a9a:	210a      	movs	r1, #10
    1a9c:	f002 f88e 	bl	3bbc <__udivsi3>
    1aa0:	3001      	adds	r0, #1
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1aa2:	bd10      	pop	{r4, pc}

00001aa4 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
    1aa4:	0103      	lsls	r3, r0, #4
    1aa6:	1a1b      	subs	r3, r3, r0
    1aa8:	015a      	lsls	r2, r3, #5
    1aaa:	2064      	movs	r0, #100	; 0x64
    1aac:	4350      	muls	r0, r2
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1aae:	4770      	bx	lr

00001ab0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1ab0:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    1ab2:	4a09      	ldr	r2, [pc, #36]	; (1ad8 <_init_chip+0x28>)
    1ab4:	6853      	ldr	r3, [r2, #4]
    1ab6:	2106      	movs	r1, #6
    1ab8:	430b      	orrs	r3, r1
    1aba:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    1abc:	f000 f902 	bl	1cc4 <_pm_init>
	_sysctrl_init_sources();
    1ac0:	f000 fd94 	bl	25ec <_sysctrl_init_sources>
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    1ac4:	2008      	movs	r0, #8
    1ac6:	f000 f8dd 	bl	1c84 <_gclk_init_generators_by_fref>
#endif
	_sysctrl_init_referenced_generators();
    1aca:	f000 fdc3 	bl	2654 <_sysctrl_init_referenced_generators>
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1ace:	20f7      	movs	r0, #247	; 0xf7
    1ad0:	f000 f8d8 	bl	1c84 <_gclk_init_generators_by_fref>
}
    1ad4:	bd10      	pop	{r4, pc}
    1ad6:	46c0      	nop			; (mov r8, r8)
    1ad8:	41004000 	.word	0x41004000

00001adc <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1adc:	4b23      	ldr	r3, [pc, #140]	; (1b6c <_ext_irq_init+0x90>)
    1ade:	785b      	ldrb	r3, [r3, #1]
    1ae0:	09db      	lsrs	r3, r3, #7
    1ae2:	d1fb      	bne.n	1adc <_ext_irq_init>
    1ae4:	4b21      	ldr	r3, [pc, #132]	; (1b6c <_ext_irq_init+0x90>)
    1ae6:	785b      	ldrb	r3, [r3, #1]
    1ae8:	09db      	lsrs	r3, r3, #7
    1aea:	d1fb      	bne.n	1ae4 <_ext_irq_init+0x8>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
    1aec:	4b1f      	ldr	r3, [pc, #124]	; (1b6c <_ext_irq_init+0x90>)
    1aee:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
    1af0:	079b      	lsls	r3, r3, #30
    1af2:	d50a      	bpl.n	1b0a <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
    1af4:	2200      	movs	r2, #0
    1af6:	4b1d      	ldr	r3, [pc, #116]	; (1b6c <_ext_irq_init+0x90>)
    1af8:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1afa:	4b1c      	ldr	r3, [pc, #112]	; (1b6c <_ext_irq_init+0x90>)
    1afc:	785b      	ldrb	r3, [r3, #1]
    1afe:	09db      	lsrs	r3, r3, #7
    1b00:	d1fb      	bne.n	1afa <_ext_irq_init+0x1e>
    1b02:	4b1a      	ldr	r3, [pc, #104]	; (1b6c <_ext_irq_init+0x90>)
    1b04:	785b      	ldrb	r3, [r3, #1]
    1b06:	09db      	lsrs	r3, r3, #7
    1b08:	d1fb      	bne.n	1b02 <_ext_irq_init+0x26>
	((Eic *)hw)->CTRL.reg = data;
    1b0a:	2201      	movs	r2, #1
    1b0c:	4b17      	ldr	r3, [pc, #92]	; (1b6c <_ext_irq_init+0x90>)
    1b0e:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1b10:	4b16      	ldr	r3, [pc, #88]	; (1b6c <_ext_irq_init+0x90>)
    1b12:	785b      	ldrb	r3, [r3, #1]
    1b14:	09db      	lsrs	r3, r3, #7
    1b16:	d1fb      	bne.n	1b10 <_ext_irq_init+0x34>
    1b18:	4b14      	ldr	r3, [pc, #80]	; (1b6c <_ext_irq_init+0x90>)
    1b1a:	785b      	ldrb	r3, [r3, #1]
    1b1c:	09db      	lsrs	r3, r3, #7
    1b1e:	d1fb      	bne.n	1b18 <_ext_irq_init+0x3c>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    1b20:	4b12      	ldr	r3, [pc, #72]	; (1b6c <_ext_irq_init+0x90>)
    1b22:	2200      	movs	r2, #0
    1b24:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1b26:	22a0      	movs	r2, #160	; 0xa0
    1b28:	00d2      	lsls	r2, r2, #3
    1b2a:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
    1b2c:	2280      	movs	r2, #128	; 0x80
    1b2e:	01d2      	lsls	r2, r2, #7
    1b30:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    1b32:	2290      	movs	r2, #144	; 0x90
    1b34:	619a      	str	r2, [r3, #24]
    1b36:	4a0e      	ldr	r2, [pc, #56]	; (1b70 <_ext_irq_init+0x94>)
    1b38:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
    1b3a:	781a      	ldrb	r2, [r3, #0]
    1b3c:	2102      	movs	r1, #2
    1b3e:	430a      	orrs	r2, r1
    1b40:	b2d2      	uxtb	r2, r2
    1b42:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    1b44:	4b09      	ldr	r3, [pc, #36]	; (1b6c <_ext_irq_init+0x90>)
    1b46:	785b      	ldrb	r3, [r3, #1]
    1b48:	09db      	lsrs	r3, r3, #7
    1b4a:	d1fb      	bne.n	1b44 <_ext_irq_init+0x68>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b4c:	4b09      	ldr	r3, [pc, #36]	; (1b74 <_ext_irq_init+0x98>)
    1b4e:	2210      	movs	r2, #16
    1b50:	2180      	movs	r1, #128	; 0x80
    1b52:	505a      	str	r2, [r3, r1]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1b54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b58:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b5c:	3101      	adds	r1, #1
    1b5e:	31ff      	adds	r1, #255	; 0xff
    1b60:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b62:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
    1b64:	4b04      	ldr	r3, [pc, #16]	; (1b78 <_ext_irq_init+0x9c>)
    1b66:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    1b68:	2000      	movs	r0, #0
    1b6a:	4770      	bx	lr
    1b6c:	40001800 	.word	0x40001800
    1b70:	0100020a 	.word	0x0100020a
    1b74:	e000e100 	.word	0xe000e100
    1b78:	20000e04 	.word	0x20000e04

00001b7c <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    1b7c:	b530      	push	{r4, r5, lr}
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;
    1b7e:	2300      	movs	r3, #0

	for (; i < ARRAY_SIZE(_map); i++) {
    1b80:	2b03      	cmp	r3, #3
    1b82:	d80b      	bhi.n	1b9c <_ext_irq_enable+0x20>
		if (_map[i].pin == pin) {
    1b84:	00dc      	lsls	r4, r3, #3
    1b86:	4a10      	ldr	r2, [pc, #64]	; (1bc8 <_ext_irq_enable+0x4c>)
    1b88:	1912      	adds	r2, r2, r4
    1b8a:	6852      	ldr	r2, [r2, #4]
    1b8c:	4282      	cmp	r2, r0
    1b8e:	d002      	beq.n	1b96 <_ext_irq_enable+0x1a>
	for (; i < ARRAY_SIZE(_map); i++) {
    1b90:	3301      	adds	r3, #1
    1b92:	b2db      	uxtb	r3, r3
    1b94:	e7f4      	b.n	1b80 <_ext_irq_enable+0x4>
			extint = _map[i].extint;
    1b96:	4b0c      	ldr	r3, [pc, #48]	; (1bc8 <_ext_irq_enable+0x4c>)
    1b98:	5ce2      	ldrb	r2, [r4, r3]
			break;
    1b9a:	e000      	b.n	1b9e <_ext_irq_enable+0x22>
	uint8_t extint = INVALID_EXTINT_NUMBER;
    1b9c:	22ff      	movs	r2, #255	; 0xff
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    1b9e:	2aff      	cmp	r2, #255	; 0xff
    1ba0:	d00e      	beq.n	1bc0 <_ext_irq_enable+0x44>
		return ERR_INVALID_ARG;
	}

	if (enable) {
    1ba2:	2900      	cmp	r1, #0
    1ba4:	d106      	bne.n	1bb4 <_ext_irq_enable+0x38>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    1ba6:	2301      	movs	r3, #1
    1ba8:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = mask;
    1baa:	4a08      	ldr	r2, [pc, #32]	; (1bcc <_ext_irq_enable+0x50>)
    1bac:	6093      	str	r3, [r2, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
    1bae:	6113      	str	r3, [r2, #16]
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
    1bb0:	2000      	movs	r0, #0
}
    1bb2:	bd30      	pop	{r4, r5, pc}
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    1bb4:	2301      	movs	r3, #1
    1bb6:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
    1bb8:	4a04      	ldr	r2, [pc, #16]	; (1bcc <_ext_irq_enable+0x50>)
    1bba:	60d3      	str	r3, [r2, #12]
	return ERR_NONE;
    1bbc:	2000      	movs	r0, #0
    1bbe:	e7f8      	b.n	1bb2 <_ext_irq_enable+0x36>
		return ERR_INVALID_ARG;
    1bc0:	200d      	movs	r0, #13
    1bc2:	4240      	negs	r0, r0
    1bc4:	e7f5      	b.n	1bb2 <_ext_irq_enable+0x36>
    1bc6:	46c0      	nop			; (mov r8, r8)
    1bc8:	0000b340 	.word	0x0000b340
    1bcc:	40001800 	.word	0x40001800

00001bd0 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
    1bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bd2:	b083      	sub	sp, #12
	return ((Eic *)hw)->INTFLAG.reg;
    1bd4:	4b27      	ldr	r3, [pc, #156]	; (1c74 <EIC_Handler+0xa4>)
    1bd6:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    1bd8:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    1bda:	400a      	ands	r2, r1
    1bdc:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    1bde:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1be0:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
    1be2:	4b25      	ldr	r3, [pc, #148]	; (1c78 <EIC_Handler+0xa8>)
    1be4:	6818      	ldr	r0, [r3, #0]
    1be6:	1e43      	subs	r3, r0, #1
    1be8:	4198      	sbcs	r0, r3
    1bea:	b2c0      	uxtb	r0, r0
    1bec:	22d2      	movs	r2, #210	; 0xd2
    1bee:	4923      	ldr	r1, [pc, #140]	; (1c7c <EIC_Handler+0xac>)
    1bf0:	f7ff ff38 	bl	1a64 <assert>
	uint32_t          pin = INVALID_PIN_NUMBER;
    1bf4:	2501      	movs	r5, #1
    1bf6:	426d      	negs	r5, r5

	while (flags) {
    1bf8:	e031      	b.n	1c5e <EIC_Handler+0x8e>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
    1bfa:	00db      	lsls	r3, r3, #3
    1bfc:	4a20      	ldr	r2, [pc, #128]	; (1c80 <EIC_Handler+0xb0>)
    1bfe:	18d3      	adds	r3, r2, r3
    1c00:	685d      	ldr	r5, [r3, #4]
				} else {
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    1c02:	1c6b      	adds	r3, r5, #1
    1c04:	d003      	beq.n	1c0e <EIC_Handler+0x3e>
				callback(pin);
    1c06:	4b1c      	ldr	r3, [pc, #112]	; (1c78 <EIC_Handler+0xa8>)
    1c08:	681b      	ldr	r3, [r3, #0]
    1c0a:	0028      	movs	r0, r5
    1c0c:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    1c0e:	2201      	movs	r2, #1
    1c10:	40a2      	lsls	r2, r4
    1c12:	9b01      	ldr	r3, [sp, #4]
    1c14:	4393      	bics	r3, r2
    1c16:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
    1c18:	9801      	ldr	r0, [sp, #4]
    1c1a:	f002 f99f 	bl	3f5c <__ffssi2>
    1c1e:	3801      	subs	r0, #1
    1c20:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    1c22:	1c63      	adds	r3, r4, #1
    1c24:	d014      	beq.n	1c50 <EIC_Handler+0x80>
    1c26:	2603      	movs	r6, #3
    1c28:	2000      	movs	r0, #0
    1c2a:	e001      	b.n	1c30 <EIC_Handler+0x60>
					upper = middle - 1;
    1c2c:	3901      	subs	r1, #1
    1c2e:	b2ce      	uxtb	r6, r1
			while (upper >= lower) {
    1c30:	42b0      	cmp	r0, r6
    1c32:	d8e6      	bhi.n	1c02 <EIC_Handler+0x32>
				middle = (upper + lower) >> 1;
    1c34:	1833      	adds	r3, r6, r0
    1c36:	105b      	asrs	r3, r3, #1
    1c38:	b2d9      	uxtb	r1, r3
    1c3a:	22ff      	movs	r2, #255	; 0xff
    1c3c:	4013      	ands	r3, r2
				if (_map[middle].extint == pos) {
    1c3e:	00df      	lsls	r7, r3, #3
    1c40:	4a0f      	ldr	r2, [pc, #60]	; (1c80 <EIC_Handler+0xb0>)
    1c42:	5cba      	ldrb	r2, [r7, r2]
    1c44:	42a2      	cmp	r2, r4
    1c46:	d0d8      	beq.n	1bfa <EIC_Handler+0x2a>
				if (_map[middle].extint < pos) {
    1c48:	daf0      	bge.n	1c2c <EIC_Handler+0x5c>
					lower = middle + 1;
    1c4a:	3101      	adds	r1, #1
    1c4c:	b2c8      	uxtb	r0, r1
    1c4e:	e7ef      	b.n	1c30 <EIC_Handler+0x60>
	return ((Eic *)hw)->INTFLAG.reg;
    1c50:	4b08      	ldr	r3, [pc, #32]	; (1c74 <EIC_Handler+0xa4>)
    1c52:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    1c54:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    1c56:	400a      	ands	r2, r1
    1c58:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    1c5a:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1c5c:	611a      	str	r2, [r3, #16]
	while (flags) {
    1c5e:	9b01      	ldr	r3, [sp, #4]
    1c60:	2b00      	cmp	r3, #0
    1c62:	d005      	beq.n	1c70 <EIC_Handler+0xa0>
		pos = ffs(flags) - 1;
    1c64:	9801      	ldr	r0, [sp, #4]
    1c66:	f002 f979 	bl	3f5c <__ffssi2>
    1c6a:	3801      	subs	r0, #1
    1c6c:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    1c6e:	e7d8      	b.n	1c22 <EIC_Handler+0x52>
	}
}
    1c70:	b003      	add	sp, #12
    1c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c74:	40001800 	.word	0x40001800
    1c78:	20000e04 	.word	0x20000e04
    1c7c:	0000b328 	.word	0x0000b328
    1c80:	0000b340 	.word	0x0000b340

00001c84 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1c84:	07c3      	lsls	r3, r0, #31
    1c86:	d509      	bpl.n	1c9c <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    1c88:	4b0a      	ldr	r3, [pc, #40]	; (1cb4 <_gclk_init_generators_by_fref+0x30>)
    1c8a:	2280      	movs	r2, #128	; 0x80
    1c8c:	0052      	lsls	r2, r2, #1
    1c8e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1c90:	4a09      	ldr	r2, [pc, #36]	; (1cb8 <_gclk_init_generators_by_fref+0x34>)
    1c92:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1c94:	4b07      	ldr	r3, [pc, #28]	; (1cb4 <_gclk_init_generators_by_fref+0x30>)
    1c96:	785b      	ldrb	r3, [r3, #1]
    1c98:	09db      	lsrs	r3, r3, #7
    1c9a:	d1fb      	bne.n	1c94 <_gclk_init_generators_by_fref+0x10>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    1c9c:	0703      	lsls	r3, r0, #28
    1c9e:	d508      	bpl.n	1cb2 <_gclk_init_generators_by_fref+0x2e>
	((Gclk *)hw)->GENDIV.reg = data;
    1ca0:	4b04      	ldr	r3, [pc, #16]	; (1cb4 <_gclk_init_generators_by_fref+0x30>)
    1ca2:	4a06      	ldr	r2, [pc, #24]	; (1cbc <_gclk_init_generators_by_fref+0x38>)
    1ca4:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1ca6:	4a06      	ldr	r2, [pc, #24]	; (1cc0 <_gclk_init_generators_by_fref+0x3c>)
    1ca8:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1caa:	4b02      	ldr	r3, [pc, #8]	; (1cb4 <_gclk_init_generators_by_fref+0x30>)
    1cac:	785b      	ldrb	r3, [r3, #1]
    1cae:	09db      	lsrs	r3, r3, #7
    1cb0:	d1fb      	bne.n	1caa <_gclk_init_generators_by_fref+0x26>
		        | (CONF_GCLK_GEN_7_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_7_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_7_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_7_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SRC | GCLK_GENCTRL_ID(7));
	}
#endif
}
    1cb2:	4770      	bx	lr
    1cb4:	40000c00 	.word	0x40000c00
    1cb8:	00010700 	.word	0x00010700
    1cbc:	00000403 	.word	0x00000403
    1cc0:	00010403 	.word	0x00010403

00001cc4 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    1cc4:	4b06      	ldr	r3, [pc, #24]	; (1ce0 <_pm_init+0x1c>)
    1cc6:	7a1a      	ldrb	r2, [r3, #8]
    1cc8:	b2d2      	uxtb	r2, r2
    1cca:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    1ccc:	7a5a      	ldrb	r2, [r3, #9]
    1cce:	b2d2      	uxtb	r2, r2
    1cd0:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    1cd2:	7a9a      	ldrb	r2, [r3, #10]
    1cd4:	b2d2      	uxtb	r2, r2
    1cd6:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    1cd8:	7ada      	ldrb	r2, [r3, #11]
    1cda:	b2d2      	uxtb	r2, r2
    1cdc:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    1cde:	4770      	bx	lr
    1ce0:	40000400 	.word	0x40000400

00001ce4 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1ce4:	4b02      	ldr	r3, [pc, #8]	; (1cf0 <_sercom_get_hardware_index+0xc>)
    1ce6:	469c      	mov	ip, r3
    1ce8:	4460      	add	r0, ip
    1cea:	0a80      	lsrs	r0, r0, #10
    1cec:	b2c0      	uxtb	r0, r0
}
    1cee:	4770      	bx	lr
    1cf0:	bdfff800 	.word	0xbdfff800

00001cf4 <_spi_sync_enable>:
		;
}

static inline bool hri_sercomspi_is_syncing(const void *const hw)
{
	return ((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY;
    1cf4:	8a03      	ldrh	r3, [r0, #16]
    1cf6:	0bdb      	lsrs	r3, r3, #15
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw)) {
    1cf8:	d108      	bne.n	1d0c <_spi_sync_enable+0x18>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1cfa:	6803      	ldr	r3, [r0, #0]
    1cfc:	2202      	movs	r2, #2
    1cfe:	4313      	orrs	r3, r2
    1d00:	6003      	str	r3, [r0, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    1d02:	8a03      	ldrh	r3, [r0, #16]
    1d04:	0bdb      	lsrs	r3, r3, #15
    1d06:	d1fc      	bne.n	1d02 <_spi_sync_enable+0xe>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1d08:	2000      	movs	r0, #0
}
    1d0a:	4770      	bx	lr
		return ERR_BUSY;
    1d0c:	2004      	movs	r0, #4
    1d0e:	4240      	negs	r0, r0
    1d10:	e7fb      	b.n	1d0a <_spi_sync_enable+0x16>
	...

00001d14 <_get_sercom_index>:
{
    1d14:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1d16:	f7ff ffe5 	bl	1ce4 <_sercom_get_hardware_index>
    1d1a:	0003      	movs	r3, r0
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1d1c:	2000      	movs	r0, #0
    1d1e:	2800      	cmp	r0, #0
    1d20:	d006      	beq.n	1d30 <_get_sercom_index+0x1c>
	ASSERT(false);
    1d22:	4a07      	ldr	r2, [pc, #28]	; (1d40 <_get_sercom_index+0x2c>)
    1d24:	4907      	ldr	r1, [pc, #28]	; (1d44 <_get_sercom_index+0x30>)
    1d26:	2000      	movs	r0, #0
    1d28:	f7ff fe9c 	bl	1a64 <assert>
	return 0;
    1d2c:	2000      	movs	r0, #0
}
    1d2e:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
    1d30:	0102      	lsls	r2, r0, #4
    1d32:	4905      	ldr	r1, [pc, #20]	; (1d48 <_get_sercom_index+0x34>)
    1d34:	5c52      	ldrb	r2, [r2, r1]
    1d36:	4293      	cmp	r3, r2
    1d38:	d0f9      	beq.n	1d2e <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1d3a:	3001      	adds	r0, #1
    1d3c:	b2c0      	uxtb	r0, r0
    1d3e:	e7ee      	b.n	1d1e <_get_sercom_index+0xa>
    1d40:	0000022a 	.word	0x0000022a
    1d44:	0000b360 	.word	0x0000b360
    1d48:	0000b3ac 	.word	0x0000b3ac

00001d4c <_usart_init>:
{
    1d4c:	b510      	push	{r4, lr}
    1d4e:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
    1d50:	f7ff ffe0 	bl	1d14 <_get_sercom_index>
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    1d54:	8a23      	ldrh	r3, [r4, #16]
    1d56:	0bdb      	lsrs	r3, r3, #15
    1d58:	d1fc      	bne.n	1d54 <_usart_init+0x8>
    1d5a:	8a23      	ldrh	r3, [r4, #16]
    1d5c:	0bdb      	lsrs	r3, r3, #15
    1d5e:	d1fc      	bne.n	1d5a <_usart_init+0xe>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1d60:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1d62:	079b      	lsls	r3, r3, #30
    1d64:	d507      	bpl.n	1d76 <_usart_init+0x2a>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1d66:	2300      	movs	r3, #0
    1d68:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    1d6a:	8a23      	ldrh	r3, [r4, #16]
    1d6c:	0bdb      	lsrs	r3, r3, #15
    1d6e:	d1fc      	bne.n	1d6a <_usart_init+0x1e>
    1d70:	8a23      	ldrh	r3, [r4, #16]
    1d72:	0bdb      	lsrs	r3, r3, #15
    1d74:	d1fc      	bne.n	1d70 <_usart_init+0x24>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1d76:	2301      	movs	r3, #1
    1d78:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    1d7a:	8a23      	ldrh	r3, [r4, #16]
    1d7c:	0bdb      	lsrs	r3, r3, #15
    1d7e:	d1fc      	bne.n	1d7a <_usart_init+0x2e>
    1d80:	8a23      	ldrh	r3, [r4, #16]
    1d82:	0bdb      	lsrs	r3, r3, #15
    1d84:	d1fc      	bne.n	1d80 <_usart_init+0x34>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    1d86:	0102      	lsls	r2, r0, #4
    1d88:	4b0b      	ldr	r3, [pc, #44]	; (1db8 <_usart_init+0x6c>)
    1d8a:	189b      	adds	r3, r3, r2
    1d8c:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1d8e:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    1d90:	8a23      	ldrh	r3, [r4, #16]
    1d92:	0bdb      	lsrs	r3, r3, #15
    1d94:	d1fc      	bne.n	1d90 <_usart_init+0x44>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1d96:	0102      	lsls	r2, r0, #4
    1d98:	4b07      	ldr	r3, [pc, #28]	; (1db8 <_usart_init+0x6c>)
    1d9a:	189b      	adds	r3, r3, r2
    1d9c:	689b      	ldr	r3, [r3, #8]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1d9e:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    1da0:	8a23      	ldrh	r3, [r4, #16]
    1da2:	0bdb      	lsrs	r3, r3, #15
    1da4:	d1fc      	bne.n	1da0 <_usart_init+0x54>
	hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1da6:	0100      	lsls	r0, r0, #4
    1da8:	4b03      	ldr	r3, [pc, #12]	; (1db8 <_usart_init+0x6c>)
    1daa:	1818      	adds	r0, r3, r0
    1dac:	8983      	ldrh	r3, [r0, #12]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    1dae:	8163      	strh	r3, [r4, #10]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1db0:	7b83      	ldrb	r3, [r0, #14]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1db2:	7223      	strb	r3, [r4, #8]
}
    1db4:	2000      	movs	r0, #0
    1db6:	bd10      	pop	{r4, pc}
    1db8:	0000b3ac 	.word	0x0000b3ac

00001dbc <_get_i2cm_index>:
{
    1dbc:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1dbe:	f7ff ff91 	bl	1ce4 <_sercom_get_hardware_index>
    1dc2:	0001      	movs	r1, r0
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    1dc4:	2000      	movs	r0, #0
    1dc6:	2801      	cmp	r0, #1
    1dc8:	d809      	bhi.n	1dde <_get_i2cm_index+0x22>
		if (_i2cms[i].number == sercom_offset) {
    1dca:	0043      	lsls	r3, r0, #1
    1dcc:	181b      	adds	r3, r3, r0
    1dce:	00da      	lsls	r2, r3, #3
    1dd0:	4b06      	ldr	r3, [pc, #24]	; (1dec <_get_i2cm_index+0x30>)
    1dd2:	5cd3      	ldrb	r3, [r2, r3]
    1dd4:	4299      	cmp	r1, r3
    1dd6:	d008      	beq.n	1dea <_get_i2cm_index+0x2e>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    1dd8:	3001      	adds	r0, #1
    1dda:	b2c0      	uxtb	r0, r0
    1ddc:	e7f3      	b.n	1dc6 <_get_i2cm_index+0xa>
	ASSERT(false);
    1dde:	4a04      	ldr	r2, [pc, #16]	; (1df0 <_get_i2cm_index+0x34>)
    1de0:	4904      	ldr	r1, [pc, #16]	; (1df4 <_get_i2cm_index+0x38>)
    1de2:	2000      	movs	r0, #0
    1de4:	f7ff fe3e 	bl	1a64 <assert>
	return 0;
    1de8:	2000      	movs	r0, #0
}
    1dea:	bd10      	pop	{r4, pc}
    1dec:	0000b37c 	.word	0x0000b37c
    1df0:	00000366 	.word	0x00000366
    1df4:	0000b360 	.word	0x0000b360

00001df8 <_sercom_i2c_sync_send_address>:
{
    1df8:	b570      	push	{r4, r5, r6, lr}
    1dfa:	0005      	movs	r5, r0
	void *             hw  = i2c_dev->hw;
    1dfc:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    1dfe:	1e43      	subs	r3, r0, #1
    1e00:	4198      	sbcs	r0, r3
    1e02:	b2c0      	uxtb	r0, r0
    1e04:	4a5c      	ldr	r2, [pc, #368]	; (1f78 <_sercom_i2c_sync_send_address+0x180>)
    1e06:	495d      	ldr	r1, [pc, #372]	; (1f7c <_sercom_i2c_sync_send_address+0x184>)
    1e08:	f7ff fe2c 	bl	1a64 <assert>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1e0c:	6863      	ldr	r3, [r4, #4]
    1e0e:	4a5c      	ldr	r2, [pc, #368]	; (1f80 <_sercom_i2c_sync_send_address+0x188>)
    1e10:	4013      	ands	r3, r2
    1e12:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1e14:	8a23      	ldrh	r3, [r4, #16]
    1e16:	0bdb      	lsrs	r3, r3, #15
    1e18:	d1fc      	bne.n	1e14 <_sercom_i2c_sync_send_address+0x1c>
	hri_sercomi2cm_write_ADDR_reg(hw, ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0));
    1e1a:	882a      	ldrh	r2, [r5, #0]
    1e1c:	0052      	lsls	r2, r2, #1
    1e1e:	886b      	ldrh	r3, [r5, #2]
    1e20:	2101      	movs	r1, #1
    1e22:	400b      	ands	r3, r1
    1e24:	4313      	orrs	r3, r2
    1e26:	b2db      	uxtb	r3, r3
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1e28:	7523      	strb	r3, [r4, #20]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1e2a:	8a23      	ldrh	r3, [r4, #16]
    1e2c:	0bdb      	lsrs	r3, r3, #15
    1e2e:	d1fc      	bne.n	1e2a <_sercom_i2c_sync_send_address+0x32>
	void *   hw      = i2c_dev->hw;
    1e30:	692e      	ldr	r6, [r5, #16]
	uint32_t timeout = 65535;
    1e32:	4a54      	ldr	r2, [pc, #336]	; (1f84 <_sercom_i2c_sync_send_address+0x18c>)
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    1e34:	7bb3      	ldrb	r3, [r6, #14]
    1e36:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    1e38:	0018      	movs	r0, r3
		if (timeout-- == 0) {
    1e3a:	1e51      	subs	r1, r2, #1
    1e3c:	2a00      	cmp	r2, #0
    1e3e:	d002      	beq.n	1e46 <_sercom_i2c_sync_send_address+0x4e>
    1e40:	000a      	movs	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1e42:	079b      	lsls	r3, r3, #30
    1e44:	d0f6      	beq.n	1e34 <_sercom_i2c_sync_send_address+0x3c>
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1e46:	8a23      	ldrh	r3, [r4, #16]
    1e48:	0bdb      	lsrs	r3, r3, #15
    1e4a:	d1fc      	bne.n	1e46 <_sercom_i2c_sync_send_address+0x4e>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    1e4c:	8a23      	ldrh	r3, [r4, #16]
    1e4e:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    1e50:	07c2      	lsls	r2, r0, #31
    1e52:	d550      	bpl.n	1ef6 <_sercom_i2c_sync_send_address+0xfe>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    1e54:	079a      	lsls	r2, r3, #30
    1e56:	d510      	bpl.n	1e7a <_sercom_i2c_sync_send_address+0x82>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1e58:	2201      	movs	r2, #1
    1e5a:	73a2      	strb	r2, [r4, #14]
			msg->flags |= I2C_M_FAIL;
    1e5c:	886a      	ldrh	r2, [r5, #2]
    1e5e:	2180      	movs	r1, #128	; 0x80
    1e60:	0149      	lsls	r1, r1, #5
    1e62:	430a      	orrs	r2, r1
    1e64:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    1e66:	886a      	ldrh	r2, [r5, #2]
    1e68:	4947      	ldr	r1, [pc, #284]	; (1f88 <_sercom_i2c_sync_send_address+0x190>)
    1e6a:	400a      	ands	r2, r1
    1e6c:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1e6e:	07db      	lsls	r3, r3, #31
    1e70:	d400      	bmi.n	1e74 <_sercom_i2c_sync_send_address+0x7c>
    1e72:	e07c      	b.n	1f6e <_sercom_i2c_sync_send_address+0x176>
				return I2C_ERR_BUS;
    1e74:	2005      	movs	r0, #5
    1e76:	4240      	negs	r0, r0
    1e78:	e063      	b.n	1f42 <_sercom_i2c_sync_send_address+0x14a>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    1e7a:	075b      	lsls	r3, r3, #29
    1e7c:	d40b      	bmi.n	1e96 <_sercom_i2c_sync_send_address+0x9e>
			if (msg->len == 0) {
    1e7e:	6868      	ldr	r0, [r5, #4]
    1e80:	2800      	cmp	r0, #0
    1e82:	d12d      	bne.n	1ee0 <_sercom_i2c_sync_send_address+0xe8>
				if (msg->flags & I2C_M_STOP) {
    1e84:	886b      	ldrh	r3, [r5, #2]
    1e86:	b21b      	sxth	r3, r3
    1e88:	2b00      	cmp	r3, #0
    1e8a:	db20      	blt.n	1ece <_sercom_i2c_sync_send_address+0xd6>
				msg->flags &= ~I2C_M_BUSY;
    1e8c:	886b      	ldrh	r3, [r5, #2]
    1e8e:	4a3e      	ldr	r2, [pc, #248]	; (1f88 <_sercom_i2c_sync_send_address+0x190>)
    1e90:	4013      	ands	r3, r2
    1e92:	806b      	strh	r3, [r5, #2]
    1e94:	e055      	b.n	1f42 <_sercom_i2c_sync_send_address+0x14a>
				if (msg->len > 0) {
    1e96:	686b      	ldr	r3, [r5, #4]
    1e98:	2b00      	cmp	r3, #0
    1e9a:	dd04      	ble.n	1ea6 <_sercom_i2c_sync_send_address+0xae>
					msg->flags |= I2C_M_FAIL;
    1e9c:	886b      	ldrh	r3, [r5, #2]
    1e9e:	2280      	movs	r2, #128	; 0x80
    1ea0:	0152      	lsls	r2, r2, #5
    1ea2:	4313      	orrs	r3, r2
    1ea4:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    1ea6:	886b      	ldrh	r3, [r5, #2]
    1ea8:	b21b      	sxth	r3, r3
    1eaa:	2b00      	cmp	r3, #0
    1eac:	db06      	blt.n	1ebc <_sercom_i2c_sync_send_address+0xc4>
				msg->flags &= ~I2C_M_BUSY;
    1eae:	886b      	ldrh	r3, [r5, #2]
    1eb0:	4a35      	ldr	r2, [pc, #212]	; (1f88 <_sercom_i2c_sync_send_address+0x190>)
    1eb2:	4013      	ands	r3, r2
    1eb4:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    1eb6:	2002      	movs	r0, #2
    1eb8:	4240      	negs	r0, r0
    1eba:	e042      	b.n	1f42 <_sercom_i2c_sync_send_address+0x14a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1ebc:	6862      	ldr	r2, [r4, #4]
    1ebe:	23c0      	movs	r3, #192	; 0xc0
    1ec0:	029b      	lsls	r3, r3, #10
    1ec2:	4313      	orrs	r3, r2
    1ec4:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1ec6:	8a23      	ldrh	r3, [r4, #16]
    1ec8:	0bdb      	lsrs	r3, r3, #15
    1eca:	d1fc      	bne.n	1ec6 <_sercom_i2c_sync_send_address+0xce>
    1ecc:	e7ef      	b.n	1eae <_sercom_i2c_sync_send_address+0xb6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1ece:	6862      	ldr	r2, [r4, #4]
    1ed0:	23c0      	movs	r3, #192	; 0xc0
    1ed2:	029b      	lsls	r3, r3, #10
    1ed4:	4313      	orrs	r3, r2
    1ed6:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1ed8:	8a23      	ldrh	r3, [r4, #16]
    1eda:	0bdb      	lsrs	r3, r3, #15
    1edc:	d1fc      	bne.n	1ed8 <_sercom_i2c_sync_send_address+0xe0>
    1ede:	e7d5      	b.n	1e8c <_sercom_i2c_sync_send_address+0x94>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    1ee0:	68ab      	ldr	r3, [r5, #8]
    1ee2:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    1ee4:	7623      	strb	r3, [r4, #24]
				msg->buffer++;
    1ee6:	68ab      	ldr	r3, [r5, #8]
    1ee8:	3301      	adds	r3, #1
    1eea:	60ab      	str	r3, [r5, #8]
				msg->len--;
    1eec:	686b      	ldr	r3, [r5, #4]
    1eee:	3b01      	subs	r3, #1
    1ef0:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    1ef2:	2000      	movs	r0, #0
    1ef4:	e025      	b.n	1f42 <_sercom_i2c_sync_send_address+0x14a>
	} else if (flags & SB_FLAG) {
    1ef6:	0782      	lsls	r2, r0, #30
    1ef8:	d53c      	bpl.n	1f74 <_sercom_i2c_sync_send_address+0x17c>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    1efa:	686a      	ldr	r2, [r5, #4]
    1efc:	2a00      	cmp	r2, #0
    1efe:	d031      	beq.n	1f64 <_sercom_i2c_sync_send_address+0x16c>
    1f00:	075b      	lsls	r3, r3, #29
    1f02:	d42f      	bmi.n	1f64 <_sercom_i2c_sync_send_address+0x16c>
			msg->len--;
    1f04:	3a01      	subs	r2, #1
    1f06:	606a      	str	r2, [r5, #4]
			if (msg->len == 0) {
    1f08:	2a00      	cmp	r2, #0
    1f0a:	d107      	bne.n	1f1c <_sercom_i2c_sync_send_address+0x124>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1f0c:	6862      	ldr	r2, [r4, #4]
    1f0e:	2380      	movs	r3, #128	; 0x80
    1f10:	02db      	lsls	r3, r3, #11
    1f12:	4313      	orrs	r3, r2
    1f14:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1f16:	8a23      	ldrh	r3, [r4, #16]
    1f18:	0bdb      	lsrs	r3, r3, #15
    1f1a:	d1fc      	bne.n	1f16 <_sercom_i2c_sync_send_address+0x11e>
			if (msg->len == 0) {
    1f1c:	686b      	ldr	r3, [r5, #4]
    1f1e:	2b00      	cmp	r3, #0
    1f20:	d107      	bne.n	1f32 <_sercom_i2c_sync_send_address+0x13a>
				if (msg->flags & I2C_M_STOP) {
    1f22:	886b      	ldrh	r3, [r5, #2]
    1f24:	b21b      	sxth	r3, r3
    1f26:	2b00      	cmp	r3, #0
    1f28:	db0c      	blt.n	1f44 <_sercom_i2c_sync_send_address+0x14c>
				msg->flags &= ~I2C_M_BUSY;
    1f2a:	886b      	ldrh	r3, [r5, #2]
    1f2c:	4a16      	ldr	r2, [pc, #88]	; (1f88 <_sercom_i2c_sync_send_address+0x190>)
    1f2e:	4013      	ands	r3, r2
    1f30:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    1f32:	68ab      	ldr	r3, [r5, #8]
    1f34:	1c5a      	adds	r2, r3, #1
    1f36:	60aa      	str	r2, [r5, #8]
	return ((Sercom *)hw)->I2CM.DATA.reg;
    1f38:	7e22      	ldrb	r2, [r4, #24]
    1f3a:	701a      	strb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1f3c:	2302      	movs	r3, #2
    1f3e:	73a3      	strb	r3, [r4, #14]
	return I2C_OK;
    1f40:	2000      	movs	r0, #0
}
    1f42:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1f44:	6863      	ldr	r3, [r4, #4]
    1f46:	4a10      	ldr	r2, [pc, #64]	; (1f88 <_sercom_i2c_sync_send_address+0x190>)
    1f48:	4013      	ands	r3, r2
    1f4a:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1f4c:	8a23      	ldrh	r3, [r4, #16]
    1f4e:	0bdb      	lsrs	r3, r3, #15
    1f50:	d1fc      	bne.n	1f4c <_sercom_i2c_sync_send_address+0x154>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1f52:	6862      	ldr	r2, [r4, #4]
    1f54:	23c0      	movs	r3, #192	; 0xc0
    1f56:	029b      	lsls	r3, r3, #10
    1f58:	4313      	orrs	r3, r2
    1f5a:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1f5c:	8a23      	ldrh	r3, [r4, #16]
    1f5e:	0bdb      	lsrs	r3, r3, #15
    1f60:	d1fc      	bne.n	1f5c <_sercom_i2c_sync_send_address+0x164>
    1f62:	e7e2      	b.n	1f2a <_sercom_i2c_sync_send_address+0x132>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1f64:	2302      	movs	r3, #2
    1f66:	73a3      	strb	r3, [r4, #14]
			return I2C_NACK;
    1f68:	2002      	movs	r0, #2
    1f6a:	4240      	negs	r0, r0
    1f6c:	e7e9      	b.n	1f42 <_sercom_i2c_sync_send_address+0x14a>
			return I2C_ERR_BAD_ADDRESS;
    1f6e:	2004      	movs	r0, #4
    1f70:	4240      	negs	r0, r0
    1f72:	e7e6      	b.n	1f42 <_sercom_i2c_sync_send_address+0x14a>
	return I2C_OK;
    1f74:	2000      	movs	r0, #0
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    1f76:	e7e4      	b.n	1f42 <_sercom_i2c_sync_send_address+0x14a>
    1f78:	00000581 	.word	0x00000581
    1f7c:	0000b360 	.word	0x0000b360
    1f80:	fffbffff 	.word	0xfffbffff
    1f84:	0000ffff 	.word	0x0000ffff
    1f88:	fffffeff 	.word	0xfffffeff

00001f8c <_usart_sync_init>:
{
    1f8c:	b570      	push	{r4, r5, r6, lr}
    1f8e:	0005      	movs	r5, r0
    1f90:	000c      	movs	r4, r1
	ASSERT(device);
    1f92:	1e43      	subs	r3, r0, #1
    1f94:	4198      	sbcs	r0, r3
    1f96:	b2c0      	uxtb	r0, r0
    1f98:	22a1      	movs	r2, #161	; 0xa1
    1f9a:	4904      	ldr	r1, [pc, #16]	; (1fac <_usart_sync_init+0x20>)
    1f9c:	f7ff fd62 	bl	1a64 <assert>
	device->hw = hw;
    1fa0:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    1fa2:	0020      	movs	r0, r4
    1fa4:	f7ff fed2 	bl	1d4c <_usart_init>
}
    1fa8:	bd70      	pop	{r4, r5, r6, pc}
    1faa:	46c0      	nop			; (mov r8, r8)
    1fac:	0000b360 	.word	0x0000b360

00001fb0 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1fb0:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1fb2:	6813      	ldr	r3, [r2, #0]
    1fb4:	2102      	movs	r1, #2
    1fb6:	430b      	orrs	r3, r1
    1fb8:	6013      	str	r3, [r2, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    1fba:	8a13      	ldrh	r3, [r2, #16]
    1fbc:	0bdb      	lsrs	r3, r3, #15
    1fbe:	d1fc      	bne.n	1fba <_usart_sync_enable+0xa>
}
    1fc0:	4770      	bx	lr

00001fc2 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1fc2:	6803      	ldr	r3, [r0, #0]
    1fc4:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    1fc6:	8319      	strh	r1, [r3, #24]
}
    1fc8:	4770      	bx	lr

00001fca <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    1fca:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    1fcc:	8b18      	ldrh	r0, [r3, #24]
    1fce:	b2c0      	uxtb	r0, r0
}
    1fd0:	4770      	bx	lr

00001fd2 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1fd2:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1fd4:	7b98      	ldrb	r0, [r3, #14]
    1fd6:	2301      	movs	r3, #1
    1fd8:	4018      	ands	r0, r3
}
    1fda:	4770      	bx	lr

00001fdc <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    1fdc:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1fde:	7b9b      	ldrb	r3, [r3, #14]
    1fe0:	085b      	lsrs	r3, r3, #1
    1fe2:	2001      	movs	r0, #1
    1fe4:	4018      	ands	r0, r3
}
    1fe6:	4770      	bx	lr

00001fe8 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1fe8:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1fea:	7b9b      	ldrb	r3, [r3, #14]
    1fec:	089b      	lsrs	r3, r3, #2
    1fee:	2001      	movs	r0, #1
    1ff0:	4018      	ands	r0, r3
}
    1ff2:	4770      	bx	lr

00001ff4 <_i2c_m_sync_init>:
{
    1ff4:	b570      	push	{r4, r5, r6, lr}
    1ff6:	0006      	movs	r6, r0
    1ff8:	000c      	movs	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    1ffa:	0008      	movs	r0, r1
    1ffc:	f7ff fede 	bl	1dbc <_get_i2cm_index>
    2000:	0005      	movs	r5, r0
	ASSERT(i2c_dev);
    2002:	0030      	movs	r0, r6
    2004:	1e43      	subs	r3, r0, #1
    2006:	4198      	sbcs	r0, r3
    2008:	b2c0      	uxtb	r0, r0
    200a:	4a20      	ldr	r2, [pc, #128]	; (208c <STACK_SIZE+0x8c>)
    200c:	4920      	ldr	r1, [pc, #128]	; (2090 <STACK_SIZE+0x90>)
    200e:	f7ff fd29 	bl	1a64 <assert>
	i2c_dev->hw = hw;
    2012:	6134      	str	r4, [r6, #16]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    2014:	8a23      	ldrh	r3, [r4, #16]
    2016:	0bdb      	lsrs	r3, r3, #15
    2018:	d1fc      	bne.n	2014 <STACK_SIZE+0x14>
    201a:	8a23      	ldrh	r3, [r4, #16]
    201c:	0bdb      	lsrs	r3, r3, #15
    201e:	d1fc      	bne.n	201a <STACK_SIZE+0x1a>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    2020:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    2022:	079b      	lsls	r3, r3, #30
    2024:	d507      	bpl.n	2036 <STACK_SIZE+0x36>
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    2026:	2300      	movs	r3, #0
    2028:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    202a:	8a23      	ldrh	r3, [r4, #16]
    202c:	0bdb      	lsrs	r3, r3, #15
    202e:	d1fc      	bne.n	202a <STACK_SIZE+0x2a>
    2030:	8a23      	ldrh	r3, [r4, #16]
    2032:	0bdb      	lsrs	r3, r3, #15
    2034:	d1fc      	bne.n	2030 <STACK_SIZE+0x30>
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    2036:	2301      	movs	r3, #1
    2038:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    203a:	8a23      	ldrh	r3, [r4, #16]
    203c:	0bdb      	lsrs	r3, r3, #15
    203e:	d1fc      	bne.n	203a <STACK_SIZE+0x3a>
    2040:	8a23      	ldrh	r3, [r4, #16]
    2042:	0bdb      	lsrs	r3, r3, #15
    2044:	d1fc      	bne.n	2040 <STACK_SIZE+0x40>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a & ~SERCOM_I2CM_CTRLA_ENABLE);
    2046:	006b      	lsls	r3, r5, #1
    2048:	195b      	adds	r3, r3, r5
    204a:	00da      	lsls	r2, r3, #3
    204c:	4b11      	ldr	r3, [pc, #68]	; (2094 <STACK_SIZE+0x94>)
    204e:	189b      	adds	r3, r3, r2
    2050:	685b      	ldr	r3, [r3, #4]
    2052:	2202      	movs	r2, #2
    2054:	4393      	bics	r3, r2
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    2056:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    2058:	8a23      	ldrh	r3, [r4, #16]
    205a:	0bdb      	lsrs	r3, r3, #15
    205c:	d1fc      	bne.n	2058 <STACK_SIZE+0x58>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    205e:	006b      	lsls	r3, r5, #1
    2060:	195b      	adds	r3, r3, r5
    2062:	00da      	lsls	r2, r3, #3
    2064:	4b0b      	ldr	r3, [pc, #44]	; (2094 <STACK_SIZE+0x94>)
    2066:	189b      	adds	r3, r3, r2
    2068:	689b      	ldr	r3, [r3, #8]
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    206a:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    206c:	8a23      	ldrh	r3, [r4, #16]
    206e:	0bdb      	lsrs	r3, r3, #15
    2070:	d1fc      	bne.n	206c <STACK_SIZE+0x6c>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    2072:	4a08      	ldr	r2, [pc, #32]	; (2094 <STACK_SIZE+0x94>)
    2074:	006b      	lsls	r3, r5, #1
    2076:	1958      	adds	r0, r3, r5
    2078:	00c1      	lsls	r1, r0, #3
    207a:	0008      	movs	r0, r1
    207c:	1851      	adds	r1, r2, r1
    207e:	8989      	ldrh	r1, [r1, #12]
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    2080:	8161      	strh	r1, [r4, #10]
	i2c_dev->service.trise = _i2cms[i].trise;
    2082:	1812      	adds	r2, r2, r0
    2084:	8a13      	ldrh	r3, [r2, #16]
    2086:	81f3      	strh	r3, [r6, #14]
}
    2088:	2000      	movs	r0, #0
    208a:	bd70      	pop	{r4, r5, r6, pc}
    208c:	000004d7 	.word	0x000004d7
    2090:	0000b360 	.word	0x0000b360
    2094:	0000b37c 	.word	0x0000b37c

00002098 <_i2c_m_sync_enable>:
{
    2098:	b570      	push	{r4, r5, r6, lr}
    209a:	0006      	movs	r6, r0
	void *hw              = i2c_dev->hw;
    209c:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    209e:	4d18      	ldr	r5, [pc, #96]	; (2100 <_i2c_m_sync_enable+0x68>)
    20a0:	1e43      	subs	r3, r0, #1
    20a2:	4198      	sbcs	r0, r3
    20a4:	b2c0      	uxtb	r0, r0
    20a6:	22a1      	movs	r2, #161	; 0xa1
    20a8:	00d2      	lsls	r2, r2, #3
    20aa:	0029      	movs	r1, r5
    20ac:	f7ff fcda 	bl	1a64 <assert>
	ASSERT(i2c_dev->hw);
    20b0:	6930      	ldr	r0, [r6, #16]
    20b2:	1e43      	subs	r3, r0, #1
    20b4:	4198      	sbcs	r0, r3
    20b6:	b2c0      	uxtb	r0, r0
    20b8:	4a12      	ldr	r2, [pc, #72]	; (2104 <_i2c_m_sync_enable+0x6c>)
    20ba:	0029      	movs	r1, r5
    20bc:	f7ff fcd2 	bl	1a64 <assert>
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    20c0:	6823      	ldr	r3, [r4, #0]
    20c2:	2202      	movs	r2, #2
    20c4:	4313      	orrs	r3, r2
    20c6:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    20c8:	8a23      	ldrh	r3, [r4, #16]
    20ca:	0bdb      	lsrs	r3, r3, #15
    20cc:	d1fc      	bne.n	20c8 <_i2c_m_sync_enable+0x30>
    20ce:	2004      	movs	r0, #4
    20d0:	490d      	ldr	r1, [pc, #52]	; (2108 <_i2c_m_sync_enable+0x70>)
    20d2:	8a23      	ldrh	r3, [r4, #16]
    20d4:	0bdb      	lsrs	r3, r3, #15
    20d6:	d1fc      	bne.n	20d2 <_i2c_m_sync_enable+0x3a>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    20d8:	8a22      	ldrh	r2, [r4, #16]
    20da:	0912      	lsrs	r2, r2, #4
    20dc:	3303      	adds	r3, #3
    20de:	4013      	ands	r3, r2
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    20e0:	2b01      	cmp	r3, #1
    20e2:	d008      	beq.n	20f6 <_i2c_m_sync_enable+0x5e>
		timeout--;
    20e4:	3901      	subs	r1, #1
		if (timeout <= 0) {
    20e6:	2900      	cmp	r1, #0
    20e8:	dcf3      	bgt.n	20d2 <_i2c_m_sync_enable+0x3a>
			if (--timeout_attempt)
    20ea:	3801      	subs	r0, #1
    20ec:	2800      	cmp	r0, #0
    20ee:	d004      	beq.n	20fa <_i2c_m_sync_enable+0x62>
			((Sercom *)hw)->I2CM.STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE);
    20f0:	2310      	movs	r3, #16
    20f2:	8223      	strh	r3, [r4, #16]
    20f4:	e7ec      	b.n	20d0 <_i2c_m_sync_enable+0x38>
	return ERR_NONE;
    20f6:	2000      	movs	r0, #0
}
    20f8:	bd70      	pop	{r4, r5, r6, pc}
				return I2C_ERR_BUSY;
    20fa:	2006      	movs	r0, #6
    20fc:	4240      	negs	r0, r0
    20fe:	e7fb      	b.n	20f8 <_i2c_m_sync_enable+0x60>
    2100:	0000b360 	.word	0x0000b360
    2104:	00000509 	.word	0x00000509
    2108:	0000ffff 	.word	0x0000ffff

0000210c <_i2c_m_sync_transfer>:
{
    210c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    210e:	0005      	movs	r5, r0
    2110:	000e      	movs	r6, r1
	void *   hw = i2c_dev->hw;
    2112:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    2114:	4f7d      	ldr	r7, [pc, #500]	; (230c <_i2c_m_sync_transfer+0x200>)
    2116:	1e43      	subs	r3, r0, #1
    2118:	4198      	sbcs	r0, r3
    211a:	b2c0      	uxtb	r0, r0
    211c:	4a7c      	ldr	r2, [pc, #496]	; (2310 <_i2c_m_sync_transfer+0x204>)
    211e:	0039      	movs	r1, r7
    2120:	f7ff fca0 	bl	1a64 <assert>
	ASSERT(i2c_dev->hw);
    2124:	6928      	ldr	r0, [r5, #16]
    2126:	1e43      	subs	r3, r0, #1
    2128:	4198      	sbcs	r0, r3
    212a:	b2c0      	uxtb	r0, r0
    212c:	4a79      	ldr	r2, [pc, #484]	; (2314 <_i2c_m_sync_transfer+0x208>)
    212e:	0039      	movs	r1, r7
    2130:	f7ff fc98 	bl	1a64 <assert>
	ASSERT(msg);
    2134:	0030      	movs	r0, r6
    2136:	1e43      	subs	r3, r0, #1
    2138:	4198      	sbcs	r0, r3
    213a:	b2c0      	uxtb	r0, r0
    213c:	4a76      	ldr	r2, [pc, #472]	; (2318 <_i2c_m_sync_transfer+0x20c>)
    213e:	0039      	movs	r1, r7
    2140:	f7ff fc90 	bl	1a64 <assert>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    2144:	886b      	ldrh	r3, [r5, #2]
    2146:	05db      	lsls	r3, r3, #23
    2148:	d500      	bpl.n	214c <_i2c_m_sync_transfer+0x40>
    214a:	e0dc      	b.n	2306 <_i2c_m_sync_transfer+0x1fa>
	msg->flags |= I2C_M_BUSY;
    214c:	8872      	ldrh	r2, [r6, #2]
    214e:	2380      	movs	r3, #128	; 0x80
    2150:	005b      	lsls	r3, r3, #1
    2152:	469c      	mov	ip, r3
    2154:	431a      	orrs	r2, r3
    2156:	8072      	strh	r2, [r6, #2]
	i2c_dev->service.msg = *msg;
    2158:	002a      	movs	r2, r5
    215a:	0031      	movs	r1, r6
    215c:	c989      	ldmia	r1!, {r0, r3, r7}
    215e:	c289      	stmia	r2!, {r0, r3, r7}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    2160:	6862      	ldr	r2, [r4, #4]
    2162:	4663      	mov	r3, ip
    2164:	4313      	orrs	r3, r2
    2166:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    2168:	8a23      	ldrh	r3, [r4, #16]
    216a:	0bdb      	lsrs	r3, r3, #15
    216c:	d1fc      	bne.n	2168 <_i2c_m_sync_transfer+0x5c>
	ret = _sercom_i2c_sync_send_address(i2c_dev);
    216e:	0028      	movs	r0, r5
    2170:	f7ff fe42 	bl	1df8 <_sercom_i2c_sync_send_address>
	if (ret) {
    2174:	2800      	cmp	r0, #0
    2176:	d100      	bne.n	217a <_i2c_m_sync_transfer+0x6e>
    2178:	e07d      	b.n	2276 <_i2c_m_sync_transfer+0x16a>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    217a:	886b      	ldrh	r3, [r5, #2]
    217c:	4a67      	ldr	r2, [pc, #412]	; (231c <_i2c_m_sync_transfer+0x210>)
    217e:	4013      	ands	r3, r2
    2180:	806b      	strh	r3, [r5, #2]
}
    2182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return I2C_ERR_BUS;
    2184:	2005      	movs	r0, #5
    2186:	4240      	negs	r0, r0
    2188:	e086      	b.n	2298 <_i2c_m_sync_transfer+0x18c>
			if (msg->flags & I2C_M_STOP) {
    218a:	8873      	ldrh	r3, [r6, #2]
    218c:	b21b      	sxth	r3, r3
    218e:	2b00      	cmp	r3, #0
    2190:	db04      	blt.n	219c <_i2c_m_sync_transfer+0x90>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    2192:	886b      	ldrh	r3, [r5, #2]
    2194:	4a61      	ldr	r2, [pc, #388]	; (231c <_i2c_m_sync_transfer+0x210>)
    2196:	4013      	ands	r3, r2
    2198:	806b      	strh	r3, [r5, #2]
			return ret;
    219a:	e7f2      	b.n	2182 <_i2c_m_sync_transfer+0x76>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    219c:	6862      	ldr	r2, [r4, #4]
    219e:	23c0      	movs	r3, #192	; 0xc0
    21a0:	029b      	lsls	r3, r3, #10
    21a2:	4313      	orrs	r3, r2
    21a4:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    21a6:	8a23      	ldrh	r3, [r4, #16]
    21a8:	0bdb      	lsrs	r3, r3, #15
    21aa:	d1fc      	bne.n	21a6 <_i2c_m_sync_transfer+0x9a>
    21ac:	e7f1      	b.n	2192 <_i2c_m_sync_transfer+0x86>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    21ae:	075b      	lsls	r3, r3, #29
    21b0:	d40b      	bmi.n	21ca <_i2c_m_sync_transfer+0xbe>
			if (msg->len == 0) {
    21b2:	6868      	ldr	r0, [r5, #4]
    21b4:	2800      	cmp	r0, #0
    21b6:	d12d      	bne.n	2214 <_i2c_m_sync_transfer+0x108>
				if (msg->flags & I2C_M_STOP) {
    21b8:	886b      	ldrh	r3, [r5, #2]
    21ba:	b21b      	sxth	r3, r3
    21bc:	2b00      	cmp	r3, #0
    21be:	db20      	blt.n	2202 <_i2c_m_sync_transfer+0xf6>
				msg->flags &= ~I2C_M_BUSY;
    21c0:	886b      	ldrh	r3, [r5, #2]
    21c2:	4a56      	ldr	r2, [pc, #344]	; (231c <_i2c_m_sync_transfer+0x210>)
    21c4:	4013      	ands	r3, r2
    21c6:	806b      	strh	r3, [r5, #2]
    21c8:	e055      	b.n	2276 <_i2c_m_sync_transfer+0x16a>
				if (msg->len > 0) {
    21ca:	686b      	ldr	r3, [r5, #4]
    21cc:	2b00      	cmp	r3, #0
    21ce:	dd04      	ble.n	21da <_i2c_m_sync_transfer+0xce>
					msg->flags |= I2C_M_FAIL;
    21d0:	886b      	ldrh	r3, [r5, #2]
    21d2:	2280      	movs	r2, #128	; 0x80
    21d4:	0152      	lsls	r2, r2, #5
    21d6:	4313      	orrs	r3, r2
    21d8:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    21da:	886b      	ldrh	r3, [r5, #2]
    21dc:	b21b      	sxth	r3, r3
    21de:	2b00      	cmp	r3, #0
    21e0:	db06      	blt.n	21f0 <_i2c_m_sync_transfer+0xe4>
				msg->flags &= ~I2C_M_BUSY;
    21e2:	886b      	ldrh	r3, [r5, #2]
    21e4:	4a4d      	ldr	r2, [pc, #308]	; (231c <_i2c_m_sync_transfer+0x210>)
    21e6:	4013      	ands	r3, r2
    21e8:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    21ea:	2002      	movs	r0, #2
    21ec:	4240      	negs	r0, r0
    21ee:	e042      	b.n	2276 <_i2c_m_sync_transfer+0x16a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    21f0:	6862      	ldr	r2, [r4, #4]
    21f2:	23c0      	movs	r3, #192	; 0xc0
    21f4:	029b      	lsls	r3, r3, #10
    21f6:	4313      	orrs	r3, r2
    21f8:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    21fa:	8a23      	ldrh	r3, [r4, #16]
    21fc:	0bdb      	lsrs	r3, r3, #15
    21fe:	d1fc      	bne.n	21fa <_i2c_m_sync_transfer+0xee>
    2200:	e7ef      	b.n	21e2 <_i2c_m_sync_transfer+0xd6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2202:	6862      	ldr	r2, [r4, #4]
    2204:	23c0      	movs	r3, #192	; 0xc0
    2206:	029b      	lsls	r3, r3, #10
    2208:	4313      	orrs	r3, r2
    220a:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    220c:	8a23      	ldrh	r3, [r4, #16]
    220e:	0bdb      	lsrs	r3, r3, #15
    2210:	d1fc      	bne.n	220c <_i2c_m_sync_transfer+0x100>
    2212:	e7d5      	b.n	21c0 <_i2c_m_sync_transfer+0xb4>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    2214:	68ab      	ldr	r3, [r5, #8]
    2216:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    2218:	7623      	strb	r3, [r4, #24]
				msg->buffer++;
    221a:	68ab      	ldr	r3, [r5, #8]
    221c:	3301      	adds	r3, #1
    221e:	60ab      	str	r3, [r5, #8]
				msg->len--;
    2220:	686b      	ldr	r3, [r5, #4]
    2222:	3b01      	subs	r3, #1
    2224:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    2226:	2000      	movs	r0, #0
    2228:	e025      	b.n	2276 <_i2c_m_sync_transfer+0x16a>
	} else if (flags & SB_FLAG) {
    222a:	078a      	lsls	r2, r1, #30
    222c:	d569      	bpl.n	2302 <_i2c_m_sync_transfer+0x1f6>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    222e:	686a      	ldr	r2, [r5, #4]
    2230:	2a00      	cmp	r2, #0
    2232:	d05e      	beq.n	22f2 <_i2c_m_sync_transfer+0x1e6>
    2234:	075b      	lsls	r3, r3, #29
    2236:	d45c      	bmi.n	22f2 <_i2c_m_sync_transfer+0x1e6>
			msg->len--;
    2238:	3a01      	subs	r2, #1
    223a:	606a      	str	r2, [r5, #4]
			if (msg->len == 0) {
    223c:	2a00      	cmp	r2, #0
    223e:	d107      	bne.n	2250 <_i2c_m_sync_transfer+0x144>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2240:	6862      	ldr	r2, [r4, #4]
    2242:	2380      	movs	r3, #128	; 0x80
    2244:	02db      	lsls	r3, r3, #11
    2246:	4313      	orrs	r3, r2
    2248:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    224a:	8a23      	ldrh	r3, [r4, #16]
    224c:	0bdb      	lsrs	r3, r3, #15
    224e:	d1fc      	bne.n	224a <_i2c_m_sync_transfer+0x13e>
			if (msg->len == 0) {
    2250:	686b      	ldr	r3, [r5, #4]
    2252:	2b00      	cmp	r3, #0
    2254:	d107      	bne.n	2266 <_i2c_m_sync_transfer+0x15a>
				if (msg->flags & I2C_M_STOP) {
    2256:	886b      	ldrh	r3, [r5, #2]
    2258:	b21b      	sxth	r3, r3
    225a:	2b00      	cmp	r3, #0
    225c:	db39      	blt.n	22d2 <_i2c_m_sync_transfer+0x1c6>
				msg->flags &= ~I2C_M_BUSY;
    225e:	886b      	ldrh	r3, [r5, #2]
    2260:	4a2e      	ldr	r2, [pc, #184]	; (231c <_i2c_m_sync_transfer+0x210>)
    2262:	4013      	ands	r3, r2
    2264:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    2266:	68ab      	ldr	r3, [r5, #8]
    2268:	1c5a      	adds	r2, r3, #1
    226a:	60aa      	str	r2, [r5, #8]
	return ((Sercom *)hw)->I2CM.DATA.reg;
    226c:	7e22      	ldrb	r2, [r4, #24]
    226e:	701a      	strb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2270:	2302      	movs	r3, #2
    2272:	73a3      	strb	r3, [r4, #14]
	return I2C_OK;
    2274:	2000      	movs	r0, #0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    2276:	886b      	ldrh	r3, [r5, #2]
    2278:	05db      	lsls	r3, r3, #23
    227a:	d400      	bmi.n	227e <_i2c_m_sync_transfer+0x172>
    227c:	e781      	b.n	2182 <_i2c_m_sync_transfer+0x76>
	void *   hw      = i2c_dev->hw;
    227e:	692f      	ldr	r7, [r5, #16]
	uint32_t timeout = 65535;
    2280:	4a27      	ldr	r2, [pc, #156]	; (2320 <_i2c_m_sync_transfer+0x214>)
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    2282:	7bbb      	ldrb	r3, [r7, #14]
    2284:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    2286:	0019      	movs	r1, r3
		if (timeout-- == 0) {
    2288:	1e50      	subs	r0, r2, #1
    228a:	2a00      	cmp	r2, #0
    228c:	d100      	bne.n	2290 <_i2c_m_sync_transfer+0x184>
    228e:	e779      	b.n	2184 <_i2c_m_sync_transfer+0x78>
    2290:	0002      	movs	r2, r0
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    2292:	079b      	lsls	r3, r3, #30
    2294:	d0f5      	beq.n	2282 <_i2c_m_sync_transfer+0x176>
	return I2C_OK;
    2296:	2000      	movs	r0, #0
		if (ret) {
    2298:	2800      	cmp	r0, #0
    229a:	d000      	beq.n	229e <_i2c_m_sync_transfer+0x192>
    229c:	e775      	b.n	218a <_i2c_m_sync_transfer+0x7e>
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    229e:	8a23      	ldrh	r3, [r4, #16]
    22a0:	0bdb      	lsrs	r3, r3, #15
    22a2:	d1fc      	bne.n	229e <_i2c_m_sync_transfer+0x192>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    22a4:	8a23      	ldrh	r3, [r4, #16]
    22a6:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    22a8:	07ca      	lsls	r2, r1, #31
    22aa:	d5be      	bpl.n	222a <_i2c_m_sync_transfer+0x11e>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    22ac:	079a      	lsls	r2, r3, #30
    22ae:	d400      	bmi.n	22b2 <_i2c_m_sync_transfer+0x1a6>
    22b0:	e77d      	b.n	21ae <_i2c_m_sync_transfer+0xa2>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    22b2:	2201      	movs	r2, #1
    22b4:	73a2      	strb	r2, [r4, #14]
			msg->flags |= I2C_M_FAIL;
    22b6:	886a      	ldrh	r2, [r5, #2]
    22b8:	2180      	movs	r1, #128	; 0x80
    22ba:	0149      	lsls	r1, r1, #5
    22bc:	430a      	orrs	r2, r1
    22be:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    22c0:	886a      	ldrh	r2, [r5, #2]
    22c2:	4916      	ldr	r1, [pc, #88]	; (231c <_i2c_m_sync_transfer+0x210>)
    22c4:	400a      	ands	r2, r1
    22c6:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    22c8:	07db      	lsls	r3, r3, #31
    22ca:	d517      	bpl.n	22fc <_i2c_m_sync_transfer+0x1f0>
				return I2C_ERR_BUS;
    22cc:	2005      	movs	r0, #5
    22ce:	4240      	negs	r0, r0
    22d0:	e7d1      	b.n	2276 <_i2c_m_sync_transfer+0x16a>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    22d2:	6863      	ldr	r3, [r4, #4]
    22d4:	4a11      	ldr	r2, [pc, #68]	; (231c <_i2c_m_sync_transfer+0x210>)
    22d6:	4013      	ands	r3, r2
    22d8:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    22da:	8a23      	ldrh	r3, [r4, #16]
    22dc:	0bdb      	lsrs	r3, r3, #15
    22de:	d1fc      	bne.n	22da <_i2c_m_sync_transfer+0x1ce>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    22e0:	6862      	ldr	r2, [r4, #4]
    22e2:	23c0      	movs	r3, #192	; 0xc0
    22e4:	029b      	lsls	r3, r3, #10
    22e6:	4313      	orrs	r3, r2
    22e8:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    22ea:	8a23      	ldrh	r3, [r4, #16]
    22ec:	0bdb      	lsrs	r3, r3, #15
    22ee:	d1fc      	bne.n	22ea <_i2c_m_sync_transfer+0x1de>
    22f0:	e7b5      	b.n	225e <_i2c_m_sync_transfer+0x152>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    22f2:	2302      	movs	r3, #2
    22f4:	73a3      	strb	r3, [r4, #14]
			return I2C_NACK;
    22f6:	2002      	movs	r0, #2
    22f8:	4240      	negs	r0, r0
    22fa:	e7bc      	b.n	2276 <_i2c_m_sync_transfer+0x16a>
			return I2C_ERR_BAD_ADDRESS;
    22fc:	2004      	movs	r0, #4
    22fe:	4240      	negs	r0, r0
    2300:	e7b9      	b.n	2276 <_i2c_m_sync_transfer+0x16a>
	return I2C_OK;
    2302:	2000      	movs	r0, #0
    2304:	e7b7      	b.n	2276 <_i2c_m_sync_transfer+0x16a>
		return I2C_ERR_BUSY;
    2306:	2006      	movs	r0, #6
    2308:	4240      	negs	r0, r0
    230a:	e73a      	b.n	2182 <_i2c_m_sync_transfer+0x76>
    230c:	0000b360 	.word	0x0000b360
    2310:	0000059b 	.word	0x0000059b
    2314:	0000059c 	.word	0x0000059c
    2318:	0000059d 	.word	0x0000059d
    231c:	fffffeff 	.word	0xfffffeff
    2320:	0000ffff 	.word	0x0000ffff

00002324 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    2324:	b570      	push	{r4, r5, r6, lr}
    2326:	0006      	movs	r6, r0
    2328:	000c      	movs	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    232a:	0008      	movs	r0, r1
    232c:	f7ff fcda 	bl	1ce4 <_sercom_get_hardware_index>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    2330:	2300      	movs	r3, #0
    2332:	e001      	b.n	2338 <_spi_m_sync_init+0x14>
    2334:	3301      	adds	r3, #1
    2336:	b2db      	uxtb	r3, r3
    2338:	2b02      	cmp	r3, #2
    233a:	d808      	bhi.n	234e <_spi_m_sync_init+0x2a>
		if (sercomspi_regs[i].n == n) {
    233c:	0119      	lsls	r1, r3, #4
    233e:	4a5e      	ldr	r2, [pc, #376]	; (24b8 <_spi_m_sync_init+0x194>)
    2340:	1852      	adds	r2, r2, r1
    2342:	7bd2      	ldrb	r2, [r2, #15]
    2344:	4290      	cmp	r0, r2
    2346:	d1f5      	bne.n	2334 <_spi_m_sync_init+0x10>
			return &sercomspi_regs[i];
    2348:	4b5b      	ldr	r3, [pc, #364]	; (24b8 <_spi_m_sync_init+0x194>)
    234a:	185d      	adds	r5, r3, r1
    234c:	e000      	b.n	2350 <_spi_m_sync_init+0x2c>
	return NULL;
    234e:	2500      	movs	r5, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    2350:	2e00      	cmp	r6, #0
    2352:	d100      	bne.n	2356 <_spi_m_sync_init+0x32>
    2354:	e06a      	b.n	242c <_spi_m_sync_init+0x108>
    2356:	2c00      	cmp	r4, #0
    2358:	d100      	bne.n	235c <_spi_m_sync_init+0x38>
    235a:	e065      	b.n	2428 <_spi_m_sync_init+0x104>
    235c:	2001      	movs	r0, #1
    235e:	4a57      	ldr	r2, [pc, #348]	; (24bc <_spi_m_sync_init+0x198>)
    2360:	4957      	ldr	r1, [pc, #348]	; (24c0 <_spi_m_sync_init+0x19c>)
    2362:	f7ff fb7f 	bl	1a64 <assert>

	if (regs == NULL) {
    2366:	2d00      	cmp	r5, #0
    2368:	d100      	bne.n	236c <_spi_m_sync_init+0x48>
    236a:	e0a2      	b.n	24b2 <_spi_m_sync_init+0x18e>
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    236c:	8a23      	ldrh	r3, [r4, #16]
    236e:	0bdb      	lsrs	r3, r3, #15
    2370:	d1fc      	bne.n	236c <_spi_m_sync_init+0x48>
    2372:	8a23      	ldrh	r3, [r4, #16]
    2374:	0bdb      	lsrs	r3, r3, #15
    2376:	d1fc      	bne.n	2372 <_spi_m_sync_init+0x4e>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2378:	6823      	ldr	r3, [r4, #0]
		return ERR_INVALID_ARG;
	}

	hri_sercomspi_wait_for_sync(hw);
	if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    237a:	079b      	lsls	r3, r3, #30
    237c:	d507      	bpl.n	238e <_spi_m_sync_init+0x6a>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    237e:	2300      	movs	r3, #0
    2380:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    2382:	8a23      	ldrh	r3, [r4, #16]
    2384:	0bdb      	lsrs	r3, r3, #15
    2386:	d1fc      	bne.n	2382 <_spi_m_sync_init+0x5e>
    2388:	8a23      	ldrh	r3, [r4, #16]
    238a:	0bdb      	lsrs	r3, r3, #15
    238c:	d1fc      	bne.n	2388 <_spi_m_sync_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    238e:	2301      	movs	r3, #1
    2390:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    2392:	8a23      	ldrh	r3, [r4, #16]
    2394:	0bdb      	lsrs	r3, r3, #15
    2396:	d1fc      	bne.n	2392 <_spi_m_sync_init+0x6e>
    2398:	8a23      	ldrh	r3, [r4, #16]
    239a:	0bdb      	lsrs	r3, r3, #15
    239c:	d1fc      	bne.n	2398 <_spi_m_sync_init+0x74>
		hri_sercomspi_wait_for_sync(hw);
	}
	hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST);
	hri_sercomspi_wait_for_sync(hw);

	dev->prvt = hw;
    239e:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    23a0:	782b      	ldrb	r3, [r5, #0]
    23a2:	786a      	ldrb	r2, [r5, #1]
    23a4:	0212      	lsls	r2, r2, #8
    23a6:	431a      	orrs	r2, r3
    23a8:	78ab      	ldrb	r3, [r5, #2]
    23aa:	041b      	lsls	r3, r3, #16
    23ac:	431a      	orrs	r2, r3
    23ae:	78eb      	ldrb	r3, [r5, #3]
    23b0:	061b      	lsls	r3, r3, #24
    23b2:	4313      	orrs	r3, r2
    23b4:	221c      	movs	r2, #28
    23b6:	4013      	ands	r3, r2
    23b8:	2b08      	cmp	r3, #8
    23ba:	d039      	beq.n	2430 <_spi_m_sync_init+0x10c>
	ASSERT(hw && regs);
    23bc:	2c00      	cmp	r4, #0
    23be:	d100      	bne.n	23c2 <_spi_m_sync_init+0x9e>
    23c0:	e073      	b.n	24aa <_spi_m_sync_init+0x186>
    23c2:	2d00      	cmp	r5, #0
    23c4:	d100      	bne.n	23c8 <_spi_m_sync_init+0xa4>
    23c6:	e06e      	b.n	24a6 <_spi_m_sync_init+0x182>
    23c8:	2001      	movs	r0, #1
    23ca:	4a3e      	ldr	r2, [pc, #248]	; (24c4 <_spi_m_sync_init+0x1a0>)
    23cc:	493c      	ldr	r1, [pc, #240]	; (24c0 <_spi_m_sync_init+0x19c>)
    23ce:	f7ff fb49 	bl	1a64 <assert>
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    23d2:	782b      	ldrb	r3, [r5, #0]
    23d4:	786a      	ldrb	r2, [r5, #1]
    23d6:	0212      	lsls	r2, r2, #8
    23d8:	431a      	orrs	r2, r3
    23da:	78ab      	ldrb	r3, [r5, #2]
    23dc:	041b      	lsls	r3, r3, #16
    23de:	431a      	orrs	r2, r3
    23e0:	78eb      	ldrb	r3, [r5, #3]
    23e2:	061b      	lsls	r3, r3, #24
    23e4:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    23e6:	4a38      	ldr	r2, [pc, #224]	; (24c8 <_spi_m_sync_init+0x1a4>)
    23e8:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    23ea:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    23ec:	8a23      	ldrh	r3, [r4, #16]
    23ee:	0bdb      	lsrs	r3, r3, #15
    23f0:	d1fc      	bne.n	23ec <_spi_m_sync_init+0xc8>
	    hw, (regs->ctrlb & ~(SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_PLOADEN)) | (SERCOM_SPI_CTRLB_RXEN));
    23f2:	792b      	ldrb	r3, [r5, #4]
    23f4:	796a      	ldrb	r2, [r5, #5]
    23f6:	0212      	lsls	r2, r2, #8
    23f8:	431a      	orrs	r2, r3
    23fa:	79ab      	ldrb	r3, [r5, #6]
    23fc:	041b      	lsls	r3, r3, #16
    23fe:	431a      	orrs	r2, r3
    2400:	79eb      	ldrb	r3, [r5, #7]
    2402:	061b      	lsls	r3, r3, #24
    2404:	4313      	orrs	r3, r2
    2406:	4a31      	ldr	r2, [pc, #196]	; (24cc <_spi_m_sync_init+0x1a8>)
    2408:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    240a:	2280      	movs	r2, #128	; 0x80
    240c:	0292      	lsls	r2, r2, #10
    240e:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    2410:	6063      	str	r3, [r4, #4]
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    2412:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    2414:	72a3      	strb	r3, [r4, #10]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    2416:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    2418:	7223      	strb	r3, [r4, #8]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    241a:	792b      	ldrb	r3, [r5, #4]
    241c:	075b      	lsls	r3, r3, #29
    241e:	d146      	bne.n	24ae <_spi_m_sync_init+0x18a>
    2420:	2301      	movs	r3, #1
    2422:	7133      	strb	r3, [r6, #4]

	return ERR_NONE;
    2424:	2000      	movs	r0, #0
}
    2426:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    2428:	2000      	movs	r0, #0
    242a:	e798      	b.n	235e <_spi_m_sync_init+0x3a>
    242c:	2000      	movs	r0, #0
    242e:	e796      	b.n	235e <_spi_m_sync_init+0x3a>
	ASSERT(hw && regs);
    2430:	2c00      	cmp	r4, #0
    2432:	d036      	beq.n	24a2 <_spi_m_sync_init+0x17e>
    2434:	2d00      	cmp	r5, #0
    2436:	d032      	beq.n	249e <_spi_m_sync_init+0x17a>
    2438:	2001      	movs	r0, #1
    243a:	4a25      	ldr	r2, [pc, #148]	; (24d0 <_spi_m_sync_init+0x1ac>)
    243c:	4920      	ldr	r1, [pc, #128]	; (24c0 <_spi_m_sync_init+0x19c>)
    243e:	f7ff fb11 	bl	1a64 <assert>
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    2442:	782b      	ldrb	r3, [r5, #0]
    2444:	786a      	ldrb	r2, [r5, #1]
    2446:	0212      	lsls	r2, r2, #8
    2448:	431a      	orrs	r2, r3
    244a:	78ab      	ldrb	r3, [r5, #2]
    244c:	041b      	lsls	r3, r3, #16
    244e:	431a      	orrs	r2, r3
    2450:	78eb      	ldrb	r3, [r5, #3]
    2452:	061b      	lsls	r3, r3, #24
    2454:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    2456:	4a1c      	ldr	r2, [pc, #112]	; (24c8 <_spi_m_sync_init+0x1a4>)
    2458:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    245a:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    245c:	8a23      	ldrh	r3, [r4, #16]
    245e:	0bdb      	lsrs	r3, r3, #15
    2460:	d1fc      	bne.n	245c <_spi_m_sync_init+0x138>
	hri_sercomspi_write_CTRLB_reg(hw, regs->ctrlb | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_PLOADEN));
    2462:	792b      	ldrb	r3, [r5, #4]
    2464:	796a      	ldrb	r2, [r5, #5]
    2466:	0212      	lsls	r2, r2, #8
    2468:	431a      	orrs	r2, r3
    246a:	79ab      	ldrb	r3, [r5, #6]
    246c:	041b      	lsls	r3, r3, #16
    246e:	431a      	orrs	r2, r3
    2470:	79eb      	ldrb	r3, [r5, #7]
    2472:	061b      	lsls	r3, r3, #24
    2474:	4313      	orrs	r3, r2
    2476:	4a17      	ldr	r2, [pc, #92]	; (24d4 <_spi_m_sync_init+0x1b0>)
    2478:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    247a:	6063      	str	r3, [r4, #4]
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    247c:	7a2b      	ldrb	r3, [r5, #8]
    247e:	7a6a      	ldrb	r2, [r5, #9]
    2480:	0212      	lsls	r2, r2, #8
    2482:	431a      	orrs	r2, r3
    2484:	7aab      	ldrb	r3, [r5, #10]
    2486:	041b      	lsls	r3, r3, #16
    2488:	431a      	orrs	r2, r3
    248a:	7aeb      	ldrb	r3, [r5, #11]
    248c:	061b      	lsls	r3, r3, #24
    248e:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.ADDR.reg = data;
    2490:	6163      	str	r3, [r4, #20]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    2492:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    2494:	7223      	strb	r3, [r4, #8]
	return ((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY;
    2496:	8a23      	ldrh	r3, [r4, #16]
    2498:	0bdb      	lsrs	r3, r3, #15
	while (hri_sercomspi_is_syncing(hw))
    249a:	d1fc      	bne.n	2496 <_spi_m_sync_init+0x172>
    249c:	e7bd      	b.n	241a <_spi_m_sync_init+0xf6>
	ASSERT(hw && regs);
    249e:	2000      	movs	r0, #0
    24a0:	e7cb      	b.n	243a <_spi_m_sync_init+0x116>
    24a2:	2000      	movs	r0, #0
    24a4:	e7c9      	b.n	243a <_spi_m_sync_init+0x116>
	ASSERT(hw && regs);
    24a6:	2000      	movs	r0, #0
    24a8:	e78f      	b.n	23ca <_spi_m_sync_init+0xa6>
    24aa:	2000      	movs	r0, #0
    24ac:	e78d      	b.n	23ca <_spi_m_sync_init+0xa6>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    24ae:	2302      	movs	r3, #2
    24b0:	e7b7      	b.n	2422 <_spi_m_sync_init+0xfe>
		return ERR_INVALID_ARG;
    24b2:	200d      	movs	r0, #13
    24b4:	4240      	negs	r0, r0
    24b6:	e7b6      	b.n	2426 <_spi_m_sync_init+0x102>
    24b8:	0000b3bc 	.word	0x0000b3bc
    24bc:	000008a3 	.word	0x000008a3
    24c0:	0000b360 	.word	0x0000b360
    24c4:	00000872 	.word	0x00000872
    24c8:	fffffefc 	.word	0xfffffefc
    24cc:	fffd3fbf 	.word	0xfffd3fbf
    24d0:	00000883 	.word	0x00000883
    24d4:	00020040 	.word	0x00020040

000024d8 <_spi_m_sync_enable>:

	return _spi_deinit(hw);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    24d8:	b510      	push	{r4, lr}
    24da:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    24dc:	d00d      	beq.n	24fa <_spi_m_sync_enable+0x22>
    24de:	6803      	ldr	r3, [r0, #0]
    24e0:	2b00      	cmp	r3, #0
    24e2:	d008      	beq.n	24f6 <_spi_m_sync_enable+0x1e>
    24e4:	2001      	movs	r0, #1
    24e6:	4a06      	ldr	r2, [pc, #24]	; (2500 <_spi_m_sync_enable+0x28>)
    24e8:	4906      	ldr	r1, [pc, #24]	; (2504 <_spi_m_sync_enable+0x2c>)
    24ea:	f7ff fabb 	bl	1a64 <assert>

	return _spi_sync_enable(dev->prvt);
    24ee:	6820      	ldr	r0, [r4, #0]
    24f0:	f7ff fc00 	bl	1cf4 <_spi_sync_enable>
}
    24f4:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    24f6:	2000      	movs	r0, #0
    24f8:	e7f5      	b.n	24e6 <_spi_m_sync_enable+0xe>
    24fa:	2000      	movs	r0, #0
    24fc:	e7f3      	b.n	24e6 <_spi_m_sync_enable+0xe>
    24fe:	46c0      	nop			; (mov r8, r8)
    2500:	0000090a 	.word	0x0000090a
    2504:	0000b360 	.word	0x0000b360

00002508 <_spi_m_sync_trans>:
	ctrl->txcnt++;
	hri_sercomspi_write_DATA_reg(hw, data);
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    2508:	b570      	push	{r4, r5, r6, lr}
    250a:	b088      	sub	sp, #32
    250c:	000d      	movs	r5, r1
	void *                 hw   = dev->prvt;
    250e:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    2510:	680b      	ldr	r3, [r1, #0]
    2512:	9303      	str	r3, [sp, #12]
    2514:	684b      	ldr	r3, [r1, #4]
    2516:	9304      	str	r3, [sp, #16]
    2518:	2300      	movs	r3, #0
    251a:	9305      	str	r3, [sp, #20]
    251c:	9306      	str	r3, [sp, #24]
    251e:	7906      	ldrb	r6, [r0, #4]

	ASSERT(dev && hw);
    2520:	2800      	cmp	r0, #0
    2522:	d014      	beq.n	254e <_spi_m_sync_trans+0x46>
    2524:	2c00      	cmp	r4, #0
    2526:	d010      	beq.n	254a <_spi_m_sync_trans+0x42>
    2528:	2001      	movs	r0, #1
    252a:	4a2d      	ldr	r2, [pc, #180]	; (25e0 <_spi_m_sync_trans+0xd8>)
    252c:	492d      	ldr	r1, [pc, #180]	; (25e4 <_spi_m_sync_trans+0xdc>)
    252e:	f7ff fa99 	bl	1a64 <assert>
    2532:	8a23      	ldrh	r3, [r4, #16]
    2534:	0bdb      	lsrs	r3, r3, #15

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(hw)) {
    2536:	d14f      	bne.n	25d8 <_spi_m_sync_trans+0xd0>
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    2538:	8a23      	ldrh	r3, [r4, #16]
    253a:	0bdb      	lsrs	r3, r3, #15
    253c:	d1fc      	bne.n	2538 <_spi_m_sync_trans+0x30>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    253e:	6823      	ldr	r3, [r4, #0]
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    2540:	079b      	lsls	r3, r3, #30
    2542:	d418      	bmi.n	2576 <_spi_m_sync_trans+0x6e>
		return ERR_NOT_INITIALIZED;
    2544:	2014      	movs	r0, #20
    2546:	4240      	negs	r0, r0
    2548:	e044      	b.n	25d4 <_spi_m_sync_trans+0xcc>
	ASSERT(dev && hw);
    254a:	2000      	movs	r0, #0
    254c:	e7ed      	b.n	252a <_spi_m_sync_trans+0x22>
    254e:	2000      	movs	r0, #0
    2550:	e7eb      	b.n	252a <_spi_m_sync_trans+0x22>
		return false;
    2552:	2200      	movs	r2, #0
    2554:	e026      	b.n	25a4 <_spi_m_sync_trans+0x9c>
			data |= (*ctrl->txbuf) << 8;
    2556:	7858      	ldrb	r0, [r3, #1]
    2558:	0200      	lsls	r0, r0, #8
    255a:	4301      	orrs	r1, r0
			ctrl->txbuf++;
    255c:	3302      	adds	r3, #2
    255e:	9303      	str	r3, [sp, #12]
	ctrl->txcnt++;
    2560:	3201      	adds	r2, #1
    2562:	9205      	str	r2, [sp, #20]
	hri_sercomspi_write_DATA_reg(hw, data);
    2564:	b289      	uxth	r1, r1
	((Sercom *)hw)->SPI.DATA.reg = data;
    2566:	8321      	strh	r1, [r4, #24]
			if (ctrl.rxcnt >= ctrl.txcnt) {
				_spi_tx_check(hw, iflag, &ctrl);
			}
		}

		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    2568:	9805      	ldr	r0, [sp, #20]
    256a:	68ab      	ldr	r3, [r5, #8]
    256c:	4298      	cmp	r0, r3
    256e:	d302      	bcc.n	2576 <_spi_m_sync_trans+0x6e>
    2570:	9a06      	ldr	r2, [sp, #24]
    2572:	4293      	cmp	r3, r2
    2574:	d929      	bls.n	25ca <_spi_m_sync_trans+0xc2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    2576:	7ba3      	ldrb	r3, [r4, #14]
    2578:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    257a:	075a      	lsls	r2, r3, #29
    257c:	d5e9      	bpl.n	2552 <_spi_m_sync_trans+0x4a>
	return ((Sercom *)hw)->SPI.DATA.reg;
    257e:	8b22      	ldrh	r2, [r4, #24]
    2580:	b292      	uxth	r2, r2
	if (ctrl->rxbuf) {
    2582:	9904      	ldr	r1, [sp, #16]
    2584:	2900      	cmp	r1, #0
    2586:	d008      	beq.n	259a <_spi_m_sync_trans+0x92>
		*ctrl->rxbuf++ = (uint8_t)data;
    2588:	1c48      	adds	r0, r1, #1
    258a:	9004      	str	r0, [sp, #16]
    258c:	700a      	strb	r2, [r1, #0]
		if (ctrl->char_size > 1) {
    258e:	2e01      	cmp	r6, #1
    2590:	d903      	bls.n	259a <_spi_m_sync_trans+0x92>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    2592:	1c88      	adds	r0, r1, #2
    2594:	9004      	str	r0, [sp, #16]
    2596:	0a12      	lsrs	r2, r2, #8
    2598:	704a      	strb	r2, [r1, #1]
	ctrl->rxcnt++;
    259a:	9a06      	ldr	r2, [sp, #24]
    259c:	9201      	str	r2, [sp, #4]
    259e:	3201      	adds	r2, #1
    25a0:	9206      	str	r2, [sp, #24]
	return true;
    25a2:	2201      	movs	r2, #1
		if (!_spi_rx_check(hw, iflag, &ctrl)) {
    25a4:	2a00      	cmp	r2, #0
    25a6:	d1df      	bne.n	2568 <_spi_m_sync_trans+0x60>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    25a8:	9906      	ldr	r1, [sp, #24]
    25aa:	9a05      	ldr	r2, [sp, #20]
    25ac:	4291      	cmp	r1, r2
    25ae:	d3db      	bcc.n	2568 <_spi_m_sync_trans+0x60>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    25b0:	07db      	lsls	r3, r3, #31
    25b2:	d5d9      	bpl.n	2568 <_spi_m_sync_trans+0x60>
	if (ctrl->txbuf) {
    25b4:	9b03      	ldr	r3, [sp, #12]
    25b6:	2b00      	cmp	r3, #0
    25b8:	d005      	beq.n	25c6 <_spi_m_sync_trans+0xbe>
		data = *ctrl->txbuf++;
    25ba:	1c59      	adds	r1, r3, #1
    25bc:	9103      	str	r1, [sp, #12]
    25be:	7819      	ldrb	r1, [r3, #0]
		if (ctrl->char_size > 1) {
    25c0:	2e01      	cmp	r6, #1
    25c2:	d8c8      	bhi.n	2556 <_spi_m_sync_trans+0x4e>
    25c4:	e7cc      	b.n	2560 <_spi_m_sync_trans+0x58>
		data = SPI_DUMMY_CHAR;
    25c6:	4908      	ldr	r1, [pc, #32]	; (25e8 <_spi_m_sync_trans+0xe0>)
    25c8:	e7ca      	b.n	2560 <_spi_m_sync_trans+0x58>
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    25ca:	7ba3      	ldrb	r3, [r4, #14]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    25cc:	079b      	lsls	r3, r3, #30
    25ce:	d0fc      	beq.n	25ca <_spi_m_sync_trans+0xc2>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    25d0:	2303      	movs	r3, #3
    25d2:	73a3      	strb	r3, [r4, #14]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    25d4:	b008      	add	sp, #32
    25d6:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_BUSY;
    25d8:	2004      	movs	r0, #4
    25da:	4240      	negs	r0, r0
    25dc:	e7fa      	b.n	25d4 <_spi_m_sync_trans+0xcc>
    25de:	46c0      	nop			; (mov r8, r8)
    25e0:	00000a01 	.word	0x00000a01
    25e4:	0000b360 	.word	0x0000b360
    25e8:	000001ff 	.word	0x000001ff

000025ec <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    25ec:	4a16      	ldr	r2, [pc, #88]	; (2648 <_sysctrl_init_sources+0x5c>)
    25ee:	6a11      	ldr	r1, [r2, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    25f0:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    25f2:	6a13      	ldr	r3, [r2, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    25f4:	0f9b      	lsrs	r3, r3, #30
    25f6:	079b      	lsls	r3, r3, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    25f8:	0409      	lsls	r1, r1, #16
    25fa:	4814      	ldr	r0, [pc, #80]	; (264c <_sysctrl_init_sources+0x60>)
    25fc:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    25fe:	430b      	orrs	r3, r1
	hri_sysctrl_write_OSC8M_reg(hw,
    2600:	4913      	ldr	r1, [pc, #76]	; (2650 <_sysctrl_init_sources+0x64>)
    2602:	430b      	orrs	r3, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    2604:	6213      	str	r3, [r2, #32]
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
    2606:	6993      	ldr	r3, [r2, #24]
	tmp = (tmp & SYSCTRL_OSC32K_CALIB_Msk) >> SYSCTRL_OSC32K_CALIB_Pos;
    2608:	0c1b      	lsrs	r3, r3, #16
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
    260a:	041b      	lsls	r3, r3, #16
    260c:	21fe      	movs	r1, #254	; 0xfe
    260e:	03c9      	lsls	r1, r1, #15
    2610:	400b      	ands	r3, r1
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
    2612:	210e      	movs	r1, #14
    2614:	430b      	orrs	r3, r1
	((Sysctrl *)hw)->OSC32K.reg = data;
    2616:	6193      	str	r3, [r2, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    2618:	7f13      	ldrb	r3, [r2, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    261a:	3111      	adds	r1, #17
    261c:	400b      	ands	r3, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    261e:	7713      	strb	r3, [r2, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
    2620:	4b09      	ldr	r3, [pc, #36]	; (2648 <_sysctrl_init_sources+0x5c>)
    2622:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
    2624:	075b      	lsls	r3, r3, #29
    2626:	d5fb      	bpl.n	2620 <_sysctrl_init_sources+0x34>
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ONDEMAND;
    2628:	4a07      	ldr	r2, [pc, #28]	; (2648 <_sysctrl_init_sources+0x5c>)
    262a:	6993      	ldr	r3, [r2, #24]
    262c:	2180      	movs	r1, #128	; 0x80
    262e:	430b      	orrs	r3, r1
    2630:	6193      	str	r3, [r2, #24]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    2632:	4b05      	ldr	r3, [pc, #20]	; (2648 <_sysctrl_init_sources+0x5c>)
    2634:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    2636:	071b      	lsls	r3, r3, #28
    2638:	d5fb      	bpl.n	2632 <_sysctrl_init_sources+0x46>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    263a:	4a03      	ldr	r2, [pc, #12]	; (2648 <_sysctrl_init_sources+0x5c>)
    263c:	6a13      	ldr	r3, [r2, #32]
    263e:	2180      	movs	r1, #128	; 0x80
    2640:	430b      	orrs	r3, r1
    2642:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    2644:	4770      	bx	lr
    2646:	46c0      	nop			; (mov r8, r8)
    2648:	40000800 	.word	0x40000800
    264c:	0fff0000 	.word	0x0fff0000
    2650:	00000302 	.word	0x00000302

00002654 <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    2654:	2202      	movs	r2, #2
    2656:	4b19      	ldr	r3, [pc, #100]	; (26bc <_sysctrl_init_referenced_generators+0x68>)
    2658:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    265a:	4b18      	ldr	r3, [pc, #96]	; (26bc <_sysctrl_init_referenced_generators+0x68>)
    265c:	68db      	ldr	r3, [r3, #12]
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    265e:	06db      	lsls	r3, r3, #27
    2660:	d5fb      	bpl.n	265a <_sysctrl_init_referenced_generators+0x6>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    2662:	4a17      	ldr	r2, [pc, #92]	; (26c0 <_sysctrl_init_referenced_generators+0x6c>)
    2664:	4b15      	ldr	r3, [pc, #84]	; (26bc <_sysctrl_init_referenced_generators+0x68>)
    2666:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    2668:	4b16      	ldr	r3, [pc, #88]	; (26c4 <_sysctrl_init_referenced_generators+0x70>)
    266a:	681b      	ldr	r3, [r3, #0]
    266c:	0e9b      	lsrs	r3, r3, #26
    266e:	2b3f      	cmp	r3, #63	; 0x3f
    2670:	d01b      	beq.n	26aa <_sysctrl_init_referenced_generators+0x56>
    2672:	029b      	lsls	r3, r3, #10
    2674:	2280      	movs	r2, #128	; 0x80
    2676:	0092      	lsls	r2, r2, #2
    2678:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    267a:	4a10      	ldr	r2, [pc, #64]	; (26bc <_sysctrl_init_referenced_generators+0x68>)
    267c:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    267e:	2302      	movs	r3, #2
    2680:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    2682:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	hri_sysctrl_write_DFLLCTRL_reg(hw, tmp);
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    2684:	075b      	lsls	r3, r3, #29
    2686:	d513      	bpl.n	26b0 <_sysctrl_init_referenced_generators+0x5c>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2688:	4b0c      	ldr	r3, [pc, #48]	; (26bc <_sysctrl_init_referenced_generators+0x68>)
    268a:	68da      	ldr	r2, [r3, #12]
	tmp &= mask;
    268c:	23d0      	movs	r3, #208	; 0xd0
    268e:	4013      	ands	r3, r2
		hri_sysctrl_pclksr_reg_t status_mask
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    2690:	2bd0      	cmp	r3, #208	; 0xd0
    2692:	d1f9      	bne.n	2688 <_sysctrl_init_referenced_generators+0x34>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
    2694:	4a09      	ldr	r2, [pc, #36]	; (26bc <_sysctrl_init_referenced_generators+0x68>)
    2696:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    2698:	2180      	movs	r1, #128	; 0x80
    269a:	430b      	orrs	r3, r1
    269c:	b29b      	uxth	r3, r3
    269e:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    26a0:	4b09      	ldr	r3, [pc, #36]	; (26c8 <_sysctrl_init_referenced_generators+0x74>)
    26a2:	785b      	ldrb	r3, [r3, #1]
	hri_sysctrl_set_DFLLCTRL_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    26a4:	09db      	lsrs	r3, r3, #7
    26a6:	d1fb      	bne.n	26a0 <_sysctrl_init_referenced_generators+0x4c>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    26a8:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    26aa:	23fc      	movs	r3, #252	; 0xfc
    26ac:	01db      	lsls	r3, r3, #7
    26ae:	e7e4      	b.n	267a <_sysctrl_init_referenced_generators+0x26>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    26b0:	4b02      	ldr	r3, [pc, #8]	; (26bc <_sysctrl_init_referenced_generators+0x68>)
    26b2:	68db      	ldr	r3, [r3, #12]
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    26b4:	06db      	lsls	r3, r3, #27
    26b6:	d5fb      	bpl.n	26b0 <_sysctrl_init_referenced_generators+0x5c>
    26b8:	e7ec      	b.n	2694 <_sysctrl_init_referenced_generators+0x40>
    26ba:	46c0      	nop			; (mov r8, r8)
    26bc:	40000800 	.word	0x40000800
    26c0:	04010000 	.word	0x04010000
    26c4:	00806024 	.word	0x00806024
    26c8:	40000c00 	.word	0x40000c00

000026cc <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    26cc:	4b02      	ldr	r3, [pc, #8]	; (26d8 <_system_time_init+0xc>)
    26ce:	4a03      	ldr	r2, [pc, #12]	; (26dc <_system_time_init+0x10>)
    26d0:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    26d2:	2205      	movs	r2, #5
    26d4:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    26d6:	4770      	bx	lr
    26d8:	e000e010 	.word	0xe000e010
    26dc:	00ffffff 	.word	0x00ffffff

000026e0 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    26e0:	b510      	push	{r4, lr}
	_system_time_init(hw);
    26e2:	f7ff fff3 	bl	26cc <_system_time_init>
}
    26e6:	bd10      	pop	{r4, pc}

000026e8 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    26e8:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    26ea:	e00b      	b.n	2704 <_delay_cycles+0x1c>
		SysTick->LOAD = 0xFFFFFF;
    26ec:	4b0b      	ldr	r3, [pc, #44]	; (271c <_delay_cycles+0x34>)
    26ee:	480c      	ldr	r0, [pc, #48]	; (2720 <_delay_cycles+0x38>)
    26f0:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    26f2:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    26f4:	4b09      	ldr	r3, [pc, #36]	; (271c <_delay_cycles+0x34>)
    26f6:	681b      	ldr	r3, [r3, #0]
    26f8:	03db      	lsls	r3, r3, #15
    26fa:	d5fb      	bpl.n	26f4 <_delay_cycles+0xc>
			;
		buf -= 0xFFFFFF;
    26fc:	4b09      	ldr	r3, [pc, #36]	; (2724 <_delay_cycles+0x3c>)
    26fe:	469c      	mov	ip, r3
    2700:	4461      	add	r1, ip
	while (n--) {
    2702:	0010      	movs	r0, r2
    2704:	1e42      	subs	r2, r0, #1
    2706:	b2d2      	uxtb	r2, r2
    2708:	2800      	cmp	r0, #0
    270a:	d1ef      	bne.n	26ec <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
    270c:	4b03      	ldr	r3, [pc, #12]	; (271c <_delay_cycles+0x34>)
    270e:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    2710:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2712:	4b02      	ldr	r3, [pc, #8]	; (271c <_delay_cycles+0x34>)
    2714:	681b      	ldr	r3, [r3, #0]
    2716:	03db      	lsls	r3, r3, #15
    2718:	d5fb      	bpl.n	2712 <_delay_cycles+0x2a>
		;
}
    271a:	4770      	bx	lr
    271c:	e000e010 	.word	0xe000e010
    2720:	00ffffff 	.word	0x00ffffff
    2724:	ff000001 	.word	0xff000001

00002728 <PowerMeterInit>:
#include <math.h>

uint8_t INA_ADDR = 0;


uint8_t PowerMeterInit(uint8_t addr){
    2728:	b500      	push	{lr}
    272a:	b083      	sub	sp, #12
	uint8_t data_reg[3];
	uint16_t config_reg = 0;
	INA_ADDR = addr;
    272c:	4b06      	ldr	r3, [pc, #24]	; (2748 <PowerMeterInit+0x20>)
    272e:	7018      	strb	r0, [r3, #0]
	config_reg |= (SHUNT_AND_BUS_CONTINUOUS << MODE1) | (CONVERSION_TIME_1100us << VSHCT0)  | (CONVERSION_TIME_1100us << VBUSCT0) | (AVERAGES_512 << AVG0) | (0 << RST);
	data_reg[0] = CONFIG_REG;
    2730:	a901      	add	r1, sp, #4
    2732:	2300      	movs	r3, #0
    2734:	700b      	strb	r3, [r1, #0]
	data_reg[1] = (config_reg >> 8) & 0xFF;
    2736:	330d      	adds	r3, #13
    2738:	704b      	strb	r3, [r1, #1]
	data_reg[2] = config_reg & 0xFF;
    273a:	331a      	adds	r3, #26
    273c:	708b      	strb	r3, [r1, #2]
	
	return I2C_write_batch(INA_ADDR, data_reg, sizeof(data_reg));
    273e:	2203      	movs	r2, #3
    2740:	f000 fc70 	bl	3024 <I2C_write_batch>
	uint16_t callibrationReg = 0;
	data_reg[0] = CALIBRATION_REG;
	data_reg[1] = (callibrationReg >> 8) & 0xFF;
	data_reg[2] = callibrationReg & 0xFF;
	return I2C_write_batch(INA_ADDR, data_reg, sizeof(data_reg));
}
    2744:	b003      	add	sp, #12
    2746:	bd00      	pop	{pc}
    2748:	20000e08 	.word	0x20000e08

0000274c <PowerMeterGetReg>:
uint16_t PowerMeterGetId(){
	
	return PowerMeterGetReg(MANUFACTURER_ID_REG);
}

uint16_t PowerMeterGetReg(uint8_t reg_addr){
    274c:	b510      	push	{r4, lr}
    274e:	b082      	sub	sp, #8
    2750:	0001      	movs	r1, r0
	uint8_t reg_raw[2] = {0, 0};	//Read one 16 bit word
    2752:	ac01      	add	r4, sp, #4
    2754:	2300      	movs	r3, #0
    2756:	7023      	strb	r3, [r4, #0]
    2758:	7063      	strb	r3, [r4, #1]
	
	I2C_read_batch_addr(INA_ADDR, reg_addr, reg_raw, sizeof(reg_raw));
    275a:	4b06      	ldr	r3, [pc, #24]	; (2774 <PowerMeterGetReg+0x28>)
    275c:	7818      	ldrb	r0, [r3, #0]
    275e:	2302      	movs	r3, #2
    2760:	0022      	movs	r2, r4
    2762:	f000 fc89 	bl	3078 <I2C_read_batch_addr>
	return (reg_raw[0] << 8) | reg_raw[1];
    2766:	7823      	ldrb	r3, [r4, #0]
    2768:	021b      	lsls	r3, r3, #8
    276a:	7860      	ldrb	r0, [r4, #1]
    276c:	4318      	orrs	r0, r3
}
    276e:	b002      	add	sp, #8
    2770:	bd10      	pop	{r4, pc}
    2772:	46c0      	nop			; (mov r8, r8)
    2774:	20000e08 	.word	0x20000e08

00002778 <PowerMeterMeasure>:

uint8_t PowerMeterMeasure(powerData * pmStruc){
    2778:	b570      	push	{r4, r5, r6, lr}
    277a:	0004      	movs	r4, r0
	int16_t tmpCurrent = PowerMeterGetReg(SHUNT_VOLTAGE_REG);
    277c:	2001      	movs	r0, #1
    277e:	f7ff ffe5 	bl	274c <PowerMeterGetReg>
    2782:	b200      	sxth	r0, r0
	float milliAmptVal = (tmpCurrent > 0)? (tmpCurrent*POS_CURRENT_MULTIPLIER)+CURRENT_OFFSET : (tmpCurrent*NEG_CURRENT_MULTIPLIER)+CURRENT_OFFSET;
    2784:	2800      	cmp	r0, #0
    2786:	dd43      	ble.n	2810 <PowerMeterMeasure+0x98>
    2788:	f003 fb74 	bl	5e74 <__aeabi_i2d>
    278c:	4a29      	ldr	r2, [pc, #164]	; (2834 <PowerMeterMeasure+0xbc>)
    278e:	4b2a      	ldr	r3, [pc, #168]	; (2838 <PowerMeterMeasure+0xc0>)
    2790:	f002 fda6 	bl	52e0 <__aeabi_dmul>
    2794:	f003 fc3a 	bl	600c <__aeabi_d2f>
    2798:	1c06      	adds	r6, r0, #0
	float milliVoltVal = (PowerMeterGetReg(BUS_VOLTAGE_REG)*VOLTAGE_MULTIPLIER)+VOLTAGE_OFFSET;
    279a:	2002      	movs	r0, #2
    279c:	f7ff ffd6 	bl	274c <PowerMeterGetReg>
    27a0:	f003 fb68 	bl	5e74 <__aeabi_i2d>
    27a4:	4a25      	ldr	r2, [pc, #148]	; (283c <PowerMeterMeasure+0xc4>)
    27a6:	4b26      	ldr	r3, [pc, #152]	; (2840 <PowerMeterMeasure+0xc8>)
    27a8:	f002 fd9a 	bl	52e0 <__aeabi_dmul>
    27ac:	f003 fc2e 	bl	600c <__aeabi_d2f>
    27b0:	1c05      	adds	r5, r0, #0
	
	pmStruc->voltage = (uint16_t)milliVoltVal;
    27b2:	f001 fbdd 	bl	3f70 <__aeabi_f2uiz>
    27b6:	b280      	uxth	r0, r0
    27b8:	60a0      	str	r0, [r4, #8]
	pmStruc->current = (int16_t)milliAmptVal;
    27ba:	1c30      	adds	r0, r6, #0
    27bc:	f002 f9a6 	bl	4b0c <__aeabi_f2iz>
    27c0:	b200      	sxth	r0, r0
    27c2:	6060      	str	r0, [r4, #4]
	pmStruc->power = ((milliAmptVal)*milliVoltVal)/1000000;
    27c4:	1c29      	adds	r1, r5, #0
    27c6:	1c30      	adds	r0, r6, #0
    27c8:	f001 fee4 	bl	4594 <__aeabi_fmul>
    27cc:	491d      	ldr	r1, [pc, #116]	; (2844 <PowerMeterMeasure+0xcc>)
    27ce:	f001 fee1 	bl	4594 <__aeabi_fmul>
    27d2:	1c06      	adds	r6, r0, #0
    27d4:	6120      	str	r0, [r4, #16]
	//pmStruc->energy= (milliVoltVal < 14250) ? pmStruc->energy+pmStruc->power/3600 : BAT_FULL_ENEERGY;
	
	if (milliVoltVal < 14250)
    27d6:	491c      	ldr	r1, [pc, #112]	; (2848 <PowerMeterMeasure+0xd0>)
    27d8:	1c28      	adds	r0, r5, #0
    27da:	f001 fb77 	bl	3ecc <__aeabi_fcmplt>
    27de:	2800      	cmp	r0, #0
    27e0:	d11d      	bne.n	281e <PowerMeterMeasure+0xa6>
	{
		pmStruc->energy = pmStruc->energy+pmStruc->power/3600;
	}else{
		
		if (pmStruc->energy > BAT_FULL_ENEERGY)
    27e2:	6965      	ldr	r5, [r4, #20]
    27e4:	4919      	ldr	r1, [pc, #100]	; (284c <PowerMeterMeasure+0xd4>)
    27e6:	1c28      	adds	r0, r5, #0
    27e8:	f001 fb84 	bl	3ef4 <__aeabi_fcmpgt>
    27ec:	2800      	cmp	r0, #0
    27ee:	d004      	beq.n	27fa <PowerMeterMeasure+0x82>
		{
			pmStruc->lastChargerErr = pmStruc->energy - BAT_FULL_ENEERGY;
    27f0:	4916      	ldr	r1, [pc, #88]	; (284c <PowerMeterMeasure+0xd4>)
    27f2:	1c28      	adds	r0, r5, #0
    27f4:	f001 ffee 	bl	47d4 <__aeabi_fsub>
    27f8:	61a0      	str	r0, [r4, #24]
		}
		pmStruc->energy =  BAT_FULL_ENEERGY;
    27fa:	4b14      	ldr	r3, [pc, #80]	; (284c <PowerMeterMeasure+0xd4>)
    27fc:	6163      	str	r3, [r4, #20]
	}
	
	pmStruc->capacity = (uint8_t)((pmStruc->energy / BAT_FULL_ENEERGY) * 100);
    27fe:	4914      	ldr	r1, [pc, #80]	; (2850 <PowerMeterMeasure+0xd8>)
    2800:	6960      	ldr	r0, [r4, #20]
    2802:	f001 fec7 	bl	4594 <__aeabi_fmul>
    2806:	f001 fbb3 	bl	3f70 <__aeabi_f2uiz>
    280a:	7320      	strb	r0, [r4, #12]
	return 1;
    280c:	2001      	movs	r0, #1
    280e:	bd70      	pop	{r4, r5, r6, pc}
	float milliAmptVal = (tmpCurrent > 0)? (tmpCurrent*POS_CURRENT_MULTIPLIER)+CURRENT_OFFSET : (tmpCurrent*NEG_CURRENT_MULTIPLIER)+CURRENT_OFFSET;
    2810:	f003 fb30 	bl	5e74 <__aeabi_i2d>
    2814:	4a0f      	ldr	r2, [pc, #60]	; (2854 <PowerMeterMeasure+0xdc>)
    2816:	4b10      	ldr	r3, [pc, #64]	; (2858 <PowerMeterMeasure+0xe0>)
    2818:	f002 fd62 	bl	52e0 <__aeabi_dmul>
    281c:	e7ba      	b.n	2794 <PowerMeterMeasure+0x1c>
		pmStruc->energy = pmStruc->energy+pmStruc->power/3600;
    281e:	6965      	ldr	r5, [r4, #20]
    2820:	490e      	ldr	r1, [pc, #56]	; (285c <PowerMeterMeasure+0xe4>)
    2822:	1c30      	adds	r0, r6, #0
    2824:	f001 feb6 	bl	4594 <__aeabi_fmul>
    2828:	1c01      	adds	r1, r0, #0
    282a:	1c28      	adds	r0, r5, #0
    282c:	f001 fc78 	bl	4120 <__aeabi_fadd>
    2830:	6160      	str	r0, [r4, #20]
    2832:	e7e4      	b.n	27fe <PowerMeterMeasure+0x86>
    2834:	7e5499b5 	.word	0x7e5499b5
    2838:	3ff1d963 	.word	0x3ff1d963
    283c:	c4476d27 	.word	0xc4476d27
    2840:	3ff3f4d6 	.word	0x3ff3f4d6
    2844:	358637bd 	.word	0x358637bd
    2848:	465ea800 	.word	0x465ea800
    284c:	432f0000 	.word	0x432f0000
    2850:	3f124924 	.word	0x3f124924
    2854:	29533587 	.word	0x29533587
    2858:	3ff1e18f 	.word	0x3ff1e18f
    285c:	3991a2b4 	.word	0x3991a2b4

00002860 <EXT_I2C_IRQ_int_Handler>:
	rtcIntCount = 0;
	return res;
}

void EXT_I2C_IRQ_int_Handler(void){
	i2cIntCount++;
    2860:	4a02      	ldr	r2, [pc, #8]	; (286c <EXT_I2C_IRQ_int_Handler+0xc>)
    2862:	7813      	ldrb	r3, [r2, #0]
    2864:	3301      	adds	r3, #1
    2866:	7013      	strb	r3, [r2, #0]
}
    2868:	4770      	bx	lr
    286a:	46c0      	nop			; (mov r8, r8)
    286c:	20000e09 	.word	0x20000e09

00002870 <I2C_RTC_Handler>:

void I2C_RTC_Handler(void){
	rtcIntCount++;
    2870:	4a02      	ldr	r2, [pc, #8]	; (287c <I2C_RTC_Handler+0xc>)
    2872:	7813      	ldrb	r3, [r2, #0]
    2874:	3301      	adds	r3, #1
    2876:	7013      	strb	r3, [r2, #0]
}
    2878:	4770      	bx	lr
    287a:	46c0      	nop			; (mov r8, r8)
    287c:	20000e0b 	.word	0x20000e0b

00002880 <RF_int_Handler>:
rfHeader* rfMsgType(void) {
	return ptr_rfHeader;
}

void RF_int_Handler(void){
	int_count++;
    2880:	4a02      	ldr	r2, [pc, #8]	; (288c <RF_int_Handler+0xc>)
    2882:	7813      	ldrb	r3, [r2, #0]
    2884:	3301      	adds	r3, #1
    2886:	7013      	strb	r3, [r2, #0]
}
    2888:	4770      	bx	lr
    288a:	46c0      	nop			; (mov r8, r8)
    288c:	20000e0a 	.word	0x20000e0a

00002890 <RF_IRQ_Enable>:
void RF_IRQ_Enable(void){
    2890:	b510      	push	{r4, lr}
	ext_irq_register(RF_IRQ, RF_int_Handler);
    2892:	4904      	ldr	r1, [pc, #16]	; (28a4 <RF_IRQ_Enable+0x14>)
    2894:	203e      	movs	r0, #62	; 0x3e
    2896:	f7fe fe71 	bl	157c <ext_irq_register>
	spi_m_sync_enable(&RF_SPI);
    289a:	4803      	ldr	r0, [pc, #12]	; (28a8 <RF_IRQ_Enable+0x18>)
    289c:	f7fe ffbc 	bl	1818 <spi_m_sync_enable>
}
    28a0:	bd10      	pop	{r4, pc}
    28a2:	46c0      	nop			; (mov r8, r8)
    28a4:	00002881 	.word	0x00002881
    28a8:	20000e88 	.word	0x20000e88

000028ac <EXT_I2C_IRQ_Enable>:
void EXT_I2C_IRQ_Enable(void){
    28ac:	b510      	push	{r4, lr}
	ext_irq_register(EXT_I2C_IRQ, EXT_I2C_IRQ_int_Handler);
    28ae:	4902      	ldr	r1, [pc, #8]	; (28b8 <EXT_I2C_IRQ_Enable+0xc>)
    28b0:	2028      	movs	r0, #40	; 0x28
    28b2:	f7fe fe63 	bl	157c <ext_irq_register>
}
    28b6:	bd10      	pop	{r4, pc}
    28b8:	00002861 	.word	0x00002861

000028bc <RTC_I2C_IRQ_Enable>:
void RTC_I2C_IRQ_Enable(void){
    28bc:	b510      	push	{r4, lr}
	ext_irq_register(RTC_IRQ, I2C_RTC_Handler);
    28be:	4902      	ldr	r1, [pc, #8]	; (28c8 <RTC_I2C_IRQ_Enable+0xc>)
    28c0:	200a      	movs	r0, #10
    28c2:	f7fe fe5b 	bl	157c <ext_irq_register>
}
    28c6:	bd10      	pop	{r4, pc}
    28c8:	00002871 	.word	0x00002871

000028cc <RTC_IRQ_Ready>:
	uint8_t res = rtcIntCount;
    28cc:	4b02      	ldr	r3, [pc, #8]	; (28d8 <RTC_IRQ_Ready+0xc>)
    28ce:	7818      	ldrb	r0, [r3, #0]
	rtcIntCount = 0;
    28d0:	2200      	movs	r2, #0
    28d2:	701a      	strb	r2, [r3, #0]
}
    28d4:	4770      	bx	lr
    28d6:	46c0      	nop			; (mov r8, r8)
    28d8:	20000e0b 	.word	0x20000e0b

000028dc <EXT_I2C_IRQ_isReady>:
	uint8_t res = i2cIntCount;
    28dc:	4b02      	ldr	r3, [pc, #8]	; (28e8 <EXT_I2C_IRQ_isReady+0xc>)
    28de:	7818      	ldrb	r0, [r3, #0]
	i2cIntCount = 0;
    28e0:	2200      	movs	r2, #0
    28e2:	701a      	strb	r2, [r3, #0]
}
    28e4:	4770      	bx	lr
    28e6:	46c0      	nop			; (mov r8, r8)
    28e8:	20000e09 	.word	0x20000e09

000028ec <rf_isReady>:
bool rf_isReady(){
    28ec:	b510      	push	{r4, lr}
	if (int_count != 0){
    28ee:	4b09      	ldr	r3, [pc, #36]	; (2914 <rf_isReady+0x28>)
    28f0:	781b      	ldrb	r3, [r3, #0]
    28f2:	2b00      	cmp	r3, #0
    28f4:	d101      	bne.n	28fa <rf_isReady+0xe>
	return false;
    28f6:	2000      	movs	r0, #0
}
    28f8:	bd10      	pop	{r4, pc}
		ptr_rfHeader = data_ready();
    28fa:	f000 fe03 	bl	3504 <data_ready>
    28fe:	4b06      	ldr	r3, [pc, #24]	; (2918 <rf_isReady+0x2c>)
    2900:	6018      	str	r0, [r3, #0]
		int_count = 0;
    2902:	2200      	movs	r2, #0
    2904:	4b03      	ldr	r3, [pc, #12]	; (2914 <rf_isReady+0x28>)
    2906:	701a      	strb	r2, [r3, #0]
		return (ptr_rfHeader->dataValid == 0 ) ? false : true;
    2908:	7980      	ldrb	r0, [r0, #6]
    290a:	1e43      	subs	r3, r0, #1
    290c:	4198      	sbcs	r0, r3
    290e:	b2c0      	uxtb	r0, r0
    2910:	e7f2      	b.n	28f8 <rf_isReady+0xc>
    2912:	46c0      	nop			; (mov r8, r8)
    2914:	20000e0a 	.word	0x20000e0a
    2918:	20000ed8 	.word	0x20000ed8

0000291c <rfMsgType>:
	return ptr_rfHeader;
    291c:	4b01      	ldr	r3, [pc, #4]	; (2924 <rfMsgType+0x8>)
    291e:	6818      	ldr	r0, [r3, #0]
}
    2920:	4770      	bx	lr
    2922:	46c0      	nop			; (mov r8, r8)
    2924:	20000ed8 	.word	0x20000ed8

00002928 <RFM69_ReadBuff>:
	io_write(rf_spi, &addr, 1);
	io_read(rf_spi,&addr,1);
	return addr;
}

void RFM69_ReadBuff(uint8_t* buff, uint16_t len){
    2928:	b510      	push	{r4, lr}
    292a:	0003      	movs	r3, r0
    292c:	000a      	movs	r2, r1
	io_read(rf_spi,buff,len);
    292e:	4903      	ldr	r1, [pc, #12]	; (293c <RFM69_ReadBuff+0x14>)
    2930:	6808      	ldr	r0, [r1, #0]
    2932:	0019      	movs	r1, r3
    2934:	f7fe ff2e 	bl	1794 <io_read>
}
    2938:	bd10      	pop	{r4, pc}
    293a:	46c0      	nop			; (mov r8, r8)
    293c:	20000e84 	.word	0x20000e84

00002940 <RFM69_WriteBuff>:

void RFM69_WriteBuff(uint8_t* buff, uint16_t len){
    2940:	b510      	push	{r4, lr}
    2942:	0003      	movs	r3, r0
    2944:	000a      	movs	r2, r1
	io_write(rf_spi,buff,len);
    2946:	4903      	ldr	r1, [pc, #12]	; (2954 <RFM69_WriteBuff+0x14>)
    2948:	6808      	ldr	r0, [r1, #0]
    294a:	0019      	movs	r1, r3
    294c:	f7fe ff08 	bl	1760 <io_write>
}
    2950:	bd10      	pop	{r4, pc}
    2952:	46c0      	nop			; (mov r8, r8)
    2954:	20000e84 	.word	0x20000e84

00002958 <RFM_69_sel>:
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    2958:	2800      	cmp	r0, #0
    295a:	d105      	bne.n	2968 <RFM_69_sel+0x10>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    295c:	2280      	movs	r2, #128	; 0x80
    295e:	0552      	lsls	r2, r2, #21
    2960:	23c0      	movs	r3, #192	; 0xc0
    2962:	05db      	lsls	r3, r3, #23
    2964:	615a      	str	r2, [r3, #20]

void RFM_69_sel(bool arg){
	gpio_set_pin_level(RF_CS , arg);
}
    2966:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2968:	2280      	movs	r2, #128	; 0x80
    296a:	0552      	lsls	r2, r2, #21
    296c:	23c0      	movs	r3, #192	; 0xc0
    296e:	05db      	lsls	r3, r3, #23
    2970:	619a      	str	r2, [r3, #24]
    2972:	e7f8      	b.n	2966 <RFM_69_sel+0xe>

00002974 <SPI_write>:





void SPI_write(uint8_t arg){
    2974:	b500      	push	{lr}
    2976:	b083      	sub	sp, #12
    2978:	466b      	mov	r3, sp
    297a:	1dd9      	adds	r1, r3, #7
    297c:	7008      	strb	r0, [r1, #0]
	uint8_t *addr_ptr = &arg;
	//struct io_descriptor *io;
	//spi_m_sync_get_io_descriptor(&RF_SPI, &io); ///<<< EXP
	//spi_m_sync_enable(&RF_SPI);
	io_write(rf_spi, &arg, 1);	
    297e:	4b03      	ldr	r3, [pc, #12]	; (298c <SPI_write+0x18>)
    2980:	6818      	ldr	r0, [r3, #0]
    2982:	2201      	movs	r2, #1
    2984:	f7fe feec 	bl	1760 <io_write>
}
    2988:	b003      	add	sp, #12
    298a:	bd00      	pop	{pc}
    298c:	20000e84 	.word	0x20000e84

00002990 <SPI_read>:


uint8_t SPI_read(){
    2990:	b510      	push	{r4, lr}
    2992:	b082      	sub	sp, #8
	uint8_t data_byte = 0;
    2994:	466b      	mov	r3, sp
    2996:	1ddc      	adds	r4, r3, #7
    2998:	2300      	movs	r3, #0
    299a:	7023      	strb	r3, [r4, #0]
	//spi_m_sync_get_io_descriptor(&RF_SPI, &io); ///<<< EXP
	io_read(rf_spi,&data_byte,1);
    299c:	4b04      	ldr	r3, [pc, #16]	; (29b0 <SPI_read+0x20>)
    299e:	6818      	ldr	r0, [r3, #0]
    29a0:	2201      	movs	r2, #1
    29a2:	0021      	movs	r1, r4
    29a4:	f7fe fef6 	bl	1794 <io_read>
	return data_byte;
    29a8:	7820      	ldrb	r0, [r4, #0]
}
    29aa:	b002      	add	sp, #8
    29ac:	bd10      	pop	{r4, pc}
    29ae:	46c0      	nop			; (mov r8, r8)
    29b0:	20000e84 	.word	0x20000e84

000029b4 <EXT_SPI_init>:
	gpio_set_pin_level(LED_G, true);
}

//Display section
void EXT_SPI_init(void)
{
    29b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29b6:	46de      	mov	lr, fp
    29b8:	4657      	mov	r7, sl
    29ba:	464e      	mov	r6, r9
    29bc:	4645      	mov	r5, r8
    29be:	b5e0      	push	{r5, r6, r7, lr}
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
    29c0:	4a50      	ldr	r2, [pc, #320]	; (2b04 <EXT_SPI_init+0x150>)
    29c2:	6a13      	ldr	r3, [r2, #32]
    29c4:	2404      	movs	r4, #4
    29c6:	4323      	orrs	r3, r4
    29c8:	6213      	str	r3, [r2, #32]
	((Gclk *)hw)->CLKCTRL.reg = data;
    29ca:	4a4f      	ldr	r2, [pc, #316]	; (2b08 <EXT_SPI_init+0x154>)
    29cc:	4b4f      	ldr	r3, [pc, #316]	; (2b0c <EXT_SPI_init+0x158>)
    29ce:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
	
	
	spi_m_sync_init(&EXT_SPI, SERCOM0);
    29d0:	4d4f      	ldr	r5, [pc, #316]	; (2b10 <EXT_SPI_init+0x15c>)
    29d2:	4950      	ldr	r1, [pc, #320]	; (2b14 <EXT_SPI_init+0x160>)
    29d4:	0028      	movs	r0, r5
    29d6:	f7fe fef7 	bl	17c8 <spi_m_sync_init>
	spi_m_sync_get_io_descriptor(&EXT_SPI, &lcd_spi);
    29da:	494f      	ldr	r1, [pc, #316]	; (2b18 <EXT_SPI_init+0x164>)
    29dc:	0028      	movs	r0, r5
    29de:	f7fe ff7f 	bl	18e0 <spi_m_sync_get_io_descriptor>
	spi_m_sync_enable(&EXT_SPI);
    29e2:	0028      	movs	r0, r5
    29e4:	f7fe ff18 	bl	1818 <spi_m_sync_enable>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    29e8:	22c0      	movs	r2, #192	; 0xc0
    29ea:	05d2      	lsls	r2, r2, #23
    29ec:	2310      	movs	r3, #16
    29ee:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    29f0:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    29f2:	4b4a      	ldr	r3, [pc, #296]	; (2b1c <EXT_SPI_init+0x168>)
    29f4:	494a      	ldr	r1, [pc, #296]	; (2b20 <EXT_SPI_init+0x16c>)
    29f6:	6299      	str	r1, [r3, #40]	; 0x28
    29f8:	21c0      	movs	r1, #192	; 0xc0
    29fa:	0609      	lsls	r1, r1, #24
    29fc:	468b      	mov	fp, r1
    29fe:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2a00:	2644      	movs	r6, #68	; 0x44
    2a02:	5d98      	ldrb	r0, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2a04:	2101      	movs	r1, #1
    2a06:	4388      	bics	r0, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2a08:	2501      	movs	r5, #1
    2a0a:	46a8      	mov	r8, r5
    2a0c:	4645      	mov	r5, r8
    2a0e:	4328      	orrs	r0, r5
    2a10:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2a12:	5598      	strb	r0, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2a14:	3e12      	subs	r6, #18
    2a16:	5d98      	ldrb	r0, [r3, r6]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2a18:	250f      	movs	r5, #15
    2a1a:	46ac      	mov	ip, r5
    2a1c:	43a8      	bics	r0, r5
	tmp |= PORT_PMUX_PMUXE(data);
    2a1e:	2703      	movs	r7, #3
    2a20:	4338      	orrs	r0, r7
    2a22:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2a24:	5598      	strb	r0, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2a26:	2020      	movs	r0, #32
    2a28:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2a2a:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2a2c:	483d      	ldr	r0, [pc, #244]	; (2b24 <EXT_SPI_init+0x170>)
    2a2e:	6298      	str	r0, [r3, #40]	; 0x28
    2a30:	4658      	mov	r0, fp
    2a32:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2a34:	2045      	movs	r0, #69	; 0x45
    2a36:	4681      	mov	r9, r0
    2a38:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2a3a:	4388      	bics	r0, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2a3c:	4645      	mov	r5, r8
    2a3e:	4328      	orrs	r0, r5
    2a40:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2a42:	464d      	mov	r5, r9
    2a44:	5558      	strb	r0, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2a46:	5d98      	ldrb	r0, [r3, r6]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2a48:	3d36      	subs	r5, #54	; 0x36
    2a4a:	4028      	ands	r0, r5
	tmp |= PORT_PMUX_PMUXO(data);
    2a4c:	2530      	movs	r5, #48	; 0x30
    2a4e:	46a9      	mov	r9, r5
    2a50:	464d      	mov	r5, r9
    2a52:	4328      	orrs	r0, r5
    2a54:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2a56:	5598      	strb	r0, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2a58:	360e      	adds	r6, #14
    2a5a:	6056      	str	r6, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2a5c:	4832      	ldr	r0, [pc, #200]	; (2b28 <EXT_SPI_init+0x174>)
    2a5e:	6298      	str	r0, [r3, #40]	; 0x28
    2a60:	4832      	ldr	r0, [pc, #200]	; (2b2c <EXT_SPI_init+0x178>)
    2a62:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2a64:	2046      	movs	r0, #70	; 0x46
    2a66:	5c1d      	ldrb	r5, [r3, r0]
    2a68:	43a5      	bics	r5, r4
    2a6a:	541d      	strb	r5, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2a6c:	5c1c      	ldrb	r4, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2a6e:	438c      	bics	r4, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2a70:	4645      	mov	r5, r8
    2a72:	432c      	orrs	r4, r5
    2a74:	b2e4      	uxtb	r4, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2a76:	541c      	strb	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2a78:	2433      	movs	r4, #51	; 0x33
    2a7a:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2a7c:	4665      	mov	r5, ip
    2a7e:	43a8      	bics	r0, r5
	tmp |= PORT_PMUX_PMUXE(data);
    2a80:	4338      	orrs	r0, r7
    2a82:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2a84:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2a86:	2080      	movs	r0, #128	; 0x80
    2a88:	6190      	str	r0, [r2, #24]
    2a8a:	3465      	adds	r4, #101	; 0x65
    2a8c:	5116      	str	r6, [r2, r4]
    2a8e:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2a90:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2a92:	4c27      	ldr	r4, [pc, #156]	; (2b30 <EXT_SPI_init+0x17c>)
    2a94:	46a0      	mov	r8, r4
    2a96:	629c      	str	r4, [r3, #40]	; 0x28
    2a98:	465c      	mov	r4, fp
    2a9a:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2a9c:	2447      	movs	r4, #71	; 0x47
    2a9e:	5d1d      	ldrb	r5, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2aa0:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2aa2:	551d      	strb	r5, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2aa4:	2598      	movs	r5, #152	; 0x98
    2aa6:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2aa8:	3d10      	subs	r5, #16
    2aaa:	46a9      	mov	r9, r5
    2aac:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2aae:	3668      	adds	r6, #104	; 0x68
    2ab0:	4d20      	ldr	r5, [pc, #128]	; (2b34 <EXT_SPI_init+0x180>)
    2ab2:	519d      	str	r5, [r3, r6]
    2ab4:	465d      	mov	r5, fp
    2ab6:	519d      	str	r5, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2ab8:	25c6      	movs	r5, #198	; 0xc6
    2aba:	46aa      	mov	sl, r5
    2abc:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2abe:	438d      	bics	r5, r1
    2ac0:	46ac      	mov	ip, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2ac2:	4655      	mov	r5, sl
    2ac4:	4667      	mov	r7, ip
    2ac6:	555f      	strb	r7, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2ac8:	353b      	adds	r5, #59	; 0x3b
    2aca:	35ff      	adds	r5, #255	; 0xff
    2acc:	46ac      	mov	ip, r5
    2ace:	2798      	movs	r7, #152	; 0x98
    2ad0:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2ad2:	464d      	mov	r5, r9
    2ad4:	4667      	mov	r7, ip
    2ad6:	5157      	str	r7, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2ad8:	4f17      	ldr	r7, [pc, #92]	; (2b38 <EXT_SPI_init+0x184>)
    2ada:	519f      	str	r7, [r3, r6]
    2adc:	465d      	mov	r5, fp
    2ade:	519d      	str	r5, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2ae0:	27c9      	movs	r7, #201	; 0xc9
    2ae2:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2ae4:	438e      	bics	r6, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2ae6:	55de      	strb	r6, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2ae8:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2aea:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2aec:	4642      	mov	r2, r8
    2aee:	629a      	str	r2, [r3, #40]	; 0x28
    2af0:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2af2:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2af4:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2af6:	551a      	strb	r2, [r3, r4]
	gpio_set_pin_direction(LCD_RST, GPIO_DIRECTION_OUT);
	gpio_set_pin_function(LCD_RST, GPIO_PIN_FUNCTION_OFF);
	
	
		
}
    2af8:	bc3c      	pop	{r2, r3, r4, r5}
    2afa:	4690      	mov	r8, r2
    2afc:	4699      	mov	r9, r3
    2afe:	46a2      	mov	sl, r4
    2b00:	46ab      	mov	fp, r5
    2b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b04:	40000400 	.word	0x40000400
    2b08:	0000400d 	.word	0x0000400d
    2b0c:	40000c00 	.word	0x40000c00
    2b10:	20000ec0 	.word	0x20000ec0
    2b14:	42000800 	.word	0x42000800
    2b18:	20000f14 	.word	0x20000f14
    2b1c:	41004400 	.word	0x41004400
    2b20:	40000010 	.word	0x40000010
    2b24:	40000020 	.word	0x40000020
    2b28:	40020040 	.word	0x40020040
    2b2c:	c0020000 	.word	0xc0020000
    2b30:	40000080 	.word	0x40000080
    2b34:	40000040 	.word	0x40000040
    2b38:	40000200 	.word	0x40000200

00002b3c <vfd_write_data>:
void vfd_write_data(uint8_t* buff, uint16_t len){
    2b3c:	b510      	push	{r4, lr}
    2b3e:	0003      	movs	r3, r0
    2b40:	000a      	movs	r2, r1
	io_write(lcd_spi, buff, len);
    2b42:	4903      	ldr	r1, [pc, #12]	; (2b50 <vfd_write_data+0x14>)
    2b44:	6808      	ldr	r0, [r1, #0]
    2b46:	0019      	movs	r1, r3
    2b48:	f7fe fe0a 	bl	1760 <io_write>
	
}
    2b4c:	bd10      	pop	{r4, pc}
    2b4e:	46c0      	nop			; (mov r8, r8)
    2b50:	20000f14 	.word	0x20000f14

00002b54 <vfd_cs_set>:

void vfd_cs_set(bool state){
	gpio_set_pin_level(VFD_CS, !state);
    2b54:	2301      	movs	r3, #1
    2b56:	4058      	eors	r0, r3
    2b58:	b2c0      	uxtb	r0, r0
    2b5a:	2800      	cmp	r0, #0
    2b5c:	d106      	bne.n	2b6c <vfd_cs_set+0x18>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2b5e:	2180      	movs	r1, #128	; 0x80
    2b60:	0089      	lsls	r1, r1, #2
    2b62:	2394      	movs	r3, #148	; 0x94
    2b64:	22c0      	movs	r2, #192	; 0xc0
    2b66:	05d2      	lsls	r2, r2, #23
    2b68:	50d1      	str	r1, [r2, r3]
}
    2b6a:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2b6c:	2180      	movs	r1, #128	; 0x80
    2b6e:	0089      	lsls	r1, r1, #2
    2b70:	2398      	movs	r3, #152	; 0x98
    2b72:	22c0      	movs	r2, #192	; 0xc0
    2b74:	05d2      	lsls	r2, r2, #23
    2b76:	50d1      	str	r1, [r2, r3]
    2b78:	e7f7      	b.n	2b6a <vfd_cs_set+0x16>

00002b7a <cmd_pin_handle>:
    2b7a:	2800      	cmp	r0, #0
    2b7c:	d105      	bne.n	2b8a <cmd_pin_handle+0x10>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2b7e:	2140      	movs	r1, #64	; 0x40
    2b80:	2394      	movs	r3, #148	; 0x94
    2b82:	22c0      	movs	r2, #192	; 0xc0
    2b84:	05d2      	lsls	r2, r2, #23
    2b86:	50d1      	str	r1, [r2, r3]

void cmd_pin_handle(bool state){
	gpio_set_pin_level(FILAMENT_EN, state);
}
    2b88:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2b8a:	2140      	movs	r1, #64	; 0x40
    2b8c:	2398      	movs	r3, #152	; 0x98
    2b8e:	22c0      	movs	r2, #192	; 0xc0
    2b90:	05d2      	lsls	r2, r2, #23
    2b92:	50d1      	str	r1, [r2, r3]
    2b94:	e7f8      	b.n	2b88 <cmd_pin_handle+0xe>

00002b96 <u8x8_avr_gpio_and_delay>:
		break;
		default:
		return 0;
	}
	return 0;
}
    2b96:	2000      	movs	r0, #0
    2b98:	4770      	bx	lr
	...

00002b9c <vfd_spi>:
uint8_t vfd_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    2b9c:	b510      	push	{r4, lr}
	
	switch(msg)
    2b9e:	3914      	subs	r1, #20
    2ba0:	b2cc      	uxtb	r4, r1
    2ba2:	2c0c      	cmp	r4, #12
    2ba4:	d81f      	bhi.n	2be6 <vfd_spi+0x4a>
    2ba6:	00a1      	lsls	r1, r4, #2
    2ba8:	4810      	ldr	r0, [pc, #64]	; (2bec <vfd_spi+0x50>)
    2baa:	5841      	ldr	r1, [r0, r1]
    2bac:	468f      	mov	pc, r1
	{
		case U8X8_MSG_BYTE_SEND:
		vfd_write_data(arg_ptr, arg_int);
    2bae:	b291      	uxth	r1, r2
    2bb0:	0018      	movs	r0, r3
    2bb2:	f7ff ffc3 	bl	2b3c <vfd_write_data>
		vfd_cs_set(false);
		break;
		default:
		return 0;
	}
	return 1;
    2bb6:	2001      	movs	r0, #1
}
    2bb8:	bd10      	pop	{r4, pc}
		vfd_cs_set(false);
    2bba:	2000      	movs	r0, #0
    2bbc:	f7ff ffca 	bl	2b54 <vfd_cs_set>
	return 1;
    2bc0:	2001      	movs	r0, #1
		break;
    2bc2:	e7f9      	b.n	2bb8 <vfd_spi+0x1c>
		cmd_pin_handle(arg_int);
    2bc4:	1e51      	subs	r1, r2, #1
    2bc6:	418a      	sbcs	r2, r1
    2bc8:	b2d0      	uxtb	r0, r2
    2bca:	f7ff ffd6 	bl	2b7a <cmd_pin_handle>
	return 1;
    2bce:	2001      	movs	r0, #1
		break;
    2bd0:	e7f2      	b.n	2bb8 <vfd_spi+0x1c>
		vfd_cs_set(true);
    2bd2:	2001      	movs	r0, #1
    2bd4:	f7ff ffbe 	bl	2b54 <vfd_cs_set>
	return 1;
    2bd8:	2001      	movs	r0, #1
		break;
    2bda:	e7ed      	b.n	2bb8 <vfd_spi+0x1c>
		vfd_cs_set(false);
    2bdc:	2000      	movs	r0, #0
    2bde:	f7ff ffb9 	bl	2b54 <vfd_cs_set>
	return 1;
    2be2:	2001      	movs	r0, #1
		break;
    2be4:	e7e8      	b.n	2bb8 <vfd_spi+0x1c>
		return 0;
    2be6:	2000      	movs	r0, #0
    2be8:	e7e6      	b.n	2bb8 <vfd_spi+0x1c>
    2bea:	46c0      	nop			; (mov r8, r8)
    2bec:	0000b3ec 	.word	0x0000b3ec

00002bf0 <RF_HW_Reset>:
	RF_IRQ_Enable();
	
}


void RF_HW_Reset(void){
    2bf0:	b570      	push	{r4, r5, r6, lr}
    2bf2:	24c0      	movs	r4, #192	; 0xc0
    2bf4:	05e4      	lsls	r4, r4, #23
    2bf6:	2504      	movs	r5, #4
    2bf8:	61a5      	str	r5, [r4, #24]
	gpio_set_pin_level(RF_RST, true);
	delay_ms(1);
    2bfa:	2001      	movs	r0, #1
    2bfc:	f7fe fc78 	bl	14f0 <delay_ms>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2c00:	6165      	str	r5, [r4, #20]
	gpio_set_pin_level(RF_RST, false);
	delay_ms(20);
    2c02:	2014      	movs	r0, #20
    2c04:	f7fe fc74 	bl	14f0 <delay_ms>
}
    2c08:	bd70      	pop	{r4, r5, r6, pc}
	...

00002c0c <RF_SPI_init>:
void RF_SPI_init(void){
    2c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c0e:	46de      	mov	lr, fp
    2c10:	4657      	mov	r7, sl
    2c12:	464e      	mov	r6, r9
    2c14:	4645      	mov	r5, r8
    2c16:	b5e0      	push	{r5, r6, r7, lr}
    2c18:	4a66      	ldr	r2, [pc, #408]	; (2db4 <RF_SPI_init+0x1a8>)
    2c1a:	6a13      	ldr	r3, [r2, #32]
    2c1c:	2108      	movs	r1, #8
    2c1e:	468b      	mov	fp, r1
    2c20:	430b      	orrs	r3, r1
    2c22:	6213      	str	r3, [r2, #32]
    2c24:	4a64      	ldr	r2, [pc, #400]	; (2db8 <RF_SPI_init+0x1ac>)
    2c26:	4b65      	ldr	r3, [pc, #404]	; (2dbc <RF_SPI_init+0x1b0>)
    2c28:	805a      	strh	r2, [r3, #2]
	spi_m_sync_init(&RF_SPI, SERCOM1);
    2c2a:	4c65      	ldr	r4, [pc, #404]	; (2dc0 <RF_SPI_init+0x1b4>)
    2c2c:	4965      	ldr	r1, [pc, #404]	; (2dc4 <RF_SPI_init+0x1b8>)
    2c2e:	0020      	movs	r0, r4
    2c30:	f7fe fdca 	bl	17c8 <spi_m_sync_init>
	spi_m_sync_get_io_descriptor(&RF_SPI, &rf_spi);
    2c34:	4964      	ldr	r1, [pc, #400]	; (2dc8 <RF_SPI_init+0x1bc>)
    2c36:	0020      	movs	r0, r4
    2c38:	f7fe fe52 	bl	18e0 <spi_m_sync_get_io_descriptor>
	spi_m_sync_enable(&RF_SPI);
    2c3c:	0020      	movs	r0, r4
    2c3e:	f7fe fdeb 	bl	1818 <spi_m_sync_enable>
    2c42:	25c0      	movs	r5, #192	; 0xc0
    2c44:	05ed      	lsls	r5, r5, #23
    2c46:	2601      	movs	r6, #1
    2c48:	616e      	str	r6, [r5, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2c4a:	60ae      	str	r6, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2c4c:	4c5f      	ldr	r4, [pc, #380]	; (2dcc <RF_SPI_init+0x1c0>)
    2c4e:	4b60      	ldr	r3, [pc, #384]	; (2dd0 <RF_SPI_init+0x1c4>)
    2c50:	62a3      	str	r3, [r4, #40]	; 0x28
    2c52:	27c0      	movs	r7, #192	; 0xc0
    2c54:	063f      	lsls	r7, r7, #24
    2c56:	62a7      	str	r7, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2c58:	2240      	movs	r2, #64	; 0x40
    2c5a:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2c5c:	43b3      	bics	r3, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2c5e:	2101      	movs	r1, #1
    2c60:	4688      	mov	r8, r1
    2c62:	4641      	mov	r1, r8
    2c64:	430b      	orrs	r3, r1
    2c66:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2c68:	54a3      	strb	r3, [r4, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2c6a:	3a10      	subs	r2, #16
    2c6c:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2c6e:	210f      	movs	r1, #15
    2c70:	468a      	mov	sl, r1
    2c72:	438b      	bics	r3, r1
	tmp |= PORT_PMUX_PMUXE(data);
    2c74:	2103      	movs	r1, #3
    2c76:	430b      	orrs	r3, r1
    2c78:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2c7a:	54a3      	strb	r3, [r4, r2]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2c7c:	2302      	movs	r3, #2
    2c7e:	616b      	str	r3, [r5, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2c80:	60ab      	str	r3, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2c82:	4b54      	ldr	r3, [pc, #336]	; (2dd4 <RF_SPI_init+0x1c8>)
    2c84:	62a3      	str	r3, [r4, #40]	; 0x28
    2c86:	62a7      	str	r7, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2c88:	2141      	movs	r1, #65	; 0x41
    2c8a:	5c63      	ldrb	r3, [r4, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2c8c:	43b3      	bics	r3, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2c8e:	4640      	mov	r0, r8
    2c90:	4303      	orrs	r3, r0
    2c92:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2c94:	5463      	strb	r3, [r4, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2c96:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2c98:	3932      	subs	r1, #50	; 0x32
    2c9a:	400b      	ands	r3, r1
	tmp |= PORT_PMUX_PMUXO(data);
    2c9c:	2130      	movs	r1, #48	; 0x30
    2c9e:	430b      	orrs	r3, r1
    2ca0:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2ca2:	54a3      	strb	r3, [r4, r2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2ca4:	2380      	movs	r3, #128	; 0x80
    2ca6:	02db      	lsls	r3, r3, #11
    2ca8:	606b      	str	r3, [r5, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2caa:	4b4b      	ldr	r3, [pc, #300]	; (2dd8 <RF_SPI_init+0x1cc>)
    2cac:	62a3      	str	r3, [r4, #40]	; 0x28
    2cae:	4b4b      	ldr	r3, [pc, #300]	; (2ddc <RF_SPI_init+0x1d0>)
    2cb0:	62a3      	str	r3, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2cb2:	3222      	adds	r2, #34	; 0x22
    2cb4:	5ca3      	ldrb	r3, [r4, r2]
    2cb6:	2104      	movs	r1, #4
    2cb8:	4689      	mov	r9, r1
    2cba:	438b      	bics	r3, r1
    2cbc:	54a3      	strb	r3, [r4, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2cbe:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2cc0:	43b3      	bics	r3, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2cc2:	4303      	orrs	r3, r0
    2cc4:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2cc6:	54a3      	strb	r3, [r4, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2cc8:	3a19      	subs	r2, #25
    2cca:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2ccc:	4651      	mov	r1, sl
    2cce:	438b      	bics	r3, r1
	tmp |= PORT_PMUX_PMUXE(data);
    2cd0:	2102      	movs	r1, #2
    2cd2:	430b      	orrs	r3, r1
    2cd4:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2cd6:	54a3      	strb	r3, [r4, r2]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2cd8:	464b      	mov	r3, r9
    2cda:	616b      	str	r3, [r5, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2cdc:	60ab      	str	r3, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2cde:	4b40      	ldr	r3, [pc, #256]	; (2de0 <RF_SPI_init+0x1d4>)
    2ce0:	62a3      	str	r3, [r4, #40]	; 0x28
    2ce2:	62a7      	str	r7, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2ce4:	3209      	adds	r2, #9
    2ce6:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2ce8:	43b3      	bics	r3, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2cea:	54a3      	strb	r3, [r4, r2]
	RF_HW_Reset();
    2cec:	f7ff ff80 	bl	2bf0 <RF_HW_Reset>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2cf0:	2380      	movs	r3, #128	; 0x80
    2cf2:	055b      	lsls	r3, r3, #21
    2cf4:	61ab      	str	r3, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2cf6:	60ab      	str	r3, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2cf8:	2280      	movs	r2, #128	; 0x80
    2cfa:	05d2      	lsls	r2, r2, #23
    2cfc:	62a2      	str	r2, [r4, #40]	; 0x28
    2cfe:	4b39      	ldr	r3, [pc, #228]	; (2de4 <RF_SPI_init+0x1d8>)
    2d00:	62a3      	str	r3, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2d02:	215c      	movs	r1, #92	; 0x5c
    2d04:	5c63      	ldrb	r3, [r4, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2d06:	43b3      	bics	r3, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2d08:	5463      	strb	r3, [r4, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2d0a:	2380      	movs	r3, #128	; 0x80
    2d0c:	041b      	lsls	r3, r3, #16
    2d0e:	61ab      	str	r3, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2d10:	60ab      	str	r3, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2d12:	62a2      	str	r2, [r4, #40]	; 0x28
    2d14:	4b34      	ldr	r3, [pc, #208]	; (2de8 <RF_SPI_init+0x1dc>)
    2d16:	62a3      	str	r3, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2d18:	3905      	subs	r1, #5
    2d1a:	5c63      	ldrb	r3, [r4, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2d1c:	43b3      	bics	r3, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2d1e:	5463      	strb	r3, [r4, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2d20:	465b      	mov	r3, fp
    2d22:	616b      	str	r3, [r5, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2d24:	60ab      	str	r3, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2d26:	4b31      	ldr	r3, [pc, #196]	; (2dec <RF_SPI_init+0x1e0>)
    2d28:	62a3      	str	r3, [r4, #40]	; 0x28
    2d2a:	62a7      	str	r7, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2d2c:	3914      	subs	r1, #20
    2d2e:	5c63      	ldrb	r3, [r4, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2d30:	43b3      	bics	r3, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2d32:	5463      	strb	r3, [r4, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2d34:	2310      	movs	r3, #16
    2d36:	3155      	adds	r1, #85	; 0x55
    2d38:	506b      	str	r3, [r5, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2d3a:	3910      	subs	r1, #16
    2d3c:	506b      	str	r3, [r5, r1]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2d3e:	3398      	adds	r3, #152	; 0x98
    2d40:	492b      	ldr	r1, [pc, #172]	; (2df0 <RF_SPI_init+0x1e4>)
    2d42:	50e1      	str	r1, [r4, r3]
    2d44:	50e7      	str	r7, [r4, r3]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2d46:	20c4      	movs	r0, #196	; 0xc4
    2d48:	5c21      	ldrb	r1, [r4, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2d4a:	43b1      	bics	r1, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2d4c:	5421      	strb	r1, [r4, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2d4e:	2184      	movs	r1, #132	; 0x84
    2d50:	468c      	mov	ip, r1
    2d52:	3964      	subs	r1, #100	; 0x64
    2d54:	4660      	mov	r0, ip
    2d56:	5029      	str	r1, [r5, r0]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2d58:	4926      	ldr	r1, [pc, #152]	; (2df4 <RF_SPI_init+0x1e8>)
    2d5a:	50e1      	str	r1, [r4, r3]
    2d5c:	4926      	ldr	r1, [pc, #152]	; (2df8 <RF_SPI_init+0x1ec>)
    2d5e:	50e1      	str	r1, [r4, r3]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2d60:	21c5      	movs	r1, #197	; 0xc5
    2d62:	5c67      	ldrb	r7, [r4, r1]
    2d64:	4648      	mov	r0, r9
    2d66:	4387      	bics	r7, r0
    2d68:	5467      	strb	r7, [r4, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2d6a:	5c67      	ldrb	r7, [r4, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2d6c:	43b7      	bics	r7, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2d6e:	5467      	strb	r7, [r4, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2d70:	4661      	mov	r1, ip
    2d72:	506a      	str	r2, [r5, r1]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2d74:	4918      	ldr	r1, [pc, #96]	; (2dd8 <RF_SPI_init+0x1cc>)
    2d76:	50e1      	str	r1, [r4, r3]
    2d78:	4920      	ldr	r1, [pc, #128]	; (2dfc <RF_SPI_init+0x1f0>)
    2d7a:	50e1      	str	r1, [r4, r3]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2d7c:	4663      	mov	r3, ip
    2d7e:	50ea      	str	r2, [r5, r3]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    2d80:	21de      	movs	r1, #222	; 0xde
    2d82:	5c63      	ldrb	r3, [r4, r1]
    2d84:	4303      	orrs	r3, r0
    2d86:	b2db      	uxtb	r3, r3
    2d88:	5463      	strb	r3, [r4, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2d8a:	2394      	movs	r3, #148	; 0x94
    2d8c:	50ea      	str	r2, [r5, r3]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2d8e:	5c63      	ldrb	r3, [r4, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2d90:	43b3      	bics	r3, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2d92:	4642      	mov	r2, r8
    2d94:	4313      	orrs	r3, r2
    2d96:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2d98:	5463      	strb	r3, [r4, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2d9a:	22bf      	movs	r2, #191	; 0xbf
    2d9c:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2d9e:	4651      	mov	r1, sl
    2da0:	438b      	bics	r3, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2da2:	54a3      	strb	r3, [r4, r2]
	RF_IRQ_Enable();
    2da4:	f7ff fd74 	bl	2890 <RF_IRQ_Enable>
}
    2da8:	bc3c      	pop	{r2, r3, r4, r5}
    2daa:	4690      	mov	r8, r2
    2dac:	4699      	mov	r9, r3
    2dae:	46a2      	mov	sl, r4
    2db0:	46ab      	mov	fp, r5
    2db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2db4:	40000400 	.word	0x40000400
    2db8:	0000400e 	.word	0x0000400e
    2dbc:	40000c00 	.word	0x40000c00
    2dc0:	20000e88 	.word	0x20000e88
    2dc4:	42000c00 	.word	0x42000c00
    2dc8:	20000e84 	.word	0x20000e84
    2dcc:	41004400 	.word	0x41004400
    2dd0:	40000001 	.word	0x40000001
    2dd4:	40000002 	.word	0x40000002
    2dd8:	40020000 	.word	0x40020000
    2ddc:	c0020004 	.word	0xc0020004
    2de0:	40000004 	.word	0x40000004
    2de4:	c0001000 	.word	0xc0001000
    2de8:	c0000080 	.word	0xc0000080
    2dec:	40000008 	.word	0x40000008
    2df0:	40000010 	.word	0x40000010
    2df4:	40020020 	.word	0x40020020
    2df8:	c0020000 	.word	0xc0020000
    2dfc:	c0024000 	.word	0xc0024000

00002e00 <EXT_I2C_init>:

//External I2C port


void EXT_I2C_init(void)
{
    2e00:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e02:	46c6      	mov	lr, r8
    2e04:	b500      	push	{lr}
    2e06:	4a30      	ldr	r2, [pc, #192]	; (2ec8 <EXT_I2C_init+0xc8>)
    2e08:	6a13      	ldr	r3, [r2, #32]
    2e0a:	2140      	movs	r1, #64	; 0x40
    2e0c:	430b      	orrs	r3, r1
    2e0e:	6213      	str	r3, [r2, #32]
    2e10:	4b2e      	ldr	r3, [pc, #184]	; (2ecc <EXT_I2C_init+0xcc>)
    2e12:	4a2f      	ldr	r2, [pc, #188]	; (2ed0 <EXT_I2C_init+0xd0>)
    2e14:	805a      	strh	r2, [r3, #2]
    2e16:	4a2f      	ldr	r2, [pc, #188]	; (2ed4 <EXT_I2C_init+0xd4>)
    2e18:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM4);
	_gclk_enable_channel(SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC);
	_gclk_enable_channel(SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC);
	
	i2c_m_sync_init(&EXT_I2C, SERCOM4);
    2e1a:	4d2f      	ldr	r5, [pc, #188]	; (2ed8 <EXT_I2C_init+0xd8>)
    2e1c:	492f      	ldr	r1, [pc, #188]	; (2edc <EXT_I2C_init+0xdc>)
    2e1e:	0028      	movs	r0, r5
    2e20:	f7fe fc4e 	bl	16c0 <i2c_m_sync_init>
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2e24:	4c2e      	ldr	r4, [pc, #184]	; (2ee0 <EXT_I2C_init+0xe0>)
    2e26:	22cc      	movs	r2, #204	; 0xcc
    2e28:	5ca3      	ldrb	r3, [r4, r2]
    2e2a:	2104      	movs	r1, #4
    2e2c:	438b      	bics	r3, r1
    2e2e:	54a3      	strb	r3, [r4, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2e30:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2e32:	2001      	movs	r0, #1
    2e34:	4680      	mov	r8, r0
    2e36:	4383      	bics	r3, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2e38:	2701      	movs	r7, #1
    2e3a:	433b      	orrs	r3, r7
    2e3c:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2e3e:	54a3      	strb	r3, [r4, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2e40:	3a16      	subs	r2, #22
    2e42:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2e44:	260f      	movs	r6, #15
    2e46:	43b3      	bics	r3, r6
	tmp |= PORT_PMUX_PMUXE(data);
    2e48:	2002      	movs	r0, #2
    2e4a:	4303      	orrs	r3, r0
    2e4c:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2e4e:	54a3      	strb	r3, [r4, r2]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2e50:	20cd      	movs	r0, #205	; 0xcd
    2e52:	5c23      	ldrb	r3, [r4, r0]
    2e54:	438b      	bics	r3, r1
    2e56:	5423      	strb	r3, [r4, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2e58:	5c23      	ldrb	r3, [r4, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2e5a:	4641      	mov	r1, r8
    2e5c:	438b      	bics	r3, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2e5e:	433b      	orrs	r3, r7
    2e60:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2e62:	5423      	strb	r3, [r4, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2e64:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2e66:	310e      	adds	r1, #14
    2e68:	400b      	ands	r3, r1
	tmp |= PORT_PMUX_PMUXO(data);
    2e6a:	2120      	movs	r1, #32
    2e6c:	430b      	orrs	r3, r1
    2e6e:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2e70:	54a3      	strb	r3, [r4, r2]
	gpio_set_pin_pull_mode(PB12, GPIO_PULL_OFF);
	gpio_set_pin_function(PB12, PINMUX_PB12C_SERCOM4_PAD0);
	gpio_set_pin_pull_mode(PB13, GPIO_PULL_OFF);
	gpio_set_pin_function(PB13, PINMUX_PB13C_SERCOM4_PAD1);
	
	i2c_m_sync_get_io_descriptor(&EXT_I2C, &I2C_io);
    2e72:	491c      	ldr	r1, [pc, #112]	; (2ee4 <EXT_I2C_init+0xe4>)
    2e74:	0028      	movs	r0, r5
    2e76:	f7fe fc6f 	bl	1758 <i2c_m_sync_get_io_descriptor>
	i2c_m_sync_enable(&EXT_I2C);
    2e7a:	0028      	movs	r0, r5
    2e7c:	f7fe fc3c 	bl	16f8 <i2c_m_sync_enable>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2e80:	21c0      	movs	r1, #192	; 0xc0
    2e82:	05c9      	lsls	r1, r1, #23
    2e84:	2384      	movs	r3, #132	; 0x84
    2e86:	2080      	movs	r0, #128	; 0x80
    2e88:	0040      	lsls	r0, r0, #1
    2e8a:	50c8      	str	r0, [r1, r3]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2e8c:	22a8      	movs	r2, #168	; 0xa8
    2e8e:	4d16      	ldr	r5, [pc, #88]	; (2ee8 <EXT_I2C_init+0xe8>)
    2e90:	50a5      	str	r5, [r4, r2]
    2e92:	4d16      	ldr	r5, [pc, #88]	; (2eec <EXT_I2C_init+0xec>)
    2e94:	50a5      	str	r5, [r4, r2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2e96:	50c8      	str	r0, [r1, r3]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    2e98:	3220      	adds	r2, #32
    2e9a:	5ca3      	ldrb	r3, [r4, r2]
    2e9c:	2504      	movs	r5, #4
    2e9e:	432b      	orrs	r3, r5
    2ea0:	b2db      	uxtb	r3, r3
    2ea2:	54a3      	strb	r3, [r4, r2]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2ea4:	2398      	movs	r3, #152	; 0x98
    2ea6:	50c8      	str	r0, [r1, r3]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2ea8:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2eaa:	4641      	mov	r1, r8
    2eac:	438b      	bics	r3, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2eae:	433b      	orrs	r3, r7
    2eb0:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2eb2:	54a3      	strb	r3, [r4, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2eb4:	3a14      	subs	r2, #20
    2eb6:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2eb8:	43b3      	bics	r3, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2eba:	54a3      	strb	r3, [r4, r2]
	
	
	gpio_set_pin_direction(EXT_I2C_IRQ, GPIO_DIRECTION_IN);
	gpio_set_pin_pull_mode(EXT_I2C_IRQ, GPIO_PULL_UP);
	gpio_set_pin_function(EXT_I2C_IRQ, PORT_PB08A_EIC_EXTINT8);
	EXT_I2C_IRQ_Enable();
    2ebc:	f7ff fcf6 	bl	28ac <EXT_I2C_IRQ_Enable>
}
    2ec0:	bc04      	pop	{r2}
    2ec2:	4690      	mov	r8, r2
    2ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ec6:	46c0      	nop			; (mov r8, r8)
    2ec8:	40000400 	.word	0x40000400
    2ecc:	40000c00 	.word	0x40000c00
    2ed0:	00004011 	.word	0x00004011
    2ed4:	0000430c 	.word	0x0000430c
    2ed8:	20000ea0 	.word	0x20000ea0
    2edc:	42001800 	.word	0x42001800
    2ee0:	41004400 	.word	0x41004400
    2ee4:	20000ee0 	.word	0x20000ee0
    2ee8:	40020100 	.word	0x40020100
    2eec:	c0020000 	.word	0xc0020000

00002ef0 <RTC_I2C_init>:

void RTC_I2C_init(void){
    2ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ef2:	46ce      	mov	lr, r9
    2ef4:	b500      	push	{lr}
    2ef6:	4a2c      	ldr	r2, [pc, #176]	; (2fa8 <RTC_I2C_init+0xb8>)
    2ef8:	6a13      	ldr	r3, [r2, #32]
    2efa:	2110      	movs	r1, #16
    2efc:	430b      	orrs	r3, r1
    2efe:	6213      	str	r3, [r2, #32]
    2f00:	4b2a      	ldr	r3, [pc, #168]	; (2fac <RTC_I2C_init+0xbc>)
    2f02:	4a2b      	ldr	r2, [pc, #172]	; (2fb0 <RTC_I2C_init+0xc0>)
    2f04:	805a      	strh	r2, [r3, #2]
    2f06:	4a2b      	ldr	r2, [pc, #172]	; (2fb4 <RTC_I2C_init+0xc4>)
    2f08:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM2);
	_gclk_enable_channel(SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC);
	_gclk_enable_channel(SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC);
	
	i2c_m_sync_init(&RTC_I2C, SERCOM2);
    2f0a:	492b      	ldr	r1, [pc, #172]	; (2fb8 <RTC_I2C_init+0xc8>)
    2f0c:	482b      	ldr	r0, [pc, #172]	; (2fbc <RTC_I2C_init+0xcc>)
    2f0e:	f7fe fbd7 	bl	16c0 <i2c_m_sync_init>
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2f12:	4c2b      	ldr	r4, [pc, #172]	; (2fc0 <RTC_I2C_init+0xd0>)
    2f14:	2248      	movs	r2, #72	; 0x48
    2f16:	5ca3      	ldrb	r3, [r4, r2]
    2f18:	2104      	movs	r1, #4
    2f1a:	4689      	mov	r9, r1
    2f1c:	438b      	bics	r3, r1
    2f1e:	54a3      	strb	r3, [r4, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2f20:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2f22:	2501      	movs	r5, #1
    2f24:	43ab      	bics	r3, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2f26:	2701      	movs	r7, #1
    2f28:	433b      	orrs	r3, r7
    2f2a:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2f2c:	54a3      	strb	r3, [r4, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2f2e:	3a14      	subs	r2, #20
    2f30:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2f32:	260f      	movs	r6, #15
    2f34:	43b3      	bics	r3, r6
	tmp |= PORT_PMUX_PMUXE(data);
    2f36:	2103      	movs	r1, #3
    2f38:	430b      	orrs	r3, r1
    2f3a:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2f3c:	54a3      	strb	r3, [r4, r2]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2f3e:	2149      	movs	r1, #73	; 0x49
    2f40:	5c63      	ldrb	r3, [r4, r1]
    2f42:	4648      	mov	r0, r9
    2f44:	4383      	bics	r3, r0
    2f46:	5463      	strb	r3, [r4, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2f48:	5c63      	ldrb	r3, [r4, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2f4a:	43ab      	bics	r3, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2f4c:	433b      	orrs	r3, r7
    2f4e:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2f50:	5463      	strb	r3, [r4, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2f52:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2f54:	393a      	subs	r1, #58	; 0x3a
    2f56:	400b      	ands	r3, r1
	tmp |= PORT_PMUX_PMUXO(data);
    2f58:	2130      	movs	r1, #48	; 0x30
    2f5a:	430b      	orrs	r3, r1
    2f5c:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2f5e:	54a3      	strb	r3, [r4, r2]
	gpio_set_pin_function(PA08, PINMUX_PA08D_SERCOM2_PAD0);

	gpio_set_pin_pull_mode(PA09, GPIO_PULL_OFF);
	gpio_set_pin_function(PA09, PINMUX_PA09D_SERCOM2_PAD1);
	
	i2c_m_sync_get_io_descriptor(&RTC_I2C, &RTC_I2C_io);
    2f60:	4918      	ldr	r1, [pc, #96]	; (2fc4 <RTC_I2C_init+0xd4>)
    2f62:	4816      	ldr	r0, [pc, #88]	; (2fbc <RTC_I2C_init+0xcc>)
    2f64:	f7fe fbf8 	bl	1758 <i2c_m_sync_get_io_descriptor>
	i2c_m_sync_enable(&RTC_I2C);
    2f68:	4814      	ldr	r0, [pc, #80]	; (2fbc <RTC_I2C_init+0xcc>)
    2f6a:	f7fe fbc5 	bl	16f8 <i2c_m_sync_enable>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2f6e:	2280      	movs	r2, #128	; 0x80
    2f70:	00d2      	lsls	r2, r2, #3
    2f72:	23c0      	movs	r3, #192	; 0xc0
    2f74:	05db      	lsls	r3, r3, #23
    2f76:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2f78:	4b13      	ldr	r3, [pc, #76]	; (2fc8 <RTC_I2C_init+0xd8>)
    2f7a:	62a3      	str	r3, [r4, #40]	; 0x28
    2f7c:	4b13      	ldr	r3, [pc, #76]	; (2fcc <RTC_I2C_init+0xdc>)
    2f7e:	62a3      	str	r3, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2f80:	224a      	movs	r2, #74	; 0x4a
    2f82:	5ca3      	ldrb	r3, [r4, r2]
    2f84:	4649      	mov	r1, r9
    2f86:	438b      	bics	r3, r1
    2f88:	54a3      	strb	r3, [r4, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2f8a:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2f8c:	43ab      	bics	r3, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2f8e:	433b      	orrs	r3, r7
    2f90:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2f92:	54a3      	strb	r3, [r4, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2f94:	3a15      	subs	r2, #21
    2f96:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2f98:	43b3      	bics	r3, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2f9a:	54a3      	strb	r3, [r4, r2]
	
	gpio_set_pin_direction(RTC_IRQ, GPIO_DIRECTION_IN);
	gpio_set_pin_pull_mode(RTC_IRQ, GPIO_PULL_OFF);
	gpio_set_pin_function(RTC_IRQ, PINMUX_PA10A_EIC_EXTINT10);
	RTC_I2C_IRQ_Enable();
    2f9c:	f7ff fc8e 	bl	28bc <RTC_I2C_IRQ_Enable>
}
    2fa0:	bc04      	pop	{r2}
    2fa2:	4691      	mov	r9, r2
    2fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fa6:	46c0      	nop			; (mov r8, r8)
    2fa8:	40000400 	.word	0x40000400
    2fac:	40000c00 	.word	0x40000c00
    2fb0:	0000400f 	.word	0x0000400f
    2fb4:	0000430c 	.word	0x0000430c
    2fb8:	42001000 	.word	0x42001000
    2fbc:	20000ee4 	.word	0x20000ee4
    2fc0:	41004400 	.word	0x41004400
    2fc4:	20000e80 	.word	0x20000e80
    2fc8:	40020400 	.word	0x40020400
    2fcc:	c0020000 	.word	0xc0020000

00002fd0 <RTC_write_batch>:



bool RTC_write_batch(uint8_t addres, uint8_t *data, uint8_t data_len){
    2fd0:	b570      	push	{r4, r5, r6, lr}
    2fd2:	000d      	movs	r5, r1
    2fd4:	0014      	movs	r4, r2
	i2c_m_sync_set_slaveaddr(&RTC_I2C, addres, I2C_M_SEVEN);
    2fd6:	b201      	sxth	r1, r0
    2fd8:	2280      	movs	r2, #128	; 0x80
    2fda:	0112      	lsls	r2, r2, #4
    2fdc:	4805      	ldr	r0, [pc, #20]	; (2ff4 <RTC_write_batch+0x24>)
    2fde:	f7fe fb8f 	bl	1700 <i2c_m_sync_set_slaveaddr>
	//i2c_m_sync_cmd_write(&EXT_I2C, 0x00, data, data_len);
	return (io_write(RTC_I2C_io, (uint8_t *)data, data_len) >= 0) ? true : false;
    2fe2:	b2a2      	uxth	r2, r4
    2fe4:	4b04      	ldr	r3, [pc, #16]	; (2ff8 <RTC_write_batch+0x28>)
    2fe6:	6818      	ldr	r0, [r3, #0]
    2fe8:	0029      	movs	r1, r5
    2fea:	f7fe fbb9 	bl	1760 <io_write>
    2fee:	43c0      	mvns	r0, r0
    2ff0:	0fc0      	lsrs	r0, r0, #31
}
    2ff2:	bd70      	pop	{r4, r5, r6, pc}
    2ff4:	20000ee4 	.word	0x20000ee4
    2ff8:	20000e80 	.word	0x20000e80

00002ffc <RTC_read_batch>:

bool RTC_read_batch(uint8_t addres ,uint8_t *data, uint8_t data_len){
    2ffc:	b570      	push	{r4, r5, r6, lr}
    2ffe:	000c      	movs	r4, r1
    3000:	0015      	movs	r5, r2
	i2c_m_sync_set_slaveaddr(&RTC_I2C, addres, I2C_M_SEVEN);
    3002:	b201      	sxth	r1, r0
    3004:	4e06      	ldr	r6, [pc, #24]	; (3020 <RTC_read_batch+0x24>)
    3006:	2280      	movs	r2, #128	; 0x80
    3008:	0112      	lsls	r2, r2, #4
    300a:	0030      	movs	r0, r6
    300c:	f7fe fb78 	bl	1700 <i2c_m_sync_set_slaveaddr>
	i2c_m_sync_cmd_read(&RTC_I2C, 0x00, data, data_len);
    3010:	002b      	movs	r3, r5
    3012:	0022      	movs	r2, r4
    3014:	2100      	movs	r1, #0
    3016:	0030      	movs	r0, r6
    3018:	f7fe fb7c 	bl	1714 <i2c_m_sync_cmd_read>
	//return (io_read(I2C_io, (uint8_t *)data, data_len) >= 0) ? true : false;
}
    301c:	bd70      	pop	{r4, r5, r6, pc}
    301e:	46c0      	nop			; (mov r8, r8)
    3020:	20000ee4 	.word	0x20000ee4

00003024 <I2C_write_batch>:

bool I2C_write_batch(uint8_t addres, uint8_t *data, uint8_t data_len){
    3024:	b570      	push	{r4, r5, r6, lr}
    3026:	000d      	movs	r5, r1
    3028:	0014      	movs	r4, r2
	i2c_m_sync_set_slaveaddr(&EXT_I2C, addres, I2C_M_SEVEN);
    302a:	b201      	sxth	r1, r0
    302c:	2280      	movs	r2, #128	; 0x80
    302e:	0112      	lsls	r2, r2, #4
    3030:	4805      	ldr	r0, [pc, #20]	; (3048 <I2C_write_batch+0x24>)
    3032:	f7fe fb65 	bl	1700 <i2c_m_sync_set_slaveaddr>
	//i2c_m_sync_cmd_write(&EXT_I2C, 0x00, data, data_len);
	return (io_write(I2C_io, (uint8_t *)data, data_len) >= 0) ? true : false;  
    3036:	b2a2      	uxth	r2, r4
    3038:	4b04      	ldr	r3, [pc, #16]	; (304c <I2C_write_batch+0x28>)
    303a:	6818      	ldr	r0, [r3, #0]
    303c:	0029      	movs	r1, r5
    303e:	f7fe fb8f 	bl	1760 <io_write>
    3042:	43c0      	mvns	r0, r0
    3044:	0fc0      	lsrs	r0, r0, #31
}
    3046:	bd70      	pop	{r4, r5, r6, pc}
    3048:	20000ea0 	.word	0x20000ea0
    304c:	20000ee0 	.word	0x20000ee0

00003050 <I2C_read_batch>:

bool I2C_read_batch(uint8_t addres ,uint8_t *data, uint8_t data_len){
    3050:	b570      	push	{r4, r5, r6, lr}
    3052:	000c      	movs	r4, r1
    3054:	0015      	movs	r5, r2
	i2c_m_sync_set_slaveaddr(&EXT_I2C, addres, I2C_M_SEVEN);
    3056:	b201      	sxth	r1, r0
    3058:	4e06      	ldr	r6, [pc, #24]	; (3074 <I2C_read_batch+0x24>)
    305a:	2280      	movs	r2, #128	; 0x80
    305c:	0112      	lsls	r2, r2, #4
    305e:	0030      	movs	r0, r6
    3060:	f7fe fb4e 	bl	1700 <i2c_m_sync_set_slaveaddr>
	
	i2c_m_sync_cmd_read(&EXT_I2C, 0x00, data, data_len);
    3064:	002b      	movs	r3, r5
    3066:	0022      	movs	r2, r4
    3068:	2100      	movs	r1, #0
    306a:	0030      	movs	r0, r6
    306c:	f7fe fb52 	bl	1714 <i2c_m_sync_cmd_read>
	
	//return (io_read(I2C_io, (uint8_t *)data, data_len) >= 0) ? true : false;
}
    3070:	bd70      	pop	{r4, r5, r6, pc}
    3072:	46c0      	nop			; (mov r8, r8)
    3074:	20000ea0 	.word	0x20000ea0

00003078 <I2C_read_batch_addr>:
bool I2C_read_batch_addr(uint8_t addres, uint8_t reg, uint8_t *data, uint8_t data_len){
    3078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    307a:	000c      	movs	r4, r1
    307c:	0015      	movs	r5, r2
    307e:	001e      	movs	r6, r3
	i2c_m_sync_set_slaveaddr(&EXT_I2C, addres, I2C_M_SEVEN);
    3080:	b201      	sxth	r1, r0
    3082:	4f06      	ldr	r7, [pc, #24]	; (309c <I2C_read_batch_addr+0x24>)
    3084:	2280      	movs	r2, #128	; 0x80
    3086:	0112      	lsls	r2, r2, #4
    3088:	0038      	movs	r0, r7
    308a:	f7fe fb39 	bl	1700 <i2c_m_sync_set_slaveaddr>
	
	i2c_m_sync_cmd_read(&EXT_I2C, reg, data, data_len);
    308e:	0033      	movs	r3, r6
    3090:	002a      	movs	r2, r5
    3092:	0021      	movs	r1, r4
    3094:	0038      	movs	r0, r7
    3096:	f7fe fb3d 	bl	1714 <i2c_m_sync_cmd_read>
	//return (io_read(I2C_io, (uint8_t *)data, data_len) >= 0) ? true : false;
}
    309a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    309c:	20000ea0 	.word	0x20000ea0

000030a0 <DEBUG_SERIAL_init>:
		gpio_set_pin_level(IO4 , false);
	}
	
}

void DEBUG_SERIAL_init(void){	
    30a0:	b570      	push	{r4, r5, r6, lr}
    30a2:	4a1a      	ldr	r2, [pc, #104]	; (310c <DEBUG_SERIAL_init+0x6c>)
    30a4:	6a13      	ldr	r3, [r2, #32]
    30a6:	2120      	movs	r1, #32
    30a8:	430b      	orrs	r3, r1
    30aa:	6213      	str	r3, [r2, #32]
    30ac:	4a18      	ldr	r2, [pc, #96]	; (3110 <DEBUG_SERIAL_init+0x70>)
    30ae:	4b19      	ldr	r3, [pc, #100]	; (3114 <DEBUG_SERIAL_init+0x74>)
    30b0:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
	
	usart_sync_init(&DEBUG_SERIAL, SERCOM3, (void *)NULL);
    30b2:	4c19      	ldr	r4, [pc, #100]	; (3118 <DEBUG_SERIAL_init+0x78>)
    30b4:	2200      	movs	r2, #0
    30b6:	4919      	ldr	r1, [pc, #100]	; (311c <DEBUG_SERIAL_init+0x7c>)
    30b8:	0020      	movs	r0, r4
    30ba:	f7fe fc89 	bl	19d0 <usart_sync_init>
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    30be:	4b18      	ldr	r3, [pc, #96]	; (3120 <DEBUG_SERIAL_init+0x80>)
    30c0:	2250      	movs	r2, #80	; 0x50
    30c2:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    30c4:	2601      	movs	r6, #1
    30c6:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    30c8:	2501      	movs	r5, #1
    30ca:	4329      	orrs	r1, r5
    30cc:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    30ce:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    30d0:	2038      	movs	r0, #56	; 0x38
    30d2:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    30d4:	3a41      	subs	r2, #65	; 0x41
    30d6:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
    30d8:	2203      	movs	r2, #3
    30da:	4311      	orrs	r1, r2
    30dc:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    30de:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    30e0:	2151      	movs	r1, #81	; 0x51
    30e2:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    30e4:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    30e6:	432a      	orrs	r2, r5
    30e8:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    30ea:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    30ec:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    30ee:	3942      	subs	r1, #66	; 0x42
    30f0:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    30f2:	2130      	movs	r1, #48	; 0x30
    30f4:	430a      	orrs	r2, r1
    30f6:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    30f8:	541a      	strb	r2, [r3, r0]
	gpio_set_pin_function(PA16, PINMUX_PA16D_SERCOM3_PAD0);
	gpio_set_pin_function(PA17, PINMUX_PA17D_SERCOM3_PAD1);
	usart_sync_get_io_descriptor(&DEBUG_SERIAL, &debugSerial);
    30fa:	490a      	ldr	r1, [pc, #40]	; (3124 <DEBUG_SERIAL_init+0x84>)
    30fc:	0020      	movs	r0, r4
    30fe:	f7fe fc9b 	bl	1a38 <usart_sync_get_io_descriptor>
	usart_sync_enable(&DEBUG_SERIAL);
    3102:	0020      	movs	r0, r4
    3104:	f7fe fc86 	bl	1a14 <usart_sync_enable>
}
    3108:	bd70      	pop	{r4, r5, r6, pc}
    310a:	46c0      	nop			; (mov r8, r8)
    310c:	40000400 	.word	0x40000400
    3110:	00004010 	.word	0x00004010
    3114:	40000c00 	.word	0x40000c00
    3118:	20000f08 	.word	0x20000f08
    311c:	42001400 	.word	0x42001400
    3120:	41004400 	.word	0x41004400
    3124:	20000edc 	.word	0x20000edc

00003128 <DebugSerialWrite>:

void DebugSerialWrite(uint8_t *data, uint8_t data_len){
    3128:	b510      	push	{r4, lr}
    312a:	0003      	movs	r3, r0
	io_write(debugSerial, data, data_len);
    312c:	b28a      	uxth	r2, r1
    312e:	4903      	ldr	r1, [pc, #12]	; (313c <DebugSerialWrite+0x14>)
    3130:	6808      	ldr	r0, [r1, #0]
    3132:	0019      	movs	r1, r3
    3134:	f7fe fb14 	bl	1760 <io_write>
}
    3138:	bd10      	pop	{r4, pc}
    313a:	46c0      	nop			; (mov r8, r8)
    313c:	20000edc 	.word	0x20000edc

00003140 <RF_select>:
}


// Enable SPI transfer
void RF_select()
{
    3140:	b510      	push	{r4, lr}
	RFM_69_sel(false);
    3142:	2000      	movs	r0, #0
    3144:	f7ff fc08 	bl	2958 <RFM_69_sel>
}
    3148:	bd10      	pop	{r4, pc}

0000314a <RF_unselect>:

// Disable SPI transfer
void RF_unselect()
{
    314a:	b510      	push	{r4, lr}
	RFM_69_sel(true);
    314c:	2001      	movs	r0, #1
    314e:	f7ff fc03 	bl	2958 <RFM_69_sel>
}
    3152:	bd10      	pop	{r4, pc}

00003154 <readReg>:
{
    3154:	b510      	push	{r4, lr}
    3156:	0004      	movs	r4, r0
	RF_select();
    3158:	f7ff fff2 	bl	3140 <RF_select>
	SPI_write(addr & 0x7F);
    315c:	207f      	movs	r0, #127	; 0x7f
    315e:	4020      	ands	r0, r4
    3160:	f7ff fc08 	bl	2974 <SPI_write>
	uint8_t regval = SPI_read();
    3164:	f7ff fc14 	bl	2990 <SPI_read>
    3168:	0004      	movs	r4, r0
	RF_unselect();
    316a:	f7ff ffee 	bl	314a <RF_unselect>
}
    316e:	0020      	movs	r0, r4
    3170:	bd10      	pop	{r4, pc}

00003172 <writeReg>:
{
    3172:	b570      	push	{r4, r5, r6, lr}
    3174:	0005      	movs	r5, r0
    3176:	000c      	movs	r4, r1
	RF_select();
    3178:	f7ff ffe2 	bl	3140 <RF_select>
	SPI_write(addr | 0x80);
    317c:	2080      	movs	r0, #128	; 0x80
    317e:	4240      	negs	r0, r0
    3180:	4328      	orrs	r0, r5
    3182:	b2c0      	uxtb	r0, r0
    3184:	f7ff fbf6 	bl	2974 <SPI_write>
	SPI_write(value);
    3188:	0020      	movs	r0, r4
    318a:	f7ff fbf3 	bl	2974 <SPI_write>
	RF_unselect();
    318e:	f7ff ffdc 	bl	314a <RF_unselect>
}
    3192:	bd70      	pop	{r4, r5, r6, pc}

00003194 <rfm69_init>:
{
    3194:	b510      	push	{r4, lr}
	RF_HW_Reset();
    3196:	f7ff fd2b 	bl	2bf0 <RF_HW_Reset>
	uint8_t tmp_data = readReg(REG_VERSION);
    319a:	2010      	movs	r0, #16
    319c:	f7ff ffda 	bl	3154 <readReg>
	writeReg(REG_OPMODE, RF_OPMODE_STANDBY);
    31a0:	2104      	movs	r1, #4
    31a2:	2001      	movs	r0, #1
    31a4:	f7ff ffe5 	bl	3172 <writeReg>
	tmp_data = readReg(REG_IRQFLAGS1);
    31a8:	2027      	movs	r0, #39	; 0x27
    31aa:	f7ff ffd3 	bl	3154 <readReg>
	writeReg(REG_FIFOTHRESH, 0x8f);
    31ae:	218f      	movs	r1, #143	; 0x8f
    31b0:	203c      	movs	r0, #60	; 0x3c
    31b2:	f7ff ffde 	bl	3172 <writeReg>
	writeReg(REG_TESTDAGC, 0x30);
    31b6:	2130      	movs	r1, #48	; 0x30
    31b8:	206f      	movs	r0, #111	; 0x6f
    31ba:	f7ff ffda 	bl	3172 <writeReg>
	writeReg(REG_TESTPA1, 0x55); //only for HW
    31be:	2155      	movs	r1, #85	; 0x55
    31c0:	205a      	movs	r0, #90	; 0x5a
    31c2:	f7ff ffd6 	bl	3172 <writeReg>
	writeReg(REG_TESTPA2, 0x70); //only for HW
    31c6:	2170      	movs	r1, #112	; 0x70
    31c8:	205c      	movs	r0, #92	; 0x5c
    31ca:	f7ff ffd2 	bl	3172 <writeReg>
	tmp_data = readReg(REG_SYNCCONFIG);
    31ce:	202e      	movs	r0, #46	; 0x2e
    31d0:	f7ff ffc0 	bl	3154 <readReg>
	writeReg(REG_SYNCVALUE1, 0x2d);
    31d4:	212d      	movs	r1, #45	; 0x2d
    31d6:	202f      	movs	r0, #47	; 0x2f
    31d8:	f7ff ffcb 	bl	3172 <writeReg>
	writeReg(REG_SYNCVALUE2, 0xd4);
    31dc:	21d4      	movs	r1, #212	; 0xd4
    31de:	2030      	movs	r0, #48	; 0x30
    31e0:	f7ff ffc7 	bl	3172 <writeReg>
	writeReg(REG_SYNCCONFIG, 0x88);
    31e4:	2188      	movs	r1, #136	; 0x88
    31e6:	202e      	movs	r0, #46	; 0x2e
    31e8:	f7ff ffc3 	bl	3172 <writeReg>
	writeReg(REG_DATAMODUL, RF_DATAMODUL_MODULATIONSHAPING_01);
    31ec:	2101      	movs	r1, #1
    31ee:	2002      	movs	r0, #2
    31f0:	f7ff ffbf 	bl	3172 <writeReg>
	writeReg(REG_BITRATEMSB, 0x00);
    31f4:	2100      	movs	r1, #0
    31f6:	2003      	movs	r0, #3
    31f8:	f7ff ffbb 	bl	3172 <writeReg>
	writeReg(REG_BITRATELSB, 0x80);
    31fc:	2180      	movs	r1, #128	; 0x80
    31fe:	2004      	movs	r0, #4
    3200:	f7ff ffb7 	bl	3172 <writeReg>
	writeReg(REG_FDEVMSB, 0x10);
    3204:	2110      	movs	r1, #16
    3206:	2005      	movs	r0, #5
    3208:	f7ff ffb3 	bl	3172 <writeReg>
	writeReg(REG_FDEVLSB, 0x00);
    320c:	2100      	movs	r1, #0
    320e:	2006      	movs	r0, #6
    3210:	f7ff ffaf 	bl	3172 <writeReg>
	writeReg(REG_RXBW, RF_RXBW_DCCFREQ_111);
    3214:	21e0      	movs	r1, #224	; 0xe0
    3216:	2019      	movs	r0, #25
    3218:	f7ff ffab 	bl	3172 <writeReg>
	writeReg(REG_AFCBW, RF_AFCBW_DCCFREQAFC_111);
    321c:	21e0      	movs	r1, #224	; 0xe0
    321e:	201a      	movs	r0, #26
    3220:	f7ff ffa7 	bl	3172 <writeReg>
	writeReg(REG_PACKETCONFIG1, 0xD0);
    3224:	21d0      	movs	r1, #208	; 0xd0
    3226:	2037      	movs	r0, #55	; 0x37
    3228:	f7ff ffa3 	bl	3172 <writeReg>
	writeReg(REG_PREAMBLEMSB, 0x00);
    322c:	2100      	movs	r1, #0
    322e:	202c      	movs	r0, #44	; 0x2c
    3230:	f7ff ff9f 	bl	3172 <writeReg>
	writeReg(REG_PREAMBLELSB , 0x04);
    3234:	2104      	movs	r1, #4
    3236:	202d      	movs	r0, #45	; 0x2d
    3238:	f7ff ff9b 	bl	3172 <writeReg>
	writeReg(REG_FRFMSB, RF_FRFMSB_868);
    323c:	21d9      	movs	r1, #217	; 0xd9
    323e:	2007      	movs	r0, #7
    3240:	f7ff ff97 	bl	3172 <writeReg>
	writeReg(REG_FRFMID, RF_FRFMID_868);
    3244:	2100      	movs	r1, #0
    3246:	2008      	movs	r0, #8
    3248:	f7ff ff93 	bl	3172 <writeReg>
	writeReg(REG_FRFLSB, RF_FRFLSB_868);
    324c:	2100      	movs	r1, #0
    324e:	2009      	movs	r0, #9
    3250:	f7ff ff8f 	bl	3172 <writeReg>
	tmp_data = readReg(REG_PACKETCONFIG2); //2
    3254:	203d      	movs	r0, #61	; 0x3d
    3256:	f7ff ff7d 	bl	3154 <readReg>
    325a:	0004      	movs	r4, r0
	writeReg(REG_PACKETCONFIG2, RF_PACKET2_AUTORXRESTART_ON);
    325c:	2102      	movs	r1, #2
    325e:	203d      	movs	r0, #61	; 0x3d
    3260:	f7ff ff87 	bl	3172 <writeReg>
	writeReg(REG_PALEVEL, RF_PALEVEL_OUTPUTPOWER_11111);
    3264:	211f      	movs	r1, #31
    3266:	2011      	movs	r0, #17
    3268:	f7ff ff83 	bl	3172 <writeReg>
	writeReg(REG_DIOMAPPING1 , RF_DIOMAPPING1_DIO0_01);
    326c:	2140      	movs	r1, #64	; 0x40
    326e:	2025      	movs	r0, #37	; 0x25
    3270:	f7ff ff7f 	bl	3172 <writeReg>
	writeReg(REG_OPMODE, RF_OPMODE_RECEIVER);
    3274:	2110      	movs	r1, #16
    3276:	2001      	movs	r0, #1
    3278:	f7ff ff7b 	bl	3172 <writeReg>
}
    327c:	0020      	movs	r0, r4
    327e:	bd10      	pop	{r4, pc}

00003280 <setHighPowerRegs>:
{
    3280:	b510      	push	{r4, lr}
	if(onOff==1)
    3282:	2801      	cmp	r0, #1
    3284:	d008      	beq.n	3298 <setHighPowerRegs+0x18>
		writeReg(REG_TESTPA1, 0x55);
    3286:	2155      	movs	r1, #85	; 0x55
    3288:	205a      	movs	r0, #90	; 0x5a
    328a:	f7ff ff72 	bl	3172 <writeReg>
		writeReg(REG_TESTPA2, 0x70);
    328e:	2170      	movs	r1, #112	; 0x70
    3290:	205c      	movs	r0, #92	; 0x5c
    3292:	f7ff ff6e 	bl	3172 <writeReg>
}
    3296:	bd10      	pop	{r4, pc}
		writeReg(REG_TESTPA1, 0x5D);
    3298:	215d      	movs	r1, #93	; 0x5d
    329a:	3059      	adds	r0, #89	; 0x59
    329c:	f7ff ff69 	bl	3172 <writeReg>
		writeReg(REG_TESTPA2, 0x7C);
    32a0:	217c      	movs	r1, #124	; 0x7c
    32a2:	205c      	movs	r0, #92	; 0x5c
    32a4:	f7ff ff65 	bl	3172 <writeReg>
    32a8:	e7f5      	b.n	3296 <setHighPowerRegs+0x16>
	...

000032ac <setMode>:
{
    32ac:	b510      	push	{r4, lr}
    32ae:	0004      	movs	r4, r0
	if (newMode == mode)
    32b0:	4b30      	ldr	r3, [pc, #192]	; (3374 <setMode+0xc8>)
    32b2:	781b      	ldrb	r3, [r3, #0]
    32b4:	b2db      	uxtb	r3, r3
    32b6:	4283      	cmp	r3, r0
    32b8:	d044      	beq.n	3344 <setMode+0x98>
	switch (newMode)
    32ba:	2804      	cmp	r0, #4
    32bc:	d842      	bhi.n	3344 <setMode+0x98>
    32be:	0083      	lsls	r3, r0, #2
    32c0:	4a2d      	ldr	r2, [pc, #180]	; (3378 <setMode+0xcc>)
    32c2:	58d3      	ldr	r3, [r2, r3]
    32c4:	469f      	mov	pc, r3
		writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
    32c6:	2001      	movs	r0, #1
    32c8:	f7ff ff44 	bl	3154 <readReg>
    32cc:	b241      	sxtb	r1, r0
    32ce:	231c      	movs	r3, #28
    32d0:	4399      	bics	r1, r3
    32d2:	200c      	movs	r0, #12
    32d4:	4301      	orrs	r1, r0
    32d6:	b2c9      	uxtb	r1, r1
    32d8:	2001      	movs	r0, #1
    32da:	f7ff ff4a 	bl	3172 <writeReg>
		if (isRFM69HW) setHighPowerRegs(1);
    32de:	4b27      	ldr	r3, [pc, #156]	; (337c <setMode+0xd0>)
    32e0:	781b      	ldrb	r3, [r3, #0]
    32e2:	2b00      	cmp	r3, #0
    32e4:	d023      	beq.n	332e <setMode+0x82>
    32e6:	2001      	movs	r0, #1
    32e8:	f7ff ffca 	bl	3280 <setHighPowerRegs>
    32ec:	e01f      	b.n	332e <setMode+0x82>
		writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
    32ee:	2001      	movs	r0, #1
    32f0:	f7ff ff30 	bl	3154 <readReg>
    32f4:	b241      	sxtb	r1, r0
    32f6:	231c      	movs	r3, #28
    32f8:	4399      	bics	r1, r3
    32fa:	2010      	movs	r0, #16
    32fc:	4301      	orrs	r1, r0
    32fe:	b2c9      	uxtb	r1, r1
    3300:	2001      	movs	r0, #1
    3302:	f7ff ff36 	bl	3172 <writeReg>
		if (isRFM69HW) setHighPowerRegs(0);
    3306:	4b1d      	ldr	r3, [pc, #116]	; (337c <setMode+0xd0>)
    3308:	781b      	ldrb	r3, [r3, #0]
    330a:	2b00      	cmp	r3, #0
    330c:	d00f      	beq.n	332e <setMode+0x82>
    330e:	2000      	movs	r0, #0
    3310:	f7ff ffb6 	bl	3280 <setHighPowerRegs>
    3314:	e00b      	b.n	332e <setMode+0x82>
		writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
    3316:	2001      	movs	r0, #1
    3318:	f7ff ff1c 	bl	3154 <readReg>
    331c:	b241      	sxtb	r1, r0
    331e:	231c      	movs	r3, #28
    3320:	4399      	bics	r1, r3
    3322:	2008      	movs	r0, #8
    3324:	4301      	orrs	r1, r0
    3326:	b2c9      	uxtb	r1, r1
    3328:	2001      	movs	r0, #1
    332a:	f7ff ff22 	bl	3172 <writeReg>
	while (mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
    332e:	4b11      	ldr	r3, [pc, #68]	; (3374 <setMode+0xc8>)
    3330:	781b      	ldrb	r3, [r3, #0]
    3332:	2b00      	cmp	r3, #0
    3334:	d104      	bne.n	3340 <setMode+0x94>
    3336:	2027      	movs	r0, #39	; 0x27
    3338:	f7ff ff0c 	bl	3154 <readReg>
    333c:	0603      	lsls	r3, r0, #24
    333e:	d5f6      	bpl.n	332e <setMode+0x82>
	mode = newMode;
    3340:	4b0c      	ldr	r3, [pc, #48]	; (3374 <setMode+0xc8>)
    3342:	701c      	strb	r4, [r3, #0]
}
    3344:	bd10      	pop	{r4, pc}
		writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
    3346:	2001      	movs	r0, #1
    3348:	f7ff ff04 	bl	3154 <readReg>
    334c:	b241      	sxtb	r1, r0
    334e:	231c      	movs	r3, #28
    3350:	4399      	bics	r1, r3
    3352:	2004      	movs	r0, #4
    3354:	4301      	orrs	r1, r0
    3356:	b2c9      	uxtb	r1, r1
    3358:	2001      	movs	r0, #1
    335a:	f7ff ff0a 	bl	3172 <writeReg>
		break;
    335e:	e7e6      	b.n	332e <setMode+0x82>
		writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
    3360:	2001      	movs	r0, #1
    3362:	f7ff fef7 	bl	3154 <readReg>
    3366:	231c      	movs	r3, #28
    3368:	4398      	bics	r0, r3
    336a:	b2c1      	uxtb	r1, r0
    336c:	2001      	movs	r0, #1
    336e:	f7ff ff00 	bl	3172 <writeReg>
		break;
    3372:	e7dc      	b.n	332e <setMode+0x82>
    3374:	20000001 	.word	0x20000001
    3378:	0000b420 	.word	0x0000b420
    337c:	20000000 	.word	0x20000000

00003380 <setHighPower>:
{
    3380:	b510      	push	{r4, lr}
	isRFM69HW = onOff;
    3382:	4b13      	ldr	r3, [pc, #76]	; (33d0 <setHighPower+0x50>)
    3384:	7018      	strb	r0, [r3, #0]
	writeReg(REG_OCP, isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
    3386:	2800      	cmp	r0, #0
    3388:	d011      	beq.n	33ae <setHighPower+0x2e>
    338a:	210f      	movs	r1, #15
    338c:	2013      	movs	r0, #19
    338e:	f7ff fef0 	bl	3172 <writeReg>
	if (isRFM69HW == 1) // turning ON
    3392:	4b0f      	ldr	r3, [pc, #60]	; (33d0 <setHighPower+0x50>)
    3394:	781b      	ldrb	r3, [r3, #0]
    3396:	2b01      	cmp	r3, #1
    3398:	d00b      	beq.n	33b2 <setHighPower+0x32>
	writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | powerLevel); // enable P0 only
    339a:	4b0e      	ldr	r3, [pc, #56]	; (33d4 <setHighPower+0x54>)
    339c:	781b      	ldrb	r3, [r3, #0]
    339e:	2180      	movs	r1, #128	; 0x80
    33a0:	4249      	negs	r1, r1
    33a2:	4319      	orrs	r1, r3
    33a4:	b2c9      	uxtb	r1, r1
    33a6:	2011      	movs	r0, #17
    33a8:	f7ff fee3 	bl	3172 <writeReg>
}
    33ac:	bd10      	pop	{r4, pc}
	writeReg(REG_OCP, isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
    33ae:	211a      	movs	r1, #26
    33b0:	e7ec      	b.n	338c <setHighPower+0xc>
	writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); // enable P1 & P2 amplifier stages
    33b2:	2011      	movs	r0, #17
    33b4:	f7ff fece 	bl	3154 <readReg>
    33b8:	b240      	sxtb	r0, r0
    33ba:	211f      	movs	r1, #31
    33bc:	4001      	ands	r1, r0
    33be:	2060      	movs	r0, #96	; 0x60
    33c0:	4301      	orrs	r1, r0
    33c2:	b249      	sxtb	r1, r1
    33c4:	b2c9      	uxtb	r1, r1
    33c6:	2011      	movs	r0, #17
    33c8:	f7ff fed3 	bl	3172 <writeReg>
    33cc:	e7ee      	b.n	33ac <setHighPower+0x2c>
    33ce:	46c0      	nop			; (mov r8, r8)
    33d0:	20000000 	.word	0x20000000
    33d4:	20000002 	.word	0x20000002

000033d8 <readRSSI>:
{
    33d8:	b510      	push	{r4, lr}
	if (forceTrigger==1)
    33da:	2801      	cmp	r0, #1
    33dc:	d007      	beq.n	33ee <readRSSI+0x16>
	rssi = -readReg(REG_RSSIVALUE);
    33de:	2024      	movs	r0, #36	; 0x24
    33e0:	f7ff feb8 	bl	3154 <readReg>
    33e4:	b280      	uxth	r0, r0
    33e6:	4240      	negs	r0, r0
    33e8:	b200      	sxth	r0, r0
	rssi >>= 1;
    33ea:	1040      	asrs	r0, r0, #1
}
    33ec:	bd10      	pop	{r4, pc}
		writeReg(REG_RSSICONFIG, RF_RSSI_START);
    33ee:	2101      	movs	r1, #1
    33f0:	3022      	adds	r0, #34	; 0x22
    33f2:	f7ff febe 	bl	3172 <writeReg>
		while ((readReg(REG_RSSICONFIG) & RF_RSSI_DONE) == 0x00); // wait for RSSI_Ready
    33f6:	2023      	movs	r0, #35	; 0x23
    33f8:	f7ff feac 	bl	3154 <readReg>
    33fc:	0783      	lsls	r3, r0, #30
    33fe:	d5fa      	bpl.n	33f6 <readRSSI+0x1e>
    3400:	e7ed      	b.n	33de <readRSSI+0x6>
	...

00003404 <sendFrame>:
{
    3404:	b570      	push	{r4, r5, r6, lr}
    3406:	0006      	movs	r6, r0
    3408:	000d      	movs	r5, r1
	setMode(RF69_MODE_SLEEP);
    340a:	2000      	movs	r0, #0
    340c:	f7ff ff4e 	bl	32ac <setMode>
	uint16_t mode_ready_timeout = 1000;
    3410:	24fa      	movs	r4, #250	; 0xfa
    3412:	00a4      	lsls	r4, r4, #2
	while ((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) {
    3414:	2027      	movs	r0, #39	; 0x27
    3416:	f7ff fe9d 	bl	3154 <readReg>
    341a:	0603      	lsls	r3, r0, #24
    341c:	d40b      	bmi.n	3436 <sendFrame+0x32>
		delay_ms(1);
    341e:	2001      	movs	r0, #1
    3420:	f7fe f866 	bl	14f0 <delay_ms>
		mode_ready_timeout--;
    3424:	3c01      	subs	r4, #1
    3426:	b2a4      	uxth	r4, r4
		if (mode_ready_timeout == 0) {
    3428:	2c00      	cmp	r4, #0
    342a:	d1f3      	bne.n	3414 <sendFrame+0x10>
				DebugSerialWrite("Timeout waiting for ModeReady\r\n", 31);
    342c:	211f      	movs	r1, #31
    342e:	482a      	ldr	r0, [pc, #168]	; (34d8 <sendFrame+0xd4>)
    3430:	f7ff fe7a 	bl	3128 <DebugSerialWrite>
			return;
    3434:	e04e      	b.n	34d4 <sendFrame+0xd0>
	if (txHeader->rxtxBuffLenght > RF69_MAX_DATA_LEN)
    3436:	7833      	ldrb	r3, [r6, #0]
    3438:	2b3d      	cmp	r3, #61	; 0x3d
    343a:	d901      	bls.n	3440 <sendFrame+0x3c>
	txHeader->rxtxBuffLenght = RF69_MAX_DATA_LEN;
    343c:	233d      	movs	r3, #61	; 0x3d
    343e:	7033      	strb	r3, [r6, #0]
	RF_select();
    3440:	f7ff fe7e 	bl	3140 <RF_select>
	SPI_write(REG_FIFO | 0x80);
    3444:	2080      	movs	r0, #128	; 0x80
    3446:	f7ff fa95 	bl	2974 <SPI_write>
	SPI_write(txHeader->rxtxBuffLenght + 5); 
    344a:	7830      	ldrb	r0, [r6, #0]
    344c:	3005      	adds	r0, #5
    344e:	b2c0      	uxtb	r0, r0
    3450:	f7ff fa90 	bl	2974 <SPI_write>
	SPI_write(txHeader->destinationAddr);   
    3454:	7870      	ldrb	r0, [r6, #1]
    3456:	f7ff fa8d 	bl	2974 <SPI_write>
	SPI_write(txHeader->senderAddr);         
    345a:	78b0      	ldrb	r0, [r6, #2]
    345c:	f7ff fa8a 	bl	2974 <SPI_write>
	SPI_write(txHeader->opcode);            
    3460:	78f0      	ldrb	r0, [r6, #3]
    3462:	f7ff fa87 	bl	2974 <SPI_write>
	SPI_write(txHeader->dataCRC);            
    3466:	79f0      	ldrb	r0, [r6, #7]
    3468:	f7ff fa84 	bl	2974 <SPI_write>
	RFM69_WriteBuff((void *)buffer, txHeader->rxtxBuffLenght); 
    346c:	7831      	ldrb	r1, [r6, #0]
    346e:	0028      	movs	r0, r5
    3470:	f7ff fa66 	bl	2940 <RFM69_WriteBuff>
	RF_unselect();
    3474:	f7ff fe69 	bl	314a <RF_unselect>
	setMode(RF69_MODE_TX);
    3478:	2004      	movs	r0, #4
    347a:	f7ff ff17 	bl	32ac <setMode>
	uint16_t tx_timeout = RF69_TX_LIMIT_MS; 
    347e:	2464      	movs	r4, #100	; 0x64
	while ((readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT) == 0) {
    3480:	2028      	movs	r0, #40	; 0x28
    3482:	f7ff fe67 	bl	3154 <readReg>
    3486:	0703      	lsls	r3, r0, #28
    3488:	d40c      	bmi.n	34a4 <sendFrame+0xa0>
		tx_timeout--;
    348a:	3c01      	subs	r4, #1
    348c:	b2a4      	uxth	r4, r4
		if (tx_timeout == 0) {
    348e:	2c00      	cmp	r4, #0
    3490:	d003      	beq.n	349a <sendFrame+0x96>
		delay_us(100);
    3492:	2064      	movs	r0, #100	; 0x64
    3494:	f7fe f820 	bl	14d8 <delay_us>
    3498:	e7f2      	b.n	3480 <sendFrame+0x7c>
				DebugSerialWrite("Timeout waiting for PacketSent\r\n", 33);
    349a:	2121      	movs	r1, #33	; 0x21
    349c:	480f      	ldr	r0, [pc, #60]	; (34dc <sendFrame+0xd8>)
    349e:	f7ff fe43 	bl	3128 <DebugSerialWrite>
			return; 
    34a2:	e017      	b.n	34d4 <sendFrame+0xd0>
	sprintf(rfDebugStr, "REG_IRQFLAGS=:%02X; %02X \r\n", readReg(REG_IRQFLAGS1), readReg(REG_IRQFLAGS2));
    34a4:	2027      	movs	r0, #39	; 0x27
    34a6:	f7ff fe55 	bl	3154 <readReg>
    34aa:	0005      	movs	r5, r0
    34ac:	2028      	movs	r0, #40	; 0x28
    34ae:	f7ff fe51 	bl	3154 <readReg>
    34b2:	0003      	movs	r3, r0
    34b4:	4c0a      	ldr	r4, [pc, #40]	; (34e0 <sendFrame+0xdc>)
    34b6:	002a      	movs	r2, r5
    34b8:	490a      	ldr	r1, [pc, #40]	; (34e4 <sendFrame+0xe0>)
    34ba:	0020      	movs	r0, r4
    34bc:	f003 f868 	bl	6590 <sprintf>
		DebugSerialWrite(rfDebugStr, strlen(rfDebugStr));
    34c0:	0020      	movs	r0, r4
    34c2:	f003 f887 	bl	65d4 <strlen>
    34c6:	b2c1      	uxtb	r1, r0
    34c8:	0020      	movs	r0, r4
    34ca:	f7ff fe2d 	bl	3128 <DebugSerialWrite>
	setMode(RF69_MODE_RX);
    34ce:	2003      	movs	r0, #3
    34d0:	f7ff feec 	bl	32ac <setMode>
}
    34d4:	bd70      	pop	{r4, r5, r6, pc}
    34d6:	46c0      	nop			; (mov r8, r8)
    34d8:	0000b434 	.word	0x0000b434
    34dc:	0000b454 	.word	0x0000b454
    34e0:	20000f2c 	.word	0x20000f2c
    34e4:	0000b478 	.word	0x0000b478

000034e8 <simpleCRC>:
		rfRxHeader.dataValid = 0; 
		return &rfRxHeader;
	}
}

uint8_t simpleCRC(uint8_t *array, uint8_t length) {
    34e8:	b510      	push	{r4, lr}
    34ea:	0004      	movs	r4, r0
	uint8_t checksum = 0;

	for (size_t i = 0; i < length; ++i) {
    34ec:	2200      	movs	r2, #0
	uint8_t checksum = 0;
    34ee:	2300      	movs	r3, #0
	for (size_t i = 0; i < length; ++i) {
    34f0:	e003      	b.n	34fa <simpleCRC+0x12>
		checksum += array[i];
    34f2:	5ca0      	ldrb	r0, [r4, r2]
    34f4:	181b      	adds	r3, r3, r0
    34f6:	b2db      	uxtb	r3, r3
	for (size_t i = 0; i < length; ++i) {
    34f8:	3201      	adds	r2, #1
    34fa:	428a      	cmp	r2, r1
    34fc:	d3f9      	bcc.n	34f2 <simpleCRC+0xa>
	}

	return checksum;
    34fe:	0018      	movs	r0, r3
    3500:	bd10      	pop	{r4, pc}
	...

00003504 <data_ready>:
rfHeader* data_ready() {
    3504:	b530      	push	{r4, r5, lr}
    3506:	b083      	sub	sp, #12
	if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY) {
    3508:	2028      	movs	r0, #40	; 0x28
    350a:	f7ff fe23 	bl	3154 <readReg>
    350e:	0743      	lsls	r3, r0, #29
    3510:	d405      	bmi.n	351e <data_ready+0x1a>
		rfRxHeader.dataValid = 0; 
    3512:	2200      	movs	r2, #0
    3514:	4b2f      	ldr	r3, [pc, #188]	; (35d4 <data_ready+0xd0>)
    3516:	719a      	strb	r2, [r3, #6]
}
    3518:	482e      	ldr	r0, [pc, #184]	; (35d4 <data_ready+0xd0>)
    351a:	b003      	add	sp, #12
    351c:	bd30      	pop	{r4, r5, pc}
		memset(DATA, 0, sizeof(DATA));
    351e:	223e      	movs	r2, #62	; 0x3e
    3520:	2100      	movs	r1, #0
    3522:	482d      	ldr	r0, [pc, #180]	; (35d8 <data_ready+0xd4>)
    3524:	f002 ffea 	bl	64fc <memset>
		writeReg(REG_OPMODE, RF69_MODE_STANDBY);
    3528:	2101      	movs	r1, #1
    352a:	2001      	movs	r0, #1
    352c:	f7ff fe21 	bl	3172 <writeReg>
		RF_select();
    3530:	f7ff fe06 	bl	3140 <RF_select>
		SPI_write(REG_FIFO);
    3534:	2000      	movs	r0, #0
    3536:	f7ff fa1d 	bl	2974 <SPI_write>
		RFM69_ReadBuff(&tmpRxBuff, sizeof(tmpRxBuff));
    353a:	2105      	movs	r1, #5
    353c:	4668      	mov	r0, sp
    353e:	f7ff f9f3 	bl	2928 <RFM69_ReadBuff>
		rfRxHeader.rxtxBuffLenght = tmpRxBuff[0] - sizeof(tmpRxBuff);
    3542:	466b      	mov	r3, sp
    3544:	781b      	ldrb	r3, [r3, #0]
    3546:	3b05      	subs	r3, #5
    3548:	b2db      	uxtb	r3, r3
    354a:	4a22      	ldr	r2, [pc, #136]	; (35d4 <data_ready+0xd0>)
    354c:	7013      	strb	r3, [r2, #0]
		rfRxHeader.destinationAddr = tmpRxBuff[1];
    354e:	4669      	mov	r1, sp
    3550:	7849      	ldrb	r1, [r1, #1]
    3552:	7051      	strb	r1, [r2, #1]
		rfRxHeader.senderAddr = tmpRxBuff[2];
    3554:	4669      	mov	r1, sp
    3556:	7889      	ldrb	r1, [r1, #2]
    3558:	7091      	strb	r1, [r2, #2]
		rfRxHeader.opcode = tmpRxBuff[3];
    355a:	4669      	mov	r1, sp
    355c:	78c9      	ldrb	r1, [r1, #3]
    355e:	70d1      	strb	r1, [r2, #3]
		rfRxHeader.dataCRC = tmpRxBuff[4];
    3560:	4669      	mov	r1, sp
    3562:	7909      	ldrb	r1, [r1, #4]
    3564:	71d1      	strb	r1, [r2, #7]
		if (rfRxHeader.rxtxBuffLenght >= (RF69_MAX_DATA_LEN - sizeof(tmpRxBuff))) {
    3566:	2b37      	cmp	r3, #55	; 0x37
    3568:	d917      	bls.n	359a <data_ready+0x96>
			rfRxHeader.rxtxBuffLenght = RF69_MAX_DATA_LEN - sizeof(tmpRxBuff); 
    356a:	2238      	movs	r2, #56	; 0x38
    356c:	4b19      	ldr	r3, [pc, #100]	; (35d4 <data_ready+0xd0>)
    356e:	701a      	strb	r2, [r3, #0]
		RFM69_ReadBuff(&DATA, rfRxHeader.rxtxBuffLenght);
    3570:	4c18      	ldr	r4, [pc, #96]	; (35d4 <data_ready+0xd0>)
    3572:	7821      	ldrb	r1, [r4, #0]
    3574:	4d18      	ldr	r5, [pc, #96]	; (35d8 <data_ready+0xd4>)
    3576:	0028      	movs	r0, r5
    3578:	f7ff f9d6 	bl	2928 <RFM69_ReadBuff>
		RF_unselect();
    357c:	f7ff fde5 	bl	314a <RF_unselect>
		uint8_t calculatedCRC = simpleCRC(DATA, rfRxHeader.rxtxBuffLenght);
    3580:	7821      	ldrb	r1, [r4, #0]
    3582:	0028      	movs	r0, r5
    3584:	f7ff ffb0 	bl	34e8 <simpleCRC>
		if (calculatedCRC != rfRxHeader.dataCRC) {
    3588:	79e3      	ldrb	r3, [r4, #7]
    358a:	4298      	cmp	r0, r3
    358c:	d011      	beq.n	35b2 <data_ready+0xae>
			rfRxHeader.dataValid = 0;
    358e:	2200      	movs	r2, #0
    3590:	4b10      	ldr	r3, [pc, #64]	; (35d4 <data_ready+0xd0>)
    3592:	719a      	strb	r2, [r3, #6]
			RF_unselect();
    3594:	f7ff fdd9 	bl	314a <RF_unselect>
			return &rfRxHeader;  
    3598:	e7be      	b.n	3518 <data_ready+0x14>
			} else if (rfRxHeader.rxtxBuffLenght <= 0) {
    359a:	2b00      	cmp	r3, #0
    359c:	d003      	beq.n	35a6 <data_ready+0xa2>
			rfRxHeader.dataValid = 1; 
    359e:	2201      	movs	r2, #1
    35a0:	4b0c      	ldr	r3, [pc, #48]	; (35d4 <data_ready+0xd0>)
    35a2:	719a      	strb	r2, [r3, #6]
    35a4:	e7e4      	b.n	3570 <data_ready+0x6c>
			rfRxHeader.dataValid = 0;  
    35a6:	2200      	movs	r2, #0
    35a8:	4b0a      	ldr	r3, [pc, #40]	; (35d4 <data_ready+0xd0>)
    35aa:	719a      	strb	r2, [r3, #6]
			RF_unselect();
    35ac:	f7ff fdcd 	bl	314a <RF_unselect>
			return &rfRxHeader;        
    35b0:	e7b2      	b.n	3518 <data_ready+0x14>
		writeReg(REG_DIOMAPPING1, 0x40);
    35b2:	2140      	movs	r1, #64	; 0x40
    35b4:	2025      	movs	r0, #37	; 0x25
    35b6:	f7ff fddc 	bl	3172 <writeReg>
		writeReg(REG_OPMODE, RF69_ListenAbort);
    35ba:	2110      	movs	r1, #16
    35bc:	2001      	movs	r0, #1
    35be:	f7ff fdd8 	bl	3172 <writeReg>
		rfRxHeader.rssi = readRSSI(0);
    35c2:	2000      	movs	r0, #0
    35c4:	f7ff ff08 	bl	33d8 <readRSSI>
    35c8:	4b02      	ldr	r3, [pc, #8]	; (35d4 <data_ready+0xd0>)
    35ca:	8098      	strh	r0, [r3, #4]
		setMode(RF69_MODE_RX);
    35cc:	2003      	movs	r0, #3
    35ce:	f7ff fe6d 	bl	32ac <setMode>
		return &rfRxHeader; 
    35d2:	e7a1      	b.n	3518 <data_ready+0x14>
    35d4:	20000f1c 	.word	0x20000f1c
    35d8:	20000e40 	.word	0x20000e40

000035dc <rtc_int_enable>:
	"Sat"
};



void rtc_int_enable(rtc_date *RTCx){
    35dc:	b570      	push	{r4, r5, r6, lr}
	rtc_config_3[1] |= (1 << TIE);
    35de:	4c0d      	ldr	r4, [pc, #52]	; (3614 <rtc_int_enable+0x38>)
    35e0:	7863      	ldrb	r3, [r4, #1]
    35e2:	2210      	movs	r2, #16
    35e4:	4313      	orrs	r3, r2
    35e6:	7063      	strb	r3, [r4, #1]
	rtc_config_2[1] |= (1 << TD) | (1 << TE);
    35e8:	4d0b      	ldr	r5, [pc, #44]	; (3618 <rtc_int_enable+0x3c>)
    35ea:	786b      	ldrb	r3, [r5, #1]
    35ec:	2211      	movs	r2, #17
    35ee:	4313      	orrs	r3, r2
    35f0:	706b      	strb	r3, [r5, #1]
	
	RTC_write_batch(RTC_ADDR, rtc_config_1,sizeof(rtc_config_1));
    35f2:	2203      	movs	r2, #3
    35f4:	4909      	ldr	r1, [pc, #36]	; (361c <rtc_int_enable+0x40>)
    35f6:	2032      	movs	r0, #50	; 0x32
    35f8:	f7ff fcea 	bl	2fd0 <RTC_write_batch>
	RTC_write_batch(RTC_ADDR, rtc_config_2,sizeof(rtc_config_2));
    35fc:	2202      	movs	r2, #2
    35fe:	0029      	movs	r1, r5
    3600:	2032      	movs	r0, #50	; 0x32
    3602:	f7ff fce5 	bl	2fd0 <RTC_write_batch>
	RTC_write_batch(RTC_ADDR, rtc_config_3,sizeof(rtc_config_3));
    3606:	2202      	movs	r2, #2
    3608:	0021      	movs	r1, r4
    360a:	2032      	movs	r0, #50	; 0x32
    360c:	f7ff fce0 	bl	2fd0 <RTC_write_batch>
	
	
}
    3610:	bd70      	pop	{r4, r5, r6, pc}
    3612:	46c0      	nop			; (mov r8, r8)
    3614:	2000000c 	.word	0x2000000c
    3618:	20000008 	.word	0x20000008
    361c:	20000004 	.word	0x20000004

00003620 <BCDtoDEC>:
	rtc_raw[7]=DECtoBCD(RTCx->year);
	RTC_write_batch(RTC_ADDR, rtc_raw,sizeof(rtc_raw));
}

uint8_t BCDtoDEC(uint8_t val)
{
    3620:	0001      	movs	r1, r0
	return ((val / 0x10) * 10) + (val % 0x10);
    3622:	0902      	lsrs	r2, r0, #4
    3624:	0093      	lsls	r3, r2, #2
    3626:	18d2      	adds	r2, r2, r3
    3628:	0053      	lsls	r3, r2, #1
    362a:	b2db      	uxtb	r3, r3
    362c:	200f      	movs	r0, #15
    362e:	4008      	ands	r0, r1
    3630:	1818      	adds	r0, r3, r0
    3632:	b2c0      	uxtb	r0, r0
}
    3634:	4770      	bx	lr

00003636 <rtc_sync>:
void rtc_sync(rtc_date *RTCx){
    3636:	b510      	push	{r4, lr}
    3638:	b082      	sub	sp, #8
    363a:	0004      	movs	r4, r0
	RTC_read_batch(RTC_ADDR, rtc_raw, sizeof(rtc_raw));
    363c:	2207      	movs	r2, #7
    363e:	4669      	mov	r1, sp
    3640:	2032      	movs	r0, #50	; 0x32
    3642:	f7ff fcdb 	bl	2ffc <RTC_read_batch>
	RTCx->second=BCDtoDEC(rtc_raw[0]);
    3646:	466b      	mov	r3, sp
    3648:	7818      	ldrb	r0, [r3, #0]
    364a:	f7ff ffe9 	bl	3620 <BCDtoDEC>
    364e:	7020      	strb	r0, [r4, #0]
	RTCx->minute=BCDtoDEC(rtc_raw[1]);
    3650:	466b      	mov	r3, sp
    3652:	7858      	ldrb	r0, [r3, #1]
    3654:	f7ff ffe4 	bl	3620 <BCDtoDEC>
    3658:	7060      	strb	r0, [r4, #1]
	RTCx->hour=BCDtoDEC(rtc_raw[2]);
    365a:	466b      	mov	r3, sp
    365c:	7898      	ldrb	r0, [r3, #2]
    365e:	f7ff ffdf 	bl	3620 <BCDtoDEC>
    3662:	70a0      	strb	r0, [r4, #2]
	RTCx->dayofweek=rtc_raw[3];
    3664:	466b      	mov	r3, sp
    3666:	78db      	ldrb	r3, [r3, #3]
    3668:	7223      	strb	r3, [r4, #8]
	RTCx->date=BCDtoDEC(rtc_raw[4]);
    366a:	466b      	mov	r3, sp
    366c:	7918      	ldrb	r0, [r3, #4]
    366e:	f7ff ffd7 	bl	3620 <BCDtoDEC>
    3672:	70e0      	strb	r0, [r4, #3]
	RTCx->month=BCDtoDEC(rtc_raw[5]);
    3674:	466b      	mov	r3, sp
    3676:	7958      	ldrb	r0, [r3, #5]
    3678:	f7ff ffd2 	bl	3620 <BCDtoDEC>
    367c:	7120      	strb	r0, [r4, #4]
	RTCx->year=BCDtoDEC(rtc_raw[6]);
    367e:	466b      	mov	r3, sp
    3680:	7998      	ldrb	r0, [r3, #6]
    3682:	f7ff ffcd 	bl	3620 <BCDtoDEC>
    3686:	80e0      	strh	r0, [r4, #6]
}
    3688:	b002      	add	sp, #8
    368a:	bd10      	pop	{r4, pc}

0000368c <DECtoBCD>:

// BCDtoDEC -- convert decimal to binary-coded decimal (BCD)
uint8_t DECtoBCD(uint8_t val)
{
    368c:	b570      	push	{r4, r5, r6, lr}
    368e:	0005      	movs	r5, r0
	return ((val / 10) * 0x10) + (val % 10);
    3690:	210a      	movs	r1, #10
    3692:	f000 fa93 	bl	3bbc <__udivsi3>
    3696:	0100      	lsls	r0, r0, #4
    3698:	b2c4      	uxtb	r4, r0
    369a:	210a      	movs	r1, #10
    369c:	0028      	movs	r0, r5
    369e:	f000 fb13 	bl	3cc8 <__aeabi_uidivmod>
    36a2:	1864      	adds	r4, r4, r1
    36a4:	b2e0      	uxtb	r0, r4
}
    36a6:	bd70      	pop	{r4, r5, r6, pc}

000036a8 <rtc_set>:
void rtc_set(rtc_date *RTCx){
    36a8:	b510      	push	{r4, lr}
    36aa:	b082      	sub	sp, #8
    36ac:	0004      	movs	r4, r0
	rtc_raw[0] = 0;
    36ae:	2300      	movs	r3, #0
    36b0:	466a      	mov	r2, sp
    36b2:	7013      	strb	r3, [r2, #0]
	rtc_raw[1]=DECtoBCD(RTCx->second);
    36b4:	7800      	ldrb	r0, [r0, #0]
    36b6:	f7ff ffe9 	bl	368c <DECtoBCD>
    36ba:	466b      	mov	r3, sp
    36bc:	7058      	strb	r0, [r3, #1]
	rtc_raw[2]=DECtoBCD(RTCx->minute);
    36be:	7860      	ldrb	r0, [r4, #1]
    36c0:	f7ff ffe4 	bl	368c <DECtoBCD>
    36c4:	466b      	mov	r3, sp
    36c6:	7098      	strb	r0, [r3, #2]
	rtc_raw[3]=DECtoBCD(RTCx->hour);
    36c8:	78a0      	ldrb	r0, [r4, #2]
    36ca:	f7ff ffdf 	bl	368c <DECtoBCD>
    36ce:	466b      	mov	r3, sp
    36d0:	70d8      	strb	r0, [r3, #3]
	rtc_raw[4]=RTCx->dayofweek;
    36d2:	7a23      	ldrb	r3, [r4, #8]
    36d4:	466a      	mov	r2, sp
    36d6:	7113      	strb	r3, [r2, #4]
	rtc_raw[5]=DECtoBCD(RTCx->date);
    36d8:	78e0      	ldrb	r0, [r4, #3]
    36da:	f7ff ffd7 	bl	368c <DECtoBCD>
    36de:	466b      	mov	r3, sp
    36e0:	7158      	strb	r0, [r3, #5]
	rtc_raw[6]=DECtoBCD(RTCx->month);
    36e2:	7920      	ldrb	r0, [r4, #4]
    36e4:	f7ff ffd2 	bl	368c <DECtoBCD>
    36e8:	466b      	mov	r3, sp
    36ea:	7198      	strb	r0, [r3, #6]
	rtc_raw[7]=DECtoBCD(RTCx->year);
    36ec:	79a0      	ldrb	r0, [r4, #6]
    36ee:	f7ff ffcd 	bl	368c <DECtoBCD>
    36f2:	466b      	mov	r3, sp
    36f4:	71d8      	strb	r0, [r3, #7]
	RTC_write_batch(RTC_ADDR, rtc_raw,sizeof(rtc_raw));
    36f6:	2208      	movs	r2, #8
    36f8:	4669      	mov	r1, sp
    36fa:	2032      	movs	r0, #50	; 0x32
    36fc:	f7ff fc68 	bl	2fd0 <RTC_write_batch>
}
    3700:	b002      	add	sp, #8
    3702:	bd10      	pop	{r4, pc}

00003704 <main>:
//u8g2.setBitmapMode(1);

rgb_led led1 = {255, 128, 1};

int main(void)
{
    3704:	b5f0      	push	{r4, r5, r6, r7, lr}
    3706:	46de      	mov	lr, fp
    3708:	4647      	mov	r7, r8
    370a:	b580      	push	{r7, lr}
    370c:	4ce1      	ldr	r4, [pc, #900]	; (3a94 <main+0x390>)
    370e:	44a5      	add	sp, r4
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    3710:	f7fc fcf8 	bl	104 <atmel_start_init>
	
	EXT_SPI_init();
    3714:	f7ff f94e 	bl	29b4 <EXT_SPI_init>
	RF_SPI_init();
    3718:	f7ff fa78 	bl	2c0c <RF_SPI_init>
	EXT_I2C_init();
    371c:	f7ff fb70 	bl	2e00 <EXT_I2C_init>
	RTC_I2C_init();
    3720:	f7ff fbe6 	bl	2ef0 <RTC_I2C_init>
	rtc_int_enable(&sys_rtc);
    3724:	4cdc      	ldr	r4, [pc, #880]	; (3a98 <main+0x394>)
    3726:	0020      	movs	r0, r4
    3728:	f7ff ff58 	bl	35dc <rtc_int_enable>
	DEBUG_SERIAL_init();
    372c:	f7ff fcb8 	bl	30a0 <DEBUG_SERIAL_init>
	rfm69_init(868, NODEID, NETWORKID);
    3730:	2221      	movs	r2, #33	; 0x21
    3732:	2121      	movs	r1, #33	; 0x21
    3734:	20d9      	movs	r0, #217	; 0xd9
    3736:	0080      	lsls	r0, r0, #2
    3738:	f7ff fd2c 	bl	3194 <rfm69_init>
	setHighPower(true);
    373c:	2001      	movs	r0, #1
    373e:	f7ff fe1f 	bl	3380 <setHighPower>
	uint8_t batData[64];
	uint8_t upsData[64];
	//uint8_t spiRamData[33];
	//uint8_t spiDataBuffer[16];
	char debugString[256];
	uint8_t outputs_regs[] = {0x06, 0x07, 0xff};
    3742:	aa0b      	add	r2, sp, #44	; 0x2c
    3744:	4bd5      	ldr	r3, [pc, #852]	; (3a9c <main+0x398>)
    3746:	8819      	ldrh	r1, [r3, #0]
    3748:	8011      	strh	r1, [r2, #0]
    374a:	7899      	ldrb	r1, [r3, #2]
    374c:	7091      	strb	r1, [r2, #2]
	uint8_t portValue[] = {0x02, 0xff, 0xff};
    374e:	aa0a      	add	r2, sp, #40	; 0x28
    3750:	8899      	ldrh	r1, [r3, #4]
    3752:	8011      	strh	r1, [r2, #0]
    3754:	799b      	ldrb	r3, [r3, #6]
    3756:	7093      	strb	r3, [r2, #2]
	uint8_t keyValues[2];
	uint8_t intCount = 0;
	rtc_set(&sys_rtc);
    3758:	0020      	movs	r0, r4
    375a:	f7ff ffa5 	bl	36a8 <rtc_set>
	uint8_t scrUpdateRequest = 0;
	uint8_t backLightTime = 10;
	uint8_t rfReportTime = REPORTMSGTIME;
	I2C_write_batch(0x27, (uint8_t *)&outputs_regs, 3);
    375e:	2203      	movs	r2, #3
    3760:	a90b      	add	r1, sp, #44	; 0x2c
    3762:	2027      	movs	r0, #39	; 0x27
    3764:	f7ff fc5e 	bl	3024 <I2C_write_batch>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3768:	25c0      	movs	r5, #192	; 0xc0
    376a:	05ed      	lsls	r5, r5, #23
    376c:	2480      	movs	r4, #128	; 0x80
    376e:	616c      	str	r4, [r5, #20]

	
	gpio_set_pin_level(LCD_RST, false);
	delay_ms(10);
    3770:	200a      	movs	r0, #10
    3772:	f7fd febd 	bl	14f0 <delay_ms>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3776:	61ac      	str	r4, [r5, #24]
	gpio_set_pin_level(LCD_RST, true);
	delay_ms(10);
    3778:	200a      	movs	r0, #10
    377a:	f7fd feb9 	bl	14f0 <delay_ms>
	
	u8g2_Setup_st7565_zolen_128x64_f( &lcd, U8G2_MIRROR_VERTICAL, vfd_spi, u8x8_avr_gpio_and_delay);	// contrast: 110
    377e:	4cc8      	ldr	r4, [pc, #800]	; (3aa0 <main+0x39c>)
    3780:	4bc8      	ldr	r3, [pc, #800]	; (3aa4 <main+0x3a0>)
    3782:	4ac9      	ldr	r2, [pc, #804]	; (3aa8 <main+0x3a4>)
    3784:	49c9      	ldr	r1, [pc, #804]	; (3aac <main+0x3a8>)
    3786:	0020      	movs	r0, r4
    3788:	f7fc fe64 	bl	454 <u8g2_Setup_st7565_zolen_128x64_f>
	u8g2_InitDisplay(&lcd);
    378c:	0020      	movs	r0, r4
    378e:	f7fd fce7 	bl	1160 <u8x8_InitDisplay>

	u8g2_SetPowerSave(&lcd, 0);
    3792:	2100      	movs	r1, #0
    3794:	0020      	movs	r0, r4
    3796:	f7fd fcea 	bl	116e <u8x8_SetPowerSave>
	u8g2_SetFlipMode(&lcd, 1);
    379a:	2101      	movs	r1, #1
    379c:	0020      	movs	r0, r4
    379e:	f7fd fced 	bl	117c <u8x8_SetFlipMode>
	u8g2_SetContrast(&lcd, 110); //For LCD screen
    37a2:	216e      	movs	r1, #110	; 0x6e
    37a4:	0020      	movs	r0, r4
    37a6:	f7fd fcf0 	bl	118a <u8x8_SetContrast>

	u8g2_ClearBuffer(&lcd);
    37aa:	0020      	movs	r0, r4
    37ac:	f7fc fd6d 	bl	28a <u8g2_ClearBuffer>
	u8g2_SendBuffer(&lcd);
    37b0:	0020      	movs	r0, r4
    37b2:	f7fc fd76 	bl	2a2 <u8g2_SendBuffer>
	
	//WDT->CLEAR.reg=0x5a;
	//u8g2_SetFont(&lcd, u8g2_font_ncenB14_tr);
	//u8g2_SetFont(&lcd, u8g2_font_courR08_tr);
	//u8g2_SetFont(&lcd, u8g2_font_cu12_t_symbols);
	u8g2_SetFont(&lcd, u8g2_font_Terminal_tr);
    37b6:	49be      	ldr	r1, [pc, #760]	; (3ab0 <main+0x3ac>)
    37b8:	0020      	movs	r0, r4
    37ba:	f7fd f965 	bl	a88 <u8g2_SetFont>
	//u8g2_SetFont(&lcd, u8g2_font_battery19_tn); //battery icons
	
	u8g2_DrawRFrame(&lcd, 0, 0, 128 ,64, 5);
    37be:	2305      	movs	r3, #5
    37c0:	9301      	str	r3, [sp, #4]
    37c2:	333b      	adds	r3, #59	; 0x3b
    37c4:	9300      	str	r3, [sp, #0]
    37c6:	3340      	adds	r3, #64	; 0x40
    37c8:	2200      	movs	r2, #0
    37ca:	2100      	movs	r1, #0
    37cc:	0020      	movs	r0, r4
    37ce:	f7fc fc9d 	bl	10c <u8g2_DrawRFrame>
	u8g2_DrawStr(&lcd, 20, 15, (char *)__DATE__);//
    37d2:	4bb8      	ldr	r3, [pc, #736]	; (3ab4 <main+0x3b0>)
    37d4:	220f      	movs	r2, #15
    37d6:	2114      	movs	r1, #20
    37d8:	0020      	movs	r0, r4
    37da:	f7fd f917 	bl	a0c <u8g2_DrawStr>
	u8g2_DrawStr(&lcd, 35, 30, (char *)__TIME__);//
    37de:	4bb6      	ldr	r3, [pc, #728]	; (3ab8 <main+0x3b4>)
    37e0:	221e      	movs	r2, #30
    37e2:	2123      	movs	r1, #35	; 0x23
    37e4:	0020      	movs	r0, r4
    37e6:	f7fd f911 	bl	a0c <u8g2_DrawStr>
	u8g2_SetFont(&lcd, u8g2_font_courR08_tr);
    37ea:	49b4      	ldr	r1, [pc, #720]	; (3abc <main+0x3b8>)
    37ec:	0020      	movs	r0, r4
    37ee:	f7fd f94b 	bl	a88 <u8g2_SetFont>
	u8g2_DrawStr(&lcd, 7, 40, (char *)__TIMESTAMP__);//
    37f2:	4bb3      	ldr	r3, [pc, #716]	; (3ac0 <main+0x3bc>)
    37f4:	2228      	movs	r2, #40	; 0x28
    37f6:	2107      	movs	r1, #7
    37f8:	0020      	movs	r0, r4
    37fa:	f7fd f907 	bl	a0c <u8g2_DrawStr>
	//u8g2_DrawStr(&lcd, 7, 49, (char *)__FILE__);//
	
	u8g2_SendBuffer(&lcd);
    37fe:	0020      	movs	r0, r4
    3800:	f7fc fd4f 	bl	2a2 <u8g2_SendBuffer>
	u8g2_ClearBuffer(&lcd);
    3804:	0020      	movs	r0, r4
    3806:	f7fc fd40 	bl	28a <u8g2_ClearBuffer>
	
	PowerMeterInit(INA226ADR);
    380a:	2040      	movs	r0, #64	; 0x40
    380c:	f7fe ff8c 	bl	2728 <PowerMeterInit>
	delay_ms(2150);
    3810:	48ac      	ldr	r0, [pc, #688]	; (3ac4 <main+0x3c0>)
    3812:	f7fd fe6d 	bl	14f0 <delay_ms>
	
	 
		
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_WDT |
    3816:	4aac      	ldr	r2, [pc, #688]	; (3ac8 <main+0x3c4>)
    3818:	4bac      	ldr	r3, [pc, #688]	; (3acc <main+0x3c8>)
    381a:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_CLKEN |
	GCLK_CLKCTRL_GEN_GCLK3;	
	WDT->CLEAR.bit.CLEAR = 0xA5;
    381c:	22a5      	movs	r2, #165	; 0xa5
    381e:	4bac      	ldr	r3, [pc, #688]	; (3ad0 <main+0x3cc>)
    3820:	721a      	strb	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3822:	3aa4      	subs	r2, #164	; 0xa4
    3824:	2394      	movs	r3, #148	; 0x94
    3826:	50ea      	str	r2, [r5, r3]
	uint8_t rfReportTime = REPORTMSGTIME;
    3828:	2603      	movs	r6, #3
	uint8_t backLightTime = 10;
    382a:	270a      	movs	r7, #10
	uint8_t scrUpdateRequest = 0;
    382c:	2400      	movs	r4, #0
		//gpio_toggle_pin_level(LED_G);
		//delay_ms(100);
		//
	//}
	while (1) {
		WDT->CLEAR.bit.CLEAR = 0xA5;
    382e:	22a5      	movs	r2, #165	; 0xa5
    3830:	4ba7      	ldr	r3, [pc, #668]	; (3ad0 <main+0x3cc>)
    3832:	721a      	strb	r2, [r3, #8]
		while(WDT->STATUS.bit.SYNCBUSY);
    3834:	4ba6      	ldr	r3, [pc, #664]	; (3ad0 <main+0x3cc>)
    3836:	79db      	ldrb	r3, [r3, #7]
    3838:	09db      	lsrs	r3, r3, #7
    383a:	d1fb      	bne.n	3834 <main+0x130>
		
		if (EXT_I2C_IRQ_isReady()){
    383c:	f7ff f84e 	bl	28dc <EXT_I2C_IRQ_isReady>
    3840:	2800      	cmp	r0, #0
    3842:	d000      	beq.n	3846 <main+0x142>
    3844:	e0c8      	b.n	39d8 <main+0x2d4>
			scrUpdateRequest = 1;
		}
		//sprintf(keyVal, "%02d;%02d;" , keyValues[0], keyValues[1]);
		//u8g2_DrawStr(&lcd, 70, 23, (char *)keyVal);

		if (rf_isReady()) {
    3846:	f7ff f851 	bl	28ec <rf_isReady>
    384a:	2800      	cmp	r0, #0
    384c:	d000      	beq.n	3850 <main+0x14c>
    384e:	e0e6      	b.n	3a1e <main+0x31a>
					delay_us(1);
			}
			gpio_set_pin_level(LED_G, false);
			}
		
		if (RTC_IRQ_Ready())
    3850:	f7ff f83c 	bl	28cc <RTC_IRQ_Ready>
    3854:	2800      	cmp	r0, #0
    3856:	d000      	beq.n	385a <main+0x156>
    3858:	e154      	b.n	3b04 <main+0x400>
			}
			I2C_write_batch(UI_MODULE, (uint8_t *)&portValue, sizeof(portValue));
			scrUpdateRequest = 1;
		}
		
		if (scrUpdateRequest){
    385a:	2c00      	cmp	r4, #0
    385c:	d0e7      	beq.n	382e <main+0x12a>
			//u8g2_InitDisplay(&lcd);
			
			#ifdef DEBUG
				u8g2_SetFont(&lcd, u8g2_font_courR08_tr);
    385e:	4c90      	ldr	r4, [pc, #576]	; (3aa0 <main+0x39c>)
    3860:	4996      	ldr	r1, [pc, #600]	; (3abc <main+0x3b8>)
    3862:	0020      	movs	r0, r4
    3864:	f7fd f910 	bl	a88 <u8g2_SetFont>
				u8g2_DrawStr(&lcd, 100, 10, (char *)rssiData);//
    3868:	ab7c      	add	r3, sp, #496	; 0x1f0
    386a:	220a      	movs	r2, #10
    386c:	2164      	movs	r1, #100	; 0x64
    386e:	0020      	movs	r0, r4
    3870:	f7fd f8cc 	bl	a0c <u8g2_DrawStr>
				u8g2_DrawStr(&lcd, 58, 9, (char *)"|debug|");
    3874:	4b97      	ldr	r3, [pc, #604]	; (3ad4 <main+0x3d0>)
    3876:	2209      	movs	r2, #9
    3878:	213a      	movs	r1, #58	; 0x3a
    387a:	0020      	movs	r0, r4
    387c:	f7fd f8c6 	bl	a0c <u8g2_DrawStr>
				
				u8g2_SetFont(&lcd, u8g2_font_Terminal_tr);
    3880:	498b      	ldr	r1, [pc, #556]	; (3ab0 <main+0x3ac>)
    3882:	0020      	movs	r0, r4
    3884:	f7fd f900 	bl	a88 <u8g2_SetFont>
				sprintf(rtcData, "%02d:%02d:%02d", sys_rtc.hour, sys_rtc.minute, sys_rtc.second);
    3888:	4983      	ldr	r1, [pc, #524]	; (3a98 <main+0x394>)
    388a:	788a      	ldrb	r2, [r1, #2]
    388c:	784b      	ldrb	r3, [r1, #1]
    388e:	7809      	ldrb	r1, [r1, #0]
    3890:	9100      	str	r1, [sp, #0]
    3892:	4991      	ldr	r1, [pc, #580]	; (3ad8 <main+0x3d4>)
    3894:	a82c      	add	r0, sp, #176	; 0xb0
    3896:	f002 fe7b 	bl	6590 <sprintf>
				u8g2_DrawStr(&lcd, 5, 11, (char *)rtcData);
    389a:	ab2c      	add	r3, sp, #176	; 0xb0
    389c:	220b      	movs	r2, #11
    389e:	2105      	movs	r1, #5
    38a0:	0020      	movs	r0, r4
    38a2:	f7fd f8b3 	bl	a0c <u8g2_DrawStr>
				u8g2_DrawStr(&lcd, 20, 11, (char *)rtcData);
			#endif
			
			
			
			u8g2_DrawRFrame(&lcd, 0, 0, 128 ,64, 5);
    38a6:	2305      	movs	r3, #5
    38a8:	9301      	str	r3, [sp, #4]
    38aa:	333b      	adds	r3, #59	; 0x3b
    38ac:	9300      	str	r3, [sp, #0]
    38ae:	3340      	adds	r3, #64	; 0x40
    38b0:	2200      	movs	r2, #0
    38b2:	2100      	movs	r1, #0
    38b4:	0020      	movs	r0, r4
    38b6:	f7fc fc29 	bl	10c <u8g2_DrawRFrame>
			u8g2_DrawLine(&lcd, 3,12, 124,12);
    38ba:	230c      	movs	r3, #12
    38bc:	9300      	str	r3, [sp, #0]
    38be:	3370      	adds	r3, #112	; 0x70
    38c0:	220c      	movs	r2, #12
    38c2:	2103      	movs	r1, #3
    38c4:	0020      	movs	r0, r4
    38c6:	f7fd f9d7 	bl	c78 <u8g2_DrawLine>
			sprintf(batData, "%05dmV  %05dmA", battery.voltage, battery.current);
    38ca:	4d84      	ldr	r5, [pc, #528]	; (3adc <main+0x3d8>)
    38cc:	686b      	ldr	r3, [r5, #4]
    38ce:	68aa      	ldr	r2, [r5, #8]
    38d0:	4983      	ldr	r1, [pc, #524]	; (3ae0 <main+0x3dc>)
    38d2:	a81c      	add	r0, sp, #112	; 0x70
    38d4:	f002 fe5c 	bl	6590 <sprintf>
			u8g2_DrawStr(&lcd, 3, 23, (char *)batData);
    38d8:	ab1c      	add	r3, sp, #112	; 0x70
    38da:	2217      	movs	r2, #23
    38dc:	2103      	movs	r1, #3
    38de:	0020      	movs	r0, r4
    38e0:	f7fd f894 	bl	a0c <u8g2_DrawStr>
						
			sprintf(batData, "%3.1fW  %3.3fWh", battery.power, battery.energy);
    38e4:	696b      	ldr	r3, [r5, #20]
    38e6:	469b      	mov	fp, r3
    38e8:	6928      	ldr	r0, [r5, #16]
    38ea:	f002 fb3d 	bl	5f68 <__aeabi_f2d>
    38ee:	9004      	str	r0, [sp, #16]
    38f0:	9105      	str	r1, [sp, #20]
    38f2:	4658      	mov	r0, fp
    38f4:	f002 fb38 	bl	5f68 <__aeabi_f2d>
    38f8:	9000      	str	r0, [sp, #0]
    38fa:	9101      	str	r1, [sp, #4]
    38fc:	9a04      	ldr	r2, [sp, #16]
    38fe:	9b05      	ldr	r3, [sp, #20]
    3900:	4978      	ldr	r1, [pc, #480]	; (3ae4 <main+0x3e0>)
    3902:	a81c      	add	r0, sp, #112	; 0x70
    3904:	f002 fe44 	bl	6590 <sprintf>
			u8g2_DrawStr(&lcd, 3, 33, (char *)batData);
    3908:	ab1c      	add	r3, sp, #112	; 0x70
    390a:	2221      	movs	r2, #33	; 0x21
    390c:	2103      	movs	r1, #3
    390e:	0020      	movs	r0, r4
    3910:	f7fd f87c 	bl	a0c <u8g2_DrawStr>
			
			u8g2_SetFont(&lcd, u8g2_font_courR08_tr);
    3914:	4969      	ldr	r1, [pc, #420]	; (3abc <main+0x3b8>)
    3916:	0020      	movs	r0, r4
    3918:	f7fd f8b6 	bl	a88 <u8g2_SetFont>
			
			sprintf(batData, "Cap: %02d%% Err: %2.1fWh", battery.capacity, battery.lastChargerErr);
    391c:	7b2b      	ldrb	r3, [r5, #12]
    391e:	4698      	mov	r8, r3
    3920:	69a8      	ldr	r0, [r5, #24]
    3922:	f002 fb21 	bl	5f68 <__aeabi_f2d>
    3926:	9000      	str	r0, [sp, #0]
    3928:	9101      	str	r1, [sp, #4]
    392a:	4642      	mov	r2, r8
    392c:	496e      	ldr	r1, [pc, #440]	; (3ae8 <main+0x3e4>)
    392e:	a81c      	add	r0, sp, #112	; 0x70
    3930:	f002 fe2e 	bl	6590 <sprintf>
			u8g2_DrawStr(&lcd, 3, 41, (char *)batData);
    3934:	ab1c      	add	r3, sp, #112	; 0x70
    3936:	2229      	movs	r2, #41	; 0x29
    3938:	2103      	movs	r1, #3
    393a:	0020      	movs	r0, r4
    393c:	f7fd f866 	bl	a0c <u8g2_DrawStr>
			
			u8g2_DrawLine(&lcd, 3,44, 124,44);
    3940:	232c      	movs	r3, #44	; 0x2c
    3942:	9300      	str	r3, [sp, #0]
    3944:	3350      	adds	r3, #80	; 0x50
    3946:	222c      	movs	r2, #44	; 0x2c
    3948:	2103      	movs	r1, #3
    394a:	0020      	movs	r0, r4
    394c:	f7fd f994 	bl	c78 <u8g2_DrawLine>
			sprintf((void *)upsData, "%2.1fV,%2.1fA,%3.1fW      ", (float)mainBattery.voltage/1000, (float)mainBattery.current/1000, mainBattery.power);
    3950:	4d66      	ldr	r5, [pc, #408]	; (3aec <main+0x3e8>)
    3952:	68a8      	ldr	r0, [r5, #8]
    3954:	f001 f94a 	bl	4bec <__aeabi_ui2f>
    3958:	4965      	ldr	r1, [pc, #404]	; (3af0 <main+0x3ec>)
    395a:	f000 fe1b 	bl	4594 <__aeabi_fmul>
    395e:	9004      	str	r0, [sp, #16]
    3960:	6868      	ldr	r0, [r5, #4]
    3962:	f001 f8f3 	bl	4b4c <__aeabi_i2f>
    3966:	4962      	ldr	r1, [pc, #392]	; (3af0 <main+0x3ec>)
    3968:	f000 fe14 	bl	4594 <__aeabi_fmul>
    396c:	9007      	str	r0, [sp, #28]
    396e:	692b      	ldr	r3, [r5, #16]
    3970:	469b      	mov	fp, r3
    3972:	9804      	ldr	r0, [sp, #16]
    3974:	f002 faf8 	bl	5f68 <__aeabi_f2d>
    3978:	9004      	str	r0, [sp, #16]
    397a:	9105      	str	r1, [sp, #20]
    397c:	4658      	mov	r0, fp
    397e:	f002 faf3 	bl	5f68 <__aeabi_f2d>
    3982:	9002      	str	r0, [sp, #8]
    3984:	9103      	str	r1, [sp, #12]
    3986:	9807      	ldr	r0, [sp, #28]
    3988:	f002 faee 	bl	5f68 <__aeabi_f2d>
    398c:	9000      	str	r0, [sp, #0]
    398e:	9101      	str	r1, [sp, #4]
    3990:	9a04      	ldr	r2, [sp, #16]
    3992:	9b05      	ldr	r3, [sp, #20]
    3994:	4957      	ldr	r1, [pc, #348]	; (3af4 <main+0x3f0>)
    3996:	a80c      	add	r0, sp, #48	; 0x30
    3998:	f002 fdfa 	bl	6590 <sprintf>
			u8g2_DrawStr(&lcd, 3, 54, (char *)upsData);
    399c:	ab0c      	add	r3, sp, #48	; 0x30
    399e:	2236      	movs	r2, #54	; 0x36
    39a0:	2103      	movs	r1, #3
    39a2:	0020      	movs	r0, r4
    39a4:	f7fd f832 	bl	a0c <u8g2_DrawStr>
			
			sprintf((void *)upsData, "%dWh,%d%%", (int)mainBattery.energy, mainBattery.capacity);
    39a8:	6968      	ldr	r0, [r5, #20]
    39aa:	7b2d      	ldrb	r5, [r5, #12]
    39ac:	f001 f8ae 	bl	4b0c <__aeabi_f2iz>
    39b0:	0002      	movs	r2, r0
    39b2:	002b      	movs	r3, r5
    39b4:	4950      	ldr	r1, [pc, #320]	; (3af8 <main+0x3f4>)
    39b6:	a80c      	add	r0, sp, #48	; 0x30
    39b8:	f002 fdea 	bl	6590 <sprintf>
			u8g2_DrawStr(&lcd, 3, 62, (char *)upsData);
    39bc:	ab0c      	add	r3, sp, #48	; 0x30
    39be:	223e      	movs	r2, #62	; 0x3e
    39c0:	2103      	movs	r1, #3
    39c2:	0020      	movs	r0, r4
    39c4:	f7fd f822 	bl	a0c <u8g2_DrawStr>
			u8g2_SendBuffer(&lcd);
    39c8:	0020      	movs	r0, r4
    39ca:	f7fc fc6a 	bl	2a2 <u8g2_SendBuffer>
			u8g2_ClearBuffer(&lcd);
    39ce:	0020      	movs	r0, r4
    39d0:	f7fc fc5b 	bl	28a <u8g2_ClearBuffer>
			scrUpdateRequest = 0;
    39d4:	2400      	movs	r4, #0
    39d6:	e72a      	b.n	382e <main+0x12a>
			I2C_read_batch(UI_MODULE, (uint8_t *)&keyValues, sizeof(keyValues));
    39d8:	2202      	movs	r2, #2
    39da:	a909      	add	r1, sp, #36	; 0x24
    39dc:	2027      	movs	r0, #39	; 0x27
    39de:	f7ff fb37 	bl	3050 <I2C_read_batch>
			if (GET_BIT(keyValues[0], EXT_SV3) && GET_BIT(keyValues[0], EXT_SV1) == 0){
    39e2:	ab09      	add	r3, sp, #36	; 0x24
    39e4:	781a      	ldrb	r2, [r3, #0]
    39e6:	2301      	movs	r3, #1
    39e8:	4013      	ands	r3, r2
    39ea:	d007      	beq.n	39fc <main+0x2f8>
    39ec:	0751      	lsls	r1, r2, #29
    39ee:	d405      	bmi.n	39fc <main+0x2f8>
				SET_BIT(portValue[1], LCD_BLK);
    39f0:	a80a      	add	r0, sp, #40	; 0x28
    39f2:	7841      	ldrb	r1, [r0, #1]
    39f4:	2410      	movs	r4, #16
    39f6:	4321      	orrs	r1, r4
    39f8:	7041      	strb	r1, [r0, #1]
				backLightTime = BACKLIGHTTIME;
    39fa:	270a      	movs	r7, #10
			if (GET_BIT(keyValues[0], EXT_SV1) && GET_BIT(keyValues[0], EXT_SV3) == 0){
    39fc:	0752      	lsls	r2, r2, #29
    39fe:	d507      	bpl.n	3a10 <main+0x30c>
    3a00:	2b00      	cmp	r3, #0
    3a02:	d105      	bne.n	3a10 <main+0x30c>
				SET_BIT(portValue[1], LCD_BLK);
    3a04:	aa0a      	add	r2, sp, #40	; 0x28
    3a06:	7853      	ldrb	r3, [r2, #1]
    3a08:	2110      	movs	r1, #16
    3a0a:	430b      	orrs	r3, r1
    3a0c:	7053      	strb	r3, [r2, #1]
				backLightTime = BACKLIGHTTIME;
    3a0e:	270a      	movs	r7, #10
			I2C_write_batch(UI_MODULE, (uint8_t *)&portValue, sizeof(portValue));
    3a10:	2203      	movs	r2, #3
    3a12:	a90a      	add	r1, sp, #40	; 0x28
    3a14:	2027      	movs	r0, #39	; 0x27
    3a16:	f7ff fb05 	bl	3024 <I2C_write_batch>
			scrUpdateRequest = 1;
    3a1a:	2401      	movs	r4, #1
    3a1c:	e713      	b.n	3846 <main+0x142>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3a1e:	2101      	movs	r1, #1
    3a20:	2398      	movs	r3, #152	; 0x98
    3a22:	22c0      	movs	r2, #192	; 0xc0
    3a24:	05d2      	lsls	r2, r2, #23
    3a26:	50d1      	str	r1, [r2, r3]
			rfHeader* rfRxDataMsg=rfMsgType();
    3a28:	f7fe ff78 	bl	291c <rfMsgType>
    3a2c:	0005      	movs	r5, r0
			sprintf((char *)rssiData, "%04d" , rfRxDataMsg->rssi);
    3a2e:	2304      	movs	r3, #4
    3a30:	5ec2      	ldrsh	r2, [r0, r3]
    3a32:	4932      	ldr	r1, [pc, #200]	; (3afc <main+0x3f8>)
    3a34:	a87c      	add	r0, sp, #496	; 0x1f0
    3a36:	f002 fdab 	bl	6590 <sprintf>
			switch(rfRxDataMsg->opcode) {
    3a3a:	78eb      	ldrb	r3, [r5, #3]
    3a3c:	2b81      	cmp	r3, #129	; 0x81
    3a3e:	d019      	beq.n	3a74 <main+0x370>
    3a40:	2b82      	cmp	r3, #130	; 0x82
    3a42:	d005      	beq.n	3a50 <main+0x34c>
    3a44:	2b12      	cmp	r3, #18
    3a46:	d01f      	beq.n	3a88 <main+0x384>
					delay_us(1);
    3a48:	2001      	movs	r0, #1
    3a4a:	f7fd fd45 	bl	14d8 <delay_us>
    3a4e:	e00b      	b.n	3a68 <main+0x364>
					memcpy(&testMsg, DATA, rfRxDataMsg->rxtxBuffLenght);
    3a50:	782a      	ldrb	r2, [r5, #0]
    3a52:	492b      	ldr	r1, [pc, #172]	; (3b00 <main+0x3fc>)
    3a54:	a83c      	add	r0, sp, #240	; 0xf0
    3a56:	f002 fd0f 	bl	6478 <memcpy>
					DebugSerialWrite(testMsg, strlen(testMsg));					
    3a5a:	a83c      	add	r0, sp, #240	; 0xf0
    3a5c:	f002 fdba 	bl	65d4 <strlen>
    3a60:	b2c1      	uxtb	r1, r0
    3a62:	a83c      	add	r0, sp, #240	; 0xf0
    3a64:	f7ff fb60 	bl	3128 <DebugSerialWrite>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3a68:	2101      	movs	r1, #1
    3a6a:	2394      	movs	r3, #148	; 0x94
    3a6c:	22c0      	movs	r2, #192	; 0xc0
    3a6e:	05d2      	lsls	r2, r2, #23
    3a70:	50d1      	str	r1, [r2, r3]
    3a72:	e6ed      	b.n	3850 <main+0x14c>
					memcpy(&sys_rtc, DATA, sizeof(sys_rtc));
    3a74:	4d08      	ldr	r5, [pc, #32]	; (3a98 <main+0x394>)
    3a76:	220a      	movs	r2, #10
    3a78:	4921      	ldr	r1, [pc, #132]	; (3b00 <main+0x3fc>)
    3a7a:	0028      	movs	r0, r5
    3a7c:	f002 fcfc 	bl	6478 <memcpy>
					rtc_set(&sys_rtc);
    3a80:	0028      	movs	r0, r5
    3a82:	f7ff fe11 	bl	36a8 <rtc_set>
					break;
    3a86:	e7ef      	b.n	3a68 <main+0x364>
					memcpy(&mainBattery, (void *)DATA, sizeof(mainBattery));
    3a88:	221c      	movs	r2, #28
    3a8a:	491d      	ldr	r1, [pc, #116]	; (3b00 <main+0x3fc>)
    3a8c:	4817      	ldr	r0, [pc, #92]	; (3aec <main+0x3e8>)
    3a8e:	f002 fcf3 	bl	6478 <memcpy>
					break;
    3a92:	e7e9      	b.n	3a68 <main+0x364>
    3a94:	fffffdf4 	.word	0xfffffdf4
    3a98:	20000010 	.word	0x20000010
    3a9c:	0000b494 	.word	0x0000b494
    3aa0:	20000fb8 	.word	0x20000fb8
    3aa4:	00002b97 	.word	0x00002b97
    3aa8:	00002b9d 	.word	0x00002b9d
    3aac:	0000b240 	.word	0x0000b240
    3ab0:	0000a9e4 	.word	0x0000a9e4
    3ab4:	0000b49c 	.word	0x0000b49c
    3ab8:	0000b4a8 	.word	0x0000b4a8
    3abc:	0000ae78 	.word	0x0000ae78
    3ac0:	0000b4b4 	.word	0x0000b4b4
    3ac4:	00000866 	.word	0x00000866
    3ac8:	00004301 	.word	0x00004301
    3acc:	40000c00 	.word	0x40000c00
    3ad0:	40001000 	.word	0x40001000
    3ad4:	0000b4d8 	.word	0x0000b4d8
    3ad8:	0000b4e0 	.word	0x0000b4e0
    3adc:	20001054 	.word	0x20001054
    3ae0:	0000b4f0 	.word	0x0000b4f0
    3ae4:	0000b500 	.word	0x0000b500
    3ae8:	0000b510 	.word	0x0000b510
    3aec:	2000108c 	.word	0x2000108c
    3af0:	3a83126f 	.word	0x3a83126f
    3af4:	0000b52c 	.word	0x0000b52c
    3af8:	0000b548 	.word	0x0000b548
    3afc:	0000b4d0 	.word	0x0000b4d0
    3b00:	20000e40 	.word	0x20000e40
		{	rtc_sync(&sys_rtc);
    3b04:	4829      	ldr	r0, [pc, #164]	; (3bac <main+0x4a8>)
    3b06:	f7ff fd96 	bl	3636 <rtc_sync>
			PowerMeterMeasure(&battery);
    3b0a:	4829      	ldr	r0, [pc, #164]	; (3bb0 <main+0x4ac>)
    3b0c:	f7fe fe34 	bl	2778 <PowerMeterMeasure>
			if (backLightTime !=0){
    3b10:	2f00      	cmp	r7, #0
    3b12:	d029      	beq.n	3b68 <main+0x464>
				SET_BIT(portValue[1], LCD_BLK);
    3b14:	aa0a      	add	r2, sp, #40	; 0x28
    3b16:	7853      	ldrb	r3, [r2, #1]
    3b18:	2110      	movs	r1, #16
    3b1a:	430b      	orrs	r3, r1
    3b1c:	7053      	strb	r3, [r2, #1]
				backLightTime--;
    3b1e:	3f01      	subs	r7, #1
    3b20:	b2ff      	uxtb	r7, r7
			if (abs(battery.current) > 20){
    3b22:	4b23      	ldr	r3, [pc, #140]	; (3bb0 <main+0x4ac>)
    3b24:	685b      	ldr	r3, [r3, #4]
    3b26:	17d9      	asrs	r1, r3, #31
    3b28:	185a      	adds	r2, r3, r1
    3b2a:	404a      	eors	r2, r1
    3b2c:	2a14      	cmp	r2, #20
    3b2e:	dd00      	ble.n	3b32 <main+0x42e>
				backLightTime=BACKLIGHTTIME;
    3b30:	270a      	movs	r7, #10
			if (battery.current > 30 || /*mainBattery*/ abs(mainBattery.current) > 1000){
    3b32:	2b1e      	cmp	r3, #30
    3b34:	dc08      	bgt.n	3b48 <main+0x444>
    3b36:	4b1f      	ldr	r3, [pc, #124]	; (3bb4 <main+0x4b0>)
    3b38:	685b      	ldr	r3, [r3, #4]
    3b3a:	17da      	asrs	r2, r3, #31
    3b3c:	189b      	adds	r3, r3, r2
    3b3e:	4053      	eors	r3, r2
    3b40:	22fa      	movs	r2, #250	; 0xfa
    3b42:	0092      	lsls	r2, r2, #2
    3b44:	4293      	cmp	r3, r2
    3b46:	dd15      	ble.n	3b74 <main+0x470>
				RESET_BIT(portValue[1], EXT_LED);
    3b48:	aa0a      	add	r2, sp, #40	; 0x28
    3b4a:	7853      	ldrb	r3, [r2, #1]
    3b4c:	2108      	movs	r1, #8
    3b4e:	438b      	bics	r3, r1
    3b50:	7053      	strb	r3, [r2, #1]
			if(rfReportTime==0 && RADIOMODE){
    3b52:	2e00      	cmp	r6, #0
    3b54:	d014      	beq.n	3b80 <main+0x47c>
				rfReportTime--;
    3b56:	3e01      	subs	r6, #1
    3b58:	b2f6      	uxtb	r6, r6
			I2C_write_batch(UI_MODULE, (uint8_t *)&portValue, sizeof(portValue));
    3b5a:	2203      	movs	r2, #3
    3b5c:	a90a      	add	r1, sp, #40	; 0x28
    3b5e:	2027      	movs	r0, #39	; 0x27
    3b60:	f7ff fa60 	bl	3024 <I2C_write_batch>
			scrUpdateRequest = 1;
    3b64:	2401      	movs	r4, #1
    3b66:	e678      	b.n	385a <main+0x156>
				RESET_BIT(portValue[1], LCD_BLK);
    3b68:	aa0a      	add	r2, sp, #40	; 0x28
    3b6a:	7853      	ldrb	r3, [r2, #1]
    3b6c:	2110      	movs	r1, #16
    3b6e:	438b      	bics	r3, r1
    3b70:	7053      	strb	r3, [r2, #1]
    3b72:	e7d6      	b.n	3b22 <main+0x41e>
				SET_BIT(portValue[1], EXT_LED);
    3b74:	aa0a      	add	r2, sp, #40	; 0x28
    3b76:	7853      	ldrb	r3, [r2, #1]
    3b78:	2108      	movs	r1, #8
    3b7a:	430b      	orrs	r3, r1
    3b7c:	7053      	strb	r3, [r2, #1]
    3b7e:	e7e8      	b.n	3b52 <main+0x44e>
				rfTxDataPack.destinationAddr = ALLNODES;
    3b80:	4c0d      	ldr	r4, [pc, #52]	; (3bb8 <main+0x4b4>)
    3b82:	23fe      	movs	r3, #254	; 0xfe
    3b84:	7063      	strb	r3, [r4, #1]
				rfTxDataPack.senderAddr = NODEID;
    3b86:	3bdd      	subs	r3, #221	; 0xdd
    3b88:	70a3      	strb	r3, [r4, #2]
				rfTxDataPack.opcode = POWERBANK;
    3b8a:	3362      	adds	r3, #98	; 0x62
    3b8c:	70e3      	strb	r3, [r4, #3]
				rfTxDataPack.rxtxBuffLenght = sizeof(battery);
    3b8e:	3b67      	subs	r3, #103	; 0x67
    3b90:	7023      	strb	r3, [r4, #0]
				rfTxDataPack.dataCRC = simpleCRC(&battery, sizeof(battery));
    3b92:	4d07      	ldr	r5, [pc, #28]	; (3bb0 <main+0x4ac>)
    3b94:	211c      	movs	r1, #28
    3b96:	0028      	movs	r0, r5
    3b98:	f7ff fca6 	bl	34e8 <simpleCRC>
    3b9c:	71e0      	strb	r0, [r4, #7]
				sendFrame(&rfTxDataPack, &battery);
    3b9e:	0029      	movs	r1, r5
    3ba0:	0020      	movs	r0, r4
    3ba2:	f7ff fc2f 	bl	3404 <sendFrame>
				rfReportTime=REPORTMSGTIME;
    3ba6:	3603      	adds	r6, #3
    3ba8:	e7d7      	b.n	3b5a <main+0x456>
    3baa:	46c0      	nop			; (mov r8, r8)
    3bac:	20000010 	.word	0x20000010
    3bb0:	20001054 	.word	0x20001054
    3bb4:	2000108c 	.word	0x2000108c
    3bb8:	20001074 	.word	0x20001074

00003bbc <__udivsi3>:
    3bbc:	2200      	movs	r2, #0
    3bbe:	0843      	lsrs	r3, r0, #1
    3bc0:	428b      	cmp	r3, r1
    3bc2:	d374      	bcc.n	3cae <__udivsi3+0xf2>
    3bc4:	0903      	lsrs	r3, r0, #4
    3bc6:	428b      	cmp	r3, r1
    3bc8:	d35f      	bcc.n	3c8a <__udivsi3+0xce>
    3bca:	0a03      	lsrs	r3, r0, #8
    3bcc:	428b      	cmp	r3, r1
    3bce:	d344      	bcc.n	3c5a <__udivsi3+0x9e>
    3bd0:	0b03      	lsrs	r3, r0, #12
    3bd2:	428b      	cmp	r3, r1
    3bd4:	d328      	bcc.n	3c28 <__udivsi3+0x6c>
    3bd6:	0c03      	lsrs	r3, r0, #16
    3bd8:	428b      	cmp	r3, r1
    3bda:	d30d      	bcc.n	3bf8 <__udivsi3+0x3c>
    3bdc:	22ff      	movs	r2, #255	; 0xff
    3bde:	0209      	lsls	r1, r1, #8
    3be0:	ba12      	rev	r2, r2
    3be2:	0c03      	lsrs	r3, r0, #16
    3be4:	428b      	cmp	r3, r1
    3be6:	d302      	bcc.n	3bee <__udivsi3+0x32>
    3be8:	1212      	asrs	r2, r2, #8
    3bea:	0209      	lsls	r1, r1, #8
    3bec:	d065      	beq.n	3cba <__udivsi3+0xfe>
    3bee:	0b03      	lsrs	r3, r0, #12
    3bf0:	428b      	cmp	r3, r1
    3bf2:	d319      	bcc.n	3c28 <__udivsi3+0x6c>
    3bf4:	e000      	b.n	3bf8 <__udivsi3+0x3c>
    3bf6:	0a09      	lsrs	r1, r1, #8
    3bf8:	0bc3      	lsrs	r3, r0, #15
    3bfa:	428b      	cmp	r3, r1
    3bfc:	d301      	bcc.n	3c02 <__udivsi3+0x46>
    3bfe:	03cb      	lsls	r3, r1, #15
    3c00:	1ac0      	subs	r0, r0, r3
    3c02:	4152      	adcs	r2, r2
    3c04:	0b83      	lsrs	r3, r0, #14
    3c06:	428b      	cmp	r3, r1
    3c08:	d301      	bcc.n	3c0e <__udivsi3+0x52>
    3c0a:	038b      	lsls	r3, r1, #14
    3c0c:	1ac0      	subs	r0, r0, r3
    3c0e:	4152      	adcs	r2, r2
    3c10:	0b43      	lsrs	r3, r0, #13
    3c12:	428b      	cmp	r3, r1
    3c14:	d301      	bcc.n	3c1a <__udivsi3+0x5e>
    3c16:	034b      	lsls	r3, r1, #13
    3c18:	1ac0      	subs	r0, r0, r3
    3c1a:	4152      	adcs	r2, r2
    3c1c:	0b03      	lsrs	r3, r0, #12
    3c1e:	428b      	cmp	r3, r1
    3c20:	d301      	bcc.n	3c26 <__udivsi3+0x6a>
    3c22:	030b      	lsls	r3, r1, #12
    3c24:	1ac0      	subs	r0, r0, r3
    3c26:	4152      	adcs	r2, r2
    3c28:	0ac3      	lsrs	r3, r0, #11
    3c2a:	428b      	cmp	r3, r1
    3c2c:	d301      	bcc.n	3c32 <__udivsi3+0x76>
    3c2e:	02cb      	lsls	r3, r1, #11
    3c30:	1ac0      	subs	r0, r0, r3
    3c32:	4152      	adcs	r2, r2
    3c34:	0a83      	lsrs	r3, r0, #10
    3c36:	428b      	cmp	r3, r1
    3c38:	d301      	bcc.n	3c3e <__udivsi3+0x82>
    3c3a:	028b      	lsls	r3, r1, #10
    3c3c:	1ac0      	subs	r0, r0, r3
    3c3e:	4152      	adcs	r2, r2
    3c40:	0a43      	lsrs	r3, r0, #9
    3c42:	428b      	cmp	r3, r1
    3c44:	d301      	bcc.n	3c4a <__udivsi3+0x8e>
    3c46:	024b      	lsls	r3, r1, #9
    3c48:	1ac0      	subs	r0, r0, r3
    3c4a:	4152      	adcs	r2, r2
    3c4c:	0a03      	lsrs	r3, r0, #8
    3c4e:	428b      	cmp	r3, r1
    3c50:	d301      	bcc.n	3c56 <__udivsi3+0x9a>
    3c52:	020b      	lsls	r3, r1, #8
    3c54:	1ac0      	subs	r0, r0, r3
    3c56:	4152      	adcs	r2, r2
    3c58:	d2cd      	bcs.n	3bf6 <__udivsi3+0x3a>
    3c5a:	09c3      	lsrs	r3, r0, #7
    3c5c:	428b      	cmp	r3, r1
    3c5e:	d301      	bcc.n	3c64 <__udivsi3+0xa8>
    3c60:	01cb      	lsls	r3, r1, #7
    3c62:	1ac0      	subs	r0, r0, r3
    3c64:	4152      	adcs	r2, r2
    3c66:	0983      	lsrs	r3, r0, #6
    3c68:	428b      	cmp	r3, r1
    3c6a:	d301      	bcc.n	3c70 <__udivsi3+0xb4>
    3c6c:	018b      	lsls	r3, r1, #6
    3c6e:	1ac0      	subs	r0, r0, r3
    3c70:	4152      	adcs	r2, r2
    3c72:	0943      	lsrs	r3, r0, #5
    3c74:	428b      	cmp	r3, r1
    3c76:	d301      	bcc.n	3c7c <__udivsi3+0xc0>
    3c78:	014b      	lsls	r3, r1, #5
    3c7a:	1ac0      	subs	r0, r0, r3
    3c7c:	4152      	adcs	r2, r2
    3c7e:	0903      	lsrs	r3, r0, #4
    3c80:	428b      	cmp	r3, r1
    3c82:	d301      	bcc.n	3c88 <__udivsi3+0xcc>
    3c84:	010b      	lsls	r3, r1, #4
    3c86:	1ac0      	subs	r0, r0, r3
    3c88:	4152      	adcs	r2, r2
    3c8a:	08c3      	lsrs	r3, r0, #3
    3c8c:	428b      	cmp	r3, r1
    3c8e:	d301      	bcc.n	3c94 <__udivsi3+0xd8>
    3c90:	00cb      	lsls	r3, r1, #3
    3c92:	1ac0      	subs	r0, r0, r3
    3c94:	4152      	adcs	r2, r2
    3c96:	0883      	lsrs	r3, r0, #2
    3c98:	428b      	cmp	r3, r1
    3c9a:	d301      	bcc.n	3ca0 <__udivsi3+0xe4>
    3c9c:	008b      	lsls	r3, r1, #2
    3c9e:	1ac0      	subs	r0, r0, r3
    3ca0:	4152      	adcs	r2, r2
    3ca2:	0843      	lsrs	r3, r0, #1
    3ca4:	428b      	cmp	r3, r1
    3ca6:	d301      	bcc.n	3cac <__udivsi3+0xf0>
    3ca8:	004b      	lsls	r3, r1, #1
    3caa:	1ac0      	subs	r0, r0, r3
    3cac:	4152      	adcs	r2, r2
    3cae:	1a41      	subs	r1, r0, r1
    3cb0:	d200      	bcs.n	3cb4 <__udivsi3+0xf8>
    3cb2:	4601      	mov	r1, r0
    3cb4:	4152      	adcs	r2, r2
    3cb6:	4610      	mov	r0, r2
    3cb8:	4770      	bx	lr
    3cba:	e7ff      	b.n	3cbc <__udivsi3+0x100>
    3cbc:	b501      	push	{r0, lr}
    3cbe:	2000      	movs	r0, #0
    3cc0:	f000 f8f0 	bl	3ea4 <__aeabi_idiv0>
    3cc4:	bd02      	pop	{r1, pc}
    3cc6:	46c0      	nop			; (mov r8, r8)

00003cc8 <__aeabi_uidivmod>:
    3cc8:	2900      	cmp	r1, #0
    3cca:	d0f7      	beq.n	3cbc <__udivsi3+0x100>
    3ccc:	e776      	b.n	3bbc <__udivsi3>
    3cce:	4770      	bx	lr

00003cd0 <__divsi3>:
    3cd0:	4603      	mov	r3, r0
    3cd2:	430b      	orrs	r3, r1
    3cd4:	d47f      	bmi.n	3dd6 <__divsi3+0x106>
    3cd6:	2200      	movs	r2, #0
    3cd8:	0843      	lsrs	r3, r0, #1
    3cda:	428b      	cmp	r3, r1
    3cdc:	d374      	bcc.n	3dc8 <__divsi3+0xf8>
    3cde:	0903      	lsrs	r3, r0, #4
    3ce0:	428b      	cmp	r3, r1
    3ce2:	d35f      	bcc.n	3da4 <__divsi3+0xd4>
    3ce4:	0a03      	lsrs	r3, r0, #8
    3ce6:	428b      	cmp	r3, r1
    3ce8:	d344      	bcc.n	3d74 <__divsi3+0xa4>
    3cea:	0b03      	lsrs	r3, r0, #12
    3cec:	428b      	cmp	r3, r1
    3cee:	d328      	bcc.n	3d42 <__divsi3+0x72>
    3cf0:	0c03      	lsrs	r3, r0, #16
    3cf2:	428b      	cmp	r3, r1
    3cf4:	d30d      	bcc.n	3d12 <__divsi3+0x42>
    3cf6:	22ff      	movs	r2, #255	; 0xff
    3cf8:	0209      	lsls	r1, r1, #8
    3cfa:	ba12      	rev	r2, r2
    3cfc:	0c03      	lsrs	r3, r0, #16
    3cfe:	428b      	cmp	r3, r1
    3d00:	d302      	bcc.n	3d08 <__divsi3+0x38>
    3d02:	1212      	asrs	r2, r2, #8
    3d04:	0209      	lsls	r1, r1, #8
    3d06:	d065      	beq.n	3dd4 <__divsi3+0x104>
    3d08:	0b03      	lsrs	r3, r0, #12
    3d0a:	428b      	cmp	r3, r1
    3d0c:	d319      	bcc.n	3d42 <__divsi3+0x72>
    3d0e:	e000      	b.n	3d12 <__divsi3+0x42>
    3d10:	0a09      	lsrs	r1, r1, #8
    3d12:	0bc3      	lsrs	r3, r0, #15
    3d14:	428b      	cmp	r3, r1
    3d16:	d301      	bcc.n	3d1c <__divsi3+0x4c>
    3d18:	03cb      	lsls	r3, r1, #15
    3d1a:	1ac0      	subs	r0, r0, r3
    3d1c:	4152      	adcs	r2, r2
    3d1e:	0b83      	lsrs	r3, r0, #14
    3d20:	428b      	cmp	r3, r1
    3d22:	d301      	bcc.n	3d28 <__divsi3+0x58>
    3d24:	038b      	lsls	r3, r1, #14
    3d26:	1ac0      	subs	r0, r0, r3
    3d28:	4152      	adcs	r2, r2
    3d2a:	0b43      	lsrs	r3, r0, #13
    3d2c:	428b      	cmp	r3, r1
    3d2e:	d301      	bcc.n	3d34 <__divsi3+0x64>
    3d30:	034b      	lsls	r3, r1, #13
    3d32:	1ac0      	subs	r0, r0, r3
    3d34:	4152      	adcs	r2, r2
    3d36:	0b03      	lsrs	r3, r0, #12
    3d38:	428b      	cmp	r3, r1
    3d3a:	d301      	bcc.n	3d40 <__divsi3+0x70>
    3d3c:	030b      	lsls	r3, r1, #12
    3d3e:	1ac0      	subs	r0, r0, r3
    3d40:	4152      	adcs	r2, r2
    3d42:	0ac3      	lsrs	r3, r0, #11
    3d44:	428b      	cmp	r3, r1
    3d46:	d301      	bcc.n	3d4c <__divsi3+0x7c>
    3d48:	02cb      	lsls	r3, r1, #11
    3d4a:	1ac0      	subs	r0, r0, r3
    3d4c:	4152      	adcs	r2, r2
    3d4e:	0a83      	lsrs	r3, r0, #10
    3d50:	428b      	cmp	r3, r1
    3d52:	d301      	bcc.n	3d58 <__divsi3+0x88>
    3d54:	028b      	lsls	r3, r1, #10
    3d56:	1ac0      	subs	r0, r0, r3
    3d58:	4152      	adcs	r2, r2
    3d5a:	0a43      	lsrs	r3, r0, #9
    3d5c:	428b      	cmp	r3, r1
    3d5e:	d301      	bcc.n	3d64 <__divsi3+0x94>
    3d60:	024b      	lsls	r3, r1, #9
    3d62:	1ac0      	subs	r0, r0, r3
    3d64:	4152      	adcs	r2, r2
    3d66:	0a03      	lsrs	r3, r0, #8
    3d68:	428b      	cmp	r3, r1
    3d6a:	d301      	bcc.n	3d70 <__divsi3+0xa0>
    3d6c:	020b      	lsls	r3, r1, #8
    3d6e:	1ac0      	subs	r0, r0, r3
    3d70:	4152      	adcs	r2, r2
    3d72:	d2cd      	bcs.n	3d10 <__divsi3+0x40>
    3d74:	09c3      	lsrs	r3, r0, #7
    3d76:	428b      	cmp	r3, r1
    3d78:	d301      	bcc.n	3d7e <__divsi3+0xae>
    3d7a:	01cb      	lsls	r3, r1, #7
    3d7c:	1ac0      	subs	r0, r0, r3
    3d7e:	4152      	adcs	r2, r2
    3d80:	0983      	lsrs	r3, r0, #6
    3d82:	428b      	cmp	r3, r1
    3d84:	d301      	bcc.n	3d8a <__divsi3+0xba>
    3d86:	018b      	lsls	r3, r1, #6
    3d88:	1ac0      	subs	r0, r0, r3
    3d8a:	4152      	adcs	r2, r2
    3d8c:	0943      	lsrs	r3, r0, #5
    3d8e:	428b      	cmp	r3, r1
    3d90:	d301      	bcc.n	3d96 <__divsi3+0xc6>
    3d92:	014b      	lsls	r3, r1, #5
    3d94:	1ac0      	subs	r0, r0, r3
    3d96:	4152      	adcs	r2, r2
    3d98:	0903      	lsrs	r3, r0, #4
    3d9a:	428b      	cmp	r3, r1
    3d9c:	d301      	bcc.n	3da2 <__divsi3+0xd2>
    3d9e:	010b      	lsls	r3, r1, #4
    3da0:	1ac0      	subs	r0, r0, r3
    3da2:	4152      	adcs	r2, r2
    3da4:	08c3      	lsrs	r3, r0, #3
    3da6:	428b      	cmp	r3, r1
    3da8:	d301      	bcc.n	3dae <__divsi3+0xde>
    3daa:	00cb      	lsls	r3, r1, #3
    3dac:	1ac0      	subs	r0, r0, r3
    3dae:	4152      	adcs	r2, r2
    3db0:	0883      	lsrs	r3, r0, #2
    3db2:	428b      	cmp	r3, r1
    3db4:	d301      	bcc.n	3dba <__divsi3+0xea>
    3db6:	008b      	lsls	r3, r1, #2
    3db8:	1ac0      	subs	r0, r0, r3
    3dba:	4152      	adcs	r2, r2
    3dbc:	0843      	lsrs	r3, r0, #1
    3dbe:	428b      	cmp	r3, r1
    3dc0:	d301      	bcc.n	3dc6 <__divsi3+0xf6>
    3dc2:	004b      	lsls	r3, r1, #1
    3dc4:	1ac0      	subs	r0, r0, r3
    3dc6:	4152      	adcs	r2, r2
    3dc8:	1a41      	subs	r1, r0, r1
    3dca:	d200      	bcs.n	3dce <__divsi3+0xfe>
    3dcc:	4601      	mov	r1, r0
    3dce:	4152      	adcs	r2, r2
    3dd0:	4610      	mov	r0, r2
    3dd2:	4770      	bx	lr
    3dd4:	e05d      	b.n	3e92 <__divsi3+0x1c2>
    3dd6:	0fca      	lsrs	r2, r1, #31
    3dd8:	d000      	beq.n	3ddc <__divsi3+0x10c>
    3dda:	4249      	negs	r1, r1
    3ddc:	1003      	asrs	r3, r0, #32
    3dde:	d300      	bcc.n	3de2 <__divsi3+0x112>
    3de0:	4240      	negs	r0, r0
    3de2:	4053      	eors	r3, r2
    3de4:	2200      	movs	r2, #0
    3de6:	469c      	mov	ip, r3
    3de8:	0903      	lsrs	r3, r0, #4
    3dea:	428b      	cmp	r3, r1
    3dec:	d32d      	bcc.n	3e4a <__divsi3+0x17a>
    3dee:	0a03      	lsrs	r3, r0, #8
    3df0:	428b      	cmp	r3, r1
    3df2:	d312      	bcc.n	3e1a <__divsi3+0x14a>
    3df4:	22fc      	movs	r2, #252	; 0xfc
    3df6:	0189      	lsls	r1, r1, #6
    3df8:	ba12      	rev	r2, r2
    3dfa:	0a03      	lsrs	r3, r0, #8
    3dfc:	428b      	cmp	r3, r1
    3dfe:	d30c      	bcc.n	3e1a <__divsi3+0x14a>
    3e00:	0189      	lsls	r1, r1, #6
    3e02:	1192      	asrs	r2, r2, #6
    3e04:	428b      	cmp	r3, r1
    3e06:	d308      	bcc.n	3e1a <__divsi3+0x14a>
    3e08:	0189      	lsls	r1, r1, #6
    3e0a:	1192      	asrs	r2, r2, #6
    3e0c:	428b      	cmp	r3, r1
    3e0e:	d304      	bcc.n	3e1a <__divsi3+0x14a>
    3e10:	0189      	lsls	r1, r1, #6
    3e12:	d03a      	beq.n	3e8a <__divsi3+0x1ba>
    3e14:	1192      	asrs	r2, r2, #6
    3e16:	e000      	b.n	3e1a <__divsi3+0x14a>
    3e18:	0989      	lsrs	r1, r1, #6
    3e1a:	09c3      	lsrs	r3, r0, #7
    3e1c:	428b      	cmp	r3, r1
    3e1e:	d301      	bcc.n	3e24 <__divsi3+0x154>
    3e20:	01cb      	lsls	r3, r1, #7
    3e22:	1ac0      	subs	r0, r0, r3
    3e24:	4152      	adcs	r2, r2
    3e26:	0983      	lsrs	r3, r0, #6
    3e28:	428b      	cmp	r3, r1
    3e2a:	d301      	bcc.n	3e30 <__divsi3+0x160>
    3e2c:	018b      	lsls	r3, r1, #6
    3e2e:	1ac0      	subs	r0, r0, r3
    3e30:	4152      	adcs	r2, r2
    3e32:	0943      	lsrs	r3, r0, #5
    3e34:	428b      	cmp	r3, r1
    3e36:	d301      	bcc.n	3e3c <__divsi3+0x16c>
    3e38:	014b      	lsls	r3, r1, #5
    3e3a:	1ac0      	subs	r0, r0, r3
    3e3c:	4152      	adcs	r2, r2
    3e3e:	0903      	lsrs	r3, r0, #4
    3e40:	428b      	cmp	r3, r1
    3e42:	d301      	bcc.n	3e48 <__divsi3+0x178>
    3e44:	010b      	lsls	r3, r1, #4
    3e46:	1ac0      	subs	r0, r0, r3
    3e48:	4152      	adcs	r2, r2
    3e4a:	08c3      	lsrs	r3, r0, #3
    3e4c:	428b      	cmp	r3, r1
    3e4e:	d301      	bcc.n	3e54 <__divsi3+0x184>
    3e50:	00cb      	lsls	r3, r1, #3
    3e52:	1ac0      	subs	r0, r0, r3
    3e54:	4152      	adcs	r2, r2
    3e56:	0883      	lsrs	r3, r0, #2
    3e58:	428b      	cmp	r3, r1
    3e5a:	d301      	bcc.n	3e60 <__divsi3+0x190>
    3e5c:	008b      	lsls	r3, r1, #2
    3e5e:	1ac0      	subs	r0, r0, r3
    3e60:	4152      	adcs	r2, r2
    3e62:	d2d9      	bcs.n	3e18 <__divsi3+0x148>
    3e64:	0843      	lsrs	r3, r0, #1
    3e66:	428b      	cmp	r3, r1
    3e68:	d301      	bcc.n	3e6e <__divsi3+0x19e>
    3e6a:	004b      	lsls	r3, r1, #1
    3e6c:	1ac0      	subs	r0, r0, r3
    3e6e:	4152      	adcs	r2, r2
    3e70:	1a41      	subs	r1, r0, r1
    3e72:	d200      	bcs.n	3e76 <__divsi3+0x1a6>
    3e74:	4601      	mov	r1, r0
    3e76:	4663      	mov	r3, ip
    3e78:	4152      	adcs	r2, r2
    3e7a:	105b      	asrs	r3, r3, #1
    3e7c:	4610      	mov	r0, r2
    3e7e:	d301      	bcc.n	3e84 <__divsi3+0x1b4>
    3e80:	4240      	negs	r0, r0
    3e82:	2b00      	cmp	r3, #0
    3e84:	d500      	bpl.n	3e88 <__divsi3+0x1b8>
    3e86:	4249      	negs	r1, r1
    3e88:	4770      	bx	lr
    3e8a:	4663      	mov	r3, ip
    3e8c:	105b      	asrs	r3, r3, #1
    3e8e:	d300      	bcc.n	3e92 <__divsi3+0x1c2>
    3e90:	4240      	negs	r0, r0
    3e92:	b501      	push	{r0, lr}
    3e94:	2000      	movs	r0, #0
    3e96:	f000 f805 	bl	3ea4 <__aeabi_idiv0>
    3e9a:	bd02      	pop	{r1, pc}

00003e9c <__aeabi_idivmod>:
    3e9c:	2900      	cmp	r1, #0
    3e9e:	d0f8      	beq.n	3e92 <__divsi3+0x1c2>
    3ea0:	e716      	b.n	3cd0 <__divsi3>
    3ea2:	4770      	bx	lr

00003ea4 <__aeabi_idiv0>:
    3ea4:	4770      	bx	lr
    3ea6:	46c0      	nop			; (mov r8, r8)

00003ea8 <__aeabi_cfrcmple>:
    3ea8:	4684      	mov	ip, r0
    3eaa:	1c08      	adds	r0, r1, #0
    3eac:	4661      	mov	r1, ip
    3eae:	e7ff      	b.n	3eb0 <__aeabi_cfcmpeq>

00003eb0 <__aeabi_cfcmpeq>:
    3eb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3eb2:	f000 fb2d 	bl	4510 <__lesf2>
    3eb6:	2800      	cmp	r0, #0
    3eb8:	d401      	bmi.n	3ebe <__aeabi_cfcmpeq+0xe>
    3eba:	2100      	movs	r1, #0
    3ebc:	42c8      	cmn	r0, r1
    3ebe:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003ec0 <__aeabi_fcmpeq>:
    3ec0:	b510      	push	{r4, lr}
    3ec2:	f000 fabf 	bl	4444 <__eqsf2>
    3ec6:	4240      	negs	r0, r0
    3ec8:	3001      	adds	r0, #1
    3eca:	bd10      	pop	{r4, pc}

00003ecc <__aeabi_fcmplt>:
    3ecc:	b510      	push	{r4, lr}
    3ece:	f000 fb1f 	bl	4510 <__lesf2>
    3ed2:	2800      	cmp	r0, #0
    3ed4:	db01      	blt.n	3eda <__aeabi_fcmplt+0xe>
    3ed6:	2000      	movs	r0, #0
    3ed8:	bd10      	pop	{r4, pc}
    3eda:	2001      	movs	r0, #1
    3edc:	bd10      	pop	{r4, pc}
    3ede:	46c0      	nop			; (mov r8, r8)

00003ee0 <__aeabi_fcmple>:
    3ee0:	b510      	push	{r4, lr}
    3ee2:	f000 fb15 	bl	4510 <__lesf2>
    3ee6:	2800      	cmp	r0, #0
    3ee8:	dd01      	ble.n	3eee <__aeabi_fcmple+0xe>
    3eea:	2000      	movs	r0, #0
    3eec:	bd10      	pop	{r4, pc}
    3eee:	2001      	movs	r0, #1
    3ef0:	bd10      	pop	{r4, pc}
    3ef2:	46c0      	nop			; (mov r8, r8)

00003ef4 <__aeabi_fcmpgt>:
    3ef4:	b510      	push	{r4, lr}
    3ef6:	f000 facb 	bl	4490 <__gesf2>
    3efa:	2800      	cmp	r0, #0
    3efc:	dc01      	bgt.n	3f02 <__aeabi_fcmpgt+0xe>
    3efe:	2000      	movs	r0, #0
    3f00:	bd10      	pop	{r4, pc}
    3f02:	2001      	movs	r0, #1
    3f04:	bd10      	pop	{r4, pc}
    3f06:	46c0      	nop			; (mov r8, r8)

00003f08 <__aeabi_fcmpge>:
    3f08:	b510      	push	{r4, lr}
    3f0a:	f000 fac1 	bl	4490 <__gesf2>
    3f0e:	2800      	cmp	r0, #0
    3f10:	da01      	bge.n	3f16 <__aeabi_fcmpge+0xe>
    3f12:	2000      	movs	r0, #0
    3f14:	bd10      	pop	{r4, pc}
    3f16:	2001      	movs	r0, #1
    3f18:	bd10      	pop	{r4, pc}
    3f1a:	46c0      	nop			; (mov r8, r8)

00003f1c <__aeabi_uldivmod>:
    3f1c:	2b00      	cmp	r3, #0
    3f1e:	d111      	bne.n	3f44 <__aeabi_uldivmod+0x28>
    3f20:	2a00      	cmp	r2, #0
    3f22:	d10f      	bne.n	3f44 <__aeabi_uldivmod+0x28>
    3f24:	2900      	cmp	r1, #0
    3f26:	d100      	bne.n	3f2a <__aeabi_uldivmod+0xe>
    3f28:	2800      	cmp	r0, #0
    3f2a:	d002      	beq.n	3f32 <__aeabi_uldivmod+0x16>
    3f2c:	2100      	movs	r1, #0
    3f2e:	43c9      	mvns	r1, r1
    3f30:	1c08      	adds	r0, r1, #0
    3f32:	b407      	push	{r0, r1, r2}
    3f34:	4802      	ldr	r0, [pc, #8]	; (3f40 <__aeabi_uldivmod+0x24>)
    3f36:	a102      	add	r1, pc, #8	; (adr r1, 3f40 <__aeabi_uldivmod+0x24>)
    3f38:	1840      	adds	r0, r0, r1
    3f3a:	9002      	str	r0, [sp, #8]
    3f3c:	bd03      	pop	{r0, r1, pc}
    3f3e:	46c0      	nop			; (mov r8, r8)
    3f40:	ffffff65 	.word	0xffffff65
    3f44:	b403      	push	{r0, r1}
    3f46:	4668      	mov	r0, sp
    3f48:	b501      	push	{r0, lr}
    3f4a:	9802      	ldr	r0, [sp, #8]
    3f4c:	f000 f828 	bl	3fa0 <__udivmoddi4>
    3f50:	9b01      	ldr	r3, [sp, #4]
    3f52:	469e      	mov	lr, r3
    3f54:	b002      	add	sp, #8
    3f56:	bc0c      	pop	{r2, r3}
    3f58:	4770      	bx	lr
    3f5a:	46c0      	nop			; (mov r8, r8)

00003f5c <__ffssi2>:
    3f5c:	b510      	push	{r4, lr}
    3f5e:	2300      	movs	r3, #0
    3f60:	2800      	cmp	r0, #0
    3f62:	d002      	beq.n	3f6a <__ffssi2+0xe>
    3f64:	f002 f944 	bl	61f0 <__ctzsi2>
    3f68:	1c43      	adds	r3, r0, #1
    3f6a:	0018      	movs	r0, r3
    3f6c:	bd10      	pop	{r4, pc}
    3f6e:	46c0      	nop			; (mov r8, r8)

00003f70 <__aeabi_f2uiz>:
    3f70:	219e      	movs	r1, #158	; 0x9e
    3f72:	b510      	push	{r4, lr}
    3f74:	05c9      	lsls	r1, r1, #23
    3f76:	1c04      	adds	r4, r0, #0
    3f78:	f7ff ffc6 	bl	3f08 <__aeabi_fcmpge>
    3f7c:	2800      	cmp	r0, #0
    3f7e:	d103      	bne.n	3f88 <__aeabi_f2uiz+0x18>
    3f80:	1c20      	adds	r0, r4, #0
    3f82:	f000 fdc3 	bl	4b0c <__aeabi_f2iz>
    3f86:	bd10      	pop	{r4, pc}
    3f88:	219e      	movs	r1, #158	; 0x9e
    3f8a:	1c20      	adds	r0, r4, #0
    3f8c:	05c9      	lsls	r1, r1, #23
    3f8e:	f000 fc21 	bl	47d4 <__aeabi_fsub>
    3f92:	f000 fdbb 	bl	4b0c <__aeabi_f2iz>
    3f96:	2380      	movs	r3, #128	; 0x80
    3f98:	061b      	lsls	r3, r3, #24
    3f9a:	469c      	mov	ip, r3
    3f9c:	4460      	add	r0, ip
    3f9e:	e7f2      	b.n	3f86 <__aeabi_f2uiz+0x16>

00003fa0 <__udivmoddi4>:
    3fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fa2:	4657      	mov	r7, sl
    3fa4:	464e      	mov	r6, r9
    3fa6:	4645      	mov	r5, r8
    3fa8:	46de      	mov	lr, fp
    3faa:	b5e0      	push	{r5, r6, r7, lr}
    3fac:	0004      	movs	r4, r0
    3fae:	b083      	sub	sp, #12
    3fb0:	000d      	movs	r5, r1
    3fb2:	4692      	mov	sl, r2
    3fb4:	4699      	mov	r9, r3
    3fb6:	428b      	cmp	r3, r1
    3fb8:	d82f      	bhi.n	401a <__udivmoddi4+0x7a>
    3fba:	d02c      	beq.n	4016 <__udivmoddi4+0x76>
    3fbc:	4649      	mov	r1, r9
    3fbe:	4650      	mov	r0, sl
    3fc0:	f002 f90a 	bl	61d8 <__clzdi2>
    3fc4:	0029      	movs	r1, r5
    3fc6:	0006      	movs	r6, r0
    3fc8:	0020      	movs	r0, r4
    3fca:	f002 f905 	bl	61d8 <__clzdi2>
    3fce:	1a33      	subs	r3, r6, r0
    3fd0:	4698      	mov	r8, r3
    3fd2:	3b20      	subs	r3, #32
    3fd4:	469b      	mov	fp, r3
    3fd6:	d500      	bpl.n	3fda <__udivmoddi4+0x3a>
    3fd8:	e074      	b.n	40c4 <__udivmoddi4+0x124>
    3fda:	4653      	mov	r3, sl
    3fdc:	465a      	mov	r2, fp
    3fde:	4093      	lsls	r3, r2
    3fe0:	001f      	movs	r7, r3
    3fe2:	4653      	mov	r3, sl
    3fe4:	4642      	mov	r2, r8
    3fe6:	4093      	lsls	r3, r2
    3fe8:	001e      	movs	r6, r3
    3fea:	42af      	cmp	r7, r5
    3fec:	d829      	bhi.n	4042 <__udivmoddi4+0xa2>
    3fee:	d026      	beq.n	403e <__udivmoddi4+0x9e>
    3ff0:	465b      	mov	r3, fp
    3ff2:	1ba4      	subs	r4, r4, r6
    3ff4:	41bd      	sbcs	r5, r7
    3ff6:	2b00      	cmp	r3, #0
    3ff8:	da00      	bge.n	3ffc <__udivmoddi4+0x5c>
    3ffa:	e079      	b.n	40f0 <__udivmoddi4+0x150>
    3ffc:	2200      	movs	r2, #0
    3ffe:	2300      	movs	r3, #0
    4000:	9200      	str	r2, [sp, #0]
    4002:	9301      	str	r3, [sp, #4]
    4004:	2301      	movs	r3, #1
    4006:	465a      	mov	r2, fp
    4008:	4093      	lsls	r3, r2
    400a:	9301      	str	r3, [sp, #4]
    400c:	2301      	movs	r3, #1
    400e:	4642      	mov	r2, r8
    4010:	4093      	lsls	r3, r2
    4012:	9300      	str	r3, [sp, #0]
    4014:	e019      	b.n	404a <__udivmoddi4+0xaa>
    4016:	4282      	cmp	r2, r0
    4018:	d9d0      	bls.n	3fbc <__udivmoddi4+0x1c>
    401a:	2200      	movs	r2, #0
    401c:	2300      	movs	r3, #0
    401e:	9200      	str	r2, [sp, #0]
    4020:	9301      	str	r3, [sp, #4]
    4022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4024:	2b00      	cmp	r3, #0
    4026:	d001      	beq.n	402c <__udivmoddi4+0x8c>
    4028:	601c      	str	r4, [r3, #0]
    402a:	605d      	str	r5, [r3, #4]
    402c:	9800      	ldr	r0, [sp, #0]
    402e:	9901      	ldr	r1, [sp, #4]
    4030:	b003      	add	sp, #12
    4032:	bc3c      	pop	{r2, r3, r4, r5}
    4034:	4690      	mov	r8, r2
    4036:	4699      	mov	r9, r3
    4038:	46a2      	mov	sl, r4
    403a:	46ab      	mov	fp, r5
    403c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    403e:	42a3      	cmp	r3, r4
    4040:	d9d6      	bls.n	3ff0 <__udivmoddi4+0x50>
    4042:	2200      	movs	r2, #0
    4044:	2300      	movs	r3, #0
    4046:	9200      	str	r2, [sp, #0]
    4048:	9301      	str	r3, [sp, #4]
    404a:	4643      	mov	r3, r8
    404c:	2b00      	cmp	r3, #0
    404e:	d0e8      	beq.n	4022 <__udivmoddi4+0x82>
    4050:	07fb      	lsls	r3, r7, #31
    4052:	0872      	lsrs	r2, r6, #1
    4054:	431a      	orrs	r2, r3
    4056:	4646      	mov	r6, r8
    4058:	087b      	lsrs	r3, r7, #1
    405a:	e00e      	b.n	407a <__udivmoddi4+0xda>
    405c:	42ab      	cmp	r3, r5
    405e:	d101      	bne.n	4064 <__udivmoddi4+0xc4>
    4060:	42a2      	cmp	r2, r4
    4062:	d80c      	bhi.n	407e <__udivmoddi4+0xde>
    4064:	1aa4      	subs	r4, r4, r2
    4066:	419d      	sbcs	r5, r3
    4068:	2001      	movs	r0, #1
    406a:	1924      	adds	r4, r4, r4
    406c:	416d      	adcs	r5, r5
    406e:	2100      	movs	r1, #0
    4070:	3e01      	subs	r6, #1
    4072:	1824      	adds	r4, r4, r0
    4074:	414d      	adcs	r5, r1
    4076:	2e00      	cmp	r6, #0
    4078:	d006      	beq.n	4088 <__udivmoddi4+0xe8>
    407a:	42ab      	cmp	r3, r5
    407c:	d9ee      	bls.n	405c <__udivmoddi4+0xbc>
    407e:	3e01      	subs	r6, #1
    4080:	1924      	adds	r4, r4, r4
    4082:	416d      	adcs	r5, r5
    4084:	2e00      	cmp	r6, #0
    4086:	d1f8      	bne.n	407a <__udivmoddi4+0xda>
    4088:	465b      	mov	r3, fp
    408a:	9800      	ldr	r0, [sp, #0]
    408c:	9901      	ldr	r1, [sp, #4]
    408e:	1900      	adds	r0, r0, r4
    4090:	4169      	adcs	r1, r5
    4092:	2b00      	cmp	r3, #0
    4094:	db22      	blt.n	40dc <__udivmoddi4+0x13c>
    4096:	002b      	movs	r3, r5
    4098:	465a      	mov	r2, fp
    409a:	40d3      	lsrs	r3, r2
    409c:	002a      	movs	r2, r5
    409e:	4644      	mov	r4, r8
    40a0:	40e2      	lsrs	r2, r4
    40a2:	001c      	movs	r4, r3
    40a4:	465b      	mov	r3, fp
    40a6:	0015      	movs	r5, r2
    40a8:	2b00      	cmp	r3, #0
    40aa:	db2c      	blt.n	4106 <__udivmoddi4+0x166>
    40ac:	0026      	movs	r6, r4
    40ae:	409e      	lsls	r6, r3
    40b0:	0033      	movs	r3, r6
    40b2:	0026      	movs	r6, r4
    40b4:	4647      	mov	r7, r8
    40b6:	40be      	lsls	r6, r7
    40b8:	0032      	movs	r2, r6
    40ba:	1a80      	subs	r0, r0, r2
    40bc:	4199      	sbcs	r1, r3
    40be:	9000      	str	r0, [sp, #0]
    40c0:	9101      	str	r1, [sp, #4]
    40c2:	e7ae      	b.n	4022 <__udivmoddi4+0x82>
    40c4:	4642      	mov	r2, r8
    40c6:	2320      	movs	r3, #32
    40c8:	1a9b      	subs	r3, r3, r2
    40ca:	4652      	mov	r2, sl
    40cc:	40da      	lsrs	r2, r3
    40ce:	4641      	mov	r1, r8
    40d0:	0013      	movs	r3, r2
    40d2:	464a      	mov	r2, r9
    40d4:	408a      	lsls	r2, r1
    40d6:	0017      	movs	r7, r2
    40d8:	431f      	orrs	r7, r3
    40da:	e782      	b.n	3fe2 <__udivmoddi4+0x42>
    40dc:	4642      	mov	r2, r8
    40de:	2320      	movs	r3, #32
    40e0:	1a9b      	subs	r3, r3, r2
    40e2:	002a      	movs	r2, r5
    40e4:	4646      	mov	r6, r8
    40e6:	409a      	lsls	r2, r3
    40e8:	0023      	movs	r3, r4
    40ea:	40f3      	lsrs	r3, r6
    40ec:	4313      	orrs	r3, r2
    40ee:	e7d5      	b.n	409c <__udivmoddi4+0xfc>
    40f0:	4642      	mov	r2, r8
    40f2:	2320      	movs	r3, #32
    40f4:	2100      	movs	r1, #0
    40f6:	1a9b      	subs	r3, r3, r2
    40f8:	2200      	movs	r2, #0
    40fa:	9100      	str	r1, [sp, #0]
    40fc:	9201      	str	r2, [sp, #4]
    40fe:	2201      	movs	r2, #1
    4100:	40da      	lsrs	r2, r3
    4102:	9201      	str	r2, [sp, #4]
    4104:	e782      	b.n	400c <__udivmoddi4+0x6c>
    4106:	4642      	mov	r2, r8
    4108:	2320      	movs	r3, #32
    410a:	0026      	movs	r6, r4
    410c:	1a9b      	subs	r3, r3, r2
    410e:	40de      	lsrs	r6, r3
    4110:	002f      	movs	r7, r5
    4112:	46b4      	mov	ip, r6
    4114:	4097      	lsls	r7, r2
    4116:	4666      	mov	r6, ip
    4118:	003b      	movs	r3, r7
    411a:	4333      	orrs	r3, r6
    411c:	e7c9      	b.n	40b2 <__udivmoddi4+0x112>
    411e:	46c0      	nop			; (mov r8, r8)

00004120 <__aeabi_fadd>:
    4120:	b5f0      	push	{r4, r5, r6, r7, lr}
    4122:	46c6      	mov	lr, r8
    4124:	024e      	lsls	r6, r1, #9
    4126:	0247      	lsls	r7, r0, #9
    4128:	0a76      	lsrs	r6, r6, #9
    412a:	0a7b      	lsrs	r3, r7, #9
    412c:	0044      	lsls	r4, r0, #1
    412e:	0fc5      	lsrs	r5, r0, #31
    4130:	00f7      	lsls	r7, r6, #3
    4132:	0048      	lsls	r0, r1, #1
    4134:	4698      	mov	r8, r3
    4136:	b500      	push	{lr}
    4138:	0e24      	lsrs	r4, r4, #24
    413a:	002a      	movs	r2, r5
    413c:	00db      	lsls	r3, r3, #3
    413e:	0e00      	lsrs	r0, r0, #24
    4140:	0fc9      	lsrs	r1, r1, #31
    4142:	46bc      	mov	ip, r7
    4144:	428d      	cmp	r5, r1
    4146:	d067      	beq.n	4218 <__aeabi_fadd+0xf8>
    4148:	1a22      	subs	r2, r4, r0
    414a:	2a00      	cmp	r2, #0
    414c:	dc00      	bgt.n	4150 <__aeabi_fadd+0x30>
    414e:	e0a5      	b.n	429c <__aeabi_fadd+0x17c>
    4150:	2800      	cmp	r0, #0
    4152:	d13a      	bne.n	41ca <__aeabi_fadd+0xaa>
    4154:	2f00      	cmp	r7, #0
    4156:	d100      	bne.n	415a <__aeabi_fadd+0x3a>
    4158:	e093      	b.n	4282 <__aeabi_fadd+0x162>
    415a:	1e51      	subs	r1, r2, #1
    415c:	2900      	cmp	r1, #0
    415e:	d000      	beq.n	4162 <__aeabi_fadd+0x42>
    4160:	e0bc      	b.n	42dc <__aeabi_fadd+0x1bc>
    4162:	2401      	movs	r4, #1
    4164:	1bdb      	subs	r3, r3, r7
    4166:	015a      	lsls	r2, r3, #5
    4168:	d546      	bpl.n	41f8 <__aeabi_fadd+0xd8>
    416a:	019b      	lsls	r3, r3, #6
    416c:	099e      	lsrs	r6, r3, #6
    416e:	0030      	movs	r0, r6
    4170:	f002 f814 	bl	619c <__clzsi2>
    4174:	3805      	subs	r0, #5
    4176:	4086      	lsls	r6, r0
    4178:	4284      	cmp	r4, r0
    417a:	dd00      	ble.n	417e <__aeabi_fadd+0x5e>
    417c:	e09d      	b.n	42ba <__aeabi_fadd+0x19a>
    417e:	1b04      	subs	r4, r0, r4
    4180:	0032      	movs	r2, r6
    4182:	2020      	movs	r0, #32
    4184:	3401      	adds	r4, #1
    4186:	40e2      	lsrs	r2, r4
    4188:	1b04      	subs	r4, r0, r4
    418a:	40a6      	lsls	r6, r4
    418c:	0033      	movs	r3, r6
    418e:	1e5e      	subs	r6, r3, #1
    4190:	41b3      	sbcs	r3, r6
    4192:	2400      	movs	r4, #0
    4194:	4313      	orrs	r3, r2
    4196:	075a      	lsls	r2, r3, #29
    4198:	d004      	beq.n	41a4 <__aeabi_fadd+0x84>
    419a:	220f      	movs	r2, #15
    419c:	401a      	ands	r2, r3
    419e:	2a04      	cmp	r2, #4
    41a0:	d000      	beq.n	41a4 <__aeabi_fadd+0x84>
    41a2:	3304      	adds	r3, #4
    41a4:	015a      	lsls	r2, r3, #5
    41a6:	d529      	bpl.n	41fc <__aeabi_fadd+0xdc>
    41a8:	3401      	adds	r4, #1
    41aa:	2cff      	cmp	r4, #255	; 0xff
    41ac:	d100      	bne.n	41b0 <__aeabi_fadd+0x90>
    41ae:	e081      	b.n	42b4 <__aeabi_fadd+0x194>
    41b0:	002a      	movs	r2, r5
    41b2:	019b      	lsls	r3, r3, #6
    41b4:	0a5b      	lsrs	r3, r3, #9
    41b6:	b2e4      	uxtb	r4, r4
    41b8:	025b      	lsls	r3, r3, #9
    41ba:	05e4      	lsls	r4, r4, #23
    41bc:	0a58      	lsrs	r0, r3, #9
    41be:	07d2      	lsls	r2, r2, #31
    41c0:	4320      	orrs	r0, r4
    41c2:	4310      	orrs	r0, r2
    41c4:	bc04      	pop	{r2}
    41c6:	4690      	mov	r8, r2
    41c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41ca:	2cff      	cmp	r4, #255	; 0xff
    41cc:	d0e3      	beq.n	4196 <__aeabi_fadd+0x76>
    41ce:	2180      	movs	r1, #128	; 0x80
    41d0:	0038      	movs	r0, r7
    41d2:	04c9      	lsls	r1, r1, #19
    41d4:	4308      	orrs	r0, r1
    41d6:	4684      	mov	ip, r0
    41d8:	2a1b      	cmp	r2, #27
    41da:	dd00      	ble.n	41de <__aeabi_fadd+0xbe>
    41dc:	e082      	b.n	42e4 <__aeabi_fadd+0x1c4>
    41de:	2020      	movs	r0, #32
    41e0:	4661      	mov	r1, ip
    41e2:	40d1      	lsrs	r1, r2
    41e4:	1a82      	subs	r2, r0, r2
    41e6:	4660      	mov	r0, ip
    41e8:	4090      	lsls	r0, r2
    41ea:	0002      	movs	r2, r0
    41ec:	1e50      	subs	r0, r2, #1
    41ee:	4182      	sbcs	r2, r0
    41f0:	430a      	orrs	r2, r1
    41f2:	1a9b      	subs	r3, r3, r2
    41f4:	015a      	lsls	r2, r3, #5
    41f6:	d4b8      	bmi.n	416a <__aeabi_fadd+0x4a>
    41f8:	075a      	lsls	r2, r3, #29
    41fa:	d1ce      	bne.n	419a <__aeabi_fadd+0x7a>
    41fc:	08de      	lsrs	r6, r3, #3
    41fe:	002a      	movs	r2, r5
    4200:	2cff      	cmp	r4, #255	; 0xff
    4202:	d13a      	bne.n	427a <__aeabi_fadd+0x15a>
    4204:	2e00      	cmp	r6, #0
    4206:	d100      	bne.n	420a <__aeabi_fadd+0xea>
    4208:	e0ae      	b.n	4368 <__aeabi_fadd+0x248>
    420a:	2380      	movs	r3, #128	; 0x80
    420c:	03db      	lsls	r3, r3, #15
    420e:	4333      	orrs	r3, r6
    4210:	025b      	lsls	r3, r3, #9
    4212:	0a5b      	lsrs	r3, r3, #9
    4214:	24ff      	movs	r4, #255	; 0xff
    4216:	e7cf      	b.n	41b8 <__aeabi_fadd+0x98>
    4218:	1a21      	subs	r1, r4, r0
    421a:	2900      	cmp	r1, #0
    421c:	dd52      	ble.n	42c4 <__aeabi_fadd+0x1a4>
    421e:	2800      	cmp	r0, #0
    4220:	d031      	beq.n	4286 <__aeabi_fadd+0x166>
    4222:	2cff      	cmp	r4, #255	; 0xff
    4224:	d0b7      	beq.n	4196 <__aeabi_fadd+0x76>
    4226:	2080      	movs	r0, #128	; 0x80
    4228:	003e      	movs	r6, r7
    422a:	04c0      	lsls	r0, r0, #19
    422c:	4306      	orrs	r6, r0
    422e:	46b4      	mov	ip, r6
    4230:	291b      	cmp	r1, #27
    4232:	dd00      	ble.n	4236 <__aeabi_fadd+0x116>
    4234:	e0aa      	b.n	438c <__aeabi_fadd+0x26c>
    4236:	2620      	movs	r6, #32
    4238:	4660      	mov	r0, ip
    423a:	40c8      	lsrs	r0, r1
    423c:	1a71      	subs	r1, r6, r1
    423e:	4666      	mov	r6, ip
    4240:	408e      	lsls	r6, r1
    4242:	0031      	movs	r1, r6
    4244:	1e4e      	subs	r6, r1, #1
    4246:	41b1      	sbcs	r1, r6
    4248:	4301      	orrs	r1, r0
    424a:	185b      	adds	r3, r3, r1
    424c:	0159      	lsls	r1, r3, #5
    424e:	d5d3      	bpl.n	41f8 <__aeabi_fadd+0xd8>
    4250:	3401      	adds	r4, #1
    4252:	2cff      	cmp	r4, #255	; 0xff
    4254:	d100      	bne.n	4258 <__aeabi_fadd+0x138>
    4256:	e087      	b.n	4368 <__aeabi_fadd+0x248>
    4258:	2201      	movs	r2, #1
    425a:	4978      	ldr	r1, [pc, #480]	; (443c <__aeabi_fadd+0x31c>)
    425c:	401a      	ands	r2, r3
    425e:	085b      	lsrs	r3, r3, #1
    4260:	400b      	ands	r3, r1
    4262:	4313      	orrs	r3, r2
    4264:	e797      	b.n	4196 <__aeabi_fadd+0x76>
    4266:	2c00      	cmp	r4, #0
    4268:	d000      	beq.n	426c <__aeabi_fadd+0x14c>
    426a:	e0a7      	b.n	43bc <__aeabi_fadd+0x29c>
    426c:	2b00      	cmp	r3, #0
    426e:	d000      	beq.n	4272 <__aeabi_fadd+0x152>
    4270:	e0b6      	b.n	43e0 <__aeabi_fadd+0x2c0>
    4272:	1e3b      	subs	r3, r7, #0
    4274:	d162      	bne.n	433c <__aeabi_fadd+0x21c>
    4276:	2600      	movs	r6, #0
    4278:	2200      	movs	r2, #0
    427a:	0273      	lsls	r3, r6, #9
    427c:	0a5b      	lsrs	r3, r3, #9
    427e:	b2e4      	uxtb	r4, r4
    4280:	e79a      	b.n	41b8 <__aeabi_fadd+0x98>
    4282:	0014      	movs	r4, r2
    4284:	e787      	b.n	4196 <__aeabi_fadd+0x76>
    4286:	2f00      	cmp	r7, #0
    4288:	d04d      	beq.n	4326 <__aeabi_fadd+0x206>
    428a:	1e48      	subs	r0, r1, #1
    428c:	2800      	cmp	r0, #0
    428e:	d157      	bne.n	4340 <__aeabi_fadd+0x220>
    4290:	4463      	add	r3, ip
    4292:	2401      	movs	r4, #1
    4294:	015a      	lsls	r2, r3, #5
    4296:	d5af      	bpl.n	41f8 <__aeabi_fadd+0xd8>
    4298:	2402      	movs	r4, #2
    429a:	e7dd      	b.n	4258 <__aeabi_fadd+0x138>
    429c:	2a00      	cmp	r2, #0
    429e:	d124      	bne.n	42ea <__aeabi_fadd+0x1ca>
    42a0:	1c62      	adds	r2, r4, #1
    42a2:	b2d2      	uxtb	r2, r2
    42a4:	2a01      	cmp	r2, #1
    42a6:	ddde      	ble.n	4266 <__aeabi_fadd+0x146>
    42a8:	1bde      	subs	r6, r3, r7
    42aa:	0172      	lsls	r2, r6, #5
    42ac:	d535      	bpl.n	431a <__aeabi_fadd+0x1fa>
    42ae:	1afe      	subs	r6, r7, r3
    42b0:	000d      	movs	r5, r1
    42b2:	e75c      	b.n	416e <__aeabi_fadd+0x4e>
    42b4:	002a      	movs	r2, r5
    42b6:	2300      	movs	r3, #0
    42b8:	e77e      	b.n	41b8 <__aeabi_fadd+0x98>
    42ba:	0033      	movs	r3, r6
    42bc:	4a60      	ldr	r2, [pc, #384]	; (4440 <__aeabi_fadd+0x320>)
    42be:	1a24      	subs	r4, r4, r0
    42c0:	4013      	ands	r3, r2
    42c2:	e768      	b.n	4196 <__aeabi_fadd+0x76>
    42c4:	2900      	cmp	r1, #0
    42c6:	d163      	bne.n	4390 <__aeabi_fadd+0x270>
    42c8:	1c61      	adds	r1, r4, #1
    42ca:	b2c8      	uxtb	r0, r1
    42cc:	2801      	cmp	r0, #1
    42ce:	dd4e      	ble.n	436e <__aeabi_fadd+0x24e>
    42d0:	29ff      	cmp	r1, #255	; 0xff
    42d2:	d049      	beq.n	4368 <__aeabi_fadd+0x248>
    42d4:	4463      	add	r3, ip
    42d6:	085b      	lsrs	r3, r3, #1
    42d8:	000c      	movs	r4, r1
    42da:	e75c      	b.n	4196 <__aeabi_fadd+0x76>
    42dc:	2aff      	cmp	r2, #255	; 0xff
    42de:	d041      	beq.n	4364 <__aeabi_fadd+0x244>
    42e0:	000a      	movs	r2, r1
    42e2:	e779      	b.n	41d8 <__aeabi_fadd+0xb8>
    42e4:	2201      	movs	r2, #1
    42e6:	1a9b      	subs	r3, r3, r2
    42e8:	e784      	b.n	41f4 <__aeabi_fadd+0xd4>
    42ea:	2c00      	cmp	r4, #0
    42ec:	d01d      	beq.n	432a <__aeabi_fadd+0x20a>
    42ee:	28ff      	cmp	r0, #255	; 0xff
    42f0:	d022      	beq.n	4338 <__aeabi_fadd+0x218>
    42f2:	2480      	movs	r4, #128	; 0x80
    42f4:	04e4      	lsls	r4, r4, #19
    42f6:	4252      	negs	r2, r2
    42f8:	4323      	orrs	r3, r4
    42fa:	2a1b      	cmp	r2, #27
    42fc:	dd00      	ble.n	4300 <__aeabi_fadd+0x1e0>
    42fe:	e08a      	b.n	4416 <__aeabi_fadd+0x2f6>
    4300:	001c      	movs	r4, r3
    4302:	2520      	movs	r5, #32
    4304:	40d4      	lsrs	r4, r2
    4306:	1aaa      	subs	r2, r5, r2
    4308:	4093      	lsls	r3, r2
    430a:	1e5a      	subs	r2, r3, #1
    430c:	4193      	sbcs	r3, r2
    430e:	4323      	orrs	r3, r4
    4310:	4662      	mov	r2, ip
    4312:	0004      	movs	r4, r0
    4314:	1ad3      	subs	r3, r2, r3
    4316:	000d      	movs	r5, r1
    4318:	e725      	b.n	4166 <__aeabi_fadd+0x46>
    431a:	2e00      	cmp	r6, #0
    431c:	d000      	beq.n	4320 <__aeabi_fadd+0x200>
    431e:	e726      	b.n	416e <__aeabi_fadd+0x4e>
    4320:	2200      	movs	r2, #0
    4322:	2400      	movs	r4, #0
    4324:	e7a9      	b.n	427a <__aeabi_fadd+0x15a>
    4326:	000c      	movs	r4, r1
    4328:	e735      	b.n	4196 <__aeabi_fadd+0x76>
    432a:	2b00      	cmp	r3, #0
    432c:	d04d      	beq.n	43ca <__aeabi_fadd+0x2aa>
    432e:	43d2      	mvns	r2, r2
    4330:	2a00      	cmp	r2, #0
    4332:	d0ed      	beq.n	4310 <__aeabi_fadd+0x1f0>
    4334:	28ff      	cmp	r0, #255	; 0xff
    4336:	d1e0      	bne.n	42fa <__aeabi_fadd+0x1da>
    4338:	4663      	mov	r3, ip
    433a:	24ff      	movs	r4, #255	; 0xff
    433c:	000d      	movs	r5, r1
    433e:	e72a      	b.n	4196 <__aeabi_fadd+0x76>
    4340:	29ff      	cmp	r1, #255	; 0xff
    4342:	d00f      	beq.n	4364 <__aeabi_fadd+0x244>
    4344:	0001      	movs	r1, r0
    4346:	e773      	b.n	4230 <__aeabi_fadd+0x110>
    4348:	2b00      	cmp	r3, #0
    434a:	d061      	beq.n	4410 <__aeabi_fadd+0x2f0>
    434c:	24ff      	movs	r4, #255	; 0xff
    434e:	2f00      	cmp	r7, #0
    4350:	d100      	bne.n	4354 <__aeabi_fadd+0x234>
    4352:	e720      	b.n	4196 <__aeabi_fadd+0x76>
    4354:	2280      	movs	r2, #128	; 0x80
    4356:	4641      	mov	r1, r8
    4358:	03d2      	lsls	r2, r2, #15
    435a:	4211      	tst	r1, r2
    435c:	d002      	beq.n	4364 <__aeabi_fadd+0x244>
    435e:	4216      	tst	r6, r2
    4360:	d100      	bne.n	4364 <__aeabi_fadd+0x244>
    4362:	003b      	movs	r3, r7
    4364:	24ff      	movs	r4, #255	; 0xff
    4366:	e716      	b.n	4196 <__aeabi_fadd+0x76>
    4368:	24ff      	movs	r4, #255	; 0xff
    436a:	2300      	movs	r3, #0
    436c:	e724      	b.n	41b8 <__aeabi_fadd+0x98>
    436e:	2c00      	cmp	r4, #0
    4370:	d1ea      	bne.n	4348 <__aeabi_fadd+0x228>
    4372:	2b00      	cmp	r3, #0
    4374:	d058      	beq.n	4428 <__aeabi_fadd+0x308>
    4376:	2f00      	cmp	r7, #0
    4378:	d100      	bne.n	437c <__aeabi_fadd+0x25c>
    437a:	e70c      	b.n	4196 <__aeabi_fadd+0x76>
    437c:	4463      	add	r3, ip
    437e:	015a      	lsls	r2, r3, #5
    4380:	d400      	bmi.n	4384 <__aeabi_fadd+0x264>
    4382:	e739      	b.n	41f8 <__aeabi_fadd+0xd8>
    4384:	4a2e      	ldr	r2, [pc, #184]	; (4440 <__aeabi_fadd+0x320>)
    4386:	000c      	movs	r4, r1
    4388:	4013      	ands	r3, r2
    438a:	e704      	b.n	4196 <__aeabi_fadd+0x76>
    438c:	2101      	movs	r1, #1
    438e:	e75c      	b.n	424a <__aeabi_fadd+0x12a>
    4390:	2c00      	cmp	r4, #0
    4392:	d11e      	bne.n	43d2 <__aeabi_fadd+0x2b2>
    4394:	2b00      	cmp	r3, #0
    4396:	d040      	beq.n	441a <__aeabi_fadd+0x2fa>
    4398:	43c9      	mvns	r1, r1
    439a:	2900      	cmp	r1, #0
    439c:	d00b      	beq.n	43b6 <__aeabi_fadd+0x296>
    439e:	28ff      	cmp	r0, #255	; 0xff
    43a0:	d036      	beq.n	4410 <__aeabi_fadd+0x2f0>
    43a2:	291b      	cmp	r1, #27
    43a4:	dc47      	bgt.n	4436 <__aeabi_fadd+0x316>
    43a6:	001c      	movs	r4, r3
    43a8:	2620      	movs	r6, #32
    43aa:	40cc      	lsrs	r4, r1
    43ac:	1a71      	subs	r1, r6, r1
    43ae:	408b      	lsls	r3, r1
    43b0:	1e59      	subs	r1, r3, #1
    43b2:	418b      	sbcs	r3, r1
    43b4:	4323      	orrs	r3, r4
    43b6:	4463      	add	r3, ip
    43b8:	0004      	movs	r4, r0
    43ba:	e747      	b.n	424c <__aeabi_fadd+0x12c>
    43bc:	2b00      	cmp	r3, #0
    43be:	d118      	bne.n	43f2 <__aeabi_fadd+0x2d2>
    43c0:	1e3b      	subs	r3, r7, #0
    43c2:	d02d      	beq.n	4420 <__aeabi_fadd+0x300>
    43c4:	000d      	movs	r5, r1
    43c6:	24ff      	movs	r4, #255	; 0xff
    43c8:	e6e5      	b.n	4196 <__aeabi_fadd+0x76>
    43ca:	003b      	movs	r3, r7
    43cc:	0004      	movs	r4, r0
    43ce:	000d      	movs	r5, r1
    43d0:	e6e1      	b.n	4196 <__aeabi_fadd+0x76>
    43d2:	28ff      	cmp	r0, #255	; 0xff
    43d4:	d01c      	beq.n	4410 <__aeabi_fadd+0x2f0>
    43d6:	2480      	movs	r4, #128	; 0x80
    43d8:	04e4      	lsls	r4, r4, #19
    43da:	4249      	negs	r1, r1
    43dc:	4323      	orrs	r3, r4
    43de:	e7e0      	b.n	43a2 <__aeabi_fadd+0x282>
    43e0:	2f00      	cmp	r7, #0
    43e2:	d100      	bne.n	43e6 <__aeabi_fadd+0x2c6>
    43e4:	e6d7      	b.n	4196 <__aeabi_fadd+0x76>
    43e6:	1bde      	subs	r6, r3, r7
    43e8:	0172      	lsls	r2, r6, #5
    43ea:	d51f      	bpl.n	442c <__aeabi_fadd+0x30c>
    43ec:	1afb      	subs	r3, r7, r3
    43ee:	000d      	movs	r5, r1
    43f0:	e6d1      	b.n	4196 <__aeabi_fadd+0x76>
    43f2:	24ff      	movs	r4, #255	; 0xff
    43f4:	2f00      	cmp	r7, #0
    43f6:	d100      	bne.n	43fa <__aeabi_fadd+0x2da>
    43f8:	e6cd      	b.n	4196 <__aeabi_fadd+0x76>
    43fa:	2280      	movs	r2, #128	; 0x80
    43fc:	4640      	mov	r0, r8
    43fe:	03d2      	lsls	r2, r2, #15
    4400:	4210      	tst	r0, r2
    4402:	d0af      	beq.n	4364 <__aeabi_fadd+0x244>
    4404:	4216      	tst	r6, r2
    4406:	d1ad      	bne.n	4364 <__aeabi_fadd+0x244>
    4408:	003b      	movs	r3, r7
    440a:	000d      	movs	r5, r1
    440c:	24ff      	movs	r4, #255	; 0xff
    440e:	e6c2      	b.n	4196 <__aeabi_fadd+0x76>
    4410:	4663      	mov	r3, ip
    4412:	24ff      	movs	r4, #255	; 0xff
    4414:	e6bf      	b.n	4196 <__aeabi_fadd+0x76>
    4416:	2301      	movs	r3, #1
    4418:	e77a      	b.n	4310 <__aeabi_fadd+0x1f0>
    441a:	003b      	movs	r3, r7
    441c:	0004      	movs	r4, r0
    441e:	e6ba      	b.n	4196 <__aeabi_fadd+0x76>
    4420:	2680      	movs	r6, #128	; 0x80
    4422:	2200      	movs	r2, #0
    4424:	03f6      	lsls	r6, r6, #15
    4426:	e6f0      	b.n	420a <__aeabi_fadd+0xea>
    4428:	003b      	movs	r3, r7
    442a:	e6b4      	b.n	4196 <__aeabi_fadd+0x76>
    442c:	1e33      	subs	r3, r6, #0
    442e:	d000      	beq.n	4432 <__aeabi_fadd+0x312>
    4430:	e6e2      	b.n	41f8 <__aeabi_fadd+0xd8>
    4432:	2200      	movs	r2, #0
    4434:	e721      	b.n	427a <__aeabi_fadd+0x15a>
    4436:	2301      	movs	r3, #1
    4438:	e7bd      	b.n	43b6 <__aeabi_fadd+0x296>
    443a:	46c0      	nop			; (mov r8, r8)
    443c:	7dffffff 	.word	0x7dffffff
    4440:	fbffffff 	.word	0xfbffffff

00004444 <__eqsf2>:
    4444:	b570      	push	{r4, r5, r6, lr}
    4446:	0042      	lsls	r2, r0, #1
    4448:	0245      	lsls	r5, r0, #9
    444a:	024e      	lsls	r6, r1, #9
    444c:	004c      	lsls	r4, r1, #1
    444e:	0fc3      	lsrs	r3, r0, #31
    4450:	0a6d      	lsrs	r5, r5, #9
    4452:	0e12      	lsrs	r2, r2, #24
    4454:	0a76      	lsrs	r6, r6, #9
    4456:	0e24      	lsrs	r4, r4, #24
    4458:	0fc9      	lsrs	r1, r1, #31
    445a:	2001      	movs	r0, #1
    445c:	2aff      	cmp	r2, #255	; 0xff
    445e:	d006      	beq.n	446e <__eqsf2+0x2a>
    4460:	2cff      	cmp	r4, #255	; 0xff
    4462:	d003      	beq.n	446c <__eqsf2+0x28>
    4464:	42a2      	cmp	r2, r4
    4466:	d101      	bne.n	446c <__eqsf2+0x28>
    4468:	42b5      	cmp	r5, r6
    446a:	d006      	beq.n	447a <__eqsf2+0x36>
    446c:	bd70      	pop	{r4, r5, r6, pc}
    446e:	2d00      	cmp	r5, #0
    4470:	d1fc      	bne.n	446c <__eqsf2+0x28>
    4472:	2cff      	cmp	r4, #255	; 0xff
    4474:	d1fa      	bne.n	446c <__eqsf2+0x28>
    4476:	2e00      	cmp	r6, #0
    4478:	d1f8      	bne.n	446c <__eqsf2+0x28>
    447a:	428b      	cmp	r3, r1
    447c:	d006      	beq.n	448c <__eqsf2+0x48>
    447e:	2001      	movs	r0, #1
    4480:	2a00      	cmp	r2, #0
    4482:	d1f3      	bne.n	446c <__eqsf2+0x28>
    4484:	0028      	movs	r0, r5
    4486:	1e45      	subs	r5, r0, #1
    4488:	41a8      	sbcs	r0, r5
    448a:	e7ef      	b.n	446c <__eqsf2+0x28>
    448c:	2000      	movs	r0, #0
    448e:	e7ed      	b.n	446c <__eqsf2+0x28>

00004490 <__gesf2>:
    4490:	b5f0      	push	{r4, r5, r6, r7, lr}
    4492:	0042      	lsls	r2, r0, #1
    4494:	0245      	lsls	r5, r0, #9
    4496:	024c      	lsls	r4, r1, #9
    4498:	0fc3      	lsrs	r3, r0, #31
    449a:	0048      	lsls	r0, r1, #1
    449c:	0a6d      	lsrs	r5, r5, #9
    449e:	0e12      	lsrs	r2, r2, #24
    44a0:	0a64      	lsrs	r4, r4, #9
    44a2:	0e00      	lsrs	r0, r0, #24
    44a4:	0fc9      	lsrs	r1, r1, #31
    44a6:	2aff      	cmp	r2, #255	; 0xff
    44a8:	d01e      	beq.n	44e8 <__gesf2+0x58>
    44aa:	28ff      	cmp	r0, #255	; 0xff
    44ac:	d021      	beq.n	44f2 <__gesf2+0x62>
    44ae:	2a00      	cmp	r2, #0
    44b0:	d10a      	bne.n	44c8 <__gesf2+0x38>
    44b2:	426e      	negs	r6, r5
    44b4:	416e      	adcs	r6, r5
    44b6:	b2f6      	uxtb	r6, r6
    44b8:	2800      	cmp	r0, #0
    44ba:	d10f      	bne.n	44dc <__gesf2+0x4c>
    44bc:	2c00      	cmp	r4, #0
    44be:	d10d      	bne.n	44dc <__gesf2+0x4c>
    44c0:	2000      	movs	r0, #0
    44c2:	2d00      	cmp	r5, #0
    44c4:	d009      	beq.n	44da <__gesf2+0x4a>
    44c6:	e005      	b.n	44d4 <__gesf2+0x44>
    44c8:	2800      	cmp	r0, #0
    44ca:	d101      	bne.n	44d0 <__gesf2+0x40>
    44cc:	2c00      	cmp	r4, #0
    44ce:	d001      	beq.n	44d4 <__gesf2+0x44>
    44d0:	428b      	cmp	r3, r1
    44d2:	d011      	beq.n	44f8 <__gesf2+0x68>
    44d4:	2101      	movs	r1, #1
    44d6:	4258      	negs	r0, r3
    44d8:	4308      	orrs	r0, r1
    44da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    44dc:	2e00      	cmp	r6, #0
    44de:	d0f7      	beq.n	44d0 <__gesf2+0x40>
    44e0:	2001      	movs	r0, #1
    44e2:	3901      	subs	r1, #1
    44e4:	4308      	orrs	r0, r1
    44e6:	e7f8      	b.n	44da <__gesf2+0x4a>
    44e8:	2d00      	cmp	r5, #0
    44ea:	d0de      	beq.n	44aa <__gesf2+0x1a>
    44ec:	2002      	movs	r0, #2
    44ee:	4240      	negs	r0, r0
    44f0:	e7f3      	b.n	44da <__gesf2+0x4a>
    44f2:	2c00      	cmp	r4, #0
    44f4:	d0db      	beq.n	44ae <__gesf2+0x1e>
    44f6:	e7f9      	b.n	44ec <__gesf2+0x5c>
    44f8:	4282      	cmp	r2, r0
    44fa:	dceb      	bgt.n	44d4 <__gesf2+0x44>
    44fc:	db04      	blt.n	4508 <__gesf2+0x78>
    44fe:	42a5      	cmp	r5, r4
    4500:	d8e8      	bhi.n	44d4 <__gesf2+0x44>
    4502:	2000      	movs	r0, #0
    4504:	42a5      	cmp	r5, r4
    4506:	d2e8      	bcs.n	44da <__gesf2+0x4a>
    4508:	2101      	movs	r1, #1
    450a:	1e58      	subs	r0, r3, #1
    450c:	4308      	orrs	r0, r1
    450e:	e7e4      	b.n	44da <__gesf2+0x4a>

00004510 <__lesf2>:
    4510:	b5f0      	push	{r4, r5, r6, r7, lr}
    4512:	0042      	lsls	r2, r0, #1
    4514:	024d      	lsls	r5, r1, #9
    4516:	004c      	lsls	r4, r1, #1
    4518:	0246      	lsls	r6, r0, #9
    451a:	0a76      	lsrs	r6, r6, #9
    451c:	0e12      	lsrs	r2, r2, #24
    451e:	0fc3      	lsrs	r3, r0, #31
    4520:	0a6d      	lsrs	r5, r5, #9
    4522:	0e24      	lsrs	r4, r4, #24
    4524:	0fc9      	lsrs	r1, r1, #31
    4526:	2aff      	cmp	r2, #255	; 0xff
    4528:	d016      	beq.n	4558 <__lesf2+0x48>
    452a:	2cff      	cmp	r4, #255	; 0xff
    452c:	d018      	beq.n	4560 <__lesf2+0x50>
    452e:	2a00      	cmp	r2, #0
    4530:	d10a      	bne.n	4548 <__lesf2+0x38>
    4532:	4270      	negs	r0, r6
    4534:	4170      	adcs	r0, r6
    4536:	b2c0      	uxtb	r0, r0
    4538:	2c00      	cmp	r4, #0
    453a:	d015      	beq.n	4568 <__lesf2+0x58>
    453c:	2800      	cmp	r0, #0
    453e:	d005      	beq.n	454c <__lesf2+0x3c>
    4540:	2001      	movs	r0, #1
    4542:	3901      	subs	r1, #1
    4544:	4308      	orrs	r0, r1
    4546:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4548:	2c00      	cmp	r4, #0
    454a:	d013      	beq.n	4574 <__lesf2+0x64>
    454c:	4299      	cmp	r1, r3
    454e:	d014      	beq.n	457a <__lesf2+0x6a>
    4550:	2001      	movs	r0, #1
    4552:	425b      	negs	r3, r3
    4554:	4318      	orrs	r0, r3
    4556:	e7f6      	b.n	4546 <__lesf2+0x36>
    4558:	2002      	movs	r0, #2
    455a:	2e00      	cmp	r6, #0
    455c:	d1f3      	bne.n	4546 <__lesf2+0x36>
    455e:	e7e4      	b.n	452a <__lesf2+0x1a>
    4560:	2002      	movs	r0, #2
    4562:	2d00      	cmp	r5, #0
    4564:	d1ef      	bne.n	4546 <__lesf2+0x36>
    4566:	e7e2      	b.n	452e <__lesf2+0x1e>
    4568:	2d00      	cmp	r5, #0
    456a:	d1e7      	bne.n	453c <__lesf2+0x2c>
    456c:	2000      	movs	r0, #0
    456e:	2e00      	cmp	r6, #0
    4570:	d0e9      	beq.n	4546 <__lesf2+0x36>
    4572:	e7ed      	b.n	4550 <__lesf2+0x40>
    4574:	2d00      	cmp	r5, #0
    4576:	d1e9      	bne.n	454c <__lesf2+0x3c>
    4578:	e7ea      	b.n	4550 <__lesf2+0x40>
    457a:	42a2      	cmp	r2, r4
    457c:	dc06      	bgt.n	458c <__lesf2+0x7c>
    457e:	dbdf      	blt.n	4540 <__lesf2+0x30>
    4580:	42ae      	cmp	r6, r5
    4582:	d803      	bhi.n	458c <__lesf2+0x7c>
    4584:	2000      	movs	r0, #0
    4586:	42ae      	cmp	r6, r5
    4588:	d3da      	bcc.n	4540 <__lesf2+0x30>
    458a:	e7dc      	b.n	4546 <__lesf2+0x36>
    458c:	2001      	movs	r0, #1
    458e:	4249      	negs	r1, r1
    4590:	4308      	orrs	r0, r1
    4592:	e7d8      	b.n	4546 <__lesf2+0x36>

00004594 <__aeabi_fmul>:
    4594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4596:	4657      	mov	r7, sl
    4598:	464e      	mov	r6, r9
    459a:	4645      	mov	r5, r8
    459c:	46de      	mov	lr, fp
    459e:	b5e0      	push	{r5, r6, r7, lr}
    45a0:	0247      	lsls	r7, r0, #9
    45a2:	0046      	lsls	r6, r0, #1
    45a4:	4688      	mov	r8, r1
    45a6:	0a7f      	lsrs	r7, r7, #9
    45a8:	0e36      	lsrs	r6, r6, #24
    45aa:	0fc4      	lsrs	r4, r0, #31
    45ac:	2e00      	cmp	r6, #0
    45ae:	d047      	beq.n	4640 <__aeabi_fmul+0xac>
    45b0:	2eff      	cmp	r6, #255	; 0xff
    45b2:	d024      	beq.n	45fe <__aeabi_fmul+0x6a>
    45b4:	00fb      	lsls	r3, r7, #3
    45b6:	2780      	movs	r7, #128	; 0x80
    45b8:	04ff      	lsls	r7, r7, #19
    45ba:	431f      	orrs	r7, r3
    45bc:	2300      	movs	r3, #0
    45be:	4699      	mov	r9, r3
    45c0:	469a      	mov	sl, r3
    45c2:	3e7f      	subs	r6, #127	; 0x7f
    45c4:	4643      	mov	r3, r8
    45c6:	025d      	lsls	r5, r3, #9
    45c8:	0058      	lsls	r0, r3, #1
    45ca:	0fdb      	lsrs	r3, r3, #31
    45cc:	0a6d      	lsrs	r5, r5, #9
    45ce:	0e00      	lsrs	r0, r0, #24
    45d0:	4698      	mov	r8, r3
    45d2:	d043      	beq.n	465c <__aeabi_fmul+0xc8>
    45d4:	28ff      	cmp	r0, #255	; 0xff
    45d6:	d03b      	beq.n	4650 <__aeabi_fmul+0xbc>
    45d8:	00eb      	lsls	r3, r5, #3
    45da:	2580      	movs	r5, #128	; 0x80
    45dc:	2200      	movs	r2, #0
    45de:	04ed      	lsls	r5, r5, #19
    45e0:	431d      	orrs	r5, r3
    45e2:	387f      	subs	r0, #127	; 0x7f
    45e4:	1836      	adds	r6, r6, r0
    45e6:	1c73      	adds	r3, r6, #1
    45e8:	4641      	mov	r1, r8
    45ea:	469b      	mov	fp, r3
    45ec:	464b      	mov	r3, r9
    45ee:	4061      	eors	r1, r4
    45f0:	4313      	orrs	r3, r2
    45f2:	2b0f      	cmp	r3, #15
    45f4:	d864      	bhi.n	46c0 <__aeabi_fmul+0x12c>
    45f6:	4875      	ldr	r0, [pc, #468]	; (47cc <__aeabi_fmul+0x238>)
    45f8:	009b      	lsls	r3, r3, #2
    45fa:	58c3      	ldr	r3, [r0, r3]
    45fc:	469f      	mov	pc, r3
    45fe:	2f00      	cmp	r7, #0
    4600:	d142      	bne.n	4688 <__aeabi_fmul+0xf4>
    4602:	2308      	movs	r3, #8
    4604:	4699      	mov	r9, r3
    4606:	3b06      	subs	r3, #6
    4608:	26ff      	movs	r6, #255	; 0xff
    460a:	469a      	mov	sl, r3
    460c:	e7da      	b.n	45c4 <__aeabi_fmul+0x30>
    460e:	4641      	mov	r1, r8
    4610:	2a02      	cmp	r2, #2
    4612:	d028      	beq.n	4666 <__aeabi_fmul+0xd2>
    4614:	2a03      	cmp	r2, #3
    4616:	d100      	bne.n	461a <__aeabi_fmul+0x86>
    4618:	e0ce      	b.n	47b8 <__aeabi_fmul+0x224>
    461a:	2a01      	cmp	r2, #1
    461c:	d000      	beq.n	4620 <__aeabi_fmul+0x8c>
    461e:	e0ac      	b.n	477a <__aeabi_fmul+0x1e6>
    4620:	4011      	ands	r1, r2
    4622:	2000      	movs	r0, #0
    4624:	2200      	movs	r2, #0
    4626:	b2cc      	uxtb	r4, r1
    4628:	0240      	lsls	r0, r0, #9
    462a:	05d2      	lsls	r2, r2, #23
    462c:	0a40      	lsrs	r0, r0, #9
    462e:	07e4      	lsls	r4, r4, #31
    4630:	4310      	orrs	r0, r2
    4632:	4320      	orrs	r0, r4
    4634:	bc3c      	pop	{r2, r3, r4, r5}
    4636:	4690      	mov	r8, r2
    4638:	4699      	mov	r9, r3
    463a:	46a2      	mov	sl, r4
    463c:	46ab      	mov	fp, r5
    463e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4640:	2f00      	cmp	r7, #0
    4642:	d115      	bne.n	4670 <__aeabi_fmul+0xdc>
    4644:	2304      	movs	r3, #4
    4646:	4699      	mov	r9, r3
    4648:	3b03      	subs	r3, #3
    464a:	2600      	movs	r6, #0
    464c:	469a      	mov	sl, r3
    464e:	e7b9      	b.n	45c4 <__aeabi_fmul+0x30>
    4650:	20ff      	movs	r0, #255	; 0xff
    4652:	2202      	movs	r2, #2
    4654:	2d00      	cmp	r5, #0
    4656:	d0c5      	beq.n	45e4 <__aeabi_fmul+0x50>
    4658:	2203      	movs	r2, #3
    465a:	e7c3      	b.n	45e4 <__aeabi_fmul+0x50>
    465c:	2d00      	cmp	r5, #0
    465e:	d119      	bne.n	4694 <__aeabi_fmul+0x100>
    4660:	2000      	movs	r0, #0
    4662:	2201      	movs	r2, #1
    4664:	e7be      	b.n	45e4 <__aeabi_fmul+0x50>
    4666:	2401      	movs	r4, #1
    4668:	22ff      	movs	r2, #255	; 0xff
    466a:	400c      	ands	r4, r1
    466c:	2000      	movs	r0, #0
    466e:	e7db      	b.n	4628 <__aeabi_fmul+0x94>
    4670:	0038      	movs	r0, r7
    4672:	f001 fd93 	bl	619c <__clzsi2>
    4676:	2676      	movs	r6, #118	; 0x76
    4678:	1f43      	subs	r3, r0, #5
    467a:	409f      	lsls	r7, r3
    467c:	2300      	movs	r3, #0
    467e:	4276      	negs	r6, r6
    4680:	1a36      	subs	r6, r6, r0
    4682:	4699      	mov	r9, r3
    4684:	469a      	mov	sl, r3
    4686:	e79d      	b.n	45c4 <__aeabi_fmul+0x30>
    4688:	230c      	movs	r3, #12
    468a:	4699      	mov	r9, r3
    468c:	3b09      	subs	r3, #9
    468e:	26ff      	movs	r6, #255	; 0xff
    4690:	469a      	mov	sl, r3
    4692:	e797      	b.n	45c4 <__aeabi_fmul+0x30>
    4694:	0028      	movs	r0, r5
    4696:	f001 fd81 	bl	619c <__clzsi2>
    469a:	1f43      	subs	r3, r0, #5
    469c:	409d      	lsls	r5, r3
    469e:	2376      	movs	r3, #118	; 0x76
    46a0:	425b      	negs	r3, r3
    46a2:	1a18      	subs	r0, r3, r0
    46a4:	2200      	movs	r2, #0
    46a6:	e79d      	b.n	45e4 <__aeabi_fmul+0x50>
    46a8:	2080      	movs	r0, #128	; 0x80
    46aa:	2400      	movs	r4, #0
    46ac:	03c0      	lsls	r0, r0, #15
    46ae:	22ff      	movs	r2, #255	; 0xff
    46b0:	e7ba      	b.n	4628 <__aeabi_fmul+0x94>
    46b2:	003d      	movs	r5, r7
    46b4:	4652      	mov	r2, sl
    46b6:	e7ab      	b.n	4610 <__aeabi_fmul+0x7c>
    46b8:	003d      	movs	r5, r7
    46ba:	0021      	movs	r1, r4
    46bc:	4652      	mov	r2, sl
    46be:	e7a7      	b.n	4610 <__aeabi_fmul+0x7c>
    46c0:	0c3b      	lsrs	r3, r7, #16
    46c2:	469c      	mov	ip, r3
    46c4:	042a      	lsls	r2, r5, #16
    46c6:	0c12      	lsrs	r2, r2, #16
    46c8:	0c2b      	lsrs	r3, r5, #16
    46ca:	0014      	movs	r4, r2
    46cc:	4660      	mov	r0, ip
    46ce:	4665      	mov	r5, ip
    46d0:	043f      	lsls	r7, r7, #16
    46d2:	0c3f      	lsrs	r7, r7, #16
    46d4:	437c      	muls	r4, r7
    46d6:	4342      	muls	r2, r0
    46d8:	435d      	muls	r5, r3
    46da:	437b      	muls	r3, r7
    46dc:	0c27      	lsrs	r7, r4, #16
    46de:	189b      	adds	r3, r3, r2
    46e0:	18ff      	adds	r7, r7, r3
    46e2:	42ba      	cmp	r2, r7
    46e4:	d903      	bls.n	46ee <__aeabi_fmul+0x15a>
    46e6:	2380      	movs	r3, #128	; 0x80
    46e8:	025b      	lsls	r3, r3, #9
    46ea:	469c      	mov	ip, r3
    46ec:	4465      	add	r5, ip
    46ee:	0424      	lsls	r4, r4, #16
    46f0:	043a      	lsls	r2, r7, #16
    46f2:	0c24      	lsrs	r4, r4, #16
    46f4:	1912      	adds	r2, r2, r4
    46f6:	0193      	lsls	r3, r2, #6
    46f8:	1e5c      	subs	r4, r3, #1
    46fa:	41a3      	sbcs	r3, r4
    46fc:	0c3f      	lsrs	r7, r7, #16
    46fe:	0e92      	lsrs	r2, r2, #26
    4700:	197d      	adds	r5, r7, r5
    4702:	431a      	orrs	r2, r3
    4704:	01ad      	lsls	r5, r5, #6
    4706:	4315      	orrs	r5, r2
    4708:	012b      	lsls	r3, r5, #4
    470a:	d504      	bpl.n	4716 <__aeabi_fmul+0x182>
    470c:	2301      	movs	r3, #1
    470e:	465e      	mov	r6, fp
    4710:	086a      	lsrs	r2, r5, #1
    4712:	401d      	ands	r5, r3
    4714:	4315      	orrs	r5, r2
    4716:	0032      	movs	r2, r6
    4718:	327f      	adds	r2, #127	; 0x7f
    471a:	2a00      	cmp	r2, #0
    471c:	dd25      	ble.n	476a <__aeabi_fmul+0x1d6>
    471e:	076b      	lsls	r3, r5, #29
    4720:	d004      	beq.n	472c <__aeabi_fmul+0x198>
    4722:	230f      	movs	r3, #15
    4724:	402b      	ands	r3, r5
    4726:	2b04      	cmp	r3, #4
    4728:	d000      	beq.n	472c <__aeabi_fmul+0x198>
    472a:	3504      	adds	r5, #4
    472c:	012b      	lsls	r3, r5, #4
    472e:	d503      	bpl.n	4738 <__aeabi_fmul+0x1a4>
    4730:	0032      	movs	r2, r6
    4732:	4b27      	ldr	r3, [pc, #156]	; (47d0 <__aeabi_fmul+0x23c>)
    4734:	3280      	adds	r2, #128	; 0x80
    4736:	401d      	ands	r5, r3
    4738:	2afe      	cmp	r2, #254	; 0xfe
    473a:	dc94      	bgt.n	4666 <__aeabi_fmul+0xd2>
    473c:	2401      	movs	r4, #1
    473e:	01a8      	lsls	r0, r5, #6
    4740:	0a40      	lsrs	r0, r0, #9
    4742:	b2d2      	uxtb	r2, r2
    4744:	400c      	ands	r4, r1
    4746:	e76f      	b.n	4628 <__aeabi_fmul+0x94>
    4748:	2080      	movs	r0, #128	; 0x80
    474a:	03c0      	lsls	r0, r0, #15
    474c:	4207      	tst	r7, r0
    474e:	d007      	beq.n	4760 <__aeabi_fmul+0x1cc>
    4750:	4205      	tst	r5, r0
    4752:	d105      	bne.n	4760 <__aeabi_fmul+0x1cc>
    4754:	4328      	orrs	r0, r5
    4756:	0240      	lsls	r0, r0, #9
    4758:	0a40      	lsrs	r0, r0, #9
    475a:	4644      	mov	r4, r8
    475c:	22ff      	movs	r2, #255	; 0xff
    475e:	e763      	b.n	4628 <__aeabi_fmul+0x94>
    4760:	4338      	orrs	r0, r7
    4762:	0240      	lsls	r0, r0, #9
    4764:	0a40      	lsrs	r0, r0, #9
    4766:	22ff      	movs	r2, #255	; 0xff
    4768:	e75e      	b.n	4628 <__aeabi_fmul+0x94>
    476a:	2401      	movs	r4, #1
    476c:	1aa3      	subs	r3, r4, r2
    476e:	2b1b      	cmp	r3, #27
    4770:	dd05      	ble.n	477e <__aeabi_fmul+0x1ea>
    4772:	400c      	ands	r4, r1
    4774:	2200      	movs	r2, #0
    4776:	2000      	movs	r0, #0
    4778:	e756      	b.n	4628 <__aeabi_fmul+0x94>
    477a:	465e      	mov	r6, fp
    477c:	e7cb      	b.n	4716 <__aeabi_fmul+0x182>
    477e:	002a      	movs	r2, r5
    4780:	2020      	movs	r0, #32
    4782:	40da      	lsrs	r2, r3
    4784:	1ac3      	subs	r3, r0, r3
    4786:	409d      	lsls	r5, r3
    4788:	002b      	movs	r3, r5
    478a:	1e5d      	subs	r5, r3, #1
    478c:	41ab      	sbcs	r3, r5
    478e:	4313      	orrs	r3, r2
    4790:	075a      	lsls	r2, r3, #29
    4792:	d004      	beq.n	479e <__aeabi_fmul+0x20a>
    4794:	220f      	movs	r2, #15
    4796:	401a      	ands	r2, r3
    4798:	2a04      	cmp	r2, #4
    479a:	d000      	beq.n	479e <__aeabi_fmul+0x20a>
    479c:	3304      	adds	r3, #4
    479e:	015a      	lsls	r2, r3, #5
    47a0:	d504      	bpl.n	47ac <__aeabi_fmul+0x218>
    47a2:	2401      	movs	r4, #1
    47a4:	2201      	movs	r2, #1
    47a6:	400c      	ands	r4, r1
    47a8:	2000      	movs	r0, #0
    47aa:	e73d      	b.n	4628 <__aeabi_fmul+0x94>
    47ac:	2401      	movs	r4, #1
    47ae:	019b      	lsls	r3, r3, #6
    47b0:	0a58      	lsrs	r0, r3, #9
    47b2:	400c      	ands	r4, r1
    47b4:	2200      	movs	r2, #0
    47b6:	e737      	b.n	4628 <__aeabi_fmul+0x94>
    47b8:	2080      	movs	r0, #128	; 0x80
    47ba:	2401      	movs	r4, #1
    47bc:	03c0      	lsls	r0, r0, #15
    47be:	4328      	orrs	r0, r5
    47c0:	0240      	lsls	r0, r0, #9
    47c2:	0a40      	lsrs	r0, r0, #9
    47c4:	400c      	ands	r4, r1
    47c6:	22ff      	movs	r2, #255	; 0xff
    47c8:	e72e      	b.n	4628 <__aeabi_fmul+0x94>
    47ca:	46c0      	nop			; (mov r8, r8)
    47cc:	0000b554 	.word	0x0000b554
    47d0:	f7ffffff 	.word	0xf7ffffff

000047d4 <__aeabi_fsub>:
    47d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    47d6:	464f      	mov	r7, r9
    47d8:	46d6      	mov	lr, sl
    47da:	4646      	mov	r6, r8
    47dc:	0044      	lsls	r4, r0, #1
    47de:	b5c0      	push	{r6, r7, lr}
    47e0:	0fc2      	lsrs	r2, r0, #31
    47e2:	0247      	lsls	r7, r0, #9
    47e4:	0248      	lsls	r0, r1, #9
    47e6:	0a40      	lsrs	r0, r0, #9
    47e8:	4684      	mov	ip, r0
    47ea:	4666      	mov	r6, ip
    47ec:	0a7b      	lsrs	r3, r7, #9
    47ee:	0048      	lsls	r0, r1, #1
    47f0:	0fc9      	lsrs	r1, r1, #31
    47f2:	469a      	mov	sl, r3
    47f4:	0e24      	lsrs	r4, r4, #24
    47f6:	0015      	movs	r5, r2
    47f8:	00db      	lsls	r3, r3, #3
    47fa:	0e00      	lsrs	r0, r0, #24
    47fc:	4689      	mov	r9, r1
    47fe:	00f6      	lsls	r6, r6, #3
    4800:	28ff      	cmp	r0, #255	; 0xff
    4802:	d100      	bne.n	4806 <__aeabi_fsub+0x32>
    4804:	e08f      	b.n	4926 <__aeabi_fsub+0x152>
    4806:	2101      	movs	r1, #1
    4808:	464f      	mov	r7, r9
    480a:	404f      	eors	r7, r1
    480c:	0039      	movs	r1, r7
    480e:	4291      	cmp	r1, r2
    4810:	d066      	beq.n	48e0 <__aeabi_fsub+0x10c>
    4812:	1a22      	subs	r2, r4, r0
    4814:	2a00      	cmp	r2, #0
    4816:	dc00      	bgt.n	481a <__aeabi_fsub+0x46>
    4818:	e09d      	b.n	4956 <__aeabi_fsub+0x182>
    481a:	2800      	cmp	r0, #0
    481c:	d13d      	bne.n	489a <__aeabi_fsub+0xc6>
    481e:	2e00      	cmp	r6, #0
    4820:	d100      	bne.n	4824 <__aeabi_fsub+0x50>
    4822:	e08b      	b.n	493c <__aeabi_fsub+0x168>
    4824:	1e51      	subs	r1, r2, #1
    4826:	2900      	cmp	r1, #0
    4828:	d000      	beq.n	482c <__aeabi_fsub+0x58>
    482a:	e0b5      	b.n	4998 <__aeabi_fsub+0x1c4>
    482c:	2401      	movs	r4, #1
    482e:	1b9b      	subs	r3, r3, r6
    4830:	015a      	lsls	r2, r3, #5
    4832:	d544      	bpl.n	48be <__aeabi_fsub+0xea>
    4834:	019b      	lsls	r3, r3, #6
    4836:	099f      	lsrs	r7, r3, #6
    4838:	0038      	movs	r0, r7
    483a:	f001 fcaf 	bl	619c <__clzsi2>
    483e:	3805      	subs	r0, #5
    4840:	4087      	lsls	r7, r0
    4842:	4284      	cmp	r4, r0
    4844:	dd00      	ble.n	4848 <__aeabi_fsub+0x74>
    4846:	e096      	b.n	4976 <__aeabi_fsub+0x1a2>
    4848:	1b04      	subs	r4, r0, r4
    484a:	003a      	movs	r2, r7
    484c:	2020      	movs	r0, #32
    484e:	3401      	adds	r4, #1
    4850:	40e2      	lsrs	r2, r4
    4852:	1b04      	subs	r4, r0, r4
    4854:	40a7      	lsls	r7, r4
    4856:	003b      	movs	r3, r7
    4858:	1e5f      	subs	r7, r3, #1
    485a:	41bb      	sbcs	r3, r7
    485c:	2400      	movs	r4, #0
    485e:	4313      	orrs	r3, r2
    4860:	075a      	lsls	r2, r3, #29
    4862:	d004      	beq.n	486e <__aeabi_fsub+0x9a>
    4864:	220f      	movs	r2, #15
    4866:	401a      	ands	r2, r3
    4868:	2a04      	cmp	r2, #4
    486a:	d000      	beq.n	486e <__aeabi_fsub+0x9a>
    486c:	3304      	adds	r3, #4
    486e:	015a      	lsls	r2, r3, #5
    4870:	d527      	bpl.n	48c2 <__aeabi_fsub+0xee>
    4872:	3401      	adds	r4, #1
    4874:	2cff      	cmp	r4, #255	; 0xff
    4876:	d100      	bne.n	487a <__aeabi_fsub+0xa6>
    4878:	e079      	b.n	496e <__aeabi_fsub+0x19a>
    487a:	2201      	movs	r2, #1
    487c:	019b      	lsls	r3, r3, #6
    487e:	0a5b      	lsrs	r3, r3, #9
    4880:	b2e4      	uxtb	r4, r4
    4882:	402a      	ands	r2, r5
    4884:	025b      	lsls	r3, r3, #9
    4886:	05e4      	lsls	r4, r4, #23
    4888:	0a58      	lsrs	r0, r3, #9
    488a:	07d2      	lsls	r2, r2, #31
    488c:	4320      	orrs	r0, r4
    488e:	4310      	orrs	r0, r2
    4890:	bc1c      	pop	{r2, r3, r4}
    4892:	4690      	mov	r8, r2
    4894:	4699      	mov	r9, r3
    4896:	46a2      	mov	sl, r4
    4898:	bdf0      	pop	{r4, r5, r6, r7, pc}
    489a:	2cff      	cmp	r4, #255	; 0xff
    489c:	d0e0      	beq.n	4860 <__aeabi_fsub+0x8c>
    489e:	2180      	movs	r1, #128	; 0x80
    48a0:	04c9      	lsls	r1, r1, #19
    48a2:	430e      	orrs	r6, r1
    48a4:	2a1b      	cmp	r2, #27
    48a6:	dc7b      	bgt.n	49a0 <__aeabi_fsub+0x1cc>
    48a8:	0031      	movs	r1, r6
    48aa:	2020      	movs	r0, #32
    48ac:	40d1      	lsrs	r1, r2
    48ae:	1a82      	subs	r2, r0, r2
    48b0:	4096      	lsls	r6, r2
    48b2:	1e72      	subs	r2, r6, #1
    48b4:	4196      	sbcs	r6, r2
    48b6:	430e      	orrs	r6, r1
    48b8:	1b9b      	subs	r3, r3, r6
    48ba:	015a      	lsls	r2, r3, #5
    48bc:	d4ba      	bmi.n	4834 <__aeabi_fsub+0x60>
    48be:	075a      	lsls	r2, r3, #29
    48c0:	d1d0      	bne.n	4864 <__aeabi_fsub+0x90>
    48c2:	2201      	movs	r2, #1
    48c4:	08df      	lsrs	r7, r3, #3
    48c6:	402a      	ands	r2, r5
    48c8:	2cff      	cmp	r4, #255	; 0xff
    48ca:	d133      	bne.n	4934 <__aeabi_fsub+0x160>
    48cc:	2f00      	cmp	r7, #0
    48ce:	d100      	bne.n	48d2 <__aeabi_fsub+0xfe>
    48d0:	e0a8      	b.n	4a24 <__aeabi_fsub+0x250>
    48d2:	2380      	movs	r3, #128	; 0x80
    48d4:	03db      	lsls	r3, r3, #15
    48d6:	433b      	orrs	r3, r7
    48d8:	025b      	lsls	r3, r3, #9
    48da:	0a5b      	lsrs	r3, r3, #9
    48dc:	24ff      	movs	r4, #255	; 0xff
    48de:	e7d1      	b.n	4884 <__aeabi_fsub+0xb0>
    48e0:	1a21      	subs	r1, r4, r0
    48e2:	2900      	cmp	r1, #0
    48e4:	dd4c      	ble.n	4980 <__aeabi_fsub+0x1ac>
    48e6:	2800      	cmp	r0, #0
    48e8:	d02a      	beq.n	4940 <__aeabi_fsub+0x16c>
    48ea:	2cff      	cmp	r4, #255	; 0xff
    48ec:	d0b8      	beq.n	4860 <__aeabi_fsub+0x8c>
    48ee:	2080      	movs	r0, #128	; 0x80
    48f0:	04c0      	lsls	r0, r0, #19
    48f2:	4306      	orrs	r6, r0
    48f4:	291b      	cmp	r1, #27
    48f6:	dd00      	ble.n	48fa <__aeabi_fsub+0x126>
    48f8:	e0af      	b.n	4a5a <__aeabi_fsub+0x286>
    48fa:	0030      	movs	r0, r6
    48fc:	2720      	movs	r7, #32
    48fe:	40c8      	lsrs	r0, r1
    4900:	1a79      	subs	r1, r7, r1
    4902:	408e      	lsls	r6, r1
    4904:	1e71      	subs	r1, r6, #1
    4906:	418e      	sbcs	r6, r1
    4908:	4306      	orrs	r6, r0
    490a:	199b      	adds	r3, r3, r6
    490c:	0159      	lsls	r1, r3, #5
    490e:	d5d6      	bpl.n	48be <__aeabi_fsub+0xea>
    4910:	3401      	adds	r4, #1
    4912:	2cff      	cmp	r4, #255	; 0xff
    4914:	d100      	bne.n	4918 <__aeabi_fsub+0x144>
    4916:	e085      	b.n	4a24 <__aeabi_fsub+0x250>
    4918:	2201      	movs	r2, #1
    491a:	497a      	ldr	r1, [pc, #488]	; (4b04 <__aeabi_fsub+0x330>)
    491c:	401a      	ands	r2, r3
    491e:	085b      	lsrs	r3, r3, #1
    4920:	400b      	ands	r3, r1
    4922:	4313      	orrs	r3, r2
    4924:	e79c      	b.n	4860 <__aeabi_fsub+0x8c>
    4926:	2e00      	cmp	r6, #0
    4928:	d000      	beq.n	492c <__aeabi_fsub+0x158>
    492a:	e770      	b.n	480e <__aeabi_fsub+0x3a>
    492c:	e76b      	b.n	4806 <__aeabi_fsub+0x32>
    492e:	1e3b      	subs	r3, r7, #0
    4930:	d1c5      	bne.n	48be <__aeabi_fsub+0xea>
    4932:	2200      	movs	r2, #0
    4934:	027b      	lsls	r3, r7, #9
    4936:	0a5b      	lsrs	r3, r3, #9
    4938:	b2e4      	uxtb	r4, r4
    493a:	e7a3      	b.n	4884 <__aeabi_fsub+0xb0>
    493c:	0014      	movs	r4, r2
    493e:	e78f      	b.n	4860 <__aeabi_fsub+0x8c>
    4940:	2e00      	cmp	r6, #0
    4942:	d04d      	beq.n	49e0 <__aeabi_fsub+0x20c>
    4944:	1e48      	subs	r0, r1, #1
    4946:	2800      	cmp	r0, #0
    4948:	d157      	bne.n	49fa <__aeabi_fsub+0x226>
    494a:	199b      	adds	r3, r3, r6
    494c:	2401      	movs	r4, #1
    494e:	015a      	lsls	r2, r3, #5
    4950:	d5b5      	bpl.n	48be <__aeabi_fsub+0xea>
    4952:	2402      	movs	r4, #2
    4954:	e7e0      	b.n	4918 <__aeabi_fsub+0x144>
    4956:	2a00      	cmp	r2, #0
    4958:	d125      	bne.n	49a6 <__aeabi_fsub+0x1d2>
    495a:	1c62      	adds	r2, r4, #1
    495c:	b2d2      	uxtb	r2, r2
    495e:	2a01      	cmp	r2, #1
    4960:	dd72      	ble.n	4a48 <__aeabi_fsub+0x274>
    4962:	1b9f      	subs	r7, r3, r6
    4964:	017a      	lsls	r2, r7, #5
    4966:	d535      	bpl.n	49d4 <__aeabi_fsub+0x200>
    4968:	1af7      	subs	r7, r6, r3
    496a:	000d      	movs	r5, r1
    496c:	e764      	b.n	4838 <__aeabi_fsub+0x64>
    496e:	2201      	movs	r2, #1
    4970:	2300      	movs	r3, #0
    4972:	402a      	ands	r2, r5
    4974:	e786      	b.n	4884 <__aeabi_fsub+0xb0>
    4976:	003b      	movs	r3, r7
    4978:	4a63      	ldr	r2, [pc, #396]	; (4b08 <__aeabi_fsub+0x334>)
    497a:	1a24      	subs	r4, r4, r0
    497c:	4013      	ands	r3, r2
    497e:	e76f      	b.n	4860 <__aeabi_fsub+0x8c>
    4980:	2900      	cmp	r1, #0
    4982:	d16c      	bne.n	4a5e <__aeabi_fsub+0x28a>
    4984:	1c61      	adds	r1, r4, #1
    4986:	b2c8      	uxtb	r0, r1
    4988:	2801      	cmp	r0, #1
    498a:	dd4e      	ble.n	4a2a <__aeabi_fsub+0x256>
    498c:	29ff      	cmp	r1, #255	; 0xff
    498e:	d049      	beq.n	4a24 <__aeabi_fsub+0x250>
    4990:	199b      	adds	r3, r3, r6
    4992:	085b      	lsrs	r3, r3, #1
    4994:	000c      	movs	r4, r1
    4996:	e763      	b.n	4860 <__aeabi_fsub+0x8c>
    4998:	2aff      	cmp	r2, #255	; 0xff
    499a:	d041      	beq.n	4a20 <__aeabi_fsub+0x24c>
    499c:	000a      	movs	r2, r1
    499e:	e781      	b.n	48a4 <__aeabi_fsub+0xd0>
    49a0:	2601      	movs	r6, #1
    49a2:	1b9b      	subs	r3, r3, r6
    49a4:	e789      	b.n	48ba <__aeabi_fsub+0xe6>
    49a6:	2c00      	cmp	r4, #0
    49a8:	d01c      	beq.n	49e4 <__aeabi_fsub+0x210>
    49aa:	28ff      	cmp	r0, #255	; 0xff
    49ac:	d021      	beq.n	49f2 <__aeabi_fsub+0x21e>
    49ae:	2480      	movs	r4, #128	; 0x80
    49b0:	04e4      	lsls	r4, r4, #19
    49b2:	4252      	negs	r2, r2
    49b4:	4323      	orrs	r3, r4
    49b6:	2a1b      	cmp	r2, #27
    49b8:	dd00      	ble.n	49bc <__aeabi_fsub+0x1e8>
    49ba:	e096      	b.n	4aea <__aeabi_fsub+0x316>
    49bc:	001c      	movs	r4, r3
    49be:	2520      	movs	r5, #32
    49c0:	40d4      	lsrs	r4, r2
    49c2:	1aaa      	subs	r2, r5, r2
    49c4:	4093      	lsls	r3, r2
    49c6:	1e5a      	subs	r2, r3, #1
    49c8:	4193      	sbcs	r3, r2
    49ca:	4323      	orrs	r3, r4
    49cc:	1af3      	subs	r3, r6, r3
    49ce:	0004      	movs	r4, r0
    49d0:	000d      	movs	r5, r1
    49d2:	e72d      	b.n	4830 <__aeabi_fsub+0x5c>
    49d4:	2f00      	cmp	r7, #0
    49d6:	d000      	beq.n	49da <__aeabi_fsub+0x206>
    49d8:	e72e      	b.n	4838 <__aeabi_fsub+0x64>
    49da:	2200      	movs	r2, #0
    49dc:	2400      	movs	r4, #0
    49de:	e7a9      	b.n	4934 <__aeabi_fsub+0x160>
    49e0:	000c      	movs	r4, r1
    49e2:	e73d      	b.n	4860 <__aeabi_fsub+0x8c>
    49e4:	2b00      	cmp	r3, #0
    49e6:	d058      	beq.n	4a9a <__aeabi_fsub+0x2c6>
    49e8:	43d2      	mvns	r2, r2
    49ea:	2a00      	cmp	r2, #0
    49ec:	d0ee      	beq.n	49cc <__aeabi_fsub+0x1f8>
    49ee:	28ff      	cmp	r0, #255	; 0xff
    49f0:	d1e1      	bne.n	49b6 <__aeabi_fsub+0x1e2>
    49f2:	0033      	movs	r3, r6
    49f4:	24ff      	movs	r4, #255	; 0xff
    49f6:	000d      	movs	r5, r1
    49f8:	e732      	b.n	4860 <__aeabi_fsub+0x8c>
    49fa:	29ff      	cmp	r1, #255	; 0xff
    49fc:	d010      	beq.n	4a20 <__aeabi_fsub+0x24c>
    49fe:	0001      	movs	r1, r0
    4a00:	e778      	b.n	48f4 <__aeabi_fsub+0x120>
    4a02:	2b00      	cmp	r3, #0
    4a04:	d06e      	beq.n	4ae4 <__aeabi_fsub+0x310>
    4a06:	24ff      	movs	r4, #255	; 0xff
    4a08:	2e00      	cmp	r6, #0
    4a0a:	d100      	bne.n	4a0e <__aeabi_fsub+0x23a>
    4a0c:	e728      	b.n	4860 <__aeabi_fsub+0x8c>
    4a0e:	2280      	movs	r2, #128	; 0x80
    4a10:	4651      	mov	r1, sl
    4a12:	03d2      	lsls	r2, r2, #15
    4a14:	4211      	tst	r1, r2
    4a16:	d003      	beq.n	4a20 <__aeabi_fsub+0x24c>
    4a18:	4661      	mov	r1, ip
    4a1a:	4211      	tst	r1, r2
    4a1c:	d100      	bne.n	4a20 <__aeabi_fsub+0x24c>
    4a1e:	0033      	movs	r3, r6
    4a20:	24ff      	movs	r4, #255	; 0xff
    4a22:	e71d      	b.n	4860 <__aeabi_fsub+0x8c>
    4a24:	24ff      	movs	r4, #255	; 0xff
    4a26:	2300      	movs	r3, #0
    4a28:	e72c      	b.n	4884 <__aeabi_fsub+0xb0>
    4a2a:	2c00      	cmp	r4, #0
    4a2c:	d1e9      	bne.n	4a02 <__aeabi_fsub+0x22e>
    4a2e:	2b00      	cmp	r3, #0
    4a30:	d063      	beq.n	4afa <__aeabi_fsub+0x326>
    4a32:	2e00      	cmp	r6, #0
    4a34:	d100      	bne.n	4a38 <__aeabi_fsub+0x264>
    4a36:	e713      	b.n	4860 <__aeabi_fsub+0x8c>
    4a38:	199b      	adds	r3, r3, r6
    4a3a:	015a      	lsls	r2, r3, #5
    4a3c:	d400      	bmi.n	4a40 <__aeabi_fsub+0x26c>
    4a3e:	e73e      	b.n	48be <__aeabi_fsub+0xea>
    4a40:	4a31      	ldr	r2, [pc, #196]	; (4b08 <__aeabi_fsub+0x334>)
    4a42:	000c      	movs	r4, r1
    4a44:	4013      	ands	r3, r2
    4a46:	e70b      	b.n	4860 <__aeabi_fsub+0x8c>
    4a48:	2c00      	cmp	r4, #0
    4a4a:	d11e      	bne.n	4a8a <__aeabi_fsub+0x2b6>
    4a4c:	2b00      	cmp	r3, #0
    4a4e:	d12f      	bne.n	4ab0 <__aeabi_fsub+0x2dc>
    4a50:	2e00      	cmp	r6, #0
    4a52:	d04f      	beq.n	4af4 <__aeabi_fsub+0x320>
    4a54:	0033      	movs	r3, r6
    4a56:	000d      	movs	r5, r1
    4a58:	e702      	b.n	4860 <__aeabi_fsub+0x8c>
    4a5a:	2601      	movs	r6, #1
    4a5c:	e755      	b.n	490a <__aeabi_fsub+0x136>
    4a5e:	2c00      	cmp	r4, #0
    4a60:	d11f      	bne.n	4aa2 <__aeabi_fsub+0x2ce>
    4a62:	2b00      	cmp	r3, #0
    4a64:	d043      	beq.n	4aee <__aeabi_fsub+0x31a>
    4a66:	43c9      	mvns	r1, r1
    4a68:	2900      	cmp	r1, #0
    4a6a:	d00b      	beq.n	4a84 <__aeabi_fsub+0x2b0>
    4a6c:	28ff      	cmp	r0, #255	; 0xff
    4a6e:	d039      	beq.n	4ae4 <__aeabi_fsub+0x310>
    4a70:	291b      	cmp	r1, #27
    4a72:	dc44      	bgt.n	4afe <__aeabi_fsub+0x32a>
    4a74:	001c      	movs	r4, r3
    4a76:	2720      	movs	r7, #32
    4a78:	40cc      	lsrs	r4, r1
    4a7a:	1a79      	subs	r1, r7, r1
    4a7c:	408b      	lsls	r3, r1
    4a7e:	1e59      	subs	r1, r3, #1
    4a80:	418b      	sbcs	r3, r1
    4a82:	4323      	orrs	r3, r4
    4a84:	199b      	adds	r3, r3, r6
    4a86:	0004      	movs	r4, r0
    4a88:	e740      	b.n	490c <__aeabi_fsub+0x138>
    4a8a:	2b00      	cmp	r3, #0
    4a8c:	d11a      	bne.n	4ac4 <__aeabi_fsub+0x2f0>
    4a8e:	2e00      	cmp	r6, #0
    4a90:	d124      	bne.n	4adc <__aeabi_fsub+0x308>
    4a92:	2780      	movs	r7, #128	; 0x80
    4a94:	2200      	movs	r2, #0
    4a96:	03ff      	lsls	r7, r7, #15
    4a98:	e71b      	b.n	48d2 <__aeabi_fsub+0xfe>
    4a9a:	0033      	movs	r3, r6
    4a9c:	0004      	movs	r4, r0
    4a9e:	000d      	movs	r5, r1
    4aa0:	e6de      	b.n	4860 <__aeabi_fsub+0x8c>
    4aa2:	28ff      	cmp	r0, #255	; 0xff
    4aa4:	d01e      	beq.n	4ae4 <__aeabi_fsub+0x310>
    4aa6:	2480      	movs	r4, #128	; 0x80
    4aa8:	04e4      	lsls	r4, r4, #19
    4aaa:	4249      	negs	r1, r1
    4aac:	4323      	orrs	r3, r4
    4aae:	e7df      	b.n	4a70 <__aeabi_fsub+0x29c>
    4ab0:	2e00      	cmp	r6, #0
    4ab2:	d100      	bne.n	4ab6 <__aeabi_fsub+0x2e2>
    4ab4:	e6d4      	b.n	4860 <__aeabi_fsub+0x8c>
    4ab6:	1b9f      	subs	r7, r3, r6
    4ab8:	017a      	lsls	r2, r7, #5
    4aba:	d400      	bmi.n	4abe <__aeabi_fsub+0x2ea>
    4abc:	e737      	b.n	492e <__aeabi_fsub+0x15a>
    4abe:	1af3      	subs	r3, r6, r3
    4ac0:	000d      	movs	r5, r1
    4ac2:	e6cd      	b.n	4860 <__aeabi_fsub+0x8c>
    4ac4:	24ff      	movs	r4, #255	; 0xff
    4ac6:	2e00      	cmp	r6, #0
    4ac8:	d100      	bne.n	4acc <__aeabi_fsub+0x2f8>
    4aca:	e6c9      	b.n	4860 <__aeabi_fsub+0x8c>
    4acc:	2280      	movs	r2, #128	; 0x80
    4ace:	4650      	mov	r0, sl
    4ad0:	03d2      	lsls	r2, r2, #15
    4ad2:	4210      	tst	r0, r2
    4ad4:	d0a4      	beq.n	4a20 <__aeabi_fsub+0x24c>
    4ad6:	4660      	mov	r0, ip
    4ad8:	4210      	tst	r0, r2
    4ada:	d1a1      	bne.n	4a20 <__aeabi_fsub+0x24c>
    4adc:	0033      	movs	r3, r6
    4ade:	000d      	movs	r5, r1
    4ae0:	24ff      	movs	r4, #255	; 0xff
    4ae2:	e6bd      	b.n	4860 <__aeabi_fsub+0x8c>
    4ae4:	0033      	movs	r3, r6
    4ae6:	24ff      	movs	r4, #255	; 0xff
    4ae8:	e6ba      	b.n	4860 <__aeabi_fsub+0x8c>
    4aea:	2301      	movs	r3, #1
    4aec:	e76e      	b.n	49cc <__aeabi_fsub+0x1f8>
    4aee:	0033      	movs	r3, r6
    4af0:	0004      	movs	r4, r0
    4af2:	e6b5      	b.n	4860 <__aeabi_fsub+0x8c>
    4af4:	2700      	movs	r7, #0
    4af6:	2200      	movs	r2, #0
    4af8:	e71c      	b.n	4934 <__aeabi_fsub+0x160>
    4afa:	0033      	movs	r3, r6
    4afc:	e6b0      	b.n	4860 <__aeabi_fsub+0x8c>
    4afe:	2301      	movs	r3, #1
    4b00:	e7c0      	b.n	4a84 <__aeabi_fsub+0x2b0>
    4b02:	46c0      	nop			; (mov r8, r8)
    4b04:	7dffffff 	.word	0x7dffffff
    4b08:	fbffffff 	.word	0xfbffffff

00004b0c <__aeabi_f2iz>:
    4b0c:	0241      	lsls	r1, r0, #9
    4b0e:	0043      	lsls	r3, r0, #1
    4b10:	0fc2      	lsrs	r2, r0, #31
    4b12:	0a49      	lsrs	r1, r1, #9
    4b14:	0e1b      	lsrs	r3, r3, #24
    4b16:	2000      	movs	r0, #0
    4b18:	2b7e      	cmp	r3, #126	; 0x7e
    4b1a:	dd0d      	ble.n	4b38 <__aeabi_f2iz+0x2c>
    4b1c:	2b9d      	cmp	r3, #157	; 0x9d
    4b1e:	dc0c      	bgt.n	4b3a <__aeabi_f2iz+0x2e>
    4b20:	2080      	movs	r0, #128	; 0x80
    4b22:	0400      	lsls	r0, r0, #16
    4b24:	4301      	orrs	r1, r0
    4b26:	2b95      	cmp	r3, #149	; 0x95
    4b28:	dc0a      	bgt.n	4b40 <__aeabi_f2iz+0x34>
    4b2a:	2096      	movs	r0, #150	; 0x96
    4b2c:	1ac3      	subs	r3, r0, r3
    4b2e:	40d9      	lsrs	r1, r3
    4b30:	4248      	negs	r0, r1
    4b32:	2a00      	cmp	r2, #0
    4b34:	d100      	bne.n	4b38 <__aeabi_f2iz+0x2c>
    4b36:	0008      	movs	r0, r1
    4b38:	4770      	bx	lr
    4b3a:	4b03      	ldr	r3, [pc, #12]	; (4b48 <__aeabi_f2iz+0x3c>)
    4b3c:	18d0      	adds	r0, r2, r3
    4b3e:	e7fb      	b.n	4b38 <__aeabi_f2iz+0x2c>
    4b40:	3b96      	subs	r3, #150	; 0x96
    4b42:	4099      	lsls	r1, r3
    4b44:	e7f4      	b.n	4b30 <__aeabi_f2iz+0x24>
    4b46:	46c0      	nop			; (mov r8, r8)
    4b48:	7fffffff 	.word	0x7fffffff

00004b4c <__aeabi_i2f>:
    4b4c:	b570      	push	{r4, r5, r6, lr}
    4b4e:	2800      	cmp	r0, #0
    4b50:	d030      	beq.n	4bb4 <__aeabi_i2f+0x68>
    4b52:	17c3      	asrs	r3, r0, #31
    4b54:	18c4      	adds	r4, r0, r3
    4b56:	405c      	eors	r4, r3
    4b58:	0fc5      	lsrs	r5, r0, #31
    4b5a:	0020      	movs	r0, r4
    4b5c:	f001 fb1e 	bl	619c <__clzsi2>
    4b60:	239e      	movs	r3, #158	; 0x9e
    4b62:	1a1b      	subs	r3, r3, r0
    4b64:	2b96      	cmp	r3, #150	; 0x96
    4b66:	dc0d      	bgt.n	4b84 <__aeabi_i2f+0x38>
    4b68:	2296      	movs	r2, #150	; 0x96
    4b6a:	1ad2      	subs	r2, r2, r3
    4b6c:	4094      	lsls	r4, r2
    4b6e:	002a      	movs	r2, r5
    4b70:	0264      	lsls	r4, r4, #9
    4b72:	0a64      	lsrs	r4, r4, #9
    4b74:	b2db      	uxtb	r3, r3
    4b76:	0264      	lsls	r4, r4, #9
    4b78:	05db      	lsls	r3, r3, #23
    4b7a:	0a60      	lsrs	r0, r4, #9
    4b7c:	07d2      	lsls	r2, r2, #31
    4b7e:	4318      	orrs	r0, r3
    4b80:	4310      	orrs	r0, r2
    4b82:	bd70      	pop	{r4, r5, r6, pc}
    4b84:	2b99      	cmp	r3, #153	; 0x99
    4b86:	dc19      	bgt.n	4bbc <__aeabi_i2f+0x70>
    4b88:	2299      	movs	r2, #153	; 0x99
    4b8a:	1ad2      	subs	r2, r2, r3
    4b8c:	2a00      	cmp	r2, #0
    4b8e:	dd29      	ble.n	4be4 <__aeabi_i2f+0x98>
    4b90:	4094      	lsls	r4, r2
    4b92:	0022      	movs	r2, r4
    4b94:	4c14      	ldr	r4, [pc, #80]	; (4be8 <__aeabi_i2f+0x9c>)
    4b96:	4014      	ands	r4, r2
    4b98:	0751      	lsls	r1, r2, #29
    4b9a:	d004      	beq.n	4ba6 <__aeabi_i2f+0x5a>
    4b9c:	210f      	movs	r1, #15
    4b9e:	400a      	ands	r2, r1
    4ba0:	2a04      	cmp	r2, #4
    4ba2:	d000      	beq.n	4ba6 <__aeabi_i2f+0x5a>
    4ba4:	3404      	adds	r4, #4
    4ba6:	0162      	lsls	r2, r4, #5
    4ba8:	d413      	bmi.n	4bd2 <__aeabi_i2f+0x86>
    4baa:	01a4      	lsls	r4, r4, #6
    4bac:	0a64      	lsrs	r4, r4, #9
    4bae:	b2db      	uxtb	r3, r3
    4bb0:	002a      	movs	r2, r5
    4bb2:	e7e0      	b.n	4b76 <__aeabi_i2f+0x2a>
    4bb4:	2200      	movs	r2, #0
    4bb6:	2300      	movs	r3, #0
    4bb8:	2400      	movs	r4, #0
    4bba:	e7dc      	b.n	4b76 <__aeabi_i2f+0x2a>
    4bbc:	2205      	movs	r2, #5
    4bbe:	0021      	movs	r1, r4
    4bc0:	1a12      	subs	r2, r2, r0
    4bc2:	40d1      	lsrs	r1, r2
    4bc4:	22b9      	movs	r2, #185	; 0xb9
    4bc6:	1ad2      	subs	r2, r2, r3
    4bc8:	4094      	lsls	r4, r2
    4bca:	1e62      	subs	r2, r4, #1
    4bcc:	4194      	sbcs	r4, r2
    4bce:	430c      	orrs	r4, r1
    4bd0:	e7da      	b.n	4b88 <__aeabi_i2f+0x3c>
    4bd2:	4b05      	ldr	r3, [pc, #20]	; (4be8 <__aeabi_i2f+0x9c>)
    4bd4:	002a      	movs	r2, r5
    4bd6:	401c      	ands	r4, r3
    4bd8:	239f      	movs	r3, #159	; 0x9f
    4bda:	01a4      	lsls	r4, r4, #6
    4bdc:	1a1b      	subs	r3, r3, r0
    4bde:	0a64      	lsrs	r4, r4, #9
    4be0:	b2db      	uxtb	r3, r3
    4be2:	e7c8      	b.n	4b76 <__aeabi_i2f+0x2a>
    4be4:	0022      	movs	r2, r4
    4be6:	e7d5      	b.n	4b94 <__aeabi_i2f+0x48>
    4be8:	fbffffff 	.word	0xfbffffff

00004bec <__aeabi_ui2f>:
    4bec:	b510      	push	{r4, lr}
    4bee:	1e04      	subs	r4, r0, #0
    4bf0:	d027      	beq.n	4c42 <__aeabi_ui2f+0x56>
    4bf2:	f001 fad3 	bl	619c <__clzsi2>
    4bf6:	239e      	movs	r3, #158	; 0x9e
    4bf8:	1a1b      	subs	r3, r3, r0
    4bfa:	2b96      	cmp	r3, #150	; 0x96
    4bfc:	dc0a      	bgt.n	4c14 <__aeabi_ui2f+0x28>
    4bfe:	2296      	movs	r2, #150	; 0x96
    4c00:	1ad2      	subs	r2, r2, r3
    4c02:	4094      	lsls	r4, r2
    4c04:	0264      	lsls	r4, r4, #9
    4c06:	0a64      	lsrs	r4, r4, #9
    4c08:	b2db      	uxtb	r3, r3
    4c0a:	0264      	lsls	r4, r4, #9
    4c0c:	05db      	lsls	r3, r3, #23
    4c0e:	0a60      	lsrs	r0, r4, #9
    4c10:	4318      	orrs	r0, r3
    4c12:	bd10      	pop	{r4, pc}
    4c14:	2b99      	cmp	r3, #153	; 0x99
    4c16:	dc17      	bgt.n	4c48 <__aeabi_ui2f+0x5c>
    4c18:	2299      	movs	r2, #153	; 0x99
    4c1a:	1ad2      	subs	r2, r2, r3
    4c1c:	2a00      	cmp	r2, #0
    4c1e:	dd27      	ble.n	4c70 <__aeabi_ui2f+0x84>
    4c20:	4094      	lsls	r4, r2
    4c22:	0022      	movs	r2, r4
    4c24:	4c13      	ldr	r4, [pc, #76]	; (4c74 <__aeabi_ui2f+0x88>)
    4c26:	4014      	ands	r4, r2
    4c28:	0751      	lsls	r1, r2, #29
    4c2a:	d004      	beq.n	4c36 <__aeabi_ui2f+0x4a>
    4c2c:	210f      	movs	r1, #15
    4c2e:	400a      	ands	r2, r1
    4c30:	2a04      	cmp	r2, #4
    4c32:	d000      	beq.n	4c36 <__aeabi_ui2f+0x4a>
    4c34:	3404      	adds	r4, #4
    4c36:	0162      	lsls	r2, r4, #5
    4c38:	d412      	bmi.n	4c60 <__aeabi_ui2f+0x74>
    4c3a:	01a4      	lsls	r4, r4, #6
    4c3c:	0a64      	lsrs	r4, r4, #9
    4c3e:	b2db      	uxtb	r3, r3
    4c40:	e7e3      	b.n	4c0a <__aeabi_ui2f+0x1e>
    4c42:	2300      	movs	r3, #0
    4c44:	2400      	movs	r4, #0
    4c46:	e7e0      	b.n	4c0a <__aeabi_ui2f+0x1e>
    4c48:	22b9      	movs	r2, #185	; 0xb9
    4c4a:	0021      	movs	r1, r4
    4c4c:	1ad2      	subs	r2, r2, r3
    4c4e:	4091      	lsls	r1, r2
    4c50:	000a      	movs	r2, r1
    4c52:	1e51      	subs	r1, r2, #1
    4c54:	418a      	sbcs	r2, r1
    4c56:	2105      	movs	r1, #5
    4c58:	1a09      	subs	r1, r1, r0
    4c5a:	40cc      	lsrs	r4, r1
    4c5c:	4314      	orrs	r4, r2
    4c5e:	e7db      	b.n	4c18 <__aeabi_ui2f+0x2c>
    4c60:	4b04      	ldr	r3, [pc, #16]	; (4c74 <__aeabi_ui2f+0x88>)
    4c62:	401c      	ands	r4, r3
    4c64:	239f      	movs	r3, #159	; 0x9f
    4c66:	01a4      	lsls	r4, r4, #6
    4c68:	1a1b      	subs	r3, r3, r0
    4c6a:	0a64      	lsrs	r4, r4, #9
    4c6c:	b2db      	uxtb	r3, r3
    4c6e:	e7cc      	b.n	4c0a <__aeabi_ui2f+0x1e>
    4c70:	0022      	movs	r2, r4
    4c72:	e7d7      	b.n	4c24 <__aeabi_ui2f+0x38>
    4c74:	fbffffff 	.word	0xfbffffff

00004c78 <__aeabi_ddiv>:
    4c78:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c7a:	4657      	mov	r7, sl
    4c7c:	4645      	mov	r5, r8
    4c7e:	46de      	mov	lr, fp
    4c80:	464e      	mov	r6, r9
    4c82:	b5e0      	push	{r5, r6, r7, lr}
    4c84:	004c      	lsls	r4, r1, #1
    4c86:	030e      	lsls	r6, r1, #12
    4c88:	b087      	sub	sp, #28
    4c8a:	4683      	mov	fp, r0
    4c8c:	4692      	mov	sl, r2
    4c8e:	001d      	movs	r5, r3
    4c90:	4680      	mov	r8, r0
    4c92:	0b36      	lsrs	r6, r6, #12
    4c94:	0d64      	lsrs	r4, r4, #21
    4c96:	0fcf      	lsrs	r7, r1, #31
    4c98:	2c00      	cmp	r4, #0
    4c9a:	d04f      	beq.n	4d3c <__aeabi_ddiv+0xc4>
    4c9c:	4b6f      	ldr	r3, [pc, #444]	; (4e5c <__aeabi_ddiv+0x1e4>)
    4c9e:	429c      	cmp	r4, r3
    4ca0:	d035      	beq.n	4d0e <__aeabi_ddiv+0x96>
    4ca2:	2380      	movs	r3, #128	; 0x80
    4ca4:	0f42      	lsrs	r2, r0, #29
    4ca6:	041b      	lsls	r3, r3, #16
    4ca8:	00f6      	lsls	r6, r6, #3
    4caa:	4313      	orrs	r3, r2
    4cac:	4333      	orrs	r3, r6
    4cae:	4699      	mov	r9, r3
    4cb0:	00c3      	lsls	r3, r0, #3
    4cb2:	4698      	mov	r8, r3
    4cb4:	4b6a      	ldr	r3, [pc, #424]	; (4e60 <__aeabi_ddiv+0x1e8>)
    4cb6:	2600      	movs	r6, #0
    4cb8:	469c      	mov	ip, r3
    4cba:	2300      	movs	r3, #0
    4cbc:	4464      	add	r4, ip
    4cbe:	9303      	str	r3, [sp, #12]
    4cc0:	032b      	lsls	r3, r5, #12
    4cc2:	0b1b      	lsrs	r3, r3, #12
    4cc4:	469b      	mov	fp, r3
    4cc6:	006b      	lsls	r3, r5, #1
    4cc8:	0fed      	lsrs	r5, r5, #31
    4cca:	4650      	mov	r0, sl
    4ccc:	0d5b      	lsrs	r3, r3, #21
    4cce:	9501      	str	r5, [sp, #4]
    4cd0:	d05e      	beq.n	4d90 <__aeabi_ddiv+0x118>
    4cd2:	4a62      	ldr	r2, [pc, #392]	; (4e5c <__aeabi_ddiv+0x1e4>)
    4cd4:	4293      	cmp	r3, r2
    4cd6:	d053      	beq.n	4d80 <__aeabi_ddiv+0x108>
    4cd8:	465a      	mov	r2, fp
    4cda:	00d1      	lsls	r1, r2, #3
    4cdc:	2280      	movs	r2, #128	; 0x80
    4cde:	0f40      	lsrs	r0, r0, #29
    4ce0:	0412      	lsls	r2, r2, #16
    4ce2:	4302      	orrs	r2, r0
    4ce4:	430a      	orrs	r2, r1
    4ce6:	4693      	mov	fp, r2
    4ce8:	4652      	mov	r2, sl
    4cea:	00d1      	lsls	r1, r2, #3
    4cec:	4a5c      	ldr	r2, [pc, #368]	; (4e60 <__aeabi_ddiv+0x1e8>)
    4cee:	4694      	mov	ip, r2
    4cf0:	2200      	movs	r2, #0
    4cf2:	4463      	add	r3, ip
    4cf4:	0038      	movs	r0, r7
    4cf6:	4068      	eors	r0, r5
    4cf8:	4684      	mov	ip, r0
    4cfa:	9002      	str	r0, [sp, #8]
    4cfc:	1ae4      	subs	r4, r4, r3
    4cfe:	4316      	orrs	r6, r2
    4d00:	2e0f      	cmp	r6, #15
    4d02:	d900      	bls.n	4d06 <__aeabi_ddiv+0x8e>
    4d04:	e0b4      	b.n	4e70 <__aeabi_ddiv+0x1f8>
    4d06:	4b57      	ldr	r3, [pc, #348]	; (4e64 <__aeabi_ddiv+0x1ec>)
    4d08:	00b6      	lsls	r6, r6, #2
    4d0a:	599b      	ldr	r3, [r3, r6]
    4d0c:	469f      	mov	pc, r3
    4d0e:	0003      	movs	r3, r0
    4d10:	4333      	orrs	r3, r6
    4d12:	4699      	mov	r9, r3
    4d14:	d16c      	bne.n	4df0 <__aeabi_ddiv+0x178>
    4d16:	2300      	movs	r3, #0
    4d18:	4698      	mov	r8, r3
    4d1a:	3302      	adds	r3, #2
    4d1c:	2608      	movs	r6, #8
    4d1e:	9303      	str	r3, [sp, #12]
    4d20:	e7ce      	b.n	4cc0 <__aeabi_ddiv+0x48>
    4d22:	46cb      	mov	fp, r9
    4d24:	4641      	mov	r1, r8
    4d26:	9a03      	ldr	r2, [sp, #12]
    4d28:	9701      	str	r7, [sp, #4]
    4d2a:	2a02      	cmp	r2, #2
    4d2c:	d165      	bne.n	4dfa <__aeabi_ddiv+0x182>
    4d2e:	9b01      	ldr	r3, [sp, #4]
    4d30:	4c4a      	ldr	r4, [pc, #296]	; (4e5c <__aeabi_ddiv+0x1e4>)
    4d32:	469c      	mov	ip, r3
    4d34:	2300      	movs	r3, #0
    4d36:	2200      	movs	r2, #0
    4d38:	4698      	mov	r8, r3
    4d3a:	e06b      	b.n	4e14 <__aeabi_ddiv+0x19c>
    4d3c:	0003      	movs	r3, r0
    4d3e:	4333      	orrs	r3, r6
    4d40:	4699      	mov	r9, r3
    4d42:	d04e      	beq.n	4de2 <__aeabi_ddiv+0x16a>
    4d44:	2e00      	cmp	r6, #0
    4d46:	d100      	bne.n	4d4a <__aeabi_ddiv+0xd2>
    4d48:	e1bc      	b.n	50c4 <__aeabi_ddiv+0x44c>
    4d4a:	0030      	movs	r0, r6
    4d4c:	f001 fa26 	bl	619c <__clzsi2>
    4d50:	0003      	movs	r3, r0
    4d52:	3b0b      	subs	r3, #11
    4d54:	2b1c      	cmp	r3, #28
    4d56:	dd00      	ble.n	4d5a <__aeabi_ddiv+0xe2>
    4d58:	e1ac      	b.n	50b4 <__aeabi_ddiv+0x43c>
    4d5a:	221d      	movs	r2, #29
    4d5c:	1ad3      	subs	r3, r2, r3
    4d5e:	465a      	mov	r2, fp
    4d60:	0001      	movs	r1, r0
    4d62:	40da      	lsrs	r2, r3
    4d64:	3908      	subs	r1, #8
    4d66:	408e      	lsls	r6, r1
    4d68:	0013      	movs	r3, r2
    4d6a:	4333      	orrs	r3, r6
    4d6c:	4699      	mov	r9, r3
    4d6e:	465b      	mov	r3, fp
    4d70:	408b      	lsls	r3, r1
    4d72:	4698      	mov	r8, r3
    4d74:	2300      	movs	r3, #0
    4d76:	4c3c      	ldr	r4, [pc, #240]	; (4e68 <__aeabi_ddiv+0x1f0>)
    4d78:	2600      	movs	r6, #0
    4d7a:	1a24      	subs	r4, r4, r0
    4d7c:	9303      	str	r3, [sp, #12]
    4d7e:	e79f      	b.n	4cc0 <__aeabi_ddiv+0x48>
    4d80:	4651      	mov	r1, sl
    4d82:	465a      	mov	r2, fp
    4d84:	4311      	orrs	r1, r2
    4d86:	d129      	bne.n	4ddc <__aeabi_ddiv+0x164>
    4d88:	2200      	movs	r2, #0
    4d8a:	4693      	mov	fp, r2
    4d8c:	3202      	adds	r2, #2
    4d8e:	e7b1      	b.n	4cf4 <__aeabi_ddiv+0x7c>
    4d90:	4659      	mov	r1, fp
    4d92:	4301      	orrs	r1, r0
    4d94:	d01e      	beq.n	4dd4 <__aeabi_ddiv+0x15c>
    4d96:	465b      	mov	r3, fp
    4d98:	2b00      	cmp	r3, #0
    4d9a:	d100      	bne.n	4d9e <__aeabi_ddiv+0x126>
    4d9c:	e19e      	b.n	50dc <__aeabi_ddiv+0x464>
    4d9e:	4658      	mov	r0, fp
    4da0:	f001 f9fc 	bl	619c <__clzsi2>
    4da4:	0003      	movs	r3, r0
    4da6:	3b0b      	subs	r3, #11
    4da8:	2b1c      	cmp	r3, #28
    4daa:	dd00      	ble.n	4dae <__aeabi_ddiv+0x136>
    4dac:	e18f      	b.n	50ce <__aeabi_ddiv+0x456>
    4dae:	0002      	movs	r2, r0
    4db0:	4659      	mov	r1, fp
    4db2:	3a08      	subs	r2, #8
    4db4:	4091      	lsls	r1, r2
    4db6:	468b      	mov	fp, r1
    4db8:	211d      	movs	r1, #29
    4dba:	1acb      	subs	r3, r1, r3
    4dbc:	4651      	mov	r1, sl
    4dbe:	40d9      	lsrs	r1, r3
    4dc0:	000b      	movs	r3, r1
    4dc2:	4659      	mov	r1, fp
    4dc4:	430b      	orrs	r3, r1
    4dc6:	4651      	mov	r1, sl
    4dc8:	469b      	mov	fp, r3
    4dca:	4091      	lsls	r1, r2
    4dcc:	4b26      	ldr	r3, [pc, #152]	; (4e68 <__aeabi_ddiv+0x1f0>)
    4dce:	2200      	movs	r2, #0
    4dd0:	1a1b      	subs	r3, r3, r0
    4dd2:	e78f      	b.n	4cf4 <__aeabi_ddiv+0x7c>
    4dd4:	2300      	movs	r3, #0
    4dd6:	2201      	movs	r2, #1
    4dd8:	469b      	mov	fp, r3
    4dda:	e78b      	b.n	4cf4 <__aeabi_ddiv+0x7c>
    4ddc:	4651      	mov	r1, sl
    4dde:	2203      	movs	r2, #3
    4de0:	e788      	b.n	4cf4 <__aeabi_ddiv+0x7c>
    4de2:	2300      	movs	r3, #0
    4de4:	4698      	mov	r8, r3
    4de6:	3301      	adds	r3, #1
    4de8:	2604      	movs	r6, #4
    4dea:	2400      	movs	r4, #0
    4dec:	9303      	str	r3, [sp, #12]
    4dee:	e767      	b.n	4cc0 <__aeabi_ddiv+0x48>
    4df0:	2303      	movs	r3, #3
    4df2:	46b1      	mov	r9, r6
    4df4:	9303      	str	r3, [sp, #12]
    4df6:	260c      	movs	r6, #12
    4df8:	e762      	b.n	4cc0 <__aeabi_ddiv+0x48>
    4dfa:	2a03      	cmp	r2, #3
    4dfc:	d100      	bne.n	4e00 <__aeabi_ddiv+0x188>
    4dfe:	e25c      	b.n	52ba <__aeabi_ddiv+0x642>
    4e00:	9b01      	ldr	r3, [sp, #4]
    4e02:	2a01      	cmp	r2, #1
    4e04:	d000      	beq.n	4e08 <__aeabi_ddiv+0x190>
    4e06:	e1e4      	b.n	51d2 <__aeabi_ddiv+0x55a>
    4e08:	4013      	ands	r3, r2
    4e0a:	469c      	mov	ip, r3
    4e0c:	2300      	movs	r3, #0
    4e0e:	2400      	movs	r4, #0
    4e10:	2200      	movs	r2, #0
    4e12:	4698      	mov	r8, r3
    4e14:	2100      	movs	r1, #0
    4e16:	0312      	lsls	r2, r2, #12
    4e18:	0b13      	lsrs	r3, r2, #12
    4e1a:	0d0a      	lsrs	r2, r1, #20
    4e1c:	0512      	lsls	r2, r2, #20
    4e1e:	431a      	orrs	r2, r3
    4e20:	0523      	lsls	r3, r4, #20
    4e22:	4c12      	ldr	r4, [pc, #72]	; (4e6c <__aeabi_ddiv+0x1f4>)
    4e24:	4640      	mov	r0, r8
    4e26:	4022      	ands	r2, r4
    4e28:	4313      	orrs	r3, r2
    4e2a:	4662      	mov	r2, ip
    4e2c:	005b      	lsls	r3, r3, #1
    4e2e:	07d2      	lsls	r2, r2, #31
    4e30:	085b      	lsrs	r3, r3, #1
    4e32:	4313      	orrs	r3, r2
    4e34:	0019      	movs	r1, r3
    4e36:	b007      	add	sp, #28
    4e38:	bc3c      	pop	{r2, r3, r4, r5}
    4e3a:	4690      	mov	r8, r2
    4e3c:	4699      	mov	r9, r3
    4e3e:	46a2      	mov	sl, r4
    4e40:	46ab      	mov	fp, r5
    4e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e44:	2300      	movs	r3, #0
    4e46:	2280      	movs	r2, #128	; 0x80
    4e48:	469c      	mov	ip, r3
    4e4a:	0312      	lsls	r2, r2, #12
    4e4c:	4698      	mov	r8, r3
    4e4e:	4c03      	ldr	r4, [pc, #12]	; (4e5c <__aeabi_ddiv+0x1e4>)
    4e50:	e7e0      	b.n	4e14 <__aeabi_ddiv+0x19c>
    4e52:	2300      	movs	r3, #0
    4e54:	4c01      	ldr	r4, [pc, #4]	; (4e5c <__aeabi_ddiv+0x1e4>)
    4e56:	2200      	movs	r2, #0
    4e58:	4698      	mov	r8, r3
    4e5a:	e7db      	b.n	4e14 <__aeabi_ddiv+0x19c>
    4e5c:	000007ff 	.word	0x000007ff
    4e60:	fffffc01 	.word	0xfffffc01
    4e64:	0000b594 	.word	0x0000b594
    4e68:	fffffc0d 	.word	0xfffffc0d
    4e6c:	800fffff 	.word	0x800fffff
    4e70:	45d9      	cmp	r9, fp
    4e72:	d900      	bls.n	4e76 <__aeabi_ddiv+0x1fe>
    4e74:	e139      	b.n	50ea <__aeabi_ddiv+0x472>
    4e76:	d100      	bne.n	4e7a <__aeabi_ddiv+0x202>
    4e78:	e134      	b.n	50e4 <__aeabi_ddiv+0x46c>
    4e7a:	2300      	movs	r3, #0
    4e7c:	4646      	mov	r6, r8
    4e7e:	464d      	mov	r5, r9
    4e80:	469a      	mov	sl, r3
    4e82:	3c01      	subs	r4, #1
    4e84:	465b      	mov	r3, fp
    4e86:	0e0a      	lsrs	r2, r1, #24
    4e88:	021b      	lsls	r3, r3, #8
    4e8a:	431a      	orrs	r2, r3
    4e8c:	020b      	lsls	r3, r1, #8
    4e8e:	0c17      	lsrs	r7, r2, #16
    4e90:	9303      	str	r3, [sp, #12]
    4e92:	0413      	lsls	r3, r2, #16
    4e94:	0c1b      	lsrs	r3, r3, #16
    4e96:	0039      	movs	r1, r7
    4e98:	0028      	movs	r0, r5
    4e9a:	4690      	mov	r8, r2
    4e9c:	9301      	str	r3, [sp, #4]
    4e9e:	f7fe fe8d 	bl	3bbc <__udivsi3>
    4ea2:	0002      	movs	r2, r0
    4ea4:	9b01      	ldr	r3, [sp, #4]
    4ea6:	4683      	mov	fp, r0
    4ea8:	435a      	muls	r2, r3
    4eaa:	0028      	movs	r0, r5
    4eac:	0039      	movs	r1, r7
    4eae:	4691      	mov	r9, r2
    4eb0:	f7fe ff0a 	bl	3cc8 <__aeabi_uidivmod>
    4eb4:	0c35      	lsrs	r5, r6, #16
    4eb6:	0409      	lsls	r1, r1, #16
    4eb8:	430d      	orrs	r5, r1
    4eba:	45a9      	cmp	r9, r5
    4ebc:	d90d      	bls.n	4eda <__aeabi_ddiv+0x262>
    4ebe:	465b      	mov	r3, fp
    4ec0:	4445      	add	r5, r8
    4ec2:	3b01      	subs	r3, #1
    4ec4:	45a8      	cmp	r8, r5
    4ec6:	d900      	bls.n	4eca <__aeabi_ddiv+0x252>
    4ec8:	e13a      	b.n	5140 <__aeabi_ddiv+0x4c8>
    4eca:	45a9      	cmp	r9, r5
    4ecc:	d800      	bhi.n	4ed0 <__aeabi_ddiv+0x258>
    4ece:	e137      	b.n	5140 <__aeabi_ddiv+0x4c8>
    4ed0:	2302      	movs	r3, #2
    4ed2:	425b      	negs	r3, r3
    4ed4:	469c      	mov	ip, r3
    4ed6:	4445      	add	r5, r8
    4ed8:	44e3      	add	fp, ip
    4eda:	464b      	mov	r3, r9
    4edc:	1aeb      	subs	r3, r5, r3
    4ede:	0039      	movs	r1, r7
    4ee0:	0018      	movs	r0, r3
    4ee2:	9304      	str	r3, [sp, #16]
    4ee4:	f7fe fe6a 	bl	3bbc <__udivsi3>
    4ee8:	9b01      	ldr	r3, [sp, #4]
    4eea:	0005      	movs	r5, r0
    4eec:	4343      	muls	r3, r0
    4eee:	0039      	movs	r1, r7
    4ef0:	9804      	ldr	r0, [sp, #16]
    4ef2:	4699      	mov	r9, r3
    4ef4:	f7fe fee8 	bl	3cc8 <__aeabi_uidivmod>
    4ef8:	0433      	lsls	r3, r6, #16
    4efa:	0409      	lsls	r1, r1, #16
    4efc:	0c1b      	lsrs	r3, r3, #16
    4efe:	430b      	orrs	r3, r1
    4f00:	4599      	cmp	r9, r3
    4f02:	d909      	bls.n	4f18 <__aeabi_ddiv+0x2a0>
    4f04:	4443      	add	r3, r8
    4f06:	1e6a      	subs	r2, r5, #1
    4f08:	4598      	cmp	r8, r3
    4f0a:	d900      	bls.n	4f0e <__aeabi_ddiv+0x296>
    4f0c:	e11a      	b.n	5144 <__aeabi_ddiv+0x4cc>
    4f0e:	4599      	cmp	r9, r3
    4f10:	d800      	bhi.n	4f14 <__aeabi_ddiv+0x29c>
    4f12:	e117      	b.n	5144 <__aeabi_ddiv+0x4cc>
    4f14:	3d02      	subs	r5, #2
    4f16:	4443      	add	r3, r8
    4f18:	464a      	mov	r2, r9
    4f1a:	1a9b      	subs	r3, r3, r2
    4f1c:	465a      	mov	r2, fp
    4f1e:	0412      	lsls	r2, r2, #16
    4f20:	432a      	orrs	r2, r5
    4f22:	9903      	ldr	r1, [sp, #12]
    4f24:	4693      	mov	fp, r2
    4f26:	0c10      	lsrs	r0, r2, #16
    4f28:	0c0a      	lsrs	r2, r1, #16
    4f2a:	4691      	mov	r9, r2
    4f2c:	0409      	lsls	r1, r1, #16
    4f2e:	465a      	mov	r2, fp
    4f30:	0c09      	lsrs	r1, r1, #16
    4f32:	464e      	mov	r6, r9
    4f34:	000d      	movs	r5, r1
    4f36:	0412      	lsls	r2, r2, #16
    4f38:	0c12      	lsrs	r2, r2, #16
    4f3a:	4345      	muls	r5, r0
    4f3c:	9105      	str	r1, [sp, #20]
    4f3e:	4351      	muls	r1, r2
    4f40:	4372      	muls	r2, r6
    4f42:	4370      	muls	r0, r6
    4f44:	1952      	adds	r2, r2, r5
    4f46:	0c0e      	lsrs	r6, r1, #16
    4f48:	18b2      	adds	r2, r6, r2
    4f4a:	4295      	cmp	r5, r2
    4f4c:	d903      	bls.n	4f56 <__aeabi_ddiv+0x2de>
    4f4e:	2580      	movs	r5, #128	; 0x80
    4f50:	026d      	lsls	r5, r5, #9
    4f52:	46ac      	mov	ip, r5
    4f54:	4460      	add	r0, ip
    4f56:	0c15      	lsrs	r5, r2, #16
    4f58:	0409      	lsls	r1, r1, #16
    4f5a:	0412      	lsls	r2, r2, #16
    4f5c:	0c09      	lsrs	r1, r1, #16
    4f5e:	1828      	adds	r0, r5, r0
    4f60:	1852      	adds	r2, r2, r1
    4f62:	4283      	cmp	r3, r0
    4f64:	d200      	bcs.n	4f68 <__aeabi_ddiv+0x2f0>
    4f66:	e0ce      	b.n	5106 <__aeabi_ddiv+0x48e>
    4f68:	d100      	bne.n	4f6c <__aeabi_ddiv+0x2f4>
    4f6a:	e0c8      	b.n	50fe <__aeabi_ddiv+0x486>
    4f6c:	1a1d      	subs	r5, r3, r0
    4f6e:	4653      	mov	r3, sl
    4f70:	1a9e      	subs	r6, r3, r2
    4f72:	45b2      	cmp	sl, r6
    4f74:	4192      	sbcs	r2, r2
    4f76:	4252      	negs	r2, r2
    4f78:	1aab      	subs	r3, r5, r2
    4f7a:	469a      	mov	sl, r3
    4f7c:	4598      	cmp	r8, r3
    4f7e:	d100      	bne.n	4f82 <__aeabi_ddiv+0x30a>
    4f80:	e117      	b.n	51b2 <__aeabi_ddiv+0x53a>
    4f82:	0039      	movs	r1, r7
    4f84:	0018      	movs	r0, r3
    4f86:	f7fe fe19 	bl	3bbc <__udivsi3>
    4f8a:	9b01      	ldr	r3, [sp, #4]
    4f8c:	0005      	movs	r5, r0
    4f8e:	4343      	muls	r3, r0
    4f90:	0039      	movs	r1, r7
    4f92:	4650      	mov	r0, sl
    4f94:	9304      	str	r3, [sp, #16]
    4f96:	f7fe fe97 	bl	3cc8 <__aeabi_uidivmod>
    4f9a:	9804      	ldr	r0, [sp, #16]
    4f9c:	040b      	lsls	r3, r1, #16
    4f9e:	0c31      	lsrs	r1, r6, #16
    4fa0:	4319      	orrs	r1, r3
    4fa2:	4288      	cmp	r0, r1
    4fa4:	d909      	bls.n	4fba <__aeabi_ddiv+0x342>
    4fa6:	4441      	add	r1, r8
    4fa8:	1e6b      	subs	r3, r5, #1
    4faa:	4588      	cmp	r8, r1
    4fac:	d900      	bls.n	4fb0 <__aeabi_ddiv+0x338>
    4fae:	e107      	b.n	51c0 <__aeabi_ddiv+0x548>
    4fb0:	4288      	cmp	r0, r1
    4fb2:	d800      	bhi.n	4fb6 <__aeabi_ddiv+0x33e>
    4fb4:	e104      	b.n	51c0 <__aeabi_ddiv+0x548>
    4fb6:	3d02      	subs	r5, #2
    4fb8:	4441      	add	r1, r8
    4fba:	9b04      	ldr	r3, [sp, #16]
    4fbc:	1acb      	subs	r3, r1, r3
    4fbe:	0018      	movs	r0, r3
    4fc0:	0039      	movs	r1, r7
    4fc2:	9304      	str	r3, [sp, #16]
    4fc4:	f7fe fdfa 	bl	3bbc <__udivsi3>
    4fc8:	9b01      	ldr	r3, [sp, #4]
    4fca:	4682      	mov	sl, r0
    4fcc:	4343      	muls	r3, r0
    4fce:	0039      	movs	r1, r7
    4fd0:	9804      	ldr	r0, [sp, #16]
    4fd2:	9301      	str	r3, [sp, #4]
    4fd4:	f7fe fe78 	bl	3cc8 <__aeabi_uidivmod>
    4fd8:	9801      	ldr	r0, [sp, #4]
    4fda:	040b      	lsls	r3, r1, #16
    4fdc:	0431      	lsls	r1, r6, #16
    4fde:	0c09      	lsrs	r1, r1, #16
    4fe0:	4319      	orrs	r1, r3
    4fe2:	4288      	cmp	r0, r1
    4fe4:	d90d      	bls.n	5002 <__aeabi_ddiv+0x38a>
    4fe6:	4653      	mov	r3, sl
    4fe8:	4441      	add	r1, r8
    4fea:	3b01      	subs	r3, #1
    4fec:	4588      	cmp	r8, r1
    4fee:	d900      	bls.n	4ff2 <__aeabi_ddiv+0x37a>
    4ff0:	e0e8      	b.n	51c4 <__aeabi_ddiv+0x54c>
    4ff2:	4288      	cmp	r0, r1
    4ff4:	d800      	bhi.n	4ff8 <__aeabi_ddiv+0x380>
    4ff6:	e0e5      	b.n	51c4 <__aeabi_ddiv+0x54c>
    4ff8:	2302      	movs	r3, #2
    4ffa:	425b      	negs	r3, r3
    4ffc:	469c      	mov	ip, r3
    4ffe:	4441      	add	r1, r8
    5000:	44e2      	add	sl, ip
    5002:	9b01      	ldr	r3, [sp, #4]
    5004:	042d      	lsls	r5, r5, #16
    5006:	1ace      	subs	r6, r1, r3
    5008:	4651      	mov	r1, sl
    500a:	4329      	orrs	r1, r5
    500c:	9d05      	ldr	r5, [sp, #20]
    500e:	464f      	mov	r7, r9
    5010:	002a      	movs	r2, r5
    5012:	040b      	lsls	r3, r1, #16
    5014:	0c08      	lsrs	r0, r1, #16
    5016:	0c1b      	lsrs	r3, r3, #16
    5018:	435a      	muls	r2, r3
    501a:	4345      	muls	r5, r0
    501c:	437b      	muls	r3, r7
    501e:	4378      	muls	r0, r7
    5020:	195b      	adds	r3, r3, r5
    5022:	0c17      	lsrs	r7, r2, #16
    5024:	18fb      	adds	r3, r7, r3
    5026:	429d      	cmp	r5, r3
    5028:	d903      	bls.n	5032 <__aeabi_ddiv+0x3ba>
    502a:	2580      	movs	r5, #128	; 0x80
    502c:	026d      	lsls	r5, r5, #9
    502e:	46ac      	mov	ip, r5
    5030:	4460      	add	r0, ip
    5032:	0c1d      	lsrs	r5, r3, #16
    5034:	0412      	lsls	r2, r2, #16
    5036:	041b      	lsls	r3, r3, #16
    5038:	0c12      	lsrs	r2, r2, #16
    503a:	1828      	adds	r0, r5, r0
    503c:	189b      	adds	r3, r3, r2
    503e:	4286      	cmp	r6, r0
    5040:	d200      	bcs.n	5044 <__aeabi_ddiv+0x3cc>
    5042:	e093      	b.n	516c <__aeabi_ddiv+0x4f4>
    5044:	d100      	bne.n	5048 <__aeabi_ddiv+0x3d0>
    5046:	e08e      	b.n	5166 <__aeabi_ddiv+0x4ee>
    5048:	2301      	movs	r3, #1
    504a:	4319      	orrs	r1, r3
    504c:	4ba0      	ldr	r3, [pc, #640]	; (52d0 <__aeabi_ddiv+0x658>)
    504e:	18e3      	adds	r3, r4, r3
    5050:	2b00      	cmp	r3, #0
    5052:	dc00      	bgt.n	5056 <__aeabi_ddiv+0x3de>
    5054:	e099      	b.n	518a <__aeabi_ddiv+0x512>
    5056:	074a      	lsls	r2, r1, #29
    5058:	d000      	beq.n	505c <__aeabi_ddiv+0x3e4>
    505a:	e09e      	b.n	519a <__aeabi_ddiv+0x522>
    505c:	465a      	mov	r2, fp
    505e:	01d2      	lsls	r2, r2, #7
    5060:	d506      	bpl.n	5070 <__aeabi_ddiv+0x3f8>
    5062:	465a      	mov	r2, fp
    5064:	4b9b      	ldr	r3, [pc, #620]	; (52d4 <__aeabi_ddiv+0x65c>)
    5066:	401a      	ands	r2, r3
    5068:	2380      	movs	r3, #128	; 0x80
    506a:	4693      	mov	fp, r2
    506c:	00db      	lsls	r3, r3, #3
    506e:	18e3      	adds	r3, r4, r3
    5070:	4a99      	ldr	r2, [pc, #612]	; (52d8 <__aeabi_ddiv+0x660>)
    5072:	4293      	cmp	r3, r2
    5074:	dd68      	ble.n	5148 <__aeabi_ddiv+0x4d0>
    5076:	2301      	movs	r3, #1
    5078:	9a02      	ldr	r2, [sp, #8]
    507a:	4c98      	ldr	r4, [pc, #608]	; (52dc <__aeabi_ddiv+0x664>)
    507c:	401a      	ands	r2, r3
    507e:	2300      	movs	r3, #0
    5080:	4694      	mov	ip, r2
    5082:	4698      	mov	r8, r3
    5084:	2200      	movs	r2, #0
    5086:	e6c5      	b.n	4e14 <__aeabi_ddiv+0x19c>
    5088:	2280      	movs	r2, #128	; 0x80
    508a:	464b      	mov	r3, r9
    508c:	0312      	lsls	r2, r2, #12
    508e:	4213      	tst	r3, r2
    5090:	d00a      	beq.n	50a8 <__aeabi_ddiv+0x430>
    5092:	465b      	mov	r3, fp
    5094:	4213      	tst	r3, r2
    5096:	d106      	bne.n	50a6 <__aeabi_ddiv+0x42e>
    5098:	431a      	orrs	r2, r3
    509a:	0312      	lsls	r2, r2, #12
    509c:	0b12      	lsrs	r2, r2, #12
    509e:	46ac      	mov	ip, r5
    50a0:	4688      	mov	r8, r1
    50a2:	4c8e      	ldr	r4, [pc, #568]	; (52dc <__aeabi_ddiv+0x664>)
    50a4:	e6b6      	b.n	4e14 <__aeabi_ddiv+0x19c>
    50a6:	464b      	mov	r3, r9
    50a8:	431a      	orrs	r2, r3
    50aa:	0312      	lsls	r2, r2, #12
    50ac:	0b12      	lsrs	r2, r2, #12
    50ae:	46bc      	mov	ip, r7
    50b0:	4c8a      	ldr	r4, [pc, #552]	; (52dc <__aeabi_ddiv+0x664>)
    50b2:	e6af      	b.n	4e14 <__aeabi_ddiv+0x19c>
    50b4:	0003      	movs	r3, r0
    50b6:	465a      	mov	r2, fp
    50b8:	3b28      	subs	r3, #40	; 0x28
    50ba:	409a      	lsls	r2, r3
    50bc:	2300      	movs	r3, #0
    50be:	4691      	mov	r9, r2
    50c0:	4698      	mov	r8, r3
    50c2:	e657      	b.n	4d74 <__aeabi_ddiv+0xfc>
    50c4:	4658      	mov	r0, fp
    50c6:	f001 f869 	bl	619c <__clzsi2>
    50ca:	3020      	adds	r0, #32
    50cc:	e640      	b.n	4d50 <__aeabi_ddiv+0xd8>
    50ce:	0003      	movs	r3, r0
    50d0:	4652      	mov	r2, sl
    50d2:	3b28      	subs	r3, #40	; 0x28
    50d4:	409a      	lsls	r2, r3
    50d6:	2100      	movs	r1, #0
    50d8:	4693      	mov	fp, r2
    50da:	e677      	b.n	4dcc <__aeabi_ddiv+0x154>
    50dc:	f001 f85e 	bl	619c <__clzsi2>
    50e0:	3020      	adds	r0, #32
    50e2:	e65f      	b.n	4da4 <__aeabi_ddiv+0x12c>
    50e4:	4588      	cmp	r8, r1
    50e6:	d200      	bcs.n	50ea <__aeabi_ddiv+0x472>
    50e8:	e6c7      	b.n	4e7a <__aeabi_ddiv+0x202>
    50ea:	464b      	mov	r3, r9
    50ec:	07de      	lsls	r6, r3, #31
    50ee:	085d      	lsrs	r5, r3, #1
    50f0:	4643      	mov	r3, r8
    50f2:	085b      	lsrs	r3, r3, #1
    50f4:	431e      	orrs	r6, r3
    50f6:	4643      	mov	r3, r8
    50f8:	07db      	lsls	r3, r3, #31
    50fa:	469a      	mov	sl, r3
    50fc:	e6c2      	b.n	4e84 <__aeabi_ddiv+0x20c>
    50fe:	2500      	movs	r5, #0
    5100:	4592      	cmp	sl, r2
    5102:	d300      	bcc.n	5106 <__aeabi_ddiv+0x48e>
    5104:	e733      	b.n	4f6e <__aeabi_ddiv+0x2f6>
    5106:	9e03      	ldr	r6, [sp, #12]
    5108:	4659      	mov	r1, fp
    510a:	46b4      	mov	ip, r6
    510c:	44e2      	add	sl, ip
    510e:	45b2      	cmp	sl, r6
    5110:	41ad      	sbcs	r5, r5
    5112:	426d      	negs	r5, r5
    5114:	4445      	add	r5, r8
    5116:	18eb      	adds	r3, r5, r3
    5118:	3901      	subs	r1, #1
    511a:	4598      	cmp	r8, r3
    511c:	d207      	bcs.n	512e <__aeabi_ddiv+0x4b6>
    511e:	4298      	cmp	r0, r3
    5120:	d900      	bls.n	5124 <__aeabi_ddiv+0x4ac>
    5122:	e07f      	b.n	5224 <__aeabi_ddiv+0x5ac>
    5124:	d100      	bne.n	5128 <__aeabi_ddiv+0x4b0>
    5126:	e0bc      	b.n	52a2 <__aeabi_ddiv+0x62a>
    5128:	1a1d      	subs	r5, r3, r0
    512a:	468b      	mov	fp, r1
    512c:	e71f      	b.n	4f6e <__aeabi_ddiv+0x2f6>
    512e:	4598      	cmp	r8, r3
    5130:	d1fa      	bne.n	5128 <__aeabi_ddiv+0x4b0>
    5132:	9d03      	ldr	r5, [sp, #12]
    5134:	4555      	cmp	r5, sl
    5136:	d9f2      	bls.n	511e <__aeabi_ddiv+0x4a6>
    5138:	4643      	mov	r3, r8
    513a:	468b      	mov	fp, r1
    513c:	1a1d      	subs	r5, r3, r0
    513e:	e716      	b.n	4f6e <__aeabi_ddiv+0x2f6>
    5140:	469b      	mov	fp, r3
    5142:	e6ca      	b.n	4eda <__aeabi_ddiv+0x262>
    5144:	0015      	movs	r5, r2
    5146:	e6e7      	b.n	4f18 <__aeabi_ddiv+0x2a0>
    5148:	465a      	mov	r2, fp
    514a:	08c9      	lsrs	r1, r1, #3
    514c:	0752      	lsls	r2, r2, #29
    514e:	430a      	orrs	r2, r1
    5150:	055b      	lsls	r3, r3, #21
    5152:	4690      	mov	r8, r2
    5154:	0d5c      	lsrs	r4, r3, #21
    5156:	465a      	mov	r2, fp
    5158:	2301      	movs	r3, #1
    515a:	9902      	ldr	r1, [sp, #8]
    515c:	0252      	lsls	r2, r2, #9
    515e:	4019      	ands	r1, r3
    5160:	0b12      	lsrs	r2, r2, #12
    5162:	468c      	mov	ip, r1
    5164:	e656      	b.n	4e14 <__aeabi_ddiv+0x19c>
    5166:	2b00      	cmp	r3, #0
    5168:	d100      	bne.n	516c <__aeabi_ddiv+0x4f4>
    516a:	e76f      	b.n	504c <__aeabi_ddiv+0x3d4>
    516c:	4446      	add	r6, r8
    516e:	1e4a      	subs	r2, r1, #1
    5170:	45b0      	cmp	r8, r6
    5172:	d929      	bls.n	51c8 <__aeabi_ddiv+0x550>
    5174:	0011      	movs	r1, r2
    5176:	4286      	cmp	r6, r0
    5178:	d000      	beq.n	517c <__aeabi_ddiv+0x504>
    517a:	e765      	b.n	5048 <__aeabi_ddiv+0x3d0>
    517c:	9a03      	ldr	r2, [sp, #12]
    517e:	4293      	cmp	r3, r2
    5180:	d000      	beq.n	5184 <__aeabi_ddiv+0x50c>
    5182:	e761      	b.n	5048 <__aeabi_ddiv+0x3d0>
    5184:	e762      	b.n	504c <__aeabi_ddiv+0x3d4>
    5186:	2101      	movs	r1, #1
    5188:	4249      	negs	r1, r1
    518a:	2001      	movs	r0, #1
    518c:	1ac2      	subs	r2, r0, r3
    518e:	2a38      	cmp	r2, #56	; 0x38
    5190:	dd21      	ble.n	51d6 <__aeabi_ddiv+0x55e>
    5192:	9b02      	ldr	r3, [sp, #8]
    5194:	4003      	ands	r3, r0
    5196:	469c      	mov	ip, r3
    5198:	e638      	b.n	4e0c <__aeabi_ddiv+0x194>
    519a:	220f      	movs	r2, #15
    519c:	400a      	ands	r2, r1
    519e:	2a04      	cmp	r2, #4
    51a0:	d100      	bne.n	51a4 <__aeabi_ddiv+0x52c>
    51a2:	e75b      	b.n	505c <__aeabi_ddiv+0x3e4>
    51a4:	000a      	movs	r2, r1
    51a6:	1d11      	adds	r1, r2, #4
    51a8:	4291      	cmp	r1, r2
    51aa:	4192      	sbcs	r2, r2
    51ac:	4252      	negs	r2, r2
    51ae:	4493      	add	fp, r2
    51b0:	e754      	b.n	505c <__aeabi_ddiv+0x3e4>
    51b2:	4b47      	ldr	r3, [pc, #284]	; (52d0 <__aeabi_ddiv+0x658>)
    51b4:	18e3      	adds	r3, r4, r3
    51b6:	2b00      	cmp	r3, #0
    51b8:	dde5      	ble.n	5186 <__aeabi_ddiv+0x50e>
    51ba:	2201      	movs	r2, #1
    51bc:	4252      	negs	r2, r2
    51be:	e7f2      	b.n	51a6 <__aeabi_ddiv+0x52e>
    51c0:	001d      	movs	r5, r3
    51c2:	e6fa      	b.n	4fba <__aeabi_ddiv+0x342>
    51c4:	469a      	mov	sl, r3
    51c6:	e71c      	b.n	5002 <__aeabi_ddiv+0x38a>
    51c8:	42b0      	cmp	r0, r6
    51ca:	d839      	bhi.n	5240 <__aeabi_ddiv+0x5c8>
    51cc:	d06e      	beq.n	52ac <__aeabi_ddiv+0x634>
    51ce:	0011      	movs	r1, r2
    51d0:	e73a      	b.n	5048 <__aeabi_ddiv+0x3d0>
    51d2:	9302      	str	r3, [sp, #8]
    51d4:	e73a      	b.n	504c <__aeabi_ddiv+0x3d4>
    51d6:	2a1f      	cmp	r2, #31
    51d8:	dc3c      	bgt.n	5254 <__aeabi_ddiv+0x5dc>
    51da:	2320      	movs	r3, #32
    51dc:	1a9b      	subs	r3, r3, r2
    51de:	000c      	movs	r4, r1
    51e0:	4658      	mov	r0, fp
    51e2:	4099      	lsls	r1, r3
    51e4:	4098      	lsls	r0, r3
    51e6:	1e4b      	subs	r3, r1, #1
    51e8:	4199      	sbcs	r1, r3
    51ea:	465b      	mov	r3, fp
    51ec:	40d4      	lsrs	r4, r2
    51ee:	40d3      	lsrs	r3, r2
    51f0:	4320      	orrs	r0, r4
    51f2:	4308      	orrs	r0, r1
    51f4:	001a      	movs	r2, r3
    51f6:	0743      	lsls	r3, r0, #29
    51f8:	d009      	beq.n	520e <__aeabi_ddiv+0x596>
    51fa:	230f      	movs	r3, #15
    51fc:	4003      	ands	r3, r0
    51fe:	2b04      	cmp	r3, #4
    5200:	d005      	beq.n	520e <__aeabi_ddiv+0x596>
    5202:	0001      	movs	r1, r0
    5204:	1d08      	adds	r0, r1, #4
    5206:	4288      	cmp	r0, r1
    5208:	419b      	sbcs	r3, r3
    520a:	425b      	negs	r3, r3
    520c:	18d2      	adds	r2, r2, r3
    520e:	0213      	lsls	r3, r2, #8
    5210:	d53a      	bpl.n	5288 <__aeabi_ddiv+0x610>
    5212:	2301      	movs	r3, #1
    5214:	9a02      	ldr	r2, [sp, #8]
    5216:	2401      	movs	r4, #1
    5218:	401a      	ands	r2, r3
    521a:	2300      	movs	r3, #0
    521c:	4694      	mov	ip, r2
    521e:	4698      	mov	r8, r3
    5220:	2200      	movs	r2, #0
    5222:	e5f7      	b.n	4e14 <__aeabi_ddiv+0x19c>
    5224:	2102      	movs	r1, #2
    5226:	4249      	negs	r1, r1
    5228:	468c      	mov	ip, r1
    522a:	9d03      	ldr	r5, [sp, #12]
    522c:	44e3      	add	fp, ip
    522e:	46ac      	mov	ip, r5
    5230:	44e2      	add	sl, ip
    5232:	45aa      	cmp	sl, r5
    5234:	41ad      	sbcs	r5, r5
    5236:	426d      	negs	r5, r5
    5238:	4445      	add	r5, r8
    523a:	18ed      	adds	r5, r5, r3
    523c:	1a2d      	subs	r5, r5, r0
    523e:	e696      	b.n	4f6e <__aeabi_ddiv+0x2f6>
    5240:	1e8a      	subs	r2, r1, #2
    5242:	9903      	ldr	r1, [sp, #12]
    5244:	004d      	lsls	r5, r1, #1
    5246:	428d      	cmp	r5, r1
    5248:	4189      	sbcs	r1, r1
    524a:	4249      	negs	r1, r1
    524c:	4441      	add	r1, r8
    524e:	1876      	adds	r6, r6, r1
    5250:	9503      	str	r5, [sp, #12]
    5252:	e78f      	b.n	5174 <__aeabi_ddiv+0x4fc>
    5254:	201f      	movs	r0, #31
    5256:	4240      	negs	r0, r0
    5258:	1ac3      	subs	r3, r0, r3
    525a:	4658      	mov	r0, fp
    525c:	40d8      	lsrs	r0, r3
    525e:	0003      	movs	r3, r0
    5260:	2a20      	cmp	r2, #32
    5262:	d028      	beq.n	52b6 <__aeabi_ddiv+0x63e>
    5264:	2040      	movs	r0, #64	; 0x40
    5266:	465d      	mov	r5, fp
    5268:	1a82      	subs	r2, r0, r2
    526a:	4095      	lsls	r5, r2
    526c:	4329      	orrs	r1, r5
    526e:	1e4a      	subs	r2, r1, #1
    5270:	4191      	sbcs	r1, r2
    5272:	4319      	orrs	r1, r3
    5274:	2307      	movs	r3, #7
    5276:	2200      	movs	r2, #0
    5278:	400b      	ands	r3, r1
    527a:	d009      	beq.n	5290 <__aeabi_ddiv+0x618>
    527c:	230f      	movs	r3, #15
    527e:	2200      	movs	r2, #0
    5280:	400b      	ands	r3, r1
    5282:	0008      	movs	r0, r1
    5284:	2b04      	cmp	r3, #4
    5286:	d1bd      	bne.n	5204 <__aeabi_ddiv+0x58c>
    5288:	0001      	movs	r1, r0
    528a:	0753      	lsls	r3, r2, #29
    528c:	0252      	lsls	r2, r2, #9
    528e:	0b12      	lsrs	r2, r2, #12
    5290:	08c9      	lsrs	r1, r1, #3
    5292:	4319      	orrs	r1, r3
    5294:	2301      	movs	r3, #1
    5296:	4688      	mov	r8, r1
    5298:	9902      	ldr	r1, [sp, #8]
    529a:	2400      	movs	r4, #0
    529c:	4019      	ands	r1, r3
    529e:	468c      	mov	ip, r1
    52a0:	e5b8      	b.n	4e14 <__aeabi_ddiv+0x19c>
    52a2:	4552      	cmp	r2, sl
    52a4:	d8be      	bhi.n	5224 <__aeabi_ddiv+0x5ac>
    52a6:	468b      	mov	fp, r1
    52a8:	2500      	movs	r5, #0
    52aa:	e660      	b.n	4f6e <__aeabi_ddiv+0x2f6>
    52ac:	9d03      	ldr	r5, [sp, #12]
    52ae:	429d      	cmp	r5, r3
    52b0:	d3c6      	bcc.n	5240 <__aeabi_ddiv+0x5c8>
    52b2:	0011      	movs	r1, r2
    52b4:	e762      	b.n	517c <__aeabi_ddiv+0x504>
    52b6:	2500      	movs	r5, #0
    52b8:	e7d8      	b.n	526c <__aeabi_ddiv+0x5f4>
    52ba:	2280      	movs	r2, #128	; 0x80
    52bc:	465b      	mov	r3, fp
    52be:	0312      	lsls	r2, r2, #12
    52c0:	431a      	orrs	r2, r3
    52c2:	9b01      	ldr	r3, [sp, #4]
    52c4:	0312      	lsls	r2, r2, #12
    52c6:	0b12      	lsrs	r2, r2, #12
    52c8:	469c      	mov	ip, r3
    52ca:	4688      	mov	r8, r1
    52cc:	4c03      	ldr	r4, [pc, #12]	; (52dc <__aeabi_ddiv+0x664>)
    52ce:	e5a1      	b.n	4e14 <__aeabi_ddiv+0x19c>
    52d0:	000003ff 	.word	0x000003ff
    52d4:	feffffff 	.word	0xfeffffff
    52d8:	000007fe 	.word	0x000007fe
    52dc:	000007ff 	.word	0x000007ff

000052e0 <__aeabi_dmul>:
    52e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    52e2:	4657      	mov	r7, sl
    52e4:	4645      	mov	r5, r8
    52e6:	46de      	mov	lr, fp
    52e8:	464e      	mov	r6, r9
    52ea:	b5e0      	push	{r5, r6, r7, lr}
    52ec:	030c      	lsls	r4, r1, #12
    52ee:	4698      	mov	r8, r3
    52f0:	004e      	lsls	r6, r1, #1
    52f2:	0b23      	lsrs	r3, r4, #12
    52f4:	b087      	sub	sp, #28
    52f6:	0007      	movs	r7, r0
    52f8:	4692      	mov	sl, r2
    52fa:	469b      	mov	fp, r3
    52fc:	0d76      	lsrs	r6, r6, #21
    52fe:	0fcd      	lsrs	r5, r1, #31
    5300:	2e00      	cmp	r6, #0
    5302:	d06b      	beq.n	53dc <__aeabi_dmul+0xfc>
    5304:	4b6d      	ldr	r3, [pc, #436]	; (54bc <__aeabi_dmul+0x1dc>)
    5306:	429e      	cmp	r6, r3
    5308:	d035      	beq.n	5376 <__aeabi_dmul+0x96>
    530a:	2480      	movs	r4, #128	; 0x80
    530c:	465b      	mov	r3, fp
    530e:	0f42      	lsrs	r2, r0, #29
    5310:	0424      	lsls	r4, r4, #16
    5312:	00db      	lsls	r3, r3, #3
    5314:	4314      	orrs	r4, r2
    5316:	431c      	orrs	r4, r3
    5318:	00c3      	lsls	r3, r0, #3
    531a:	4699      	mov	r9, r3
    531c:	4b68      	ldr	r3, [pc, #416]	; (54c0 <__aeabi_dmul+0x1e0>)
    531e:	46a3      	mov	fp, r4
    5320:	469c      	mov	ip, r3
    5322:	2300      	movs	r3, #0
    5324:	2700      	movs	r7, #0
    5326:	4466      	add	r6, ip
    5328:	9302      	str	r3, [sp, #8]
    532a:	4643      	mov	r3, r8
    532c:	031c      	lsls	r4, r3, #12
    532e:	005a      	lsls	r2, r3, #1
    5330:	0fdb      	lsrs	r3, r3, #31
    5332:	4650      	mov	r0, sl
    5334:	0b24      	lsrs	r4, r4, #12
    5336:	0d52      	lsrs	r2, r2, #21
    5338:	4698      	mov	r8, r3
    533a:	d100      	bne.n	533e <__aeabi_dmul+0x5e>
    533c:	e076      	b.n	542c <__aeabi_dmul+0x14c>
    533e:	4b5f      	ldr	r3, [pc, #380]	; (54bc <__aeabi_dmul+0x1dc>)
    5340:	429a      	cmp	r2, r3
    5342:	d06d      	beq.n	5420 <__aeabi_dmul+0x140>
    5344:	2380      	movs	r3, #128	; 0x80
    5346:	0f41      	lsrs	r1, r0, #29
    5348:	041b      	lsls	r3, r3, #16
    534a:	430b      	orrs	r3, r1
    534c:	495c      	ldr	r1, [pc, #368]	; (54c0 <__aeabi_dmul+0x1e0>)
    534e:	00e4      	lsls	r4, r4, #3
    5350:	468c      	mov	ip, r1
    5352:	431c      	orrs	r4, r3
    5354:	00c3      	lsls	r3, r0, #3
    5356:	2000      	movs	r0, #0
    5358:	4462      	add	r2, ip
    535a:	4641      	mov	r1, r8
    535c:	18b6      	adds	r6, r6, r2
    535e:	4069      	eors	r1, r5
    5360:	1c72      	adds	r2, r6, #1
    5362:	9101      	str	r1, [sp, #4]
    5364:	4694      	mov	ip, r2
    5366:	4307      	orrs	r7, r0
    5368:	2f0f      	cmp	r7, #15
    536a:	d900      	bls.n	536e <__aeabi_dmul+0x8e>
    536c:	e0b0      	b.n	54d0 <__aeabi_dmul+0x1f0>
    536e:	4a55      	ldr	r2, [pc, #340]	; (54c4 <__aeabi_dmul+0x1e4>)
    5370:	00bf      	lsls	r7, r7, #2
    5372:	59d2      	ldr	r2, [r2, r7]
    5374:	4697      	mov	pc, r2
    5376:	465b      	mov	r3, fp
    5378:	4303      	orrs	r3, r0
    537a:	4699      	mov	r9, r3
    537c:	d000      	beq.n	5380 <__aeabi_dmul+0xa0>
    537e:	e087      	b.n	5490 <__aeabi_dmul+0x1b0>
    5380:	2300      	movs	r3, #0
    5382:	469b      	mov	fp, r3
    5384:	3302      	adds	r3, #2
    5386:	2708      	movs	r7, #8
    5388:	9302      	str	r3, [sp, #8]
    538a:	e7ce      	b.n	532a <__aeabi_dmul+0x4a>
    538c:	4642      	mov	r2, r8
    538e:	9201      	str	r2, [sp, #4]
    5390:	2802      	cmp	r0, #2
    5392:	d067      	beq.n	5464 <__aeabi_dmul+0x184>
    5394:	2803      	cmp	r0, #3
    5396:	d100      	bne.n	539a <__aeabi_dmul+0xba>
    5398:	e20e      	b.n	57b8 <__aeabi_dmul+0x4d8>
    539a:	2801      	cmp	r0, #1
    539c:	d000      	beq.n	53a0 <__aeabi_dmul+0xc0>
    539e:	e162      	b.n	5666 <__aeabi_dmul+0x386>
    53a0:	2300      	movs	r3, #0
    53a2:	2400      	movs	r4, #0
    53a4:	2200      	movs	r2, #0
    53a6:	4699      	mov	r9, r3
    53a8:	9901      	ldr	r1, [sp, #4]
    53aa:	4001      	ands	r1, r0
    53ac:	b2cd      	uxtb	r5, r1
    53ae:	2100      	movs	r1, #0
    53b0:	0312      	lsls	r2, r2, #12
    53b2:	0d0b      	lsrs	r3, r1, #20
    53b4:	0b12      	lsrs	r2, r2, #12
    53b6:	051b      	lsls	r3, r3, #20
    53b8:	4313      	orrs	r3, r2
    53ba:	4a43      	ldr	r2, [pc, #268]	; (54c8 <__aeabi_dmul+0x1e8>)
    53bc:	0524      	lsls	r4, r4, #20
    53be:	4013      	ands	r3, r2
    53c0:	431c      	orrs	r4, r3
    53c2:	0064      	lsls	r4, r4, #1
    53c4:	07ed      	lsls	r5, r5, #31
    53c6:	0864      	lsrs	r4, r4, #1
    53c8:	432c      	orrs	r4, r5
    53ca:	4648      	mov	r0, r9
    53cc:	0021      	movs	r1, r4
    53ce:	b007      	add	sp, #28
    53d0:	bc3c      	pop	{r2, r3, r4, r5}
    53d2:	4690      	mov	r8, r2
    53d4:	4699      	mov	r9, r3
    53d6:	46a2      	mov	sl, r4
    53d8:	46ab      	mov	fp, r5
    53da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53dc:	4303      	orrs	r3, r0
    53de:	4699      	mov	r9, r3
    53e0:	d04f      	beq.n	5482 <__aeabi_dmul+0x1a2>
    53e2:	465b      	mov	r3, fp
    53e4:	2b00      	cmp	r3, #0
    53e6:	d100      	bne.n	53ea <__aeabi_dmul+0x10a>
    53e8:	e189      	b.n	56fe <__aeabi_dmul+0x41e>
    53ea:	4658      	mov	r0, fp
    53ec:	f000 fed6 	bl	619c <__clzsi2>
    53f0:	0003      	movs	r3, r0
    53f2:	3b0b      	subs	r3, #11
    53f4:	2b1c      	cmp	r3, #28
    53f6:	dd00      	ble.n	53fa <__aeabi_dmul+0x11a>
    53f8:	e17a      	b.n	56f0 <__aeabi_dmul+0x410>
    53fa:	221d      	movs	r2, #29
    53fc:	1ad3      	subs	r3, r2, r3
    53fe:	003a      	movs	r2, r7
    5400:	0001      	movs	r1, r0
    5402:	465c      	mov	r4, fp
    5404:	40da      	lsrs	r2, r3
    5406:	3908      	subs	r1, #8
    5408:	408c      	lsls	r4, r1
    540a:	0013      	movs	r3, r2
    540c:	408f      	lsls	r7, r1
    540e:	4323      	orrs	r3, r4
    5410:	469b      	mov	fp, r3
    5412:	46b9      	mov	r9, r7
    5414:	2300      	movs	r3, #0
    5416:	4e2d      	ldr	r6, [pc, #180]	; (54cc <__aeabi_dmul+0x1ec>)
    5418:	2700      	movs	r7, #0
    541a:	1a36      	subs	r6, r6, r0
    541c:	9302      	str	r3, [sp, #8]
    541e:	e784      	b.n	532a <__aeabi_dmul+0x4a>
    5420:	4653      	mov	r3, sl
    5422:	4323      	orrs	r3, r4
    5424:	d12a      	bne.n	547c <__aeabi_dmul+0x19c>
    5426:	2400      	movs	r4, #0
    5428:	2002      	movs	r0, #2
    542a:	e796      	b.n	535a <__aeabi_dmul+0x7a>
    542c:	4653      	mov	r3, sl
    542e:	4323      	orrs	r3, r4
    5430:	d020      	beq.n	5474 <__aeabi_dmul+0x194>
    5432:	2c00      	cmp	r4, #0
    5434:	d100      	bne.n	5438 <__aeabi_dmul+0x158>
    5436:	e157      	b.n	56e8 <__aeabi_dmul+0x408>
    5438:	0020      	movs	r0, r4
    543a:	f000 feaf 	bl	619c <__clzsi2>
    543e:	0003      	movs	r3, r0
    5440:	3b0b      	subs	r3, #11
    5442:	2b1c      	cmp	r3, #28
    5444:	dd00      	ble.n	5448 <__aeabi_dmul+0x168>
    5446:	e149      	b.n	56dc <__aeabi_dmul+0x3fc>
    5448:	211d      	movs	r1, #29
    544a:	1acb      	subs	r3, r1, r3
    544c:	4651      	mov	r1, sl
    544e:	0002      	movs	r2, r0
    5450:	40d9      	lsrs	r1, r3
    5452:	4653      	mov	r3, sl
    5454:	3a08      	subs	r2, #8
    5456:	4094      	lsls	r4, r2
    5458:	4093      	lsls	r3, r2
    545a:	430c      	orrs	r4, r1
    545c:	4a1b      	ldr	r2, [pc, #108]	; (54cc <__aeabi_dmul+0x1ec>)
    545e:	1a12      	subs	r2, r2, r0
    5460:	2000      	movs	r0, #0
    5462:	e77a      	b.n	535a <__aeabi_dmul+0x7a>
    5464:	2501      	movs	r5, #1
    5466:	9b01      	ldr	r3, [sp, #4]
    5468:	4c14      	ldr	r4, [pc, #80]	; (54bc <__aeabi_dmul+0x1dc>)
    546a:	401d      	ands	r5, r3
    546c:	2300      	movs	r3, #0
    546e:	2200      	movs	r2, #0
    5470:	4699      	mov	r9, r3
    5472:	e79c      	b.n	53ae <__aeabi_dmul+0xce>
    5474:	2400      	movs	r4, #0
    5476:	2200      	movs	r2, #0
    5478:	2001      	movs	r0, #1
    547a:	e76e      	b.n	535a <__aeabi_dmul+0x7a>
    547c:	4653      	mov	r3, sl
    547e:	2003      	movs	r0, #3
    5480:	e76b      	b.n	535a <__aeabi_dmul+0x7a>
    5482:	2300      	movs	r3, #0
    5484:	469b      	mov	fp, r3
    5486:	3301      	adds	r3, #1
    5488:	2704      	movs	r7, #4
    548a:	2600      	movs	r6, #0
    548c:	9302      	str	r3, [sp, #8]
    548e:	e74c      	b.n	532a <__aeabi_dmul+0x4a>
    5490:	2303      	movs	r3, #3
    5492:	4681      	mov	r9, r0
    5494:	270c      	movs	r7, #12
    5496:	9302      	str	r3, [sp, #8]
    5498:	e747      	b.n	532a <__aeabi_dmul+0x4a>
    549a:	2280      	movs	r2, #128	; 0x80
    549c:	2300      	movs	r3, #0
    549e:	2500      	movs	r5, #0
    54a0:	0312      	lsls	r2, r2, #12
    54a2:	4699      	mov	r9, r3
    54a4:	4c05      	ldr	r4, [pc, #20]	; (54bc <__aeabi_dmul+0x1dc>)
    54a6:	e782      	b.n	53ae <__aeabi_dmul+0xce>
    54a8:	465c      	mov	r4, fp
    54aa:	464b      	mov	r3, r9
    54ac:	9802      	ldr	r0, [sp, #8]
    54ae:	e76f      	b.n	5390 <__aeabi_dmul+0xb0>
    54b0:	465c      	mov	r4, fp
    54b2:	464b      	mov	r3, r9
    54b4:	9501      	str	r5, [sp, #4]
    54b6:	9802      	ldr	r0, [sp, #8]
    54b8:	e76a      	b.n	5390 <__aeabi_dmul+0xb0>
    54ba:	46c0      	nop			; (mov r8, r8)
    54bc:	000007ff 	.word	0x000007ff
    54c0:	fffffc01 	.word	0xfffffc01
    54c4:	0000b5d4 	.word	0x0000b5d4
    54c8:	800fffff 	.word	0x800fffff
    54cc:	fffffc0d 	.word	0xfffffc0d
    54d0:	464a      	mov	r2, r9
    54d2:	4649      	mov	r1, r9
    54d4:	0c17      	lsrs	r7, r2, #16
    54d6:	0c1a      	lsrs	r2, r3, #16
    54d8:	041b      	lsls	r3, r3, #16
    54da:	0c1b      	lsrs	r3, r3, #16
    54dc:	0408      	lsls	r0, r1, #16
    54de:	0019      	movs	r1, r3
    54e0:	0c00      	lsrs	r0, r0, #16
    54e2:	4341      	muls	r1, r0
    54e4:	0015      	movs	r5, r2
    54e6:	4688      	mov	r8, r1
    54e8:	0019      	movs	r1, r3
    54ea:	437d      	muls	r5, r7
    54ec:	4379      	muls	r1, r7
    54ee:	9503      	str	r5, [sp, #12]
    54f0:	4689      	mov	r9, r1
    54f2:	0029      	movs	r1, r5
    54f4:	0015      	movs	r5, r2
    54f6:	4345      	muls	r5, r0
    54f8:	444d      	add	r5, r9
    54fa:	9502      	str	r5, [sp, #8]
    54fc:	4645      	mov	r5, r8
    54fe:	0c2d      	lsrs	r5, r5, #16
    5500:	46aa      	mov	sl, r5
    5502:	9d02      	ldr	r5, [sp, #8]
    5504:	4455      	add	r5, sl
    5506:	45a9      	cmp	r9, r5
    5508:	d906      	bls.n	5518 <__aeabi_dmul+0x238>
    550a:	468a      	mov	sl, r1
    550c:	2180      	movs	r1, #128	; 0x80
    550e:	0249      	lsls	r1, r1, #9
    5510:	4689      	mov	r9, r1
    5512:	44ca      	add	sl, r9
    5514:	4651      	mov	r1, sl
    5516:	9103      	str	r1, [sp, #12]
    5518:	0c29      	lsrs	r1, r5, #16
    551a:	9104      	str	r1, [sp, #16]
    551c:	4641      	mov	r1, r8
    551e:	0409      	lsls	r1, r1, #16
    5520:	042d      	lsls	r5, r5, #16
    5522:	0c09      	lsrs	r1, r1, #16
    5524:	4688      	mov	r8, r1
    5526:	0029      	movs	r1, r5
    5528:	0c25      	lsrs	r5, r4, #16
    552a:	0424      	lsls	r4, r4, #16
    552c:	4441      	add	r1, r8
    552e:	0c24      	lsrs	r4, r4, #16
    5530:	9105      	str	r1, [sp, #20]
    5532:	0021      	movs	r1, r4
    5534:	4341      	muls	r1, r0
    5536:	4688      	mov	r8, r1
    5538:	0021      	movs	r1, r4
    553a:	4379      	muls	r1, r7
    553c:	468a      	mov	sl, r1
    553e:	4368      	muls	r0, r5
    5540:	4641      	mov	r1, r8
    5542:	4450      	add	r0, sl
    5544:	4681      	mov	r9, r0
    5546:	0c08      	lsrs	r0, r1, #16
    5548:	4448      	add	r0, r9
    554a:	436f      	muls	r7, r5
    554c:	4582      	cmp	sl, r0
    554e:	d903      	bls.n	5558 <__aeabi_dmul+0x278>
    5550:	2180      	movs	r1, #128	; 0x80
    5552:	0249      	lsls	r1, r1, #9
    5554:	4689      	mov	r9, r1
    5556:	444f      	add	r7, r9
    5558:	0c01      	lsrs	r1, r0, #16
    555a:	4689      	mov	r9, r1
    555c:	0039      	movs	r1, r7
    555e:	4449      	add	r1, r9
    5560:	9102      	str	r1, [sp, #8]
    5562:	4641      	mov	r1, r8
    5564:	040f      	lsls	r7, r1, #16
    5566:	9904      	ldr	r1, [sp, #16]
    5568:	0c3f      	lsrs	r7, r7, #16
    556a:	4688      	mov	r8, r1
    556c:	0400      	lsls	r0, r0, #16
    556e:	19c0      	adds	r0, r0, r7
    5570:	4480      	add	r8, r0
    5572:	4641      	mov	r1, r8
    5574:	9104      	str	r1, [sp, #16]
    5576:	4659      	mov	r1, fp
    5578:	0c0f      	lsrs	r7, r1, #16
    557a:	0409      	lsls	r1, r1, #16
    557c:	0c09      	lsrs	r1, r1, #16
    557e:	4688      	mov	r8, r1
    5580:	4359      	muls	r1, r3
    5582:	468a      	mov	sl, r1
    5584:	0039      	movs	r1, r7
    5586:	4351      	muls	r1, r2
    5588:	4689      	mov	r9, r1
    558a:	4641      	mov	r1, r8
    558c:	434a      	muls	r2, r1
    558e:	4651      	mov	r1, sl
    5590:	0c09      	lsrs	r1, r1, #16
    5592:	468b      	mov	fp, r1
    5594:	437b      	muls	r3, r7
    5596:	18d2      	adds	r2, r2, r3
    5598:	445a      	add	r2, fp
    559a:	4293      	cmp	r3, r2
    559c:	d903      	bls.n	55a6 <__aeabi_dmul+0x2c6>
    559e:	2380      	movs	r3, #128	; 0x80
    55a0:	025b      	lsls	r3, r3, #9
    55a2:	469b      	mov	fp, r3
    55a4:	44d9      	add	r9, fp
    55a6:	4651      	mov	r1, sl
    55a8:	0409      	lsls	r1, r1, #16
    55aa:	0c09      	lsrs	r1, r1, #16
    55ac:	468a      	mov	sl, r1
    55ae:	4641      	mov	r1, r8
    55b0:	4361      	muls	r1, r4
    55b2:	437c      	muls	r4, r7
    55b4:	0c13      	lsrs	r3, r2, #16
    55b6:	0412      	lsls	r2, r2, #16
    55b8:	444b      	add	r3, r9
    55ba:	4452      	add	r2, sl
    55bc:	46a1      	mov	r9, r4
    55be:	468a      	mov	sl, r1
    55c0:	003c      	movs	r4, r7
    55c2:	4641      	mov	r1, r8
    55c4:	436c      	muls	r4, r5
    55c6:	434d      	muls	r5, r1
    55c8:	4651      	mov	r1, sl
    55ca:	444d      	add	r5, r9
    55cc:	0c0f      	lsrs	r7, r1, #16
    55ce:	197d      	adds	r5, r7, r5
    55d0:	45a9      	cmp	r9, r5
    55d2:	d903      	bls.n	55dc <__aeabi_dmul+0x2fc>
    55d4:	2180      	movs	r1, #128	; 0x80
    55d6:	0249      	lsls	r1, r1, #9
    55d8:	4688      	mov	r8, r1
    55da:	4444      	add	r4, r8
    55dc:	9f04      	ldr	r7, [sp, #16]
    55de:	9903      	ldr	r1, [sp, #12]
    55e0:	46b8      	mov	r8, r7
    55e2:	4441      	add	r1, r8
    55e4:	468b      	mov	fp, r1
    55e6:	4583      	cmp	fp, r0
    55e8:	4180      	sbcs	r0, r0
    55ea:	4241      	negs	r1, r0
    55ec:	4688      	mov	r8, r1
    55ee:	4651      	mov	r1, sl
    55f0:	0408      	lsls	r0, r1, #16
    55f2:	042f      	lsls	r7, r5, #16
    55f4:	0c00      	lsrs	r0, r0, #16
    55f6:	183f      	adds	r7, r7, r0
    55f8:	4658      	mov	r0, fp
    55fa:	9902      	ldr	r1, [sp, #8]
    55fc:	1810      	adds	r0, r2, r0
    55fe:	4689      	mov	r9, r1
    5600:	4290      	cmp	r0, r2
    5602:	4192      	sbcs	r2, r2
    5604:	444f      	add	r7, r9
    5606:	46ba      	mov	sl, r7
    5608:	4252      	negs	r2, r2
    560a:	4699      	mov	r9, r3
    560c:	4693      	mov	fp, r2
    560e:	44c2      	add	sl, r8
    5610:	44d1      	add	r9, sl
    5612:	44cb      	add	fp, r9
    5614:	428f      	cmp	r7, r1
    5616:	41bf      	sbcs	r7, r7
    5618:	45c2      	cmp	sl, r8
    561a:	4189      	sbcs	r1, r1
    561c:	4599      	cmp	r9, r3
    561e:	419b      	sbcs	r3, r3
    5620:	4593      	cmp	fp, r2
    5622:	4192      	sbcs	r2, r2
    5624:	427f      	negs	r7, r7
    5626:	4249      	negs	r1, r1
    5628:	0c2d      	lsrs	r5, r5, #16
    562a:	4252      	negs	r2, r2
    562c:	430f      	orrs	r7, r1
    562e:	425b      	negs	r3, r3
    5630:	4313      	orrs	r3, r2
    5632:	197f      	adds	r7, r7, r5
    5634:	18ff      	adds	r7, r7, r3
    5636:	465b      	mov	r3, fp
    5638:	193c      	adds	r4, r7, r4
    563a:	0ddb      	lsrs	r3, r3, #23
    563c:	9a05      	ldr	r2, [sp, #20]
    563e:	0264      	lsls	r4, r4, #9
    5640:	431c      	orrs	r4, r3
    5642:	0243      	lsls	r3, r0, #9
    5644:	4313      	orrs	r3, r2
    5646:	1e5d      	subs	r5, r3, #1
    5648:	41ab      	sbcs	r3, r5
    564a:	465a      	mov	r2, fp
    564c:	0dc0      	lsrs	r0, r0, #23
    564e:	4303      	orrs	r3, r0
    5650:	0252      	lsls	r2, r2, #9
    5652:	4313      	orrs	r3, r2
    5654:	01e2      	lsls	r2, r4, #7
    5656:	d556      	bpl.n	5706 <__aeabi_dmul+0x426>
    5658:	2001      	movs	r0, #1
    565a:	085a      	lsrs	r2, r3, #1
    565c:	4003      	ands	r3, r0
    565e:	4313      	orrs	r3, r2
    5660:	07e2      	lsls	r2, r4, #31
    5662:	4313      	orrs	r3, r2
    5664:	0864      	lsrs	r4, r4, #1
    5666:	485a      	ldr	r0, [pc, #360]	; (57d0 <__aeabi_dmul+0x4f0>)
    5668:	4460      	add	r0, ip
    566a:	2800      	cmp	r0, #0
    566c:	dd4d      	ble.n	570a <__aeabi_dmul+0x42a>
    566e:	075a      	lsls	r2, r3, #29
    5670:	d009      	beq.n	5686 <__aeabi_dmul+0x3a6>
    5672:	220f      	movs	r2, #15
    5674:	401a      	ands	r2, r3
    5676:	2a04      	cmp	r2, #4
    5678:	d005      	beq.n	5686 <__aeabi_dmul+0x3a6>
    567a:	1d1a      	adds	r2, r3, #4
    567c:	429a      	cmp	r2, r3
    567e:	419b      	sbcs	r3, r3
    5680:	425b      	negs	r3, r3
    5682:	18e4      	adds	r4, r4, r3
    5684:	0013      	movs	r3, r2
    5686:	01e2      	lsls	r2, r4, #7
    5688:	d504      	bpl.n	5694 <__aeabi_dmul+0x3b4>
    568a:	2080      	movs	r0, #128	; 0x80
    568c:	4a51      	ldr	r2, [pc, #324]	; (57d4 <__aeabi_dmul+0x4f4>)
    568e:	00c0      	lsls	r0, r0, #3
    5690:	4014      	ands	r4, r2
    5692:	4460      	add	r0, ip
    5694:	4a50      	ldr	r2, [pc, #320]	; (57d8 <__aeabi_dmul+0x4f8>)
    5696:	4290      	cmp	r0, r2
    5698:	dd00      	ble.n	569c <__aeabi_dmul+0x3bc>
    569a:	e6e3      	b.n	5464 <__aeabi_dmul+0x184>
    569c:	2501      	movs	r5, #1
    569e:	08db      	lsrs	r3, r3, #3
    56a0:	0762      	lsls	r2, r4, #29
    56a2:	431a      	orrs	r2, r3
    56a4:	0264      	lsls	r4, r4, #9
    56a6:	9b01      	ldr	r3, [sp, #4]
    56a8:	4691      	mov	r9, r2
    56aa:	0b22      	lsrs	r2, r4, #12
    56ac:	0544      	lsls	r4, r0, #21
    56ae:	0d64      	lsrs	r4, r4, #21
    56b0:	401d      	ands	r5, r3
    56b2:	e67c      	b.n	53ae <__aeabi_dmul+0xce>
    56b4:	2280      	movs	r2, #128	; 0x80
    56b6:	4659      	mov	r1, fp
    56b8:	0312      	lsls	r2, r2, #12
    56ba:	4211      	tst	r1, r2
    56bc:	d008      	beq.n	56d0 <__aeabi_dmul+0x3f0>
    56be:	4214      	tst	r4, r2
    56c0:	d106      	bne.n	56d0 <__aeabi_dmul+0x3f0>
    56c2:	4322      	orrs	r2, r4
    56c4:	0312      	lsls	r2, r2, #12
    56c6:	0b12      	lsrs	r2, r2, #12
    56c8:	4645      	mov	r5, r8
    56ca:	4699      	mov	r9, r3
    56cc:	4c43      	ldr	r4, [pc, #268]	; (57dc <__aeabi_dmul+0x4fc>)
    56ce:	e66e      	b.n	53ae <__aeabi_dmul+0xce>
    56d0:	465b      	mov	r3, fp
    56d2:	431a      	orrs	r2, r3
    56d4:	0312      	lsls	r2, r2, #12
    56d6:	0b12      	lsrs	r2, r2, #12
    56d8:	4c40      	ldr	r4, [pc, #256]	; (57dc <__aeabi_dmul+0x4fc>)
    56da:	e668      	b.n	53ae <__aeabi_dmul+0xce>
    56dc:	0003      	movs	r3, r0
    56de:	4654      	mov	r4, sl
    56e0:	3b28      	subs	r3, #40	; 0x28
    56e2:	409c      	lsls	r4, r3
    56e4:	2300      	movs	r3, #0
    56e6:	e6b9      	b.n	545c <__aeabi_dmul+0x17c>
    56e8:	f000 fd58 	bl	619c <__clzsi2>
    56ec:	3020      	adds	r0, #32
    56ee:	e6a6      	b.n	543e <__aeabi_dmul+0x15e>
    56f0:	0003      	movs	r3, r0
    56f2:	3b28      	subs	r3, #40	; 0x28
    56f4:	409f      	lsls	r7, r3
    56f6:	2300      	movs	r3, #0
    56f8:	46bb      	mov	fp, r7
    56fa:	4699      	mov	r9, r3
    56fc:	e68a      	b.n	5414 <__aeabi_dmul+0x134>
    56fe:	f000 fd4d 	bl	619c <__clzsi2>
    5702:	3020      	adds	r0, #32
    5704:	e674      	b.n	53f0 <__aeabi_dmul+0x110>
    5706:	46b4      	mov	ip, r6
    5708:	e7ad      	b.n	5666 <__aeabi_dmul+0x386>
    570a:	2501      	movs	r5, #1
    570c:	1a2a      	subs	r2, r5, r0
    570e:	2a38      	cmp	r2, #56	; 0x38
    5710:	dd06      	ble.n	5720 <__aeabi_dmul+0x440>
    5712:	9b01      	ldr	r3, [sp, #4]
    5714:	2400      	movs	r4, #0
    5716:	401d      	ands	r5, r3
    5718:	2300      	movs	r3, #0
    571a:	2200      	movs	r2, #0
    571c:	4699      	mov	r9, r3
    571e:	e646      	b.n	53ae <__aeabi_dmul+0xce>
    5720:	2a1f      	cmp	r2, #31
    5722:	dc21      	bgt.n	5768 <__aeabi_dmul+0x488>
    5724:	2520      	movs	r5, #32
    5726:	0020      	movs	r0, r4
    5728:	1aad      	subs	r5, r5, r2
    572a:	001e      	movs	r6, r3
    572c:	40ab      	lsls	r3, r5
    572e:	40a8      	lsls	r0, r5
    5730:	40d6      	lsrs	r6, r2
    5732:	1e5d      	subs	r5, r3, #1
    5734:	41ab      	sbcs	r3, r5
    5736:	4330      	orrs	r0, r6
    5738:	4318      	orrs	r0, r3
    573a:	40d4      	lsrs	r4, r2
    573c:	0743      	lsls	r3, r0, #29
    573e:	d009      	beq.n	5754 <__aeabi_dmul+0x474>
    5740:	230f      	movs	r3, #15
    5742:	4003      	ands	r3, r0
    5744:	2b04      	cmp	r3, #4
    5746:	d005      	beq.n	5754 <__aeabi_dmul+0x474>
    5748:	0003      	movs	r3, r0
    574a:	1d18      	adds	r0, r3, #4
    574c:	4298      	cmp	r0, r3
    574e:	419b      	sbcs	r3, r3
    5750:	425b      	negs	r3, r3
    5752:	18e4      	adds	r4, r4, r3
    5754:	0223      	lsls	r3, r4, #8
    5756:	d521      	bpl.n	579c <__aeabi_dmul+0x4bc>
    5758:	2501      	movs	r5, #1
    575a:	9b01      	ldr	r3, [sp, #4]
    575c:	2401      	movs	r4, #1
    575e:	401d      	ands	r5, r3
    5760:	2300      	movs	r3, #0
    5762:	2200      	movs	r2, #0
    5764:	4699      	mov	r9, r3
    5766:	e622      	b.n	53ae <__aeabi_dmul+0xce>
    5768:	251f      	movs	r5, #31
    576a:	0021      	movs	r1, r4
    576c:	426d      	negs	r5, r5
    576e:	1a28      	subs	r0, r5, r0
    5770:	40c1      	lsrs	r1, r0
    5772:	0008      	movs	r0, r1
    5774:	2a20      	cmp	r2, #32
    5776:	d01d      	beq.n	57b4 <__aeabi_dmul+0x4d4>
    5778:	355f      	adds	r5, #95	; 0x5f
    577a:	1aaa      	subs	r2, r5, r2
    577c:	4094      	lsls	r4, r2
    577e:	4323      	orrs	r3, r4
    5780:	1e5c      	subs	r4, r3, #1
    5782:	41a3      	sbcs	r3, r4
    5784:	2507      	movs	r5, #7
    5786:	4303      	orrs	r3, r0
    5788:	401d      	ands	r5, r3
    578a:	2200      	movs	r2, #0
    578c:	2d00      	cmp	r5, #0
    578e:	d009      	beq.n	57a4 <__aeabi_dmul+0x4c4>
    5790:	220f      	movs	r2, #15
    5792:	2400      	movs	r4, #0
    5794:	401a      	ands	r2, r3
    5796:	0018      	movs	r0, r3
    5798:	2a04      	cmp	r2, #4
    579a:	d1d6      	bne.n	574a <__aeabi_dmul+0x46a>
    579c:	0003      	movs	r3, r0
    579e:	0765      	lsls	r5, r4, #29
    57a0:	0264      	lsls	r4, r4, #9
    57a2:	0b22      	lsrs	r2, r4, #12
    57a4:	08db      	lsrs	r3, r3, #3
    57a6:	432b      	orrs	r3, r5
    57a8:	2501      	movs	r5, #1
    57aa:	4699      	mov	r9, r3
    57ac:	9b01      	ldr	r3, [sp, #4]
    57ae:	2400      	movs	r4, #0
    57b0:	401d      	ands	r5, r3
    57b2:	e5fc      	b.n	53ae <__aeabi_dmul+0xce>
    57b4:	2400      	movs	r4, #0
    57b6:	e7e2      	b.n	577e <__aeabi_dmul+0x49e>
    57b8:	2280      	movs	r2, #128	; 0x80
    57ba:	2501      	movs	r5, #1
    57bc:	0312      	lsls	r2, r2, #12
    57be:	4322      	orrs	r2, r4
    57c0:	9901      	ldr	r1, [sp, #4]
    57c2:	0312      	lsls	r2, r2, #12
    57c4:	0b12      	lsrs	r2, r2, #12
    57c6:	400d      	ands	r5, r1
    57c8:	4699      	mov	r9, r3
    57ca:	4c04      	ldr	r4, [pc, #16]	; (57dc <__aeabi_dmul+0x4fc>)
    57cc:	e5ef      	b.n	53ae <__aeabi_dmul+0xce>
    57ce:	46c0      	nop			; (mov r8, r8)
    57d0:	000003ff 	.word	0x000003ff
    57d4:	feffffff 	.word	0xfeffffff
    57d8:	000007fe 	.word	0x000007fe
    57dc:	000007ff 	.word	0x000007ff

000057e0 <__aeabi_dsub>:
    57e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    57e2:	4646      	mov	r6, r8
    57e4:	46d6      	mov	lr, sl
    57e6:	464f      	mov	r7, r9
    57e8:	030c      	lsls	r4, r1, #12
    57ea:	b5c0      	push	{r6, r7, lr}
    57ec:	0fcd      	lsrs	r5, r1, #31
    57ee:	004e      	lsls	r6, r1, #1
    57f0:	0a61      	lsrs	r1, r4, #9
    57f2:	0f44      	lsrs	r4, r0, #29
    57f4:	430c      	orrs	r4, r1
    57f6:	00c1      	lsls	r1, r0, #3
    57f8:	0058      	lsls	r0, r3, #1
    57fa:	0d40      	lsrs	r0, r0, #21
    57fc:	4684      	mov	ip, r0
    57fe:	468a      	mov	sl, r1
    5800:	000f      	movs	r7, r1
    5802:	0319      	lsls	r1, r3, #12
    5804:	0f50      	lsrs	r0, r2, #29
    5806:	0a49      	lsrs	r1, r1, #9
    5808:	4301      	orrs	r1, r0
    580a:	48c6      	ldr	r0, [pc, #792]	; (5b24 <__aeabi_dsub+0x344>)
    580c:	0d76      	lsrs	r6, r6, #21
    580e:	46a8      	mov	r8, r5
    5810:	0fdb      	lsrs	r3, r3, #31
    5812:	00d2      	lsls	r2, r2, #3
    5814:	4584      	cmp	ip, r0
    5816:	d100      	bne.n	581a <__aeabi_dsub+0x3a>
    5818:	e0d8      	b.n	59cc <__aeabi_dsub+0x1ec>
    581a:	2001      	movs	r0, #1
    581c:	4043      	eors	r3, r0
    581e:	42ab      	cmp	r3, r5
    5820:	d100      	bne.n	5824 <__aeabi_dsub+0x44>
    5822:	e0a6      	b.n	5972 <__aeabi_dsub+0x192>
    5824:	4660      	mov	r0, ip
    5826:	1a35      	subs	r5, r6, r0
    5828:	2d00      	cmp	r5, #0
    582a:	dc00      	bgt.n	582e <__aeabi_dsub+0x4e>
    582c:	e105      	b.n	5a3a <__aeabi_dsub+0x25a>
    582e:	2800      	cmp	r0, #0
    5830:	d110      	bne.n	5854 <__aeabi_dsub+0x74>
    5832:	000b      	movs	r3, r1
    5834:	4313      	orrs	r3, r2
    5836:	d100      	bne.n	583a <__aeabi_dsub+0x5a>
    5838:	e0d7      	b.n	59ea <__aeabi_dsub+0x20a>
    583a:	1e6b      	subs	r3, r5, #1
    583c:	2b00      	cmp	r3, #0
    583e:	d000      	beq.n	5842 <__aeabi_dsub+0x62>
    5840:	e14b      	b.n	5ada <__aeabi_dsub+0x2fa>
    5842:	4653      	mov	r3, sl
    5844:	1a9f      	subs	r7, r3, r2
    5846:	45ba      	cmp	sl, r7
    5848:	4180      	sbcs	r0, r0
    584a:	1a64      	subs	r4, r4, r1
    584c:	4240      	negs	r0, r0
    584e:	1a24      	subs	r4, r4, r0
    5850:	2601      	movs	r6, #1
    5852:	e01e      	b.n	5892 <__aeabi_dsub+0xb2>
    5854:	4bb3      	ldr	r3, [pc, #716]	; (5b24 <__aeabi_dsub+0x344>)
    5856:	429e      	cmp	r6, r3
    5858:	d048      	beq.n	58ec <__aeabi_dsub+0x10c>
    585a:	2380      	movs	r3, #128	; 0x80
    585c:	041b      	lsls	r3, r3, #16
    585e:	4319      	orrs	r1, r3
    5860:	2d38      	cmp	r5, #56	; 0x38
    5862:	dd00      	ble.n	5866 <__aeabi_dsub+0x86>
    5864:	e119      	b.n	5a9a <__aeabi_dsub+0x2ba>
    5866:	2d1f      	cmp	r5, #31
    5868:	dd00      	ble.n	586c <__aeabi_dsub+0x8c>
    586a:	e14c      	b.n	5b06 <__aeabi_dsub+0x326>
    586c:	2320      	movs	r3, #32
    586e:	000f      	movs	r7, r1
    5870:	1b5b      	subs	r3, r3, r5
    5872:	0010      	movs	r0, r2
    5874:	409a      	lsls	r2, r3
    5876:	409f      	lsls	r7, r3
    5878:	40e8      	lsrs	r0, r5
    587a:	1e53      	subs	r3, r2, #1
    587c:	419a      	sbcs	r2, r3
    587e:	40e9      	lsrs	r1, r5
    5880:	4307      	orrs	r7, r0
    5882:	4317      	orrs	r7, r2
    5884:	4653      	mov	r3, sl
    5886:	1bdf      	subs	r7, r3, r7
    5888:	1a61      	subs	r1, r4, r1
    588a:	45ba      	cmp	sl, r7
    588c:	41a4      	sbcs	r4, r4
    588e:	4264      	negs	r4, r4
    5890:	1b0c      	subs	r4, r1, r4
    5892:	0223      	lsls	r3, r4, #8
    5894:	d400      	bmi.n	5898 <__aeabi_dsub+0xb8>
    5896:	e0c5      	b.n	5a24 <__aeabi_dsub+0x244>
    5898:	0264      	lsls	r4, r4, #9
    589a:	0a65      	lsrs	r5, r4, #9
    589c:	2d00      	cmp	r5, #0
    589e:	d100      	bne.n	58a2 <__aeabi_dsub+0xc2>
    58a0:	e0f6      	b.n	5a90 <__aeabi_dsub+0x2b0>
    58a2:	0028      	movs	r0, r5
    58a4:	f000 fc7a 	bl	619c <__clzsi2>
    58a8:	0003      	movs	r3, r0
    58aa:	3b08      	subs	r3, #8
    58ac:	2b1f      	cmp	r3, #31
    58ae:	dd00      	ble.n	58b2 <__aeabi_dsub+0xd2>
    58b0:	e0e9      	b.n	5a86 <__aeabi_dsub+0x2a6>
    58b2:	2220      	movs	r2, #32
    58b4:	003c      	movs	r4, r7
    58b6:	1ad2      	subs	r2, r2, r3
    58b8:	409d      	lsls	r5, r3
    58ba:	40d4      	lsrs	r4, r2
    58bc:	409f      	lsls	r7, r3
    58be:	4325      	orrs	r5, r4
    58c0:	429e      	cmp	r6, r3
    58c2:	dd00      	ble.n	58c6 <__aeabi_dsub+0xe6>
    58c4:	e0db      	b.n	5a7e <__aeabi_dsub+0x29e>
    58c6:	1b9e      	subs	r6, r3, r6
    58c8:	1c73      	adds	r3, r6, #1
    58ca:	2b1f      	cmp	r3, #31
    58cc:	dd00      	ble.n	58d0 <__aeabi_dsub+0xf0>
    58ce:	e10a      	b.n	5ae6 <__aeabi_dsub+0x306>
    58d0:	2220      	movs	r2, #32
    58d2:	0038      	movs	r0, r7
    58d4:	1ad2      	subs	r2, r2, r3
    58d6:	0029      	movs	r1, r5
    58d8:	4097      	lsls	r7, r2
    58da:	002c      	movs	r4, r5
    58dc:	4091      	lsls	r1, r2
    58de:	40d8      	lsrs	r0, r3
    58e0:	1e7a      	subs	r2, r7, #1
    58e2:	4197      	sbcs	r7, r2
    58e4:	40dc      	lsrs	r4, r3
    58e6:	2600      	movs	r6, #0
    58e8:	4301      	orrs	r1, r0
    58ea:	430f      	orrs	r7, r1
    58ec:	077b      	lsls	r3, r7, #29
    58ee:	d009      	beq.n	5904 <__aeabi_dsub+0x124>
    58f0:	230f      	movs	r3, #15
    58f2:	403b      	ands	r3, r7
    58f4:	2b04      	cmp	r3, #4
    58f6:	d005      	beq.n	5904 <__aeabi_dsub+0x124>
    58f8:	1d3b      	adds	r3, r7, #4
    58fa:	42bb      	cmp	r3, r7
    58fc:	41bf      	sbcs	r7, r7
    58fe:	427f      	negs	r7, r7
    5900:	19e4      	adds	r4, r4, r7
    5902:	001f      	movs	r7, r3
    5904:	0223      	lsls	r3, r4, #8
    5906:	d525      	bpl.n	5954 <__aeabi_dsub+0x174>
    5908:	4b86      	ldr	r3, [pc, #536]	; (5b24 <__aeabi_dsub+0x344>)
    590a:	3601      	adds	r6, #1
    590c:	429e      	cmp	r6, r3
    590e:	d100      	bne.n	5912 <__aeabi_dsub+0x132>
    5910:	e0af      	b.n	5a72 <__aeabi_dsub+0x292>
    5912:	4b85      	ldr	r3, [pc, #532]	; (5b28 <__aeabi_dsub+0x348>)
    5914:	2501      	movs	r5, #1
    5916:	401c      	ands	r4, r3
    5918:	4643      	mov	r3, r8
    591a:	0762      	lsls	r2, r4, #29
    591c:	08ff      	lsrs	r7, r7, #3
    591e:	0264      	lsls	r4, r4, #9
    5920:	0576      	lsls	r6, r6, #21
    5922:	4317      	orrs	r7, r2
    5924:	0b24      	lsrs	r4, r4, #12
    5926:	0d76      	lsrs	r6, r6, #21
    5928:	401d      	ands	r5, r3
    592a:	2100      	movs	r1, #0
    592c:	0324      	lsls	r4, r4, #12
    592e:	0b23      	lsrs	r3, r4, #12
    5930:	0d0c      	lsrs	r4, r1, #20
    5932:	4a7e      	ldr	r2, [pc, #504]	; (5b2c <__aeabi_dsub+0x34c>)
    5934:	0524      	lsls	r4, r4, #20
    5936:	431c      	orrs	r4, r3
    5938:	4014      	ands	r4, r2
    593a:	0533      	lsls	r3, r6, #20
    593c:	4323      	orrs	r3, r4
    593e:	005b      	lsls	r3, r3, #1
    5940:	07ed      	lsls	r5, r5, #31
    5942:	085b      	lsrs	r3, r3, #1
    5944:	432b      	orrs	r3, r5
    5946:	0038      	movs	r0, r7
    5948:	0019      	movs	r1, r3
    594a:	bc1c      	pop	{r2, r3, r4}
    594c:	4690      	mov	r8, r2
    594e:	4699      	mov	r9, r3
    5950:	46a2      	mov	sl, r4
    5952:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5954:	2501      	movs	r5, #1
    5956:	4643      	mov	r3, r8
    5958:	0762      	lsls	r2, r4, #29
    595a:	08ff      	lsrs	r7, r7, #3
    595c:	4317      	orrs	r7, r2
    595e:	08e4      	lsrs	r4, r4, #3
    5960:	401d      	ands	r5, r3
    5962:	4b70      	ldr	r3, [pc, #448]	; (5b24 <__aeabi_dsub+0x344>)
    5964:	429e      	cmp	r6, r3
    5966:	d036      	beq.n	59d6 <__aeabi_dsub+0x1f6>
    5968:	0324      	lsls	r4, r4, #12
    596a:	0576      	lsls	r6, r6, #21
    596c:	0b24      	lsrs	r4, r4, #12
    596e:	0d76      	lsrs	r6, r6, #21
    5970:	e7db      	b.n	592a <__aeabi_dsub+0x14a>
    5972:	4663      	mov	r3, ip
    5974:	1af3      	subs	r3, r6, r3
    5976:	2b00      	cmp	r3, #0
    5978:	dc00      	bgt.n	597c <__aeabi_dsub+0x19c>
    597a:	e094      	b.n	5aa6 <__aeabi_dsub+0x2c6>
    597c:	4660      	mov	r0, ip
    597e:	2800      	cmp	r0, #0
    5980:	d035      	beq.n	59ee <__aeabi_dsub+0x20e>
    5982:	4868      	ldr	r0, [pc, #416]	; (5b24 <__aeabi_dsub+0x344>)
    5984:	4286      	cmp	r6, r0
    5986:	d0b1      	beq.n	58ec <__aeabi_dsub+0x10c>
    5988:	2780      	movs	r7, #128	; 0x80
    598a:	043f      	lsls	r7, r7, #16
    598c:	4339      	orrs	r1, r7
    598e:	2b38      	cmp	r3, #56	; 0x38
    5990:	dc00      	bgt.n	5994 <__aeabi_dsub+0x1b4>
    5992:	e0fd      	b.n	5b90 <__aeabi_dsub+0x3b0>
    5994:	430a      	orrs	r2, r1
    5996:	0017      	movs	r7, r2
    5998:	2100      	movs	r1, #0
    599a:	1e7a      	subs	r2, r7, #1
    599c:	4197      	sbcs	r7, r2
    599e:	4457      	add	r7, sl
    59a0:	4557      	cmp	r7, sl
    59a2:	4180      	sbcs	r0, r0
    59a4:	1909      	adds	r1, r1, r4
    59a6:	4244      	negs	r4, r0
    59a8:	190c      	adds	r4, r1, r4
    59aa:	0223      	lsls	r3, r4, #8
    59ac:	d53a      	bpl.n	5a24 <__aeabi_dsub+0x244>
    59ae:	4b5d      	ldr	r3, [pc, #372]	; (5b24 <__aeabi_dsub+0x344>)
    59b0:	3601      	adds	r6, #1
    59b2:	429e      	cmp	r6, r3
    59b4:	d100      	bne.n	59b8 <__aeabi_dsub+0x1d8>
    59b6:	e14b      	b.n	5c50 <__aeabi_dsub+0x470>
    59b8:	2201      	movs	r2, #1
    59ba:	4b5b      	ldr	r3, [pc, #364]	; (5b28 <__aeabi_dsub+0x348>)
    59bc:	401c      	ands	r4, r3
    59be:	087b      	lsrs	r3, r7, #1
    59c0:	4017      	ands	r7, r2
    59c2:	431f      	orrs	r7, r3
    59c4:	07e2      	lsls	r2, r4, #31
    59c6:	4317      	orrs	r7, r2
    59c8:	0864      	lsrs	r4, r4, #1
    59ca:	e78f      	b.n	58ec <__aeabi_dsub+0x10c>
    59cc:	0008      	movs	r0, r1
    59ce:	4310      	orrs	r0, r2
    59d0:	d000      	beq.n	59d4 <__aeabi_dsub+0x1f4>
    59d2:	e724      	b.n	581e <__aeabi_dsub+0x3e>
    59d4:	e721      	b.n	581a <__aeabi_dsub+0x3a>
    59d6:	0023      	movs	r3, r4
    59d8:	433b      	orrs	r3, r7
    59da:	d100      	bne.n	59de <__aeabi_dsub+0x1fe>
    59dc:	e1b9      	b.n	5d52 <__aeabi_dsub+0x572>
    59de:	2280      	movs	r2, #128	; 0x80
    59e0:	0312      	lsls	r2, r2, #12
    59e2:	4314      	orrs	r4, r2
    59e4:	0324      	lsls	r4, r4, #12
    59e6:	0b24      	lsrs	r4, r4, #12
    59e8:	e79f      	b.n	592a <__aeabi_dsub+0x14a>
    59ea:	002e      	movs	r6, r5
    59ec:	e77e      	b.n	58ec <__aeabi_dsub+0x10c>
    59ee:	0008      	movs	r0, r1
    59f0:	4310      	orrs	r0, r2
    59f2:	d100      	bne.n	59f6 <__aeabi_dsub+0x216>
    59f4:	e0ca      	b.n	5b8c <__aeabi_dsub+0x3ac>
    59f6:	1e58      	subs	r0, r3, #1
    59f8:	4684      	mov	ip, r0
    59fa:	2800      	cmp	r0, #0
    59fc:	d000      	beq.n	5a00 <__aeabi_dsub+0x220>
    59fe:	e0e7      	b.n	5bd0 <__aeabi_dsub+0x3f0>
    5a00:	4452      	add	r2, sl
    5a02:	4552      	cmp	r2, sl
    5a04:	4180      	sbcs	r0, r0
    5a06:	1864      	adds	r4, r4, r1
    5a08:	4240      	negs	r0, r0
    5a0a:	1824      	adds	r4, r4, r0
    5a0c:	0017      	movs	r7, r2
    5a0e:	2601      	movs	r6, #1
    5a10:	0223      	lsls	r3, r4, #8
    5a12:	d507      	bpl.n	5a24 <__aeabi_dsub+0x244>
    5a14:	2602      	movs	r6, #2
    5a16:	e7cf      	b.n	59b8 <__aeabi_dsub+0x1d8>
    5a18:	4664      	mov	r4, ip
    5a1a:	432c      	orrs	r4, r5
    5a1c:	d100      	bne.n	5a20 <__aeabi_dsub+0x240>
    5a1e:	e1b3      	b.n	5d88 <__aeabi_dsub+0x5a8>
    5a20:	002c      	movs	r4, r5
    5a22:	4667      	mov	r7, ip
    5a24:	077b      	lsls	r3, r7, #29
    5a26:	d000      	beq.n	5a2a <__aeabi_dsub+0x24a>
    5a28:	e762      	b.n	58f0 <__aeabi_dsub+0x110>
    5a2a:	0763      	lsls	r3, r4, #29
    5a2c:	08ff      	lsrs	r7, r7, #3
    5a2e:	431f      	orrs	r7, r3
    5a30:	2501      	movs	r5, #1
    5a32:	4643      	mov	r3, r8
    5a34:	08e4      	lsrs	r4, r4, #3
    5a36:	401d      	ands	r5, r3
    5a38:	e793      	b.n	5962 <__aeabi_dsub+0x182>
    5a3a:	2d00      	cmp	r5, #0
    5a3c:	d178      	bne.n	5b30 <__aeabi_dsub+0x350>
    5a3e:	1c75      	adds	r5, r6, #1
    5a40:	056d      	lsls	r5, r5, #21
    5a42:	0d6d      	lsrs	r5, r5, #21
    5a44:	2d01      	cmp	r5, #1
    5a46:	dc00      	bgt.n	5a4a <__aeabi_dsub+0x26a>
    5a48:	e0f2      	b.n	5c30 <__aeabi_dsub+0x450>
    5a4a:	4650      	mov	r0, sl
    5a4c:	1a80      	subs	r0, r0, r2
    5a4e:	4582      	cmp	sl, r0
    5a50:	41bf      	sbcs	r7, r7
    5a52:	1a65      	subs	r5, r4, r1
    5a54:	427f      	negs	r7, r7
    5a56:	1bed      	subs	r5, r5, r7
    5a58:	4684      	mov	ip, r0
    5a5a:	0228      	lsls	r0, r5, #8
    5a5c:	d400      	bmi.n	5a60 <__aeabi_dsub+0x280>
    5a5e:	e08c      	b.n	5b7a <__aeabi_dsub+0x39a>
    5a60:	4650      	mov	r0, sl
    5a62:	1a17      	subs	r7, r2, r0
    5a64:	42ba      	cmp	r2, r7
    5a66:	4192      	sbcs	r2, r2
    5a68:	1b0c      	subs	r4, r1, r4
    5a6a:	4255      	negs	r5, r2
    5a6c:	1b65      	subs	r5, r4, r5
    5a6e:	4698      	mov	r8, r3
    5a70:	e714      	b.n	589c <__aeabi_dsub+0xbc>
    5a72:	2501      	movs	r5, #1
    5a74:	4643      	mov	r3, r8
    5a76:	2400      	movs	r4, #0
    5a78:	401d      	ands	r5, r3
    5a7a:	2700      	movs	r7, #0
    5a7c:	e755      	b.n	592a <__aeabi_dsub+0x14a>
    5a7e:	4c2a      	ldr	r4, [pc, #168]	; (5b28 <__aeabi_dsub+0x348>)
    5a80:	1af6      	subs	r6, r6, r3
    5a82:	402c      	ands	r4, r5
    5a84:	e732      	b.n	58ec <__aeabi_dsub+0x10c>
    5a86:	003d      	movs	r5, r7
    5a88:	3828      	subs	r0, #40	; 0x28
    5a8a:	4085      	lsls	r5, r0
    5a8c:	2700      	movs	r7, #0
    5a8e:	e717      	b.n	58c0 <__aeabi_dsub+0xe0>
    5a90:	0038      	movs	r0, r7
    5a92:	f000 fb83 	bl	619c <__clzsi2>
    5a96:	3020      	adds	r0, #32
    5a98:	e706      	b.n	58a8 <__aeabi_dsub+0xc8>
    5a9a:	430a      	orrs	r2, r1
    5a9c:	0017      	movs	r7, r2
    5a9e:	2100      	movs	r1, #0
    5aa0:	1e7a      	subs	r2, r7, #1
    5aa2:	4197      	sbcs	r7, r2
    5aa4:	e6ee      	b.n	5884 <__aeabi_dsub+0xa4>
    5aa6:	2b00      	cmp	r3, #0
    5aa8:	d000      	beq.n	5aac <__aeabi_dsub+0x2cc>
    5aaa:	e0e5      	b.n	5c78 <__aeabi_dsub+0x498>
    5aac:	1c73      	adds	r3, r6, #1
    5aae:	469c      	mov	ip, r3
    5ab0:	055b      	lsls	r3, r3, #21
    5ab2:	0d5b      	lsrs	r3, r3, #21
    5ab4:	2b01      	cmp	r3, #1
    5ab6:	dc00      	bgt.n	5aba <__aeabi_dsub+0x2da>
    5ab8:	e09f      	b.n	5bfa <__aeabi_dsub+0x41a>
    5aba:	4b1a      	ldr	r3, [pc, #104]	; (5b24 <__aeabi_dsub+0x344>)
    5abc:	459c      	cmp	ip, r3
    5abe:	d100      	bne.n	5ac2 <__aeabi_dsub+0x2e2>
    5ac0:	e0c5      	b.n	5c4e <__aeabi_dsub+0x46e>
    5ac2:	4452      	add	r2, sl
    5ac4:	4552      	cmp	r2, sl
    5ac6:	4180      	sbcs	r0, r0
    5ac8:	1864      	adds	r4, r4, r1
    5aca:	4240      	negs	r0, r0
    5acc:	1824      	adds	r4, r4, r0
    5ace:	07e7      	lsls	r7, r4, #31
    5ad0:	0852      	lsrs	r2, r2, #1
    5ad2:	4317      	orrs	r7, r2
    5ad4:	0864      	lsrs	r4, r4, #1
    5ad6:	4666      	mov	r6, ip
    5ad8:	e708      	b.n	58ec <__aeabi_dsub+0x10c>
    5ada:	4812      	ldr	r0, [pc, #72]	; (5b24 <__aeabi_dsub+0x344>)
    5adc:	4285      	cmp	r5, r0
    5ade:	d100      	bne.n	5ae2 <__aeabi_dsub+0x302>
    5ae0:	e085      	b.n	5bee <__aeabi_dsub+0x40e>
    5ae2:	001d      	movs	r5, r3
    5ae4:	e6bc      	b.n	5860 <__aeabi_dsub+0x80>
    5ae6:	0029      	movs	r1, r5
    5ae8:	3e1f      	subs	r6, #31
    5aea:	40f1      	lsrs	r1, r6
    5aec:	2b20      	cmp	r3, #32
    5aee:	d100      	bne.n	5af2 <__aeabi_dsub+0x312>
    5af0:	e07f      	b.n	5bf2 <__aeabi_dsub+0x412>
    5af2:	2240      	movs	r2, #64	; 0x40
    5af4:	1ad3      	subs	r3, r2, r3
    5af6:	409d      	lsls	r5, r3
    5af8:	432f      	orrs	r7, r5
    5afa:	1e7d      	subs	r5, r7, #1
    5afc:	41af      	sbcs	r7, r5
    5afe:	2400      	movs	r4, #0
    5b00:	430f      	orrs	r7, r1
    5b02:	2600      	movs	r6, #0
    5b04:	e78e      	b.n	5a24 <__aeabi_dsub+0x244>
    5b06:	002b      	movs	r3, r5
    5b08:	000f      	movs	r7, r1
    5b0a:	3b20      	subs	r3, #32
    5b0c:	40df      	lsrs	r7, r3
    5b0e:	2d20      	cmp	r5, #32
    5b10:	d071      	beq.n	5bf6 <__aeabi_dsub+0x416>
    5b12:	2340      	movs	r3, #64	; 0x40
    5b14:	1b5d      	subs	r5, r3, r5
    5b16:	40a9      	lsls	r1, r5
    5b18:	430a      	orrs	r2, r1
    5b1a:	1e51      	subs	r1, r2, #1
    5b1c:	418a      	sbcs	r2, r1
    5b1e:	2100      	movs	r1, #0
    5b20:	4317      	orrs	r7, r2
    5b22:	e6af      	b.n	5884 <__aeabi_dsub+0xa4>
    5b24:	000007ff 	.word	0x000007ff
    5b28:	ff7fffff 	.word	0xff7fffff
    5b2c:	800fffff 	.word	0x800fffff
    5b30:	2e00      	cmp	r6, #0
    5b32:	d03e      	beq.n	5bb2 <__aeabi_dsub+0x3d2>
    5b34:	4eb3      	ldr	r6, [pc, #716]	; (5e04 <__aeabi_dsub+0x624>)
    5b36:	45b4      	cmp	ip, r6
    5b38:	d045      	beq.n	5bc6 <__aeabi_dsub+0x3e6>
    5b3a:	2680      	movs	r6, #128	; 0x80
    5b3c:	0436      	lsls	r6, r6, #16
    5b3e:	426d      	negs	r5, r5
    5b40:	4334      	orrs	r4, r6
    5b42:	2d38      	cmp	r5, #56	; 0x38
    5b44:	dd00      	ble.n	5b48 <__aeabi_dsub+0x368>
    5b46:	e0a8      	b.n	5c9a <__aeabi_dsub+0x4ba>
    5b48:	2d1f      	cmp	r5, #31
    5b4a:	dd00      	ble.n	5b4e <__aeabi_dsub+0x36e>
    5b4c:	e11f      	b.n	5d8e <__aeabi_dsub+0x5ae>
    5b4e:	2620      	movs	r6, #32
    5b50:	0027      	movs	r7, r4
    5b52:	4650      	mov	r0, sl
    5b54:	1b76      	subs	r6, r6, r5
    5b56:	40b7      	lsls	r7, r6
    5b58:	40e8      	lsrs	r0, r5
    5b5a:	4307      	orrs	r7, r0
    5b5c:	4650      	mov	r0, sl
    5b5e:	40b0      	lsls	r0, r6
    5b60:	1e46      	subs	r6, r0, #1
    5b62:	41b0      	sbcs	r0, r6
    5b64:	40ec      	lsrs	r4, r5
    5b66:	4338      	orrs	r0, r7
    5b68:	1a17      	subs	r7, r2, r0
    5b6a:	42ba      	cmp	r2, r7
    5b6c:	4192      	sbcs	r2, r2
    5b6e:	1b0c      	subs	r4, r1, r4
    5b70:	4252      	negs	r2, r2
    5b72:	1aa4      	subs	r4, r4, r2
    5b74:	4666      	mov	r6, ip
    5b76:	4698      	mov	r8, r3
    5b78:	e68b      	b.n	5892 <__aeabi_dsub+0xb2>
    5b7a:	4664      	mov	r4, ip
    5b7c:	4667      	mov	r7, ip
    5b7e:	432c      	orrs	r4, r5
    5b80:	d000      	beq.n	5b84 <__aeabi_dsub+0x3a4>
    5b82:	e68b      	b.n	589c <__aeabi_dsub+0xbc>
    5b84:	2500      	movs	r5, #0
    5b86:	2600      	movs	r6, #0
    5b88:	2700      	movs	r7, #0
    5b8a:	e6ea      	b.n	5962 <__aeabi_dsub+0x182>
    5b8c:	001e      	movs	r6, r3
    5b8e:	e6ad      	b.n	58ec <__aeabi_dsub+0x10c>
    5b90:	2b1f      	cmp	r3, #31
    5b92:	dc60      	bgt.n	5c56 <__aeabi_dsub+0x476>
    5b94:	2720      	movs	r7, #32
    5b96:	1af8      	subs	r0, r7, r3
    5b98:	000f      	movs	r7, r1
    5b9a:	4684      	mov	ip, r0
    5b9c:	4087      	lsls	r7, r0
    5b9e:	0010      	movs	r0, r2
    5ba0:	40d8      	lsrs	r0, r3
    5ba2:	4307      	orrs	r7, r0
    5ba4:	4660      	mov	r0, ip
    5ba6:	4082      	lsls	r2, r0
    5ba8:	1e50      	subs	r0, r2, #1
    5baa:	4182      	sbcs	r2, r0
    5bac:	40d9      	lsrs	r1, r3
    5bae:	4317      	orrs	r7, r2
    5bb0:	e6f5      	b.n	599e <__aeabi_dsub+0x1be>
    5bb2:	0026      	movs	r6, r4
    5bb4:	4650      	mov	r0, sl
    5bb6:	4306      	orrs	r6, r0
    5bb8:	d005      	beq.n	5bc6 <__aeabi_dsub+0x3e6>
    5bba:	43ed      	mvns	r5, r5
    5bbc:	2d00      	cmp	r5, #0
    5bbe:	d0d3      	beq.n	5b68 <__aeabi_dsub+0x388>
    5bc0:	4e90      	ldr	r6, [pc, #576]	; (5e04 <__aeabi_dsub+0x624>)
    5bc2:	45b4      	cmp	ip, r6
    5bc4:	d1bd      	bne.n	5b42 <__aeabi_dsub+0x362>
    5bc6:	000c      	movs	r4, r1
    5bc8:	0017      	movs	r7, r2
    5bca:	4666      	mov	r6, ip
    5bcc:	4698      	mov	r8, r3
    5bce:	e68d      	b.n	58ec <__aeabi_dsub+0x10c>
    5bd0:	488c      	ldr	r0, [pc, #560]	; (5e04 <__aeabi_dsub+0x624>)
    5bd2:	4283      	cmp	r3, r0
    5bd4:	d00b      	beq.n	5bee <__aeabi_dsub+0x40e>
    5bd6:	4663      	mov	r3, ip
    5bd8:	e6d9      	b.n	598e <__aeabi_dsub+0x1ae>
    5bda:	2d00      	cmp	r5, #0
    5bdc:	d000      	beq.n	5be0 <__aeabi_dsub+0x400>
    5bde:	e096      	b.n	5d0e <__aeabi_dsub+0x52e>
    5be0:	0008      	movs	r0, r1
    5be2:	4310      	orrs	r0, r2
    5be4:	d100      	bne.n	5be8 <__aeabi_dsub+0x408>
    5be6:	e0e2      	b.n	5dae <__aeabi_dsub+0x5ce>
    5be8:	000c      	movs	r4, r1
    5bea:	0017      	movs	r7, r2
    5bec:	4698      	mov	r8, r3
    5bee:	4e85      	ldr	r6, [pc, #532]	; (5e04 <__aeabi_dsub+0x624>)
    5bf0:	e67c      	b.n	58ec <__aeabi_dsub+0x10c>
    5bf2:	2500      	movs	r5, #0
    5bf4:	e780      	b.n	5af8 <__aeabi_dsub+0x318>
    5bf6:	2100      	movs	r1, #0
    5bf8:	e78e      	b.n	5b18 <__aeabi_dsub+0x338>
    5bfa:	0023      	movs	r3, r4
    5bfc:	4650      	mov	r0, sl
    5bfe:	4303      	orrs	r3, r0
    5c00:	2e00      	cmp	r6, #0
    5c02:	d000      	beq.n	5c06 <__aeabi_dsub+0x426>
    5c04:	e0a8      	b.n	5d58 <__aeabi_dsub+0x578>
    5c06:	2b00      	cmp	r3, #0
    5c08:	d100      	bne.n	5c0c <__aeabi_dsub+0x42c>
    5c0a:	e0de      	b.n	5dca <__aeabi_dsub+0x5ea>
    5c0c:	000b      	movs	r3, r1
    5c0e:	4313      	orrs	r3, r2
    5c10:	d100      	bne.n	5c14 <__aeabi_dsub+0x434>
    5c12:	e66b      	b.n	58ec <__aeabi_dsub+0x10c>
    5c14:	4452      	add	r2, sl
    5c16:	4552      	cmp	r2, sl
    5c18:	4180      	sbcs	r0, r0
    5c1a:	1864      	adds	r4, r4, r1
    5c1c:	4240      	negs	r0, r0
    5c1e:	1824      	adds	r4, r4, r0
    5c20:	0017      	movs	r7, r2
    5c22:	0223      	lsls	r3, r4, #8
    5c24:	d400      	bmi.n	5c28 <__aeabi_dsub+0x448>
    5c26:	e6fd      	b.n	5a24 <__aeabi_dsub+0x244>
    5c28:	4b77      	ldr	r3, [pc, #476]	; (5e08 <__aeabi_dsub+0x628>)
    5c2a:	4666      	mov	r6, ip
    5c2c:	401c      	ands	r4, r3
    5c2e:	e65d      	b.n	58ec <__aeabi_dsub+0x10c>
    5c30:	0025      	movs	r5, r4
    5c32:	4650      	mov	r0, sl
    5c34:	4305      	orrs	r5, r0
    5c36:	2e00      	cmp	r6, #0
    5c38:	d1cf      	bne.n	5bda <__aeabi_dsub+0x3fa>
    5c3a:	2d00      	cmp	r5, #0
    5c3c:	d14f      	bne.n	5cde <__aeabi_dsub+0x4fe>
    5c3e:	000c      	movs	r4, r1
    5c40:	4314      	orrs	r4, r2
    5c42:	d100      	bne.n	5c46 <__aeabi_dsub+0x466>
    5c44:	e0a0      	b.n	5d88 <__aeabi_dsub+0x5a8>
    5c46:	000c      	movs	r4, r1
    5c48:	0017      	movs	r7, r2
    5c4a:	4698      	mov	r8, r3
    5c4c:	e64e      	b.n	58ec <__aeabi_dsub+0x10c>
    5c4e:	4666      	mov	r6, ip
    5c50:	2400      	movs	r4, #0
    5c52:	2700      	movs	r7, #0
    5c54:	e685      	b.n	5962 <__aeabi_dsub+0x182>
    5c56:	001f      	movs	r7, r3
    5c58:	0008      	movs	r0, r1
    5c5a:	3f20      	subs	r7, #32
    5c5c:	40f8      	lsrs	r0, r7
    5c5e:	0007      	movs	r7, r0
    5c60:	2b20      	cmp	r3, #32
    5c62:	d100      	bne.n	5c66 <__aeabi_dsub+0x486>
    5c64:	e08e      	b.n	5d84 <__aeabi_dsub+0x5a4>
    5c66:	2040      	movs	r0, #64	; 0x40
    5c68:	1ac3      	subs	r3, r0, r3
    5c6a:	4099      	lsls	r1, r3
    5c6c:	430a      	orrs	r2, r1
    5c6e:	1e51      	subs	r1, r2, #1
    5c70:	418a      	sbcs	r2, r1
    5c72:	2100      	movs	r1, #0
    5c74:	4317      	orrs	r7, r2
    5c76:	e692      	b.n	599e <__aeabi_dsub+0x1be>
    5c78:	2e00      	cmp	r6, #0
    5c7a:	d114      	bne.n	5ca6 <__aeabi_dsub+0x4c6>
    5c7c:	0026      	movs	r6, r4
    5c7e:	4650      	mov	r0, sl
    5c80:	4306      	orrs	r6, r0
    5c82:	d062      	beq.n	5d4a <__aeabi_dsub+0x56a>
    5c84:	43db      	mvns	r3, r3
    5c86:	2b00      	cmp	r3, #0
    5c88:	d15c      	bne.n	5d44 <__aeabi_dsub+0x564>
    5c8a:	1887      	adds	r7, r0, r2
    5c8c:	4297      	cmp	r7, r2
    5c8e:	4192      	sbcs	r2, r2
    5c90:	1864      	adds	r4, r4, r1
    5c92:	4252      	negs	r2, r2
    5c94:	18a4      	adds	r4, r4, r2
    5c96:	4666      	mov	r6, ip
    5c98:	e687      	b.n	59aa <__aeabi_dsub+0x1ca>
    5c9a:	4650      	mov	r0, sl
    5c9c:	4320      	orrs	r0, r4
    5c9e:	1e44      	subs	r4, r0, #1
    5ca0:	41a0      	sbcs	r0, r4
    5ca2:	2400      	movs	r4, #0
    5ca4:	e760      	b.n	5b68 <__aeabi_dsub+0x388>
    5ca6:	4e57      	ldr	r6, [pc, #348]	; (5e04 <__aeabi_dsub+0x624>)
    5ca8:	45b4      	cmp	ip, r6
    5caa:	d04e      	beq.n	5d4a <__aeabi_dsub+0x56a>
    5cac:	2680      	movs	r6, #128	; 0x80
    5cae:	0436      	lsls	r6, r6, #16
    5cb0:	425b      	negs	r3, r3
    5cb2:	4334      	orrs	r4, r6
    5cb4:	2b38      	cmp	r3, #56	; 0x38
    5cb6:	dd00      	ble.n	5cba <__aeabi_dsub+0x4da>
    5cb8:	e07f      	b.n	5dba <__aeabi_dsub+0x5da>
    5cba:	2b1f      	cmp	r3, #31
    5cbc:	dd00      	ble.n	5cc0 <__aeabi_dsub+0x4e0>
    5cbe:	e08b      	b.n	5dd8 <__aeabi_dsub+0x5f8>
    5cc0:	2620      	movs	r6, #32
    5cc2:	0027      	movs	r7, r4
    5cc4:	4650      	mov	r0, sl
    5cc6:	1af6      	subs	r6, r6, r3
    5cc8:	40b7      	lsls	r7, r6
    5cca:	40d8      	lsrs	r0, r3
    5ccc:	4307      	orrs	r7, r0
    5cce:	4650      	mov	r0, sl
    5cd0:	40b0      	lsls	r0, r6
    5cd2:	1e46      	subs	r6, r0, #1
    5cd4:	41b0      	sbcs	r0, r6
    5cd6:	4307      	orrs	r7, r0
    5cd8:	40dc      	lsrs	r4, r3
    5cda:	18bf      	adds	r7, r7, r2
    5cdc:	e7d6      	b.n	5c8c <__aeabi_dsub+0x4ac>
    5cde:	000d      	movs	r5, r1
    5ce0:	4315      	orrs	r5, r2
    5ce2:	d100      	bne.n	5ce6 <__aeabi_dsub+0x506>
    5ce4:	e602      	b.n	58ec <__aeabi_dsub+0x10c>
    5ce6:	4650      	mov	r0, sl
    5ce8:	1a80      	subs	r0, r0, r2
    5cea:	4582      	cmp	sl, r0
    5cec:	41bf      	sbcs	r7, r7
    5cee:	1a65      	subs	r5, r4, r1
    5cf0:	427f      	negs	r7, r7
    5cf2:	1bed      	subs	r5, r5, r7
    5cf4:	4684      	mov	ip, r0
    5cf6:	0228      	lsls	r0, r5, #8
    5cf8:	d400      	bmi.n	5cfc <__aeabi_dsub+0x51c>
    5cfa:	e68d      	b.n	5a18 <__aeabi_dsub+0x238>
    5cfc:	4650      	mov	r0, sl
    5cfe:	1a17      	subs	r7, r2, r0
    5d00:	42ba      	cmp	r2, r7
    5d02:	4192      	sbcs	r2, r2
    5d04:	1b0c      	subs	r4, r1, r4
    5d06:	4252      	negs	r2, r2
    5d08:	1aa4      	subs	r4, r4, r2
    5d0a:	4698      	mov	r8, r3
    5d0c:	e5ee      	b.n	58ec <__aeabi_dsub+0x10c>
    5d0e:	000d      	movs	r5, r1
    5d10:	4315      	orrs	r5, r2
    5d12:	d100      	bne.n	5d16 <__aeabi_dsub+0x536>
    5d14:	e76b      	b.n	5bee <__aeabi_dsub+0x40e>
    5d16:	4650      	mov	r0, sl
    5d18:	0767      	lsls	r7, r4, #29
    5d1a:	08c0      	lsrs	r0, r0, #3
    5d1c:	4307      	orrs	r7, r0
    5d1e:	2080      	movs	r0, #128	; 0x80
    5d20:	08e4      	lsrs	r4, r4, #3
    5d22:	0300      	lsls	r0, r0, #12
    5d24:	4204      	tst	r4, r0
    5d26:	d007      	beq.n	5d38 <__aeabi_dsub+0x558>
    5d28:	08cd      	lsrs	r5, r1, #3
    5d2a:	4205      	tst	r5, r0
    5d2c:	d104      	bne.n	5d38 <__aeabi_dsub+0x558>
    5d2e:	002c      	movs	r4, r5
    5d30:	4698      	mov	r8, r3
    5d32:	08d7      	lsrs	r7, r2, #3
    5d34:	0749      	lsls	r1, r1, #29
    5d36:	430f      	orrs	r7, r1
    5d38:	0f7b      	lsrs	r3, r7, #29
    5d3a:	00e4      	lsls	r4, r4, #3
    5d3c:	431c      	orrs	r4, r3
    5d3e:	00ff      	lsls	r7, r7, #3
    5d40:	4e30      	ldr	r6, [pc, #192]	; (5e04 <__aeabi_dsub+0x624>)
    5d42:	e5d3      	b.n	58ec <__aeabi_dsub+0x10c>
    5d44:	4e2f      	ldr	r6, [pc, #188]	; (5e04 <__aeabi_dsub+0x624>)
    5d46:	45b4      	cmp	ip, r6
    5d48:	d1b4      	bne.n	5cb4 <__aeabi_dsub+0x4d4>
    5d4a:	000c      	movs	r4, r1
    5d4c:	0017      	movs	r7, r2
    5d4e:	4666      	mov	r6, ip
    5d50:	e5cc      	b.n	58ec <__aeabi_dsub+0x10c>
    5d52:	2700      	movs	r7, #0
    5d54:	2400      	movs	r4, #0
    5d56:	e5e8      	b.n	592a <__aeabi_dsub+0x14a>
    5d58:	2b00      	cmp	r3, #0
    5d5a:	d039      	beq.n	5dd0 <__aeabi_dsub+0x5f0>
    5d5c:	000b      	movs	r3, r1
    5d5e:	4313      	orrs	r3, r2
    5d60:	d100      	bne.n	5d64 <__aeabi_dsub+0x584>
    5d62:	e744      	b.n	5bee <__aeabi_dsub+0x40e>
    5d64:	08c0      	lsrs	r0, r0, #3
    5d66:	0767      	lsls	r7, r4, #29
    5d68:	4307      	orrs	r7, r0
    5d6a:	2080      	movs	r0, #128	; 0x80
    5d6c:	08e4      	lsrs	r4, r4, #3
    5d6e:	0300      	lsls	r0, r0, #12
    5d70:	4204      	tst	r4, r0
    5d72:	d0e1      	beq.n	5d38 <__aeabi_dsub+0x558>
    5d74:	08cb      	lsrs	r3, r1, #3
    5d76:	4203      	tst	r3, r0
    5d78:	d1de      	bne.n	5d38 <__aeabi_dsub+0x558>
    5d7a:	08d7      	lsrs	r7, r2, #3
    5d7c:	0749      	lsls	r1, r1, #29
    5d7e:	430f      	orrs	r7, r1
    5d80:	001c      	movs	r4, r3
    5d82:	e7d9      	b.n	5d38 <__aeabi_dsub+0x558>
    5d84:	2100      	movs	r1, #0
    5d86:	e771      	b.n	5c6c <__aeabi_dsub+0x48c>
    5d88:	2500      	movs	r5, #0
    5d8a:	2700      	movs	r7, #0
    5d8c:	e5e9      	b.n	5962 <__aeabi_dsub+0x182>
    5d8e:	002e      	movs	r6, r5
    5d90:	0027      	movs	r7, r4
    5d92:	3e20      	subs	r6, #32
    5d94:	40f7      	lsrs	r7, r6
    5d96:	2d20      	cmp	r5, #32
    5d98:	d02f      	beq.n	5dfa <__aeabi_dsub+0x61a>
    5d9a:	2640      	movs	r6, #64	; 0x40
    5d9c:	1b75      	subs	r5, r6, r5
    5d9e:	40ac      	lsls	r4, r5
    5da0:	4650      	mov	r0, sl
    5da2:	4320      	orrs	r0, r4
    5da4:	1e44      	subs	r4, r0, #1
    5da6:	41a0      	sbcs	r0, r4
    5da8:	2400      	movs	r4, #0
    5daa:	4338      	orrs	r0, r7
    5dac:	e6dc      	b.n	5b68 <__aeabi_dsub+0x388>
    5dae:	2480      	movs	r4, #128	; 0x80
    5db0:	2500      	movs	r5, #0
    5db2:	0324      	lsls	r4, r4, #12
    5db4:	4e13      	ldr	r6, [pc, #76]	; (5e04 <__aeabi_dsub+0x624>)
    5db6:	2700      	movs	r7, #0
    5db8:	e5d3      	b.n	5962 <__aeabi_dsub+0x182>
    5dba:	4650      	mov	r0, sl
    5dbc:	4320      	orrs	r0, r4
    5dbe:	0007      	movs	r7, r0
    5dc0:	1e78      	subs	r0, r7, #1
    5dc2:	4187      	sbcs	r7, r0
    5dc4:	2400      	movs	r4, #0
    5dc6:	18bf      	adds	r7, r7, r2
    5dc8:	e760      	b.n	5c8c <__aeabi_dsub+0x4ac>
    5dca:	000c      	movs	r4, r1
    5dcc:	0017      	movs	r7, r2
    5dce:	e58d      	b.n	58ec <__aeabi_dsub+0x10c>
    5dd0:	000c      	movs	r4, r1
    5dd2:	0017      	movs	r7, r2
    5dd4:	4e0b      	ldr	r6, [pc, #44]	; (5e04 <__aeabi_dsub+0x624>)
    5dd6:	e589      	b.n	58ec <__aeabi_dsub+0x10c>
    5dd8:	001e      	movs	r6, r3
    5dda:	0027      	movs	r7, r4
    5ddc:	3e20      	subs	r6, #32
    5dde:	40f7      	lsrs	r7, r6
    5de0:	2b20      	cmp	r3, #32
    5de2:	d00c      	beq.n	5dfe <__aeabi_dsub+0x61e>
    5de4:	2640      	movs	r6, #64	; 0x40
    5de6:	1af3      	subs	r3, r6, r3
    5de8:	409c      	lsls	r4, r3
    5dea:	4650      	mov	r0, sl
    5dec:	4320      	orrs	r0, r4
    5dee:	1e44      	subs	r4, r0, #1
    5df0:	41a0      	sbcs	r0, r4
    5df2:	4307      	orrs	r7, r0
    5df4:	2400      	movs	r4, #0
    5df6:	18bf      	adds	r7, r7, r2
    5df8:	e748      	b.n	5c8c <__aeabi_dsub+0x4ac>
    5dfa:	2400      	movs	r4, #0
    5dfc:	e7d0      	b.n	5da0 <__aeabi_dsub+0x5c0>
    5dfe:	2400      	movs	r4, #0
    5e00:	e7f3      	b.n	5dea <__aeabi_dsub+0x60a>
    5e02:	46c0      	nop			; (mov r8, r8)
    5e04:	000007ff 	.word	0x000007ff
    5e08:	ff7fffff 	.word	0xff7fffff

00005e0c <__aeabi_d2iz>:
    5e0c:	b530      	push	{r4, r5, lr}
    5e0e:	4d13      	ldr	r5, [pc, #76]	; (5e5c <__aeabi_d2iz+0x50>)
    5e10:	030a      	lsls	r2, r1, #12
    5e12:	004b      	lsls	r3, r1, #1
    5e14:	0b12      	lsrs	r2, r2, #12
    5e16:	0d5b      	lsrs	r3, r3, #21
    5e18:	0fc9      	lsrs	r1, r1, #31
    5e1a:	2400      	movs	r4, #0
    5e1c:	42ab      	cmp	r3, r5
    5e1e:	dd10      	ble.n	5e42 <__aeabi_d2iz+0x36>
    5e20:	4c0f      	ldr	r4, [pc, #60]	; (5e60 <__aeabi_d2iz+0x54>)
    5e22:	42a3      	cmp	r3, r4
    5e24:	dc0f      	bgt.n	5e46 <__aeabi_d2iz+0x3a>
    5e26:	2480      	movs	r4, #128	; 0x80
    5e28:	4d0e      	ldr	r5, [pc, #56]	; (5e64 <__aeabi_d2iz+0x58>)
    5e2a:	0364      	lsls	r4, r4, #13
    5e2c:	4322      	orrs	r2, r4
    5e2e:	1aed      	subs	r5, r5, r3
    5e30:	2d1f      	cmp	r5, #31
    5e32:	dd0b      	ble.n	5e4c <__aeabi_d2iz+0x40>
    5e34:	480c      	ldr	r0, [pc, #48]	; (5e68 <__aeabi_d2iz+0x5c>)
    5e36:	1ac3      	subs	r3, r0, r3
    5e38:	40da      	lsrs	r2, r3
    5e3a:	4254      	negs	r4, r2
    5e3c:	2900      	cmp	r1, #0
    5e3e:	d100      	bne.n	5e42 <__aeabi_d2iz+0x36>
    5e40:	0014      	movs	r4, r2
    5e42:	0020      	movs	r0, r4
    5e44:	bd30      	pop	{r4, r5, pc}
    5e46:	4b09      	ldr	r3, [pc, #36]	; (5e6c <__aeabi_d2iz+0x60>)
    5e48:	18cc      	adds	r4, r1, r3
    5e4a:	e7fa      	b.n	5e42 <__aeabi_d2iz+0x36>
    5e4c:	4c08      	ldr	r4, [pc, #32]	; (5e70 <__aeabi_d2iz+0x64>)
    5e4e:	40e8      	lsrs	r0, r5
    5e50:	46a4      	mov	ip, r4
    5e52:	4463      	add	r3, ip
    5e54:	409a      	lsls	r2, r3
    5e56:	4302      	orrs	r2, r0
    5e58:	e7ef      	b.n	5e3a <__aeabi_d2iz+0x2e>
    5e5a:	46c0      	nop			; (mov r8, r8)
    5e5c:	000003fe 	.word	0x000003fe
    5e60:	0000041d 	.word	0x0000041d
    5e64:	00000433 	.word	0x00000433
    5e68:	00000413 	.word	0x00000413
    5e6c:	7fffffff 	.word	0x7fffffff
    5e70:	fffffbed 	.word	0xfffffbed

00005e74 <__aeabi_i2d>:
    5e74:	b570      	push	{r4, r5, r6, lr}
    5e76:	2800      	cmp	r0, #0
    5e78:	d030      	beq.n	5edc <__aeabi_i2d+0x68>
    5e7a:	17c3      	asrs	r3, r0, #31
    5e7c:	18c4      	adds	r4, r0, r3
    5e7e:	405c      	eors	r4, r3
    5e80:	0fc5      	lsrs	r5, r0, #31
    5e82:	0020      	movs	r0, r4
    5e84:	f000 f98a 	bl	619c <__clzsi2>
    5e88:	4b17      	ldr	r3, [pc, #92]	; (5ee8 <__aeabi_i2d+0x74>)
    5e8a:	4a18      	ldr	r2, [pc, #96]	; (5eec <__aeabi_i2d+0x78>)
    5e8c:	1a1b      	subs	r3, r3, r0
    5e8e:	1ad2      	subs	r2, r2, r3
    5e90:	2a1f      	cmp	r2, #31
    5e92:	dd18      	ble.n	5ec6 <__aeabi_i2d+0x52>
    5e94:	4a16      	ldr	r2, [pc, #88]	; (5ef0 <__aeabi_i2d+0x7c>)
    5e96:	1ad2      	subs	r2, r2, r3
    5e98:	4094      	lsls	r4, r2
    5e9a:	2200      	movs	r2, #0
    5e9c:	0324      	lsls	r4, r4, #12
    5e9e:	055b      	lsls	r3, r3, #21
    5ea0:	0b24      	lsrs	r4, r4, #12
    5ea2:	0d5b      	lsrs	r3, r3, #21
    5ea4:	2100      	movs	r1, #0
    5ea6:	0010      	movs	r0, r2
    5ea8:	0324      	lsls	r4, r4, #12
    5eaa:	0d0a      	lsrs	r2, r1, #20
    5eac:	0b24      	lsrs	r4, r4, #12
    5eae:	0512      	lsls	r2, r2, #20
    5eb0:	4322      	orrs	r2, r4
    5eb2:	4c10      	ldr	r4, [pc, #64]	; (5ef4 <__aeabi_i2d+0x80>)
    5eb4:	051b      	lsls	r3, r3, #20
    5eb6:	4022      	ands	r2, r4
    5eb8:	4313      	orrs	r3, r2
    5eba:	005b      	lsls	r3, r3, #1
    5ebc:	07ed      	lsls	r5, r5, #31
    5ebe:	085b      	lsrs	r3, r3, #1
    5ec0:	432b      	orrs	r3, r5
    5ec2:	0019      	movs	r1, r3
    5ec4:	bd70      	pop	{r4, r5, r6, pc}
    5ec6:	0021      	movs	r1, r4
    5ec8:	4091      	lsls	r1, r2
    5eca:	000a      	movs	r2, r1
    5ecc:	210b      	movs	r1, #11
    5ece:	1a08      	subs	r0, r1, r0
    5ed0:	40c4      	lsrs	r4, r0
    5ed2:	055b      	lsls	r3, r3, #21
    5ed4:	0324      	lsls	r4, r4, #12
    5ed6:	0b24      	lsrs	r4, r4, #12
    5ed8:	0d5b      	lsrs	r3, r3, #21
    5eda:	e7e3      	b.n	5ea4 <__aeabi_i2d+0x30>
    5edc:	2500      	movs	r5, #0
    5ede:	2300      	movs	r3, #0
    5ee0:	2400      	movs	r4, #0
    5ee2:	2200      	movs	r2, #0
    5ee4:	e7de      	b.n	5ea4 <__aeabi_i2d+0x30>
    5ee6:	46c0      	nop			; (mov r8, r8)
    5ee8:	0000041e 	.word	0x0000041e
    5eec:	00000433 	.word	0x00000433
    5ef0:	00000413 	.word	0x00000413
    5ef4:	800fffff 	.word	0x800fffff

00005ef8 <__aeabi_ui2d>:
    5ef8:	b510      	push	{r4, lr}
    5efa:	1e04      	subs	r4, r0, #0
    5efc:	d028      	beq.n	5f50 <__aeabi_ui2d+0x58>
    5efe:	f000 f94d 	bl	619c <__clzsi2>
    5f02:	4b15      	ldr	r3, [pc, #84]	; (5f58 <__aeabi_ui2d+0x60>)
    5f04:	4a15      	ldr	r2, [pc, #84]	; (5f5c <__aeabi_ui2d+0x64>)
    5f06:	1a1b      	subs	r3, r3, r0
    5f08:	1ad2      	subs	r2, r2, r3
    5f0a:	2a1f      	cmp	r2, #31
    5f0c:	dd15      	ble.n	5f3a <__aeabi_ui2d+0x42>
    5f0e:	4a14      	ldr	r2, [pc, #80]	; (5f60 <__aeabi_ui2d+0x68>)
    5f10:	1ad2      	subs	r2, r2, r3
    5f12:	4094      	lsls	r4, r2
    5f14:	2200      	movs	r2, #0
    5f16:	0324      	lsls	r4, r4, #12
    5f18:	055b      	lsls	r3, r3, #21
    5f1a:	0b24      	lsrs	r4, r4, #12
    5f1c:	0d5b      	lsrs	r3, r3, #21
    5f1e:	2100      	movs	r1, #0
    5f20:	0010      	movs	r0, r2
    5f22:	0324      	lsls	r4, r4, #12
    5f24:	0d0a      	lsrs	r2, r1, #20
    5f26:	0b24      	lsrs	r4, r4, #12
    5f28:	0512      	lsls	r2, r2, #20
    5f2a:	4322      	orrs	r2, r4
    5f2c:	4c0d      	ldr	r4, [pc, #52]	; (5f64 <__aeabi_ui2d+0x6c>)
    5f2e:	051b      	lsls	r3, r3, #20
    5f30:	4022      	ands	r2, r4
    5f32:	4313      	orrs	r3, r2
    5f34:	005b      	lsls	r3, r3, #1
    5f36:	0859      	lsrs	r1, r3, #1
    5f38:	bd10      	pop	{r4, pc}
    5f3a:	0021      	movs	r1, r4
    5f3c:	4091      	lsls	r1, r2
    5f3e:	000a      	movs	r2, r1
    5f40:	210b      	movs	r1, #11
    5f42:	1a08      	subs	r0, r1, r0
    5f44:	40c4      	lsrs	r4, r0
    5f46:	055b      	lsls	r3, r3, #21
    5f48:	0324      	lsls	r4, r4, #12
    5f4a:	0b24      	lsrs	r4, r4, #12
    5f4c:	0d5b      	lsrs	r3, r3, #21
    5f4e:	e7e6      	b.n	5f1e <__aeabi_ui2d+0x26>
    5f50:	2300      	movs	r3, #0
    5f52:	2400      	movs	r4, #0
    5f54:	2200      	movs	r2, #0
    5f56:	e7e2      	b.n	5f1e <__aeabi_ui2d+0x26>
    5f58:	0000041e 	.word	0x0000041e
    5f5c:	00000433 	.word	0x00000433
    5f60:	00000413 	.word	0x00000413
    5f64:	800fffff 	.word	0x800fffff

00005f68 <__aeabi_f2d>:
    5f68:	0041      	lsls	r1, r0, #1
    5f6a:	0e09      	lsrs	r1, r1, #24
    5f6c:	1c4b      	adds	r3, r1, #1
    5f6e:	b570      	push	{r4, r5, r6, lr}
    5f70:	b2db      	uxtb	r3, r3
    5f72:	0246      	lsls	r6, r0, #9
    5f74:	0a75      	lsrs	r5, r6, #9
    5f76:	0fc4      	lsrs	r4, r0, #31
    5f78:	2b01      	cmp	r3, #1
    5f7a:	dd14      	ble.n	5fa6 <__aeabi_f2d+0x3e>
    5f7c:	23e0      	movs	r3, #224	; 0xe0
    5f7e:	009b      	lsls	r3, r3, #2
    5f80:	076d      	lsls	r5, r5, #29
    5f82:	0b36      	lsrs	r6, r6, #12
    5f84:	18cb      	adds	r3, r1, r3
    5f86:	2100      	movs	r1, #0
    5f88:	0d0a      	lsrs	r2, r1, #20
    5f8a:	0028      	movs	r0, r5
    5f8c:	0512      	lsls	r2, r2, #20
    5f8e:	4d1c      	ldr	r5, [pc, #112]	; (6000 <__aeabi_f2d+0x98>)
    5f90:	4332      	orrs	r2, r6
    5f92:	055b      	lsls	r3, r3, #21
    5f94:	402a      	ands	r2, r5
    5f96:	085b      	lsrs	r3, r3, #1
    5f98:	4313      	orrs	r3, r2
    5f9a:	005b      	lsls	r3, r3, #1
    5f9c:	07e4      	lsls	r4, r4, #31
    5f9e:	085b      	lsrs	r3, r3, #1
    5fa0:	4323      	orrs	r3, r4
    5fa2:	0019      	movs	r1, r3
    5fa4:	bd70      	pop	{r4, r5, r6, pc}
    5fa6:	2900      	cmp	r1, #0
    5fa8:	d114      	bne.n	5fd4 <__aeabi_f2d+0x6c>
    5faa:	2d00      	cmp	r5, #0
    5fac:	d01e      	beq.n	5fec <__aeabi_f2d+0x84>
    5fae:	0028      	movs	r0, r5
    5fb0:	f000 f8f4 	bl	619c <__clzsi2>
    5fb4:	280a      	cmp	r0, #10
    5fb6:	dc1c      	bgt.n	5ff2 <__aeabi_f2d+0x8a>
    5fb8:	230b      	movs	r3, #11
    5fba:	002a      	movs	r2, r5
    5fbc:	1a1b      	subs	r3, r3, r0
    5fbe:	40da      	lsrs	r2, r3
    5fc0:	0003      	movs	r3, r0
    5fc2:	3315      	adds	r3, #21
    5fc4:	409d      	lsls	r5, r3
    5fc6:	4b0f      	ldr	r3, [pc, #60]	; (6004 <__aeabi_f2d+0x9c>)
    5fc8:	0312      	lsls	r2, r2, #12
    5fca:	1a1b      	subs	r3, r3, r0
    5fcc:	055b      	lsls	r3, r3, #21
    5fce:	0b16      	lsrs	r6, r2, #12
    5fd0:	0d5b      	lsrs	r3, r3, #21
    5fd2:	e7d8      	b.n	5f86 <__aeabi_f2d+0x1e>
    5fd4:	2d00      	cmp	r5, #0
    5fd6:	d006      	beq.n	5fe6 <__aeabi_f2d+0x7e>
    5fd8:	0b32      	lsrs	r2, r6, #12
    5fda:	2680      	movs	r6, #128	; 0x80
    5fdc:	0336      	lsls	r6, r6, #12
    5fde:	076d      	lsls	r5, r5, #29
    5fe0:	4316      	orrs	r6, r2
    5fe2:	4b09      	ldr	r3, [pc, #36]	; (6008 <__aeabi_f2d+0xa0>)
    5fe4:	e7cf      	b.n	5f86 <__aeabi_f2d+0x1e>
    5fe6:	4b08      	ldr	r3, [pc, #32]	; (6008 <__aeabi_f2d+0xa0>)
    5fe8:	2600      	movs	r6, #0
    5fea:	e7cc      	b.n	5f86 <__aeabi_f2d+0x1e>
    5fec:	2300      	movs	r3, #0
    5fee:	2600      	movs	r6, #0
    5ff0:	e7c9      	b.n	5f86 <__aeabi_f2d+0x1e>
    5ff2:	0003      	movs	r3, r0
    5ff4:	002a      	movs	r2, r5
    5ff6:	3b0b      	subs	r3, #11
    5ff8:	409a      	lsls	r2, r3
    5ffa:	2500      	movs	r5, #0
    5ffc:	e7e3      	b.n	5fc6 <__aeabi_f2d+0x5e>
    5ffe:	46c0      	nop			; (mov r8, r8)
    6000:	800fffff 	.word	0x800fffff
    6004:	00000389 	.word	0x00000389
    6008:	000007ff 	.word	0x000007ff

0000600c <__aeabi_d2f>:
    600c:	b5f0      	push	{r4, r5, r6, r7, lr}
    600e:	004c      	lsls	r4, r1, #1
    6010:	0d64      	lsrs	r4, r4, #21
    6012:	030b      	lsls	r3, r1, #12
    6014:	1c62      	adds	r2, r4, #1
    6016:	0f45      	lsrs	r5, r0, #29
    6018:	0a5b      	lsrs	r3, r3, #9
    601a:	0552      	lsls	r2, r2, #21
    601c:	432b      	orrs	r3, r5
    601e:	0fc9      	lsrs	r1, r1, #31
    6020:	00c5      	lsls	r5, r0, #3
    6022:	0d52      	lsrs	r2, r2, #21
    6024:	2a01      	cmp	r2, #1
    6026:	dd28      	ble.n	607a <__aeabi_d2f+0x6e>
    6028:	4a3a      	ldr	r2, [pc, #232]	; (6114 <__aeabi_d2f+0x108>)
    602a:	18a6      	adds	r6, r4, r2
    602c:	2efe      	cmp	r6, #254	; 0xfe
    602e:	dc1b      	bgt.n	6068 <__aeabi_d2f+0x5c>
    6030:	2e00      	cmp	r6, #0
    6032:	dd3e      	ble.n	60b2 <__aeabi_d2f+0xa6>
    6034:	0180      	lsls	r0, r0, #6
    6036:	0002      	movs	r2, r0
    6038:	1e50      	subs	r0, r2, #1
    603a:	4182      	sbcs	r2, r0
    603c:	0f6d      	lsrs	r5, r5, #29
    603e:	432a      	orrs	r2, r5
    6040:	00db      	lsls	r3, r3, #3
    6042:	4313      	orrs	r3, r2
    6044:	075a      	lsls	r2, r3, #29
    6046:	d004      	beq.n	6052 <__aeabi_d2f+0x46>
    6048:	220f      	movs	r2, #15
    604a:	401a      	ands	r2, r3
    604c:	2a04      	cmp	r2, #4
    604e:	d000      	beq.n	6052 <__aeabi_d2f+0x46>
    6050:	3304      	adds	r3, #4
    6052:	2280      	movs	r2, #128	; 0x80
    6054:	04d2      	lsls	r2, r2, #19
    6056:	401a      	ands	r2, r3
    6058:	d05a      	beq.n	6110 <__aeabi_d2f+0x104>
    605a:	3601      	adds	r6, #1
    605c:	2eff      	cmp	r6, #255	; 0xff
    605e:	d003      	beq.n	6068 <__aeabi_d2f+0x5c>
    6060:	019b      	lsls	r3, r3, #6
    6062:	0a5b      	lsrs	r3, r3, #9
    6064:	b2f4      	uxtb	r4, r6
    6066:	e001      	b.n	606c <__aeabi_d2f+0x60>
    6068:	24ff      	movs	r4, #255	; 0xff
    606a:	2300      	movs	r3, #0
    606c:	0258      	lsls	r0, r3, #9
    606e:	05e4      	lsls	r4, r4, #23
    6070:	0a40      	lsrs	r0, r0, #9
    6072:	07c9      	lsls	r1, r1, #31
    6074:	4320      	orrs	r0, r4
    6076:	4308      	orrs	r0, r1
    6078:	bdf0      	pop	{r4, r5, r6, r7, pc}
    607a:	2c00      	cmp	r4, #0
    607c:	d007      	beq.n	608e <__aeabi_d2f+0x82>
    607e:	431d      	orrs	r5, r3
    6080:	d0f2      	beq.n	6068 <__aeabi_d2f+0x5c>
    6082:	2080      	movs	r0, #128	; 0x80
    6084:	00db      	lsls	r3, r3, #3
    6086:	0480      	lsls	r0, r0, #18
    6088:	4303      	orrs	r3, r0
    608a:	26ff      	movs	r6, #255	; 0xff
    608c:	e7da      	b.n	6044 <__aeabi_d2f+0x38>
    608e:	432b      	orrs	r3, r5
    6090:	d003      	beq.n	609a <__aeabi_d2f+0x8e>
    6092:	2305      	movs	r3, #5
    6094:	08db      	lsrs	r3, r3, #3
    6096:	2cff      	cmp	r4, #255	; 0xff
    6098:	d003      	beq.n	60a2 <__aeabi_d2f+0x96>
    609a:	025b      	lsls	r3, r3, #9
    609c:	0a5b      	lsrs	r3, r3, #9
    609e:	b2e4      	uxtb	r4, r4
    60a0:	e7e4      	b.n	606c <__aeabi_d2f+0x60>
    60a2:	2b00      	cmp	r3, #0
    60a4:	d032      	beq.n	610c <__aeabi_d2f+0x100>
    60a6:	2080      	movs	r0, #128	; 0x80
    60a8:	03c0      	lsls	r0, r0, #15
    60aa:	4303      	orrs	r3, r0
    60ac:	025b      	lsls	r3, r3, #9
    60ae:	0a5b      	lsrs	r3, r3, #9
    60b0:	e7dc      	b.n	606c <__aeabi_d2f+0x60>
    60b2:	0032      	movs	r2, r6
    60b4:	3217      	adds	r2, #23
    60b6:	db14      	blt.n	60e2 <__aeabi_d2f+0xd6>
    60b8:	2280      	movs	r2, #128	; 0x80
    60ba:	271e      	movs	r7, #30
    60bc:	0412      	lsls	r2, r2, #16
    60be:	4313      	orrs	r3, r2
    60c0:	1bbf      	subs	r7, r7, r6
    60c2:	2f1f      	cmp	r7, #31
    60c4:	dc0f      	bgt.n	60e6 <__aeabi_d2f+0xda>
    60c6:	4a14      	ldr	r2, [pc, #80]	; (6118 <__aeabi_d2f+0x10c>)
    60c8:	4694      	mov	ip, r2
    60ca:	4464      	add	r4, ip
    60cc:	002a      	movs	r2, r5
    60ce:	40a5      	lsls	r5, r4
    60d0:	002e      	movs	r6, r5
    60d2:	40a3      	lsls	r3, r4
    60d4:	1e75      	subs	r5, r6, #1
    60d6:	41ae      	sbcs	r6, r5
    60d8:	40fa      	lsrs	r2, r7
    60da:	4333      	orrs	r3, r6
    60dc:	4313      	orrs	r3, r2
    60de:	2600      	movs	r6, #0
    60e0:	e7b0      	b.n	6044 <__aeabi_d2f+0x38>
    60e2:	2400      	movs	r4, #0
    60e4:	e7d5      	b.n	6092 <__aeabi_d2f+0x86>
    60e6:	2202      	movs	r2, #2
    60e8:	4252      	negs	r2, r2
    60ea:	1b96      	subs	r6, r2, r6
    60ec:	001a      	movs	r2, r3
    60ee:	40f2      	lsrs	r2, r6
    60f0:	2f20      	cmp	r7, #32
    60f2:	d009      	beq.n	6108 <__aeabi_d2f+0xfc>
    60f4:	4809      	ldr	r0, [pc, #36]	; (611c <__aeabi_d2f+0x110>)
    60f6:	4684      	mov	ip, r0
    60f8:	4464      	add	r4, ip
    60fa:	40a3      	lsls	r3, r4
    60fc:	432b      	orrs	r3, r5
    60fe:	1e5d      	subs	r5, r3, #1
    6100:	41ab      	sbcs	r3, r5
    6102:	2600      	movs	r6, #0
    6104:	4313      	orrs	r3, r2
    6106:	e79d      	b.n	6044 <__aeabi_d2f+0x38>
    6108:	2300      	movs	r3, #0
    610a:	e7f7      	b.n	60fc <__aeabi_d2f+0xf0>
    610c:	2300      	movs	r3, #0
    610e:	e7ad      	b.n	606c <__aeabi_d2f+0x60>
    6110:	0034      	movs	r4, r6
    6112:	e7bf      	b.n	6094 <__aeabi_d2f+0x88>
    6114:	fffffc80 	.word	0xfffffc80
    6118:	fffffc82 	.word	0xfffffc82
    611c:	fffffca2 	.word	0xfffffca2

00006120 <__aeabi_cdrcmple>:
    6120:	4684      	mov	ip, r0
    6122:	1c10      	adds	r0, r2, #0
    6124:	4662      	mov	r2, ip
    6126:	468c      	mov	ip, r1
    6128:	1c19      	adds	r1, r3, #0
    612a:	4663      	mov	r3, ip
    612c:	e000      	b.n	6130 <__aeabi_cdcmpeq>
    612e:	46c0      	nop			; (mov r8, r8)

00006130 <__aeabi_cdcmpeq>:
    6130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    6132:	f000 f91b 	bl	636c <__ledf2>
    6136:	2800      	cmp	r0, #0
    6138:	d401      	bmi.n	613e <__aeabi_cdcmpeq+0xe>
    613a:	2100      	movs	r1, #0
    613c:	42c8      	cmn	r0, r1
    613e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006140 <__aeabi_dcmpeq>:
    6140:	b510      	push	{r4, lr}
    6142:	f000 f875 	bl	6230 <__eqdf2>
    6146:	4240      	negs	r0, r0
    6148:	3001      	adds	r0, #1
    614a:	bd10      	pop	{r4, pc}

0000614c <__aeabi_dcmplt>:
    614c:	b510      	push	{r4, lr}
    614e:	f000 f90d 	bl	636c <__ledf2>
    6152:	2800      	cmp	r0, #0
    6154:	db01      	blt.n	615a <__aeabi_dcmplt+0xe>
    6156:	2000      	movs	r0, #0
    6158:	bd10      	pop	{r4, pc}
    615a:	2001      	movs	r0, #1
    615c:	bd10      	pop	{r4, pc}
    615e:	46c0      	nop			; (mov r8, r8)

00006160 <__aeabi_dcmple>:
    6160:	b510      	push	{r4, lr}
    6162:	f000 f903 	bl	636c <__ledf2>
    6166:	2800      	cmp	r0, #0
    6168:	dd01      	ble.n	616e <__aeabi_dcmple+0xe>
    616a:	2000      	movs	r0, #0
    616c:	bd10      	pop	{r4, pc}
    616e:	2001      	movs	r0, #1
    6170:	bd10      	pop	{r4, pc}
    6172:	46c0      	nop			; (mov r8, r8)

00006174 <__aeabi_dcmpgt>:
    6174:	b510      	push	{r4, lr}
    6176:	f000 f895 	bl	62a4 <__gedf2>
    617a:	2800      	cmp	r0, #0
    617c:	dc01      	bgt.n	6182 <__aeabi_dcmpgt+0xe>
    617e:	2000      	movs	r0, #0
    6180:	bd10      	pop	{r4, pc}
    6182:	2001      	movs	r0, #1
    6184:	bd10      	pop	{r4, pc}
    6186:	46c0      	nop			; (mov r8, r8)

00006188 <__aeabi_dcmpge>:
    6188:	b510      	push	{r4, lr}
    618a:	f000 f88b 	bl	62a4 <__gedf2>
    618e:	2800      	cmp	r0, #0
    6190:	da01      	bge.n	6196 <__aeabi_dcmpge+0xe>
    6192:	2000      	movs	r0, #0
    6194:	bd10      	pop	{r4, pc}
    6196:	2001      	movs	r0, #1
    6198:	bd10      	pop	{r4, pc}
    619a:	46c0      	nop			; (mov r8, r8)

0000619c <__clzsi2>:
    619c:	211c      	movs	r1, #28
    619e:	2301      	movs	r3, #1
    61a0:	041b      	lsls	r3, r3, #16
    61a2:	4298      	cmp	r0, r3
    61a4:	d301      	bcc.n	61aa <__clzsi2+0xe>
    61a6:	0c00      	lsrs	r0, r0, #16
    61a8:	3910      	subs	r1, #16
    61aa:	0a1b      	lsrs	r3, r3, #8
    61ac:	4298      	cmp	r0, r3
    61ae:	d301      	bcc.n	61b4 <__clzsi2+0x18>
    61b0:	0a00      	lsrs	r0, r0, #8
    61b2:	3908      	subs	r1, #8
    61b4:	091b      	lsrs	r3, r3, #4
    61b6:	4298      	cmp	r0, r3
    61b8:	d301      	bcc.n	61be <__clzsi2+0x22>
    61ba:	0900      	lsrs	r0, r0, #4
    61bc:	3904      	subs	r1, #4
    61be:	a202      	add	r2, pc, #8	; (adr r2, 61c8 <__clzsi2+0x2c>)
    61c0:	5c10      	ldrb	r0, [r2, r0]
    61c2:	1840      	adds	r0, r0, r1
    61c4:	4770      	bx	lr
    61c6:	46c0      	nop			; (mov r8, r8)
    61c8:	02020304 	.word	0x02020304
    61cc:	01010101 	.word	0x01010101
	...

000061d8 <__clzdi2>:
    61d8:	b510      	push	{r4, lr}
    61da:	2900      	cmp	r1, #0
    61dc:	d103      	bne.n	61e6 <__clzdi2+0xe>
    61de:	f7ff ffdd 	bl	619c <__clzsi2>
    61e2:	3020      	adds	r0, #32
    61e4:	e002      	b.n	61ec <__clzdi2+0x14>
    61e6:	1c08      	adds	r0, r1, #0
    61e8:	f7ff ffd8 	bl	619c <__clzsi2>
    61ec:	bd10      	pop	{r4, pc}
    61ee:	46c0      	nop			; (mov r8, r8)

000061f0 <__ctzsi2>:
    61f0:	4241      	negs	r1, r0
    61f2:	4008      	ands	r0, r1
    61f4:	211c      	movs	r1, #28
    61f6:	2301      	movs	r3, #1
    61f8:	041b      	lsls	r3, r3, #16
    61fa:	4298      	cmp	r0, r3
    61fc:	d301      	bcc.n	6202 <__ctzsi2+0x12>
    61fe:	0c00      	lsrs	r0, r0, #16
    6200:	3910      	subs	r1, #16
    6202:	0a1b      	lsrs	r3, r3, #8
    6204:	4298      	cmp	r0, r3
    6206:	d301      	bcc.n	620c <__ctzsi2+0x1c>
    6208:	0a00      	lsrs	r0, r0, #8
    620a:	3908      	subs	r1, #8
    620c:	091b      	lsrs	r3, r3, #4
    620e:	4298      	cmp	r0, r3
    6210:	d301      	bcc.n	6216 <__ctzsi2+0x26>
    6212:	0900      	lsrs	r0, r0, #4
    6214:	3904      	subs	r1, #4
    6216:	a202      	add	r2, pc, #8	; (adr r2, 6220 <__ctzsi2+0x30>)
    6218:	5c10      	ldrb	r0, [r2, r0]
    621a:	1a40      	subs	r0, r0, r1
    621c:	4770      	bx	lr
    621e:	46c0      	nop			; (mov r8, r8)
    6220:	1d1d1c1b 	.word	0x1d1d1c1b
    6224:	1e1e1e1e 	.word	0x1e1e1e1e
    6228:	1f1f1f1f 	.word	0x1f1f1f1f
    622c:	1f1f1f1f 	.word	0x1f1f1f1f

00006230 <__eqdf2>:
    6230:	b5f0      	push	{r4, r5, r6, r7, lr}
    6232:	464f      	mov	r7, r9
    6234:	4646      	mov	r6, r8
    6236:	46d6      	mov	lr, sl
    6238:	005c      	lsls	r4, r3, #1
    623a:	b5c0      	push	{r6, r7, lr}
    623c:	031f      	lsls	r7, r3, #12
    623e:	0fdb      	lsrs	r3, r3, #31
    6240:	469a      	mov	sl, r3
    6242:	4b17      	ldr	r3, [pc, #92]	; (62a0 <__eqdf2+0x70>)
    6244:	030e      	lsls	r6, r1, #12
    6246:	004d      	lsls	r5, r1, #1
    6248:	4684      	mov	ip, r0
    624a:	4680      	mov	r8, r0
    624c:	0b36      	lsrs	r6, r6, #12
    624e:	0d6d      	lsrs	r5, r5, #21
    6250:	0fc9      	lsrs	r1, r1, #31
    6252:	4691      	mov	r9, r2
    6254:	0b3f      	lsrs	r7, r7, #12
    6256:	0d64      	lsrs	r4, r4, #21
    6258:	2001      	movs	r0, #1
    625a:	429d      	cmp	r5, r3
    625c:	d008      	beq.n	6270 <__eqdf2+0x40>
    625e:	429c      	cmp	r4, r3
    6260:	d001      	beq.n	6266 <__eqdf2+0x36>
    6262:	42a5      	cmp	r5, r4
    6264:	d00b      	beq.n	627e <__eqdf2+0x4e>
    6266:	bc1c      	pop	{r2, r3, r4}
    6268:	4690      	mov	r8, r2
    626a:	4699      	mov	r9, r3
    626c:	46a2      	mov	sl, r4
    626e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6270:	4663      	mov	r3, ip
    6272:	4333      	orrs	r3, r6
    6274:	d1f7      	bne.n	6266 <__eqdf2+0x36>
    6276:	42ac      	cmp	r4, r5
    6278:	d1f5      	bne.n	6266 <__eqdf2+0x36>
    627a:	433a      	orrs	r2, r7
    627c:	d1f3      	bne.n	6266 <__eqdf2+0x36>
    627e:	2001      	movs	r0, #1
    6280:	42be      	cmp	r6, r7
    6282:	d1f0      	bne.n	6266 <__eqdf2+0x36>
    6284:	45c8      	cmp	r8, r9
    6286:	d1ee      	bne.n	6266 <__eqdf2+0x36>
    6288:	4551      	cmp	r1, sl
    628a:	d007      	beq.n	629c <__eqdf2+0x6c>
    628c:	2d00      	cmp	r5, #0
    628e:	d1ea      	bne.n	6266 <__eqdf2+0x36>
    6290:	4663      	mov	r3, ip
    6292:	431e      	orrs	r6, r3
    6294:	0030      	movs	r0, r6
    6296:	1e46      	subs	r6, r0, #1
    6298:	41b0      	sbcs	r0, r6
    629a:	e7e4      	b.n	6266 <__eqdf2+0x36>
    629c:	2000      	movs	r0, #0
    629e:	e7e2      	b.n	6266 <__eqdf2+0x36>
    62a0:	000007ff 	.word	0x000007ff

000062a4 <__gedf2>:
    62a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    62a6:	4645      	mov	r5, r8
    62a8:	46de      	mov	lr, fp
    62aa:	4657      	mov	r7, sl
    62ac:	464e      	mov	r6, r9
    62ae:	b5e0      	push	{r5, r6, r7, lr}
    62b0:	031f      	lsls	r7, r3, #12
    62b2:	0b3d      	lsrs	r5, r7, #12
    62b4:	4f2c      	ldr	r7, [pc, #176]	; (6368 <__gedf2+0xc4>)
    62b6:	030e      	lsls	r6, r1, #12
    62b8:	004c      	lsls	r4, r1, #1
    62ba:	46ab      	mov	fp, r5
    62bc:	005d      	lsls	r5, r3, #1
    62be:	4684      	mov	ip, r0
    62c0:	0b36      	lsrs	r6, r6, #12
    62c2:	0d64      	lsrs	r4, r4, #21
    62c4:	0fc9      	lsrs	r1, r1, #31
    62c6:	4690      	mov	r8, r2
    62c8:	0d6d      	lsrs	r5, r5, #21
    62ca:	0fdb      	lsrs	r3, r3, #31
    62cc:	42bc      	cmp	r4, r7
    62ce:	d02a      	beq.n	6326 <__gedf2+0x82>
    62d0:	4f25      	ldr	r7, [pc, #148]	; (6368 <__gedf2+0xc4>)
    62d2:	42bd      	cmp	r5, r7
    62d4:	d02d      	beq.n	6332 <__gedf2+0x8e>
    62d6:	2c00      	cmp	r4, #0
    62d8:	d10f      	bne.n	62fa <__gedf2+0x56>
    62da:	4330      	orrs	r0, r6
    62dc:	0007      	movs	r7, r0
    62de:	4681      	mov	r9, r0
    62e0:	4278      	negs	r0, r7
    62e2:	4178      	adcs	r0, r7
    62e4:	b2c0      	uxtb	r0, r0
    62e6:	2d00      	cmp	r5, #0
    62e8:	d117      	bne.n	631a <__gedf2+0x76>
    62ea:	465f      	mov	r7, fp
    62ec:	433a      	orrs	r2, r7
    62ee:	d114      	bne.n	631a <__gedf2+0x76>
    62f0:	464b      	mov	r3, r9
    62f2:	2000      	movs	r0, #0
    62f4:	2b00      	cmp	r3, #0
    62f6:	d00a      	beq.n	630e <__gedf2+0x6a>
    62f8:	e006      	b.n	6308 <__gedf2+0x64>
    62fa:	2d00      	cmp	r5, #0
    62fc:	d102      	bne.n	6304 <__gedf2+0x60>
    62fe:	4658      	mov	r0, fp
    6300:	4302      	orrs	r2, r0
    6302:	d001      	beq.n	6308 <__gedf2+0x64>
    6304:	4299      	cmp	r1, r3
    6306:	d018      	beq.n	633a <__gedf2+0x96>
    6308:	4248      	negs	r0, r1
    630a:	2101      	movs	r1, #1
    630c:	4308      	orrs	r0, r1
    630e:	bc3c      	pop	{r2, r3, r4, r5}
    6310:	4690      	mov	r8, r2
    6312:	4699      	mov	r9, r3
    6314:	46a2      	mov	sl, r4
    6316:	46ab      	mov	fp, r5
    6318:	bdf0      	pop	{r4, r5, r6, r7, pc}
    631a:	2800      	cmp	r0, #0
    631c:	d0f2      	beq.n	6304 <__gedf2+0x60>
    631e:	2001      	movs	r0, #1
    6320:	3b01      	subs	r3, #1
    6322:	4318      	orrs	r0, r3
    6324:	e7f3      	b.n	630e <__gedf2+0x6a>
    6326:	0037      	movs	r7, r6
    6328:	4307      	orrs	r7, r0
    632a:	d0d1      	beq.n	62d0 <__gedf2+0x2c>
    632c:	2002      	movs	r0, #2
    632e:	4240      	negs	r0, r0
    6330:	e7ed      	b.n	630e <__gedf2+0x6a>
    6332:	465f      	mov	r7, fp
    6334:	4317      	orrs	r7, r2
    6336:	d0ce      	beq.n	62d6 <__gedf2+0x32>
    6338:	e7f8      	b.n	632c <__gedf2+0x88>
    633a:	42ac      	cmp	r4, r5
    633c:	dce4      	bgt.n	6308 <__gedf2+0x64>
    633e:	da03      	bge.n	6348 <__gedf2+0xa4>
    6340:	1e48      	subs	r0, r1, #1
    6342:	2101      	movs	r1, #1
    6344:	4308      	orrs	r0, r1
    6346:	e7e2      	b.n	630e <__gedf2+0x6a>
    6348:	455e      	cmp	r6, fp
    634a:	d8dd      	bhi.n	6308 <__gedf2+0x64>
    634c:	d006      	beq.n	635c <__gedf2+0xb8>
    634e:	2000      	movs	r0, #0
    6350:	455e      	cmp	r6, fp
    6352:	d2dc      	bcs.n	630e <__gedf2+0x6a>
    6354:	2301      	movs	r3, #1
    6356:	1e48      	subs	r0, r1, #1
    6358:	4318      	orrs	r0, r3
    635a:	e7d8      	b.n	630e <__gedf2+0x6a>
    635c:	45c4      	cmp	ip, r8
    635e:	d8d3      	bhi.n	6308 <__gedf2+0x64>
    6360:	2000      	movs	r0, #0
    6362:	45c4      	cmp	ip, r8
    6364:	d3f6      	bcc.n	6354 <__gedf2+0xb0>
    6366:	e7d2      	b.n	630e <__gedf2+0x6a>
    6368:	000007ff 	.word	0x000007ff

0000636c <__ledf2>:
    636c:	b5f0      	push	{r4, r5, r6, r7, lr}
    636e:	464e      	mov	r6, r9
    6370:	4645      	mov	r5, r8
    6372:	46de      	mov	lr, fp
    6374:	4657      	mov	r7, sl
    6376:	005c      	lsls	r4, r3, #1
    6378:	b5e0      	push	{r5, r6, r7, lr}
    637a:	031f      	lsls	r7, r3, #12
    637c:	0fdb      	lsrs	r3, r3, #31
    637e:	4699      	mov	r9, r3
    6380:	4b2a      	ldr	r3, [pc, #168]	; (642c <__ledf2+0xc0>)
    6382:	030e      	lsls	r6, r1, #12
    6384:	004d      	lsls	r5, r1, #1
    6386:	0fc9      	lsrs	r1, r1, #31
    6388:	4684      	mov	ip, r0
    638a:	0b36      	lsrs	r6, r6, #12
    638c:	0d6d      	lsrs	r5, r5, #21
    638e:	468b      	mov	fp, r1
    6390:	4690      	mov	r8, r2
    6392:	0b3f      	lsrs	r7, r7, #12
    6394:	0d64      	lsrs	r4, r4, #21
    6396:	429d      	cmp	r5, r3
    6398:	d020      	beq.n	63dc <__ledf2+0x70>
    639a:	4b24      	ldr	r3, [pc, #144]	; (642c <__ledf2+0xc0>)
    639c:	429c      	cmp	r4, r3
    639e:	d022      	beq.n	63e6 <__ledf2+0x7a>
    63a0:	2d00      	cmp	r5, #0
    63a2:	d112      	bne.n	63ca <__ledf2+0x5e>
    63a4:	4330      	orrs	r0, r6
    63a6:	4243      	negs	r3, r0
    63a8:	4143      	adcs	r3, r0
    63aa:	b2db      	uxtb	r3, r3
    63ac:	2c00      	cmp	r4, #0
    63ae:	d01f      	beq.n	63f0 <__ledf2+0x84>
    63b0:	2b00      	cmp	r3, #0
    63b2:	d00c      	beq.n	63ce <__ledf2+0x62>
    63b4:	464b      	mov	r3, r9
    63b6:	2001      	movs	r0, #1
    63b8:	3b01      	subs	r3, #1
    63ba:	4303      	orrs	r3, r0
    63bc:	0018      	movs	r0, r3
    63be:	bc3c      	pop	{r2, r3, r4, r5}
    63c0:	4690      	mov	r8, r2
    63c2:	4699      	mov	r9, r3
    63c4:	46a2      	mov	sl, r4
    63c6:	46ab      	mov	fp, r5
    63c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    63ca:	2c00      	cmp	r4, #0
    63cc:	d016      	beq.n	63fc <__ledf2+0x90>
    63ce:	45cb      	cmp	fp, r9
    63d0:	d017      	beq.n	6402 <__ledf2+0x96>
    63d2:	465b      	mov	r3, fp
    63d4:	4259      	negs	r1, r3
    63d6:	2301      	movs	r3, #1
    63d8:	430b      	orrs	r3, r1
    63da:	e7ef      	b.n	63bc <__ledf2+0x50>
    63dc:	0031      	movs	r1, r6
    63de:	2302      	movs	r3, #2
    63e0:	4301      	orrs	r1, r0
    63e2:	d1eb      	bne.n	63bc <__ledf2+0x50>
    63e4:	e7d9      	b.n	639a <__ledf2+0x2e>
    63e6:	0039      	movs	r1, r7
    63e8:	2302      	movs	r3, #2
    63ea:	4311      	orrs	r1, r2
    63ec:	d1e6      	bne.n	63bc <__ledf2+0x50>
    63ee:	e7d7      	b.n	63a0 <__ledf2+0x34>
    63f0:	433a      	orrs	r2, r7
    63f2:	d1dd      	bne.n	63b0 <__ledf2+0x44>
    63f4:	2300      	movs	r3, #0
    63f6:	2800      	cmp	r0, #0
    63f8:	d0e0      	beq.n	63bc <__ledf2+0x50>
    63fa:	e7ea      	b.n	63d2 <__ledf2+0x66>
    63fc:	433a      	orrs	r2, r7
    63fe:	d1e6      	bne.n	63ce <__ledf2+0x62>
    6400:	e7e7      	b.n	63d2 <__ledf2+0x66>
    6402:	42a5      	cmp	r5, r4
    6404:	dce5      	bgt.n	63d2 <__ledf2+0x66>
    6406:	db05      	blt.n	6414 <__ledf2+0xa8>
    6408:	42be      	cmp	r6, r7
    640a:	d8e2      	bhi.n	63d2 <__ledf2+0x66>
    640c:	d007      	beq.n	641e <__ledf2+0xb2>
    640e:	2300      	movs	r3, #0
    6410:	42be      	cmp	r6, r7
    6412:	d2d3      	bcs.n	63bc <__ledf2+0x50>
    6414:	4659      	mov	r1, fp
    6416:	2301      	movs	r3, #1
    6418:	3901      	subs	r1, #1
    641a:	430b      	orrs	r3, r1
    641c:	e7ce      	b.n	63bc <__ledf2+0x50>
    641e:	45c4      	cmp	ip, r8
    6420:	d8d7      	bhi.n	63d2 <__ledf2+0x66>
    6422:	2300      	movs	r3, #0
    6424:	45c4      	cmp	ip, r8
    6426:	d3f5      	bcc.n	6414 <__ledf2+0xa8>
    6428:	e7c8      	b.n	63bc <__ledf2+0x50>
    642a:	46c0      	nop			; (mov r8, r8)
    642c:	000007ff 	.word	0x000007ff

00006430 <__libc_init_array>:
    6430:	b570      	push	{r4, r5, r6, lr}
    6432:	4e0d      	ldr	r6, [pc, #52]	; (6468 <__libc_init_array+0x38>)
    6434:	4d0d      	ldr	r5, [pc, #52]	; (646c <__libc_init_array+0x3c>)
    6436:	2400      	movs	r4, #0
    6438:	1bad      	subs	r5, r5, r6
    643a:	10ad      	asrs	r5, r5, #2
    643c:	d005      	beq.n	644a <__libc_init_array+0x1a>
    643e:	00a3      	lsls	r3, r4, #2
    6440:	58f3      	ldr	r3, [r6, r3]
    6442:	3401      	adds	r4, #1
    6444:	4798      	blx	r3
    6446:	42a5      	cmp	r5, r4
    6448:	d1f9      	bne.n	643e <__libc_init_array+0xe>
    644a:	f005 fad9 	bl	ba00 <_init>
    644e:	4e08      	ldr	r6, [pc, #32]	; (6470 <__libc_init_array+0x40>)
    6450:	4d08      	ldr	r5, [pc, #32]	; (6474 <__libc_init_array+0x44>)
    6452:	2400      	movs	r4, #0
    6454:	1bad      	subs	r5, r5, r6
    6456:	10ad      	asrs	r5, r5, #2
    6458:	d005      	beq.n	6466 <__libc_init_array+0x36>
    645a:	00a3      	lsls	r3, r4, #2
    645c:	58f3      	ldr	r3, [r6, r3]
    645e:	3401      	adds	r4, #1
    6460:	4798      	blx	r3
    6462:	42a5      	cmp	r5, r4
    6464:	d1f9      	bne.n	645a <__libc_init_array+0x2a>
    6466:	bd70      	pop	{r4, r5, r6, pc}
    6468:	0000ba0c 	.word	0x0000ba0c
    646c:	0000ba0c 	.word	0x0000ba0c
    6470:	0000ba0c 	.word	0x0000ba0c
    6474:	0000ba14 	.word	0x0000ba14

00006478 <memcpy>:
    6478:	b5f0      	push	{r4, r5, r6, r7, lr}
    647a:	0005      	movs	r5, r0
    647c:	2a0f      	cmp	r2, #15
    647e:	d92f      	bls.n	64e0 <memcpy+0x68>
    6480:	000b      	movs	r3, r1
    6482:	4303      	orrs	r3, r0
    6484:	079b      	lsls	r3, r3, #30
    6486:	d134      	bne.n	64f2 <memcpy+0x7a>
    6488:	0016      	movs	r6, r2
    648a:	000c      	movs	r4, r1
    648c:	0003      	movs	r3, r0
    648e:	3e10      	subs	r6, #16
    6490:	0935      	lsrs	r5, r6, #4
    6492:	3501      	adds	r5, #1
    6494:	012d      	lsls	r5, r5, #4
    6496:	1945      	adds	r5, r0, r5
    6498:	6827      	ldr	r7, [r4, #0]
    649a:	601f      	str	r7, [r3, #0]
    649c:	6867      	ldr	r7, [r4, #4]
    649e:	605f      	str	r7, [r3, #4]
    64a0:	68a7      	ldr	r7, [r4, #8]
    64a2:	609f      	str	r7, [r3, #8]
    64a4:	68e7      	ldr	r7, [r4, #12]
    64a6:	3410      	adds	r4, #16
    64a8:	60df      	str	r7, [r3, #12]
    64aa:	3310      	adds	r3, #16
    64ac:	429d      	cmp	r5, r3
    64ae:	d1f3      	bne.n	6498 <memcpy+0x20>
    64b0:	230f      	movs	r3, #15
    64b2:	439e      	bics	r6, r3
    64b4:	3610      	adds	r6, #16
    64b6:	1985      	adds	r5, r0, r6
    64b8:	1989      	adds	r1, r1, r6
    64ba:	4013      	ands	r3, r2
    64bc:	2b03      	cmp	r3, #3
    64be:	d91a      	bls.n	64f6 <memcpy+0x7e>
    64c0:	1f1e      	subs	r6, r3, #4
    64c2:	2300      	movs	r3, #0
    64c4:	08b4      	lsrs	r4, r6, #2
    64c6:	3401      	adds	r4, #1
    64c8:	00a4      	lsls	r4, r4, #2
    64ca:	58cf      	ldr	r7, [r1, r3]
    64cc:	50ef      	str	r7, [r5, r3]
    64ce:	3304      	adds	r3, #4
    64d0:	42a3      	cmp	r3, r4
    64d2:	d1fa      	bne.n	64ca <memcpy+0x52>
    64d4:	2403      	movs	r4, #3
    64d6:	43a6      	bics	r6, r4
    64d8:	1d33      	adds	r3, r6, #4
    64da:	4022      	ands	r2, r4
    64dc:	18c9      	adds	r1, r1, r3
    64de:	18ed      	adds	r5, r5, r3
    64e0:	2a00      	cmp	r2, #0
    64e2:	d005      	beq.n	64f0 <memcpy+0x78>
    64e4:	2300      	movs	r3, #0
    64e6:	5ccc      	ldrb	r4, [r1, r3]
    64e8:	54ec      	strb	r4, [r5, r3]
    64ea:	3301      	adds	r3, #1
    64ec:	4293      	cmp	r3, r2
    64ee:	d1fa      	bne.n	64e6 <memcpy+0x6e>
    64f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    64f2:	0005      	movs	r5, r0
    64f4:	e7f6      	b.n	64e4 <memcpy+0x6c>
    64f6:	001a      	movs	r2, r3
    64f8:	e7f2      	b.n	64e0 <memcpy+0x68>
    64fa:	46c0      	nop			; (mov r8, r8)

000064fc <memset>:
    64fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    64fe:	0783      	lsls	r3, r0, #30
    6500:	d043      	beq.n	658a <memset+0x8e>
    6502:	1e54      	subs	r4, r2, #1
    6504:	2a00      	cmp	r2, #0
    6506:	d03f      	beq.n	6588 <memset+0x8c>
    6508:	b2ce      	uxtb	r6, r1
    650a:	0002      	movs	r2, r0
    650c:	2503      	movs	r5, #3
    650e:	e002      	b.n	6516 <memset+0x1a>
    6510:	001a      	movs	r2, r3
    6512:	3c01      	subs	r4, #1
    6514:	d338      	bcc.n	6588 <memset+0x8c>
    6516:	1c53      	adds	r3, r2, #1
    6518:	7016      	strb	r6, [r2, #0]
    651a:	422b      	tst	r3, r5
    651c:	d1f8      	bne.n	6510 <memset+0x14>
    651e:	2c03      	cmp	r4, #3
    6520:	d92a      	bls.n	6578 <memset+0x7c>
    6522:	22ff      	movs	r2, #255	; 0xff
    6524:	400a      	ands	r2, r1
    6526:	0215      	lsls	r5, r2, #8
    6528:	4315      	orrs	r5, r2
    652a:	042a      	lsls	r2, r5, #16
    652c:	4315      	orrs	r5, r2
    652e:	2c0f      	cmp	r4, #15
    6530:	d914      	bls.n	655c <memset+0x60>
    6532:	0027      	movs	r7, r4
    6534:	001a      	movs	r2, r3
    6536:	3f10      	subs	r7, #16
    6538:	093e      	lsrs	r6, r7, #4
    653a:	3601      	adds	r6, #1
    653c:	0136      	lsls	r6, r6, #4
    653e:	199e      	adds	r6, r3, r6
    6540:	6015      	str	r5, [r2, #0]
    6542:	6055      	str	r5, [r2, #4]
    6544:	6095      	str	r5, [r2, #8]
    6546:	60d5      	str	r5, [r2, #12]
    6548:	3210      	adds	r2, #16
    654a:	4296      	cmp	r6, r2
    654c:	d1f8      	bne.n	6540 <memset+0x44>
    654e:	220f      	movs	r2, #15
    6550:	4397      	bics	r7, r2
    6552:	3710      	adds	r7, #16
    6554:	19db      	adds	r3, r3, r7
    6556:	4014      	ands	r4, r2
    6558:	2c03      	cmp	r4, #3
    655a:	d90d      	bls.n	6578 <memset+0x7c>
    655c:	001a      	movs	r2, r3
    655e:	1f27      	subs	r7, r4, #4
    6560:	08be      	lsrs	r6, r7, #2
    6562:	3601      	adds	r6, #1
    6564:	00b6      	lsls	r6, r6, #2
    6566:	199e      	adds	r6, r3, r6
    6568:	c220      	stmia	r2!, {r5}
    656a:	42b2      	cmp	r2, r6
    656c:	d1fc      	bne.n	6568 <memset+0x6c>
    656e:	2203      	movs	r2, #3
    6570:	4397      	bics	r7, r2
    6572:	3704      	adds	r7, #4
    6574:	19db      	adds	r3, r3, r7
    6576:	4014      	ands	r4, r2
    6578:	2c00      	cmp	r4, #0
    657a:	d005      	beq.n	6588 <memset+0x8c>
    657c:	b2c9      	uxtb	r1, r1
    657e:	191c      	adds	r4, r3, r4
    6580:	7019      	strb	r1, [r3, #0]
    6582:	3301      	adds	r3, #1
    6584:	429c      	cmp	r4, r3
    6586:	d1fb      	bne.n	6580 <memset+0x84>
    6588:	bdf0      	pop	{r4, r5, r6, r7, pc}
    658a:	0014      	movs	r4, r2
    658c:	0003      	movs	r3, r0
    658e:	e7c6      	b.n	651e <memset+0x22>

00006590 <sprintf>:
    6590:	b40e      	push	{r1, r2, r3}
    6592:	b510      	push	{r4, lr}
    6594:	b09d      	sub	sp, #116	; 0x74
    6596:	a902      	add	r1, sp, #8
    6598:	9002      	str	r0, [sp, #8]
    659a:	6108      	str	r0, [r1, #16]
    659c:	480b      	ldr	r0, [pc, #44]	; (65cc <sprintf+0x3c>)
    659e:	2482      	movs	r4, #130	; 0x82
    65a0:	6088      	str	r0, [r1, #8]
    65a2:	6148      	str	r0, [r1, #20]
    65a4:	2001      	movs	r0, #1
    65a6:	4240      	negs	r0, r0
    65a8:	ab1f      	add	r3, sp, #124	; 0x7c
    65aa:	81c8      	strh	r0, [r1, #14]
    65ac:	4808      	ldr	r0, [pc, #32]	; (65d0 <sprintf+0x40>)
    65ae:	cb04      	ldmia	r3!, {r2}
    65b0:	00a4      	lsls	r4, r4, #2
    65b2:	6800      	ldr	r0, [r0, #0]
    65b4:	9301      	str	r3, [sp, #4]
    65b6:	818c      	strh	r4, [r1, #12]
    65b8:	f000 f83e 	bl	6638 <_svfprintf_r>
    65bc:	2300      	movs	r3, #0
    65be:	9a02      	ldr	r2, [sp, #8]
    65c0:	7013      	strb	r3, [r2, #0]
    65c2:	b01d      	add	sp, #116	; 0x74
    65c4:	bc10      	pop	{r4}
    65c6:	bc08      	pop	{r3}
    65c8:	b003      	add	sp, #12
    65ca:	4718      	bx	r3
    65cc:	7fffffff 	.word	0x7fffffff
    65d0:	2000001c 	.word	0x2000001c

000065d4 <strlen>:
    65d4:	b510      	push	{r4, lr}
    65d6:	0783      	lsls	r3, r0, #30
    65d8:	d025      	beq.n	6626 <strlen+0x52>
    65da:	7803      	ldrb	r3, [r0, #0]
    65dc:	2b00      	cmp	r3, #0
    65de:	d024      	beq.n	662a <strlen+0x56>
    65e0:	0003      	movs	r3, r0
    65e2:	2103      	movs	r1, #3
    65e4:	e002      	b.n	65ec <strlen+0x18>
    65e6:	781a      	ldrb	r2, [r3, #0]
    65e8:	2a00      	cmp	r2, #0
    65ea:	d01a      	beq.n	6622 <strlen+0x4e>
    65ec:	3301      	adds	r3, #1
    65ee:	420b      	tst	r3, r1
    65f0:	d1f9      	bne.n	65e6 <strlen+0x12>
    65f2:	6819      	ldr	r1, [r3, #0]
    65f4:	4a0e      	ldr	r2, [pc, #56]	; (6630 <strlen+0x5c>)
    65f6:	4c0f      	ldr	r4, [pc, #60]	; (6634 <strlen+0x60>)
    65f8:	188a      	adds	r2, r1, r2
    65fa:	438a      	bics	r2, r1
    65fc:	4222      	tst	r2, r4
    65fe:	d106      	bne.n	660e <strlen+0x3a>
    6600:	3304      	adds	r3, #4
    6602:	6819      	ldr	r1, [r3, #0]
    6604:	4a0a      	ldr	r2, [pc, #40]	; (6630 <strlen+0x5c>)
    6606:	188a      	adds	r2, r1, r2
    6608:	438a      	bics	r2, r1
    660a:	4222      	tst	r2, r4
    660c:	d0f8      	beq.n	6600 <strlen+0x2c>
    660e:	001a      	movs	r2, r3
    6610:	781b      	ldrb	r3, [r3, #0]
    6612:	2b00      	cmp	r3, #0
    6614:	d003      	beq.n	661e <strlen+0x4a>
    6616:	3201      	adds	r2, #1
    6618:	7811      	ldrb	r1, [r2, #0]
    661a:	2900      	cmp	r1, #0
    661c:	d1fb      	bne.n	6616 <strlen+0x42>
    661e:	1a10      	subs	r0, r2, r0
    6620:	bd10      	pop	{r4, pc}
    6622:	1a18      	subs	r0, r3, r0
    6624:	e7fc      	b.n	6620 <strlen+0x4c>
    6626:	0003      	movs	r3, r0
    6628:	e7e3      	b.n	65f2 <strlen+0x1e>
    662a:	2000      	movs	r0, #0
    662c:	e7f8      	b.n	6620 <strlen+0x4c>
    662e:	46c0      	nop			; (mov r8, r8)
    6630:	fefefeff 	.word	0xfefefeff
    6634:	80808080 	.word	0x80808080

00006638 <_svfprintf_r>:
    6638:	b5f0      	push	{r4, r5, r6, r7, lr}
    663a:	46de      	mov	lr, fp
    663c:	4645      	mov	r5, r8
    663e:	4657      	mov	r7, sl
    6640:	464e      	mov	r6, r9
    6642:	b5e0      	push	{r5, r6, r7, lr}
    6644:	b0c3      	sub	sp, #268	; 0x10c
    6646:	000d      	movs	r5, r1
    6648:	9106      	str	r1, [sp, #24]
    664a:	0014      	movs	r4, r2
    664c:	930f      	str	r3, [sp, #60]	; 0x3c
    664e:	9009      	str	r0, [sp, #36]	; 0x24
    6650:	f002 fcc0 	bl	8fd4 <_localeconv_r>
    6654:	6803      	ldr	r3, [r0, #0]
    6656:	0018      	movs	r0, r3
    6658:	9319      	str	r3, [sp, #100]	; 0x64
    665a:	f7ff ffbb 	bl	65d4 <strlen>
    665e:	9018      	str	r0, [sp, #96]	; 0x60
    6660:	89ab      	ldrh	r3, [r5, #12]
    6662:	061b      	lsls	r3, r3, #24
    6664:	d505      	bpl.n	6672 <_svfprintf_r+0x3a>
    6666:	692b      	ldr	r3, [r5, #16]
    6668:	9307      	str	r3, [sp, #28]
    666a:	2b00      	cmp	r3, #0
    666c:	d101      	bne.n	6672 <_svfprintf_r+0x3a>
    666e:	f001 f863 	bl	7738 <_svfprintf_r+0x1100>
    6672:	ab32      	add	r3, sp, #200	; 0xc8
    6674:	9325      	str	r3, [sp, #148]	; 0x94
    6676:	2300      	movs	r3, #0
    6678:	46a3      	mov	fp, r4
    667a:	af25      	add	r7, sp, #148	; 0x94
    667c:	60bb      	str	r3, [r7, #8]
    667e:	607b      	str	r3, [r7, #4]
    6680:	9314      	str	r3, [sp, #80]	; 0x50
    6682:	9316      	str	r3, [sp, #88]	; 0x58
    6684:	9315      	str	r3, [sp, #84]	; 0x54
    6686:	ae32      	add	r6, sp, #200	; 0xc8
    6688:	9317      	str	r3, [sp, #92]	; 0x5c
    668a:	931a      	str	r3, [sp, #104]	; 0x68
    668c:	930a      	str	r3, [sp, #40]	; 0x28
    668e:	465b      	mov	r3, fp
    6690:	781b      	ldrb	r3, [r3, #0]
    6692:	465c      	mov	r4, fp
    6694:	2b00      	cmp	r3, #0
    6696:	d01c      	beq.n	66d2 <_svfprintf_r+0x9a>
    6698:	2b25      	cmp	r3, #37	; 0x25
    669a:	d102      	bne.n	66a2 <_svfprintf_r+0x6a>
    669c:	e019      	b.n	66d2 <_svfprintf_r+0x9a>
    669e:	2b25      	cmp	r3, #37	; 0x25
    66a0:	d003      	beq.n	66aa <_svfprintf_r+0x72>
    66a2:	3401      	adds	r4, #1
    66a4:	7823      	ldrb	r3, [r4, #0]
    66a6:	2b00      	cmp	r3, #0
    66a8:	d1f9      	bne.n	669e <_svfprintf_r+0x66>
    66aa:	465b      	mov	r3, fp
    66ac:	1ae5      	subs	r5, r4, r3
    66ae:	d010      	beq.n	66d2 <_svfprintf_r+0x9a>
    66b0:	465b      	mov	r3, fp
    66b2:	6033      	str	r3, [r6, #0]
    66b4:	68bb      	ldr	r3, [r7, #8]
    66b6:	6075      	str	r5, [r6, #4]
    66b8:	195b      	adds	r3, r3, r5
    66ba:	60bb      	str	r3, [r7, #8]
    66bc:	687b      	ldr	r3, [r7, #4]
    66be:	3301      	adds	r3, #1
    66c0:	607b      	str	r3, [r7, #4]
    66c2:	2b07      	cmp	r3, #7
    66c4:	dc2e      	bgt.n	6724 <_svfprintf_r+0xec>
    66c6:	3608      	adds	r6, #8
    66c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    66ca:	469c      	mov	ip, r3
    66cc:	44ac      	add	ip, r5
    66ce:	4663      	mov	r3, ip
    66d0:	930a      	str	r3, [sp, #40]	; 0x28
    66d2:	7823      	ldrb	r3, [r4, #0]
    66d4:	2b00      	cmp	r3, #0
    66d6:	d02e      	beq.n	6736 <_svfprintf_r+0xfe>
    66d8:	1c63      	adds	r3, r4, #1
    66da:	469b      	mov	fp, r3
    66dc:	2300      	movs	r3, #0
    66de:	aa16      	add	r2, sp, #88	; 0x58
    66e0:	77d3      	strb	r3, [r2, #31]
    66e2:	2201      	movs	r2, #1
    66e4:	4252      	negs	r2, r2
    66e6:	4692      	mov	sl, r2
    66e8:	2200      	movs	r2, #0
    66ea:	2100      	movs	r1, #0
    66ec:	920b      	str	r2, [sp, #44]	; 0x2c
    66ee:	3220      	adds	r2, #32
    66f0:	4691      	mov	r9, r2
    66f2:	3220      	adds	r2, #32
    66f4:	7863      	ldrb	r3, [r4, #1]
    66f6:	4688      	mov	r8, r1
    66f8:	2000      	movs	r0, #0
    66fa:	2400      	movs	r4, #0
    66fc:	4694      	mov	ip, r2
    66fe:	4659      	mov	r1, fp
    6700:	3101      	adds	r1, #1
    6702:	001a      	movs	r2, r3
    6704:	3a20      	subs	r2, #32
    6706:	2a58      	cmp	r2, #88	; 0x58
    6708:	d900      	bls.n	670c <_svfprintf_r+0xd4>
    670a:	e2fd      	b.n	6d08 <_svfprintf_r+0x6d0>
    670c:	4dd7      	ldr	r5, [pc, #860]	; (6a6c <_svfprintf_r+0x434>)
    670e:	0092      	lsls	r2, r2, #2
    6710:	58aa      	ldr	r2, [r5, r2]
    6712:	4697      	mov	pc, r2
    6714:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6716:	920f      	str	r2, [sp, #60]	; 0x3c
    6718:	425b      	negs	r3, r3
    671a:	930b      	str	r3, [sp, #44]	; 0x2c
    671c:	2304      	movs	r3, #4
    671e:	431c      	orrs	r4, r3
    6720:	780b      	ldrb	r3, [r1, #0]
    6722:	e7ed      	b.n	6700 <_svfprintf_r+0xc8>
    6724:	003a      	movs	r2, r7
    6726:	9906      	ldr	r1, [sp, #24]
    6728:	9809      	ldr	r0, [sp, #36]	; 0x24
    672a:	f003 fac3 	bl	9cb4 <__ssprint_r>
    672e:	2800      	cmp	r0, #0
    6730:	d109      	bne.n	6746 <_svfprintf_r+0x10e>
    6732:	ae32      	add	r6, sp, #200	; 0xc8
    6734:	e7c8      	b.n	66c8 <_svfprintf_r+0x90>
    6736:	68bb      	ldr	r3, [r7, #8]
    6738:	2b00      	cmp	r3, #0
    673a:	d004      	beq.n	6746 <_svfprintf_r+0x10e>
    673c:	003a      	movs	r2, r7
    673e:	9906      	ldr	r1, [sp, #24]
    6740:	9809      	ldr	r0, [sp, #36]	; 0x24
    6742:	f003 fab7 	bl	9cb4 <__ssprint_r>
    6746:	9b06      	ldr	r3, [sp, #24]
    6748:	899b      	ldrh	r3, [r3, #12]
    674a:	065b      	lsls	r3, r3, #25
    674c:	d501      	bpl.n	6752 <_svfprintf_r+0x11a>
    674e:	f001 f8ce 	bl	78ee <_svfprintf_r+0x12b6>
    6752:	980a      	ldr	r0, [sp, #40]	; 0x28
    6754:	b043      	add	sp, #268	; 0x10c
    6756:	bc3c      	pop	{r2, r3, r4, r5}
    6758:	4690      	mov	r8, r2
    675a:	4699      	mov	r9, r3
    675c:	46a2      	mov	sl, r4
    675e:	46ab      	mov	fp, r5
    6760:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6762:	2201      	movs	r2, #1
    6764:	780b      	ldrb	r3, [r1, #0]
    6766:	4690      	mov	r8, r2
    6768:	202b      	movs	r0, #43	; 0x2b
    676a:	e7c9      	b.n	6700 <_svfprintf_r+0xc8>
    676c:	1c4b      	adds	r3, r1, #1
    676e:	469b      	mov	fp, r3
    6770:	780b      	ldrb	r3, [r1, #0]
    6772:	2b2a      	cmp	r3, #42	; 0x2a
    6774:	d101      	bne.n	677a <_svfprintf_r+0x142>
    6776:	f001 fa1b 	bl	7bb0 <_svfprintf_r+0x1578>
    677a:	001a      	movs	r2, r3
    677c:	2100      	movs	r1, #0
    677e:	3a30      	subs	r2, #48	; 0x30
    6780:	468a      	mov	sl, r1
    6782:	4659      	mov	r1, fp
    6784:	2a09      	cmp	r2, #9
    6786:	d8bc      	bhi.n	6702 <_svfprintf_r+0xca>
    6788:	0003      	movs	r3, r0
    678a:	0011      	movs	r1, r2
    678c:	4650      	mov	r0, sl
    678e:	465a      	mov	r2, fp
    6790:	469a      	mov	sl, r3
    6792:	46a3      	mov	fp, r4
    6794:	0083      	lsls	r3, r0, #2
    6796:	181b      	adds	r3, r3, r0
    6798:	7814      	ldrb	r4, [r2, #0]
    679a:	005b      	lsls	r3, r3, #1
    679c:	1858      	adds	r0, r3, r1
    679e:	0021      	movs	r1, r4
    67a0:	1c53      	adds	r3, r2, #1
    67a2:	3930      	subs	r1, #48	; 0x30
    67a4:	001a      	movs	r2, r3
    67a6:	2909      	cmp	r1, #9
    67a8:	d9f4      	bls.n	6794 <_svfprintf_r+0x15c>
    67aa:	4652      	mov	r2, sl
    67ac:	0019      	movs	r1, r3
    67ae:	4682      	mov	sl, r0
    67b0:	0023      	movs	r3, r4
    67b2:	0010      	movs	r0, r2
    67b4:	465c      	mov	r4, fp
    67b6:	e7a4      	b.n	6702 <_svfprintf_r+0xca>
    67b8:	2380      	movs	r3, #128	; 0x80
    67ba:	431c      	orrs	r4, r3
    67bc:	780b      	ldrb	r3, [r1, #0]
    67be:	e79f      	b.n	6700 <_svfprintf_r+0xc8>
    67c0:	468b      	mov	fp, r1
    67c2:	4641      	mov	r1, r8
    67c4:	9312      	str	r3, [sp, #72]	; 0x48
    67c6:	2900      	cmp	r1, #0
    67c8:	d001      	beq.n	67ce <_svfprintf_r+0x196>
    67ca:	f001 fa1f 	bl	7c0c <_svfprintf_r+0x15d4>
    67ce:	2310      	movs	r3, #16
    67d0:	431c      	orrs	r4, r3
    67d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    67d4:	06a3      	lsls	r3, r4, #26
    67d6:	d501      	bpl.n	67dc <_svfprintf_r+0x1a4>
    67d8:	f000 fe88 	bl	74ec <_svfprintf_r+0xeb4>
    67dc:	06e3      	lsls	r3, r4, #27
    67de:	d501      	bpl.n	67e4 <_svfprintf_r+0x1ac>
    67e0:	f000 fd80 	bl	72e4 <_svfprintf_r+0xcac>
    67e4:	0663      	lsls	r3, r4, #25
    67e6:	d401      	bmi.n	67ec <_svfprintf_r+0x1b4>
    67e8:	f000 fd7c 	bl	72e4 <_svfprintf_r+0xcac>
    67ec:	2100      	movs	r1, #0
    67ee:	5e53      	ldrsh	r3, [r2, r1]
    67f0:	930c      	str	r3, [sp, #48]	; 0x30
    67f2:	3204      	adds	r2, #4
    67f4:	17db      	asrs	r3, r3, #31
    67f6:	930d      	str	r3, [sp, #52]	; 0x34
    67f8:	920f      	str	r2, [sp, #60]	; 0x3c
    67fa:	d501      	bpl.n	6800 <_svfprintf_r+0x1c8>
    67fc:	f000 fe86 	bl	750c <_svfprintf_r+0xed4>
    6800:	990c      	ldr	r1, [sp, #48]	; 0x30
    6802:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    6804:	0008      	movs	r0, r1
    6806:	ab16      	add	r3, sp, #88	; 0x58
    6808:	7fdb      	ldrb	r3, [r3, #31]
    680a:	4310      	orrs	r0, r2
    680c:	4698      	mov	r8, r3
    680e:	0002      	movs	r2, r0
    6810:	2301      	movs	r3, #1
    6812:	4651      	mov	r1, sl
    6814:	3101      	adds	r1, #1
    6816:	d100      	bne.n	681a <_svfprintf_r+0x1e2>
    6818:	e0ff      	b.n	6a1a <_svfprintf_r+0x3e2>
    681a:	2180      	movs	r1, #128	; 0x80
    681c:	0020      	movs	r0, r4
    681e:	4388      	bics	r0, r1
    6820:	9008      	str	r0, [sp, #32]
    6822:	2a00      	cmp	r2, #0
    6824:	d000      	beq.n	6828 <_svfprintf_r+0x1f0>
    6826:	e0fc      	b.n	6a22 <_svfprintf_r+0x3ea>
    6828:	4652      	mov	r2, sl
    682a:	2a00      	cmp	r2, #0
    682c:	d001      	beq.n	6832 <_svfprintf_r+0x1fa>
    682e:	f000 fc2c 	bl	708a <_svfprintf_r+0xa52>
    6832:	2b00      	cmp	r3, #0
    6834:	d001      	beq.n	683a <_svfprintf_r+0x202>
    6836:	f000 fd04 	bl	7242 <_svfprintf_r+0xc0a>
    683a:	2001      	movs	r0, #1
    683c:	ab32      	add	r3, sp, #200	; 0xc8
    683e:	4020      	ands	r0, r4
    6840:	900e      	str	r0, [sp, #56]	; 0x38
    6842:	9311      	str	r3, [sp, #68]	; 0x44
    6844:	d008      	beq.n	6858 <_svfprintf_r+0x220>
    6846:	2327      	movs	r3, #39	; 0x27
    6848:	2130      	movs	r1, #48	; 0x30
    684a:	aa28      	add	r2, sp, #160	; 0xa0
    684c:	54d1      	strb	r1, [r2, r3]
    684e:	aa16      	add	r2, sp, #88	; 0x58
    6850:	4694      	mov	ip, r2
    6852:	3348      	adds	r3, #72	; 0x48
    6854:	4463      	add	r3, ip
    6856:	9311      	str	r3, [sp, #68]	; 0x44
    6858:	4653      	mov	r3, sl
    685a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    685c:	9307      	str	r3, [sp, #28]
    685e:	4592      	cmp	sl, r2
    6860:	da00      	bge.n	6864 <_svfprintf_r+0x22c>
    6862:	9207      	str	r2, [sp, #28]
    6864:	2300      	movs	r3, #0
    6866:	9313      	str	r3, [sp, #76]	; 0x4c
    6868:	4643      	mov	r3, r8
    686a:	2b00      	cmp	r3, #0
    686c:	d002      	beq.n	6874 <_svfprintf_r+0x23c>
    686e:	9b07      	ldr	r3, [sp, #28]
    6870:	3301      	adds	r3, #1
    6872:	9307      	str	r3, [sp, #28]
    6874:	2302      	movs	r3, #2
    6876:	9a08      	ldr	r2, [sp, #32]
    6878:	401a      	ands	r2, r3
    687a:	4691      	mov	r9, r2
    687c:	d002      	beq.n	6884 <_svfprintf_r+0x24c>
    687e:	9b07      	ldr	r3, [sp, #28]
    6880:	3302      	adds	r3, #2
    6882:	9307      	str	r3, [sp, #28]
    6884:	2384      	movs	r3, #132	; 0x84
    6886:	9a08      	ldr	r2, [sp, #32]
    6888:	401a      	ands	r2, r3
    688a:	9210      	str	r2, [sp, #64]	; 0x40
    688c:	d000      	beq.n	6890 <_svfprintf_r+0x258>
    688e:	e24d      	b.n	6d2c <_svfprintf_r+0x6f4>
    6890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6892:	9a07      	ldr	r2, [sp, #28]
    6894:	1a9c      	subs	r4, r3, r2
    6896:	2c00      	cmp	r4, #0
    6898:	dc00      	bgt.n	689c <_svfprintf_r+0x264>
    689a:	e247      	b.n	6d2c <_svfprintf_r+0x6f4>
    689c:	4974      	ldr	r1, [pc, #464]	; (6a70 <_svfprintf_r+0x438>)
    689e:	68ba      	ldr	r2, [r7, #8]
    68a0:	687b      	ldr	r3, [r7, #4]
    68a2:	4688      	mov	r8, r1
    68a4:	2c10      	cmp	r4, #16
    68a6:	dd1f      	ble.n	68e8 <_svfprintf_r+0x2b0>
    68a8:	0031      	movs	r1, r6
    68aa:	2510      	movs	r5, #16
    68ac:	4646      	mov	r6, r8
    68ae:	e003      	b.n	68b8 <_svfprintf_r+0x280>
    68b0:	3c10      	subs	r4, #16
    68b2:	3108      	adds	r1, #8
    68b4:	2c10      	cmp	r4, #16
    68b6:	dd15      	ble.n	68e4 <_svfprintf_r+0x2ac>
    68b8:	3210      	adds	r2, #16
    68ba:	3301      	adds	r3, #1
    68bc:	600e      	str	r6, [r1, #0]
    68be:	604d      	str	r5, [r1, #4]
    68c0:	60ba      	str	r2, [r7, #8]
    68c2:	607b      	str	r3, [r7, #4]
    68c4:	2b07      	cmp	r3, #7
    68c6:	ddf3      	ble.n	68b0 <_svfprintf_r+0x278>
    68c8:	003a      	movs	r2, r7
    68ca:	9906      	ldr	r1, [sp, #24]
    68cc:	9809      	ldr	r0, [sp, #36]	; 0x24
    68ce:	f003 f9f1 	bl	9cb4 <__ssprint_r>
    68d2:	2800      	cmp	r0, #0
    68d4:	d000      	beq.n	68d8 <_svfprintf_r+0x2a0>
    68d6:	e736      	b.n	6746 <_svfprintf_r+0x10e>
    68d8:	3c10      	subs	r4, #16
    68da:	68ba      	ldr	r2, [r7, #8]
    68dc:	687b      	ldr	r3, [r7, #4]
    68de:	a932      	add	r1, sp, #200	; 0xc8
    68e0:	2c10      	cmp	r4, #16
    68e2:	dce9      	bgt.n	68b8 <_svfprintf_r+0x280>
    68e4:	46b0      	mov	r8, r6
    68e6:	000e      	movs	r6, r1
    68e8:	4641      	mov	r1, r8
    68ea:	6074      	str	r4, [r6, #4]
    68ec:	3301      	adds	r3, #1
    68ee:	18a4      	adds	r4, r4, r2
    68f0:	6031      	str	r1, [r6, #0]
    68f2:	60bc      	str	r4, [r7, #8]
    68f4:	607b      	str	r3, [r7, #4]
    68f6:	2b07      	cmp	r3, #7
    68f8:	dd01      	ble.n	68fe <_svfprintf_r+0x2c6>
    68fa:	f000 fca8 	bl	724e <_svfprintf_r+0xc16>
    68fe:	ab16      	add	r3, sp, #88	; 0x58
    6900:	7fdb      	ldrb	r3, [r3, #31]
    6902:	3608      	adds	r6, #8
    6904:	4698      	mov	r8, r3
    6906:	e212      	b.n	6d2e <_svfprintf_r+0x6f6>
    6908:	468b      	mov	fp, r1
    690a:	4641      	mov	r1, r8
    690c:	9312      	str	r3, [sp, #72]	; 0x48
    690e:	2900      	cmp	r1, #0
    6910:	d001      	beq.n	6916 <_svfprintf_r+0x2de>
    6912:	f001 f977 	bl	7c04 <_svfprintf_r+0x15cc>
    6916:	2207      	movs	r2, #7
    6918:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    691a:	3307      	adds	r3, #7
    691c:	4393      	bics	r3, r2
    691e:	3201      	adds	r2, #1
    6920:	4694      	mov	ip, r2
    6922:	449c      	add	ip, r3
    6924:	4662      	mov	r2, ip
    6926:	920f      	str	r2, [sp, #60]	; 0x3c
    6928:	681a      	ldr	r2, [r3, #0]
    692a:	9216      	str	r2, [sp, #88]	; 0x58
    692c:	685b      	ldr	r3, [r3, #4]
    692e:	2201      	movs	r2, #1
    6930:	9315      	str	r3, [sp, #84]	; 0x54
    6932:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6934:	9d16      	ldr	r5, [sp, #88]	; 0x58
    6936:	005b      	lsls	r3, r3, #1
    6938:	085b      	lsrs	r3, r3, #1
    693a:	4698      	mov	r8, r3
    693c:	4252      	negs	r2, r2
    693e:	4b4d      	ldr	r3, [pc, #308]	; (6a74 <_svfprintf_r+0x43c>)
    6940:	0028      	movs	r0, r5
    6942:	4641      	mov	r1, r8
    6944:	f004 f82e 	bl	a9a4 <__aeabi_dcmpun>
    6948:	2800      	cmp	r0, #0
    694a:	d001      	beq.n	6950 <_svfprintf_r+0x318>
    694c:	f000 fdfd 	bl	754a <_svfprintf_r+0xf12>
    6950:	2201      	movs	r2, #1
    6952:	4b48      	ldr	r3, [pc, #288]	; (6a74 <_svfprintf_r+0x43c>)
    6954:	4252      	negs	r2, r2
    6956:	0028      	movs	r0, r5
    6958:	4641      	mov	r1, r8
    695a:	f7ff fc01 	bl	6160 <__aeabi_dcmple>
    695e:	2800      	cmp	r0, #0
    6960:	d001      	beq.n	6966 <_svfprintf_r+0x32e>
    6962:	f000 fdf2 	bl	754a <_svfprintf_r+0xf12>
    6966:	2200      	movs	r2, #0
    6968:	2300      	movs	r3, #0
    696a:	9816      	ldr	r0, [sp, #88]	; 0x58
    696c:	9915      	ldr	r1, [sp, #84]	; 0x54
    696e:	f7ff fbed 	bl	614c <__aeabi_dcmplt>
    6972:	2800      	cmp	r0, #0
    6974:	d001      	beq.n	697a <_svfprintf_r+0x342>
    6976:	f001 f822 	bl	79be <_svfprintf_r+0x1386>
    697a:	ab16      	add	r3, sp, #88	; 0x58
    697c:	7fdb      	ldrb	r3, [r3, #31]
    697e:	4698      	mov	r8, r3
    6980:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6982:	2b47      	cmp	r3, #71	; 0x47
    6984:	dd01      	ble.n	698a <_svfprintf_r+0x352>
    6986:	f000 fec7 	bl	7718 <_svfprintf_r+0x10e0>
    698a:	4b3b      	ldr	r3, [pc, #236]	; (6a78 <_svfprintf_r+0x440>)
    698c:	9311      	str	r3, [sp, #68]	; 0x44
    698e:	2380      	movs	r3, #128	; 0x80
    6990:	439c      	bics	r4, r3
    6992:	3b7d      	subs	r3, #125	; 0x7d
    6994:	9307      	str	r3, [sp, #28]
    6996:	930e      	str	r3, [sp, #56]	; 0x38
    6998:	2300      	movs	r3, #0
    699a:	9408      	str	r4, [sp, #32]
    699c:	469a      	mov	sl, r3
    699e:	9313      	str	r3, [sp, #76]	; 0x4c
    69a0:	e762      	b.n	6868 <_svfprintf_r+0x230>
    69a2:	2200      	movs	r2, #0
    69a4:	3b30      	subs	r3, #48	; 0x30
    69a6:	0015      	movs	r5, r2
    69a8:	001a      	movs	r2, r3
    69aa:	0003      	movs	r3, r0
    69ac:	9407      	str	r4, [sp, #28]
    69ae:	0008      	movs	r0, r1
    69b0:	002c      	movs	r4, r5
    69b2:	469b      	mov	fp, r3
    69b4:	00a3      	lsls	r3, r4, #2
    69b6:	191c      	adds	r4, r3, r4
    69b8:	7803      	ldrb	r3, [r0, #0]
    69ba:	0064      	lsls	r4, r4, #1
    69bc:	1914      	adds	r4, r2, r4
    69be:	001a      	movs	r2, r3
    69c0:	3101      	adds	r1, #1
    69c2:	3a30      	subs	r2, #48	; 0x30
    69c4:	0008      	movs	r0, r1
    69c6:	2a09      	cmp	r2, #9
    69c8:	d9f4      	bls.n	69b4 <_svfprintf_r+0x37c>
    69ca:	940b      	str	r4, [sp, #44]	; 0x2c
    69cc:	4658      	mov	r0, fp
    69ce:	9c07      	ldr	r4, [sp, #28]
    69d0:	e697      	b.n	6702 <_svfprintf_r+0xca>
    69d2:	2308      	movs	r3, #8
    69d4:	431c      	orrs	r4, r3
    69d6:	780b      	ldrb	r3, [r1, #0]
    69d8:	e692      	b.n	6700 <_svfprintf_r+0xc8>
    69da:	9312      	str	r3, [sp, #72]	; 0x48
    69dc:	2310      	movs	r3, #16
    69de:	431c      	orrs	r4, r3
    69e0:	468b      	mov	fp, r1
    69e2:	06a3      	lsls	r3, r4, #26
    69e4:	d500      	bpl.n	69e8 <_svfprintf_r+0x3b0>
    69e6:	e17b      	b.n	6ce0 <_svfprintf_r+0x6a8>
    69e8:	06e3      	lsls	r3, r4, #27
    69ea:	d501      	bpl.n	69f0 <_svfprintf_r+0x3b8>
    69ec:	f000 fc7e 	bl	72ec <_svfprintf_r+0xcb4>
    69f0:	0663      	lsls	r3, r4, #25
    69f2:	d401      	bmi.n	69f8 <_svfprintf_r+0x3c0>
    69f4:	f000 fc7a 	bl	72ec <_svfprintf_r+0xcb4>
    69f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    69fa:	881a      	ldrh	r2, [r3, #0]
    69fc:	920c      	str	r2, [sp, #48]	; 0x30
    69fe:	2200      	movs	r2, #0
    6a00:	3304      	adds	r3, #4
    6a02:	930f      	str	r3, [sp, #60]	; 0x3c
    6a04:	2300      	movs	r3, #0
    6a06:	920d      	str	r2, [sp, #52]	; 0x34
    6a08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6a0a:	2100      	movs	r1, #0
    6a0c:	a816      	add	r0, sp, #88	; 0x58
    6a0e:	77c1      	strb	r1, [r0, #31]
    6a10:	4688      	mov	r8, r1
    6a12:	4651      	mov	r1, sl
    6a14:	3101      	adds	r1, #1
    6a16:	d000      	beq.n	6a1a <_svfprintf_r+0x3e2>
    6a18:	e6ff      	b.n	681a <_svfprintf_r+0x1e2>
    6a1a:	2a00      	cmp	r2, #0
    6a1c:	d100      	bne.n	6a20 <_svfprintf_r+0x3e8>
    6a1e:	e335      	b.n	708c <_svfprintf_r+0xa54>
    6a20:	9408      	str	r4, [sp, #32]
    6a22:	2b01      	cmp	r3, #1
    6a24:	d100      	bne.n	6a28 <_svfprintf_r+0x3f0>
    6a26:	e3e5      	b.n	71f4 <_svfprintf_r+0xbbc>
    6a28:	2b02      	cmp	r3, #2
    6a2a:	d000      	beq.n	6a2e <_svfprintf_r+0x3f6>
    6a2c:	e362      	b.n	70f4 <_svfprintf_r+0xabc>
    6a2e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    6a30:	200f      	movs	r0, #15
    6a32:	46a1      	mov	r9, r4
    6a34:	46b4      	mov	ip, r6
    6a36:	ab32      	add	r3, sp, #200	; 0xc8
    6a38:	0019      	movs	r1, r3
    6a3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6a3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6a3e:	0004      	movs	r4, r0
    6a40:	464d      	mov	r5, r9
    6a42:	4014      	ands	r4, r2
    6a44:	5d2c      	ldrb	r4, [r5, r4]
    6a46:	071e      	lsls	r6, r3, #28
    6a48:	0915      	lsrs	r5, r2, #4
    6a4a:	3901      	subs	r1, #1
    6a4c:	432e      	orrs	r6, r5
    6a4e:	700c      	strb	r4, [r1, #0]
    6a50:	091c      	lsrs	r4, r3, #4
    6a52:	0023      	movs	r3, r4
    6a54:	0034      	movs	r4, r6
    6a56:	0032      	movs	r2, r6
    6a58:	431c      	orrs	r4, r3
    6a5a:	d1f0      	bne.n	6a3e <_svfprintf_r+0x406>
    6a5c:	920c      	str	r2, [sp, #48]	; 0x30
    6a5e:	930d      	str	r3, [sp, #52]	; 0x34
    6a60:	ab32      	add	r3, sp, #200	; 0xc8
    6a62:	1a5b      	subs	r3, r3, r1
    6a64:	9111      	str	r1, [sp, #68]	; 0x44
    6a66:	4666      	mov	r6, ip
    6a68:	930e      	str	r3, [sp, #56]	; 0x38
    6a6a:	e6f5      	b.n	6858 <_svfprintf_r+0x220>
    6a6c:	0000b618 	.word	0x0000b618
    6a70:	0000b7c0 	.word	0x0000b7c0
    6a74:	7fefffff 	.word	0x7fefffff
    6a78:	0000b77c 	.word	0x0000b77c
    6a7c:	9312      	str	r3, [sp, #72]	; 0x48
    6a7e:	2310      	movs	r3, #16
    6a80:	431c      	orrs	r4, r3
    6a82:	468b      	mov	fp, r1
    6a84:	06a3      	lsls	r3, r4, #26
    6a86:	d500      	bpl.n	6a8a <_svfprintf_r+0x452>
    6a88:	e111      	b.n	6cae <_svfprintf_r+0x676>
    6a8a:	06e3      	lsls	r3, r4, #27
    6a8c:	d501      	bpl.n	6a92 <_svfprintf_r+0x45a>
    6a8e:	f000 fc31 	bl	72f4 <_svfprintf_r+0xcbc>
    6a92:	0663      	lsls	r3, r4, #25
    6a94:	d401      	bmi.n	6a9a <_svfprintf_r+0x462>
    6a96:	f000 fc2d 	bl	72f4 <_svfprintf_r+0xcbc>
    6a9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6a9c:	881a      	ldrh	r2, [r3, #0]
    6a9e:	920c      	str	r2, [sp, #48]	; 0x30
    6aa0:	2200      	movs	r2, #0
    6aa2:	3304      	adds	r3, #4
    6aa4:	920d      	str	r2, [sp, #52]	; 0x34
    6aa6:	930f      	str	r3, [sp, #60]	; 0x3c
    6aa8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6aaa:	2301      	movs	r3, #1
    6aac:	e7ad      	b.n	6a0a <_svfprintf_r+0x3d2>
    6aae:	468b      	mov	fp, r1
    6ab0:	4641      	mov	r1, r8
    6ab2:	9312      	str	r3, [sp, #72]	; 0x48
    6ab4:	2900      	cmp	r1, #0
    6ab6:	d001      	beq.n	6abc <_svfprintf_r+0x484>
    6ab8:	f001 f890 	bl	7bdc <_svfprintf_r+0x15a4>
    6abc:	4bb8      	ldr	r3, [pc, #736]	; (6da0 <_svfprintf_r+0x768>)
    6abe:	9317      	str	r3, [sp, #92]	; 0x5c
    6ac0:	06a3      	lsls	r3, r4, #26
    6ac2:	d500      	bpl.n	6ac6 <_svfprintf_r+0x48e>
    6ac4:	e0ab      	b.n	6c1e <_svfprintf_r+0x5e6>
    6ac6:	06e3      	lsls	r3, r4, #27
    6ac8:	d501      	bpl.n	6ace <_svfprintf_r+0x496>
    6aca:	f000 fc07 	bl	72dc <_svfprintf_r+0xca4>
    6ace:	0663      	lsls	r3, r4, #25
    6ad0:	d401      	bmi.n	6ad6 <_svfprintf_r+0x49e>
    6ad2:	f000 fc03 	bl	72dc <_svfprintf_r+0xca4>
    6ad6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6ad8:	881a      	ldrh	r2, [r3, #0]
    6ada:	920c      	str	r2, [sp, #48]	; 0x30
    6adc:	2200      	movs	r2, #0
    6ade:	3304      	adds	r3, #4
    6ae0:	920d      	str	r2, [sp, #52]	; 0x34
    6ae2:	930f      	str	r3, [sp, #60]	; 0x3c
    6ae4:	07e3      	lsls	r3, r4, #31
    6ae6:	d400      	bmi.n	6aea <_svfprintf_r+0x4b2>
    6ae8:	e0a9      	b.n	6c3e <_svfprintf_r+0x606>
    6aea:	990c      	ldr	r1, [sp, #48]	; 0x30
    6aec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    6aee:	000b      	movs	r3, r1
    6af0:	4313      	orrs	r3, r2
    6af2:	001a      	movs	r2, r3
    6af4:	2302      	movs	r3, #2
    6af6:	2a00      	cmp	r2, #0
    6af8:	d100      	bne.n	6afc <_svfprintf_r+0x4c4>
    6afa:	e786      	b.n	6a0a <_svfprintf_r+0x3d2>
    6afc:	2030      	movs	r0, #48	; 0x30
    6afe:	a91e      	add	r1, sp, #120	; 0x78
    6b00:	7008      	strb	r0, [r1, #0]
    6b02:	2548      	movs	r5, #72	; 0x48
    6b04:	4668      	mov	r0, sp
    6b06:	1940      	adds	r0, r0, r5
    6b08:	7800      	ldrb	r0, [r0, #0]
    6b0a:	431c      	orrs	r4, r3
    6b0c:	7048      	strb	r0, [r1, #1]
    6b0e:	e77c      	b.n	6a0a <_svfprintf_r+0x3d2>
    6b10:	468b      	mov	fp, r1
    6b12:	4641      	mov	r1, r8
    6b14:	2900      	cmp	r1, #0
    6b16:	d001      	beq.n	6b1c <_svfprintf_r+0x4e4>
    6b18:	f001 f883 	bl	7c22 <_svfprintf_r+0x15ea>
    6b1c:	06a3      	lsls	r3, r4, #26
    6b1e:	d501      	bpl.n	6b24 <_svfprintf_r+0x4ec>
    6b20:	f000 fde9 	bl	76f6 <_svfprintf_r+0x10be>
    6b24:	06e3      	lsls	r3, r4, #27
    6b26:	d501      	bpl.n	6b2c <_svfprintf_r+0x4f4>
    6b28:	f000 fd9b 	bl	7662 <_svfprintf_r+0x102a>
    6b2c:	0663      	lsls	r3, r4, #25
    6b2e:	d401      	bmi.n	6b34 <_svfprintf_r+0x4fc>
    6b30:	f000 fd97 	bl	7662 <_svfprintf_r+0x102a>
    6b34:	4669      	mov	r1, sp
    6b36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b38:	8d09      	ldrh	r1, [r1, #40]	; 0x28
    6b3a:	681a      	ldr	r2, [r3, #0]
    6b3c:	3304      	adds	r3, #4
    6b3e:	9207      	str	r2, [sp, #28]
    6b40:	8011      	strh	r1, [r2, #0]
    6b42:	930f      	str	r3, [sp, #60]	; 0x3c
    6b44:	e5a3      	b.n	668e <_svfprintf_r+0x56>
    6b46:	464b      	mov	r3, r9
    6b48:	431c      	orrs	r4, r3
    6b4a:	780b      	ldrb	r3, [r1, #0]
    6b4c:	e5d8      	b.n	6700 <_svfprintf_r+0xc8>
    6b4e:	9312      	str	r3, [sp, #72]	; 0x48
    6b50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b52:	468b      	mov	fp, r1
    6b54:	1d1d      	adds	r5, r3, #4
    6b56:	681b      	ldr	r3, [r3, #0]
    6b58:	a916      	add	r1, sp, #88	; 0x58
    6b5a:	001a      	movs	r2, r3
    6b5c:	9311      	str	r3, [sp, #68]	; 0x44
    6b5e:	2300      	movs	r3, #0
    6b60:	77cb      	strb	r3, [r1, #31]
    6b62:	2a00      	cmp	r2, #0
    6b64:	d101      	bne.n	6b6a <_svfprintf_r+0x532>
    6b66:	f000 fefb 	bl	7960 <_svfprintf_r+0x1328>
    6b6a:	4653      	mov	r3, sl
    6b6c:	3301      	adds	r3, #1
    6b6e:	d101      	bne.n	6b74 <_svfprintf_r+0x53c>
    6b70:	f000 fe38 	bl	77e4 <_svfprintf_r+0x11ac>
    6b74:	4652      	mov	r2, sl
    6b76:	2100      	movs	r1, #0
    6b78:	9811      	ldr	r0, [sp, #68]	; 0x44
    6b7a:	f002 fcf1 	bl	9560 <memchr>
    6b7e:	2800      	cmp	r0, #0
    6b80:	d101      	bne.n	6b86 <_svfprintf_r+0x54e>
    6b82:	f000 ff54 	bl	7a2e <_svfprintf_r+0x13f6>
    6b86:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6b88:	1ac3      	subs	r3, r0, r3
    6b8a:	001a      	movs	r2, r3
    6b8c:	930e      	str	r3, [sp, #56]	; 0x38
    6b8e:	43db      	mvns	r3, r3
    6b90:	17db      	asrs	r3, r3, #31
    6b92:	401a      	ands	r2, r3
    6b94:	ab16      	add	r3, sp, #88	; 0x58
    6b96:	7fdb      	ldrb	r3, [r3, #31]
    6b98:	9207      	str	r2, [sp, #28]
    6b9a:	4698      	mov	r8, r3
    6b9c:	2300      	movs	r3, #0
    6b9e:	950f      	str	r5, [sp, #60]	; 0x3c
    6ba0:	9408      	str	r4, [sp, #32]
    6ba2:	469a      	mov	sl, r3
    6ba4:	9313      	str	r3, [sp, #76]	; 0x4c
    6ba6:	e65f      	b.n	6868 <_svfprintf_r+0x230>
    6ba8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6baa:	9312      	str	r3, [sp, #72]	; 0x48
    6bac:	6813      	ldr	r3, [r2, #0]
    6bae:	ad28      	add	r5, sp, #160	; 0xa0
    6bb0:	9307      	str	r3, [sp, #28]
    6bb2:	466b      	mov	r3, sp
    6bb4:	7f1b      	ldrb	r3, [r3, #28]
    6bb6:	468b      	mov	fp, r1
    6bb8:	702b      	strb	r3, [r5, #0]
    6bba:	2300      	movs	r3, #0
    6bbc:	a916      	add	r1, sp, #88	; 0x58
    6bbe:	77cb      	strb	r3, [r1, #31]
    6bc0:	0013      	movs	r3, r2
    6bc2:	3304      	adds	r3, #4
    6bc4:	930f      	str	r3, [sp, #60]	; 0x3c
    6bc6:	2300      	movs	r3, #0
    6bc8:	9408      	str	r4, [sp, #32]
    6bca:	4698      	mov	r8, r3
    6bcc:	3301      	adds	r3, #1
    6bce:	9307      	str	r3, [sp, #28]
    6bd0:	930e      	str	r3, [sp, #56]	; 0x38
    6bd2:	2300      	movs	r3, #0
    6bd4:	9511      	str	r5, [sp, #68]	; 0x44
    6bd6:	469a      	mov	sl, r3
    6bd8:	9313      	str	r3, [sp, #76]	; 0x4c
    6bda:	e64b      	b.n	6874 <_svfprintf_r+0x23c>
    6bdc:	468b      	mov	fp, r1
    6bde:	4641      	mov	r1, r8
    6be0:	9312      	str	r3, [sp, #72]	; 0x48
    6be2:	2900      	cmp	r1, #0
    6be4:	d100      	bne.n	6be8 <_svfprintf_r+0x5b0>
    6be6:	e5f4      	b.n	67d2 <_svfprintf_r+0x19a>
    6be8:	ab16      	add	r3, sp, #88	; 0x58
    6bea:	77d8      	strb	r0, [r3, #31]
    6bec:	e5f1      	b.n	67d2 <_svfprintf_r+0x19a>
    6bee:	4663      	mov	r3, ip
    6bf0:	431c      	orrs	r4, r3
    6bf2:	780b      	ldrb	r3, [r1, #0]
    6bf4:	e584      	b.n	6700 <_svfprintf_r+0xc8>
    6bf6:	780b      	ldrb	r3, [r1, #0]
    6bf8:	2b6c      	cmp	r3, #108	; 0x6c
    6bfa:	d101      	bne.n	6c00 <_svfprintf_r+0x5c8>
    6bfc:	f000 fd86 	bl	770c <_svfprintf_r+0x10d4>
    6c00:	2210      	movs	r2, #16
    6c02:	4314      	orrs	r4, r2
    6c04:	e57c      	b.n	6700 <_svfprintf_r+0xc8>
    6c06:	468b      	mov	fp, r1
    6c08:	4641      	mov	r1, r8
    6c0a:	9312      	str	r3, [sp, #72]	; 0x48
    6c0c:	2900      	cmp	r1, #0
    6c0e:	d001      	beq.n	6c14 <_svfprintf_r+0x5dc>
    6c10:	f000 ffe8 	bl	7be4 <_svfprintf_r+0x15ac>
    6c14:	4b63      	ldr	r3, [pc, #396]	; (6da4 <_svfprintf_r+0x76c>)
    6c16:	9317      	str	r3, [sp, #92]	; 0x5c
    6c18:	06a3      	lsls	r3, r4, #26
    6c1a:	d400      	bmi.n	6c1e <_svfprintf_r+0x5e6>
    6c1c:	e753      	b.n	6ac6 <_svfprintf_r+0x48e>
    6c1e:	2207      	movs	r2, #7
    6c20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6c22:	3307      	adds	r3, #7
    6c24:	4393      	bics	r3, r2
    6c26:	3201      	adds	r2, #1
    6c28:	4694      	mov	ip, r2
    6c2a:	449c      	add	ip, r3
    6c2c:	4662      	mov	r2, ip
    6c2e:	920f      	str	r2, [sp, #60]	; 0x3c
    6c30:	681a      	ldr	r2, [r3, #0]
    6c32:	685b      	ldr	r3, [r3, #4]
    6c34:	920c      	str	r2, [sp, #48]	; 0x30
    6c36:	930d      	str	r3, [sp, #52]	; 0x34
    6c38:	07e3      	lsls	r3, r4, #31
    6c3a:	d500      	bpl.n	6c3e <_svfprintf_r+0x606>
    6c3c:	e755      	b.n	6aea <_svfprintf_r+0x4b2>
    6c3e:	990c      	ldr	r1, [sp, #48]	; 0x30
    6c40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    6c42:	0008      	movs	r0, r1
    6c44:	4310      	orrs	r0, r2
    6c46:	2302      	movs	r3, #2
    6c48:	0002      	movs	r2, r0
    6c4a:	e6de      	b.n	6a0a <_svfprintf_r+0x3d2>
    6c4c:	468b      	mov	fp, r1
    6c4e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    6c50:	2230      	movs	r2, #48	; 0x30
    6c52:	680b      	ldr	r3, [r1, #0]
    6c54:	930c      	str	r3, [sp, #48]	; 0x30
    6c56:	2300      	movs	r3, #0
    6c58:	930d      	str	r3, [sp, #52]	; 0x34
    6c5a:	3302      	adds	r3, #2
    6c5c:	431c      	orrs	r4, r3
    6c5e:	ab1e      	add	r3, sp, #120	; 0x78
    6c60:	701a      	strb	r2, [r3, #0]
    6c62:	3248      	adds	r2, #72	; 0x48
    6c64:	705a      	strb	r2, [r3, #1]
    6c66:	000b      	movs	r3, r1
    6c68:	3304      	adds	r3, #4
    6c6a:	930f      	str	r3, [sp, #60]	; 0x3c
    6c6c:	4b4d      	ldr	r3, [pc, #308]	; (6da4 <_svfprintf_r+0x76c>)
    6c6e:	9212      	str	r2, [sp, #72]	; 0x48
    6c70:	9317      	str	r3, [sp, #92]	; 0x5c
    6c72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6c74:	2302      	movs	r3, #2
    6c76:	e6c8      	b.n	6a0a <_svfprintf_r+0x3d2>
    6c78:	2301      	movs	r3, #1
    6c7a:	431c      	orrs	r4, r3
    6c7c:	780b      	ldrb	r3, [r1, #0]
    6c7e:	e53f      	b.n	6700 <_svfprintf_r+0xc8>
    6c80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6c82:	1d1a      	adds	r2, r3, #4
    6c84:	681b      	ldr	r3, [r3, #0]
    6c86:	930b      	str	r3, [sp, #44]	; 0x2c
    6c88:	2b00      	cmp	r3, #0
    6c8a:	da00      	bge.n	6c8e <_svfprintf_r+0x656>
    6c8c:	e542      	b.n	6714 <_svfprintf_r+0xdc>
    6c8e:	780b      	ldrb	r3, [r1, #0]
    6c90:	920f      	str	r2, [sp, #60]	; 0x3c
    6c92:	e535      	b.n	6700 <_svfprintf_r+0xc8>
    6c94:	780b      	ldrb	r3, [r1, #0]
    6c96:	2800      	cmp	r0, #0
    6c98:	d000      	beq.n	6c9c <_svfprintf_r+0x664>
    6c9a:	e531      	b.n	6700 <_svfprintf_r+0xc8>
    6c9c:	2201      	movs	r2, #1
    6c9e:	3020      	adds	r0, #32
    6ca0:	4690      	mov	r8, r2
    6ca2:	e52d      	b.n	6700 <_svfprintf_r+0xc8>
    6ca4:	468b      	mov	fp, r1
    6ca6:	9312      	str	r3, [sp, #72]	; 0x48
    6ca8:	06a3      	lsls	r3, r4, #26
    6caa:	d400      	bmi.n	6cae <_svfprintf_r+0x676>
    6cac:	e6ed      	b.n	6a8a <_svfprintf_r+0x452>
    6cae:	2207      	movs	r2, #7
    6cb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6cb2:	3307      	adds	r3, #7
    6cb4:	4393      	bics	r3, r2
    6cb6:	3201      	adds	r2, #1
    6cb8:	4694      	mov	ip, r2
    6cba:	449c      	add	ip, r3
    6cbc:	4662      	mov	r2, ip
    6cbe:	920f      	str	r2, [sp, #60]	; 0x3c
    6cc0:	681a      	ldr	r2, [r3, #0]
    6cc2:	685b      	ldr	r3, [r3, #4]
    6cc4:	0011      	movs	r1, r2
    6cc6:	001a      	movs	r2, r3
    6cc8:	0008      	movs	r0, r1
    6cca:	4310      	orrs	r0, r2
    6ccc:	910c      	str	r1, [sp, #48]	; 0x30
    6cce:	920d      	str	r2, [sp, #52]	; 0x34
    6cd0:	2301      	movs	r3, #1
    6cd2:	0002      	movs	r2, r0
    6cd4:	e699      	b.n	6a0a <_svfprintf_r+0x3d2>
    6cd6:	468b      	mov	fp, r1
    6cd8:	9312      	str	r3, [sp, #72]	; 0x48
    6cda:	06a3      	lsls	r3, r4, #26
    6cdc:	d400      	bmi.n	6ce0 <_svfprintf_r+0x6a8>
    6cde:	e683      	b.n	69e8 <_svfprintf_r+0x3b0>
    6ce0:	2207      	movs	r2, #7
    6ce2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6ce4:	3307      	adds	r3, #7
    6ce6:	4393      	bics	r3, r2
    6ce8:	3201      	adds	r2, #1
    6cea:	4694      	mov	ip, r2
    6cec:	449c      	add	ip, r3
    6cee:	4662      	mov	r2, ip
    6cf0:	920f      	str	r2, [sp, #60]	; 0x3c
    6cf2:	681a      	ldr	r2, [r3, #0]
    6cf4:	685b      	ldr	r3, [r3, #4]
    6cf6:	0011      	movs	r1, r2
    6cf8:	001a      	movs	r2, r3
    6cfa:	0008      	movs	r0, r1
    6cfc:	4310      	orrs	r0, r2
    6cfe:	910c      	str	r1, [sp, #48]	; 0x30
    6d00:	920d      	str	r2, [sp, #52]	; 0x34
    6d02:	2300      	movs	r3, #0
    6d04:	0002      	movs	r2, r0
    6d06:	e680      	b.n	6a0a <_svfprintf_r+0x3d2>
    6d08:	468b      	mov	fp, r1
    6d0a:	4641      	mov	r1, r8
    6d0c:	9312      	str	r3, [sp, #72]	; 0x48
    6d0e:	2900      	cmp	r1, #0
    6d10:	d001      	beq.n	6d16 <_svfprintf_r+0x6de>
    6d12:	f000 ff7f 	bl	7c14 <_svfprintf_r+0x15dc>
    6d16:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6d18:	2b00      	cmp	r3, #0
    6d1a:	d100      	bne.n	6d1e <_svfprintf_r+0x6e6>
    6d1c:	e50b      	b.n	6736 <_svfprintf_r+0xfe>
    6d1e:	ad28      	add	r5, sp, #160	; 0xa0
    6d20:	702b      	strb	r3, [r5, #0]
    6d22:	2300      	movs	r3, #0
    6d24:	aa16      	add	r2, sp, #88	; 0x58
    6d26:	77d3      	strb	r3, [r2, #31]
    6d28:	9408      	str	r4, [sp, #32]
    6d2a:	e74e      	b.n	6bca <_svfprintf_r+0x592>
    6d2c:	68bc      	ldr	r4, [r7, #8]
    6d2e:	4643      	mov	r3, r8
    6d30:	2b00      	cmp	r3, #0
    6d32:	d00f      	beq.n	6d54 <_svfprintf_r+0x71c>
    6d34:	aa16      	add	r2, sp, #88	; 0x58
    6d36:	231f      	movs	r3, #31
    6d38:	4694      	mov	ip, r2
    6d3a:	4463      	add	r3, ip
    6d3c:	6033      	str	r3, [r6, #0]
    6d3e:	2301      	movs	r3, #1
    6d40:	6073      	str	r3, [r6, #4]
    6d42:	687b      	ldr	r3, [r7, #4]
    6d44:	3401      	adds	r4, #1
    6d46:	3301      	adds	r3, #1
    6d48:	60bc      	str	r4, [r7, #8]
    6d4a:	607b      	str	r3, [r7, #4]
    6d4c:	2b07      	cmp	r3, #7
    6d4e:	dd00      	ble.n	6d52 <_svfprintf_r+0x71a>
    6d50:	e1b3      	b.n	70ba <_svfprintf_r+0xa82>
    6d52:	3608      	adds	r6, #8
    6d54:	464b      	mov	r3, r9
    6d56:	2b00      	cmp	r3, #0
    6d58:	d00c      	beq.n	6d74 <_svfprintf_r+0x73c>
    6d5a:	ab1e      	add	r3, sp, #120	; 0x78
    6d5c:	6033      	str	r3, [r6, #0]
    6d5e:	2302      	movs	r3, #2
    6d60:	6073      	str	r3, [r6, #4]
    6d62:	687b      	ldr	r3, [r7, #4]
    6d64:	3402      	adds	r4, #2
    6d66:	3301      	adds	r3, #1
    6d68:	60bc      	str	r4, [r7, #8]
    6d6a:	607b      	str	r3, [r7, #4]
    6d6c:	2b07      	cmp	r3, #7
    6d6e:	dd00      	ble.n	6d72 <_svfprintf_r+0x73a>
    6d70:	e1af      	b.n	70d2 <_svfprintf_r+0xa9a>
    6d72:	3608      	adds	r6, #8
    6d74:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6d76:	2b80      	cmp	r3, #128	; 0x80
    6d78:	d100      	bne.n	6d7c <_svfprintf_r+0x744>
    6d7a:	e120      	b.n	6fbe <_svfprintf_r+0x986>
    6d7c:	4653      	mov	r3, sl
    6d7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    6d80:	1a9d      	subs	r5, r3, r2
    6d82:	2d00      	cmp	r5, #0
    6d84:	dd3c      	ble.n	6e00 <_svfprintf_r+0x7c8>
    6d86:	4a08      	ldr	r2, [pc, #32]	; (6da8 <_svfprintf_r+0x770>)
    6d88:	687b      	ldr	r3, [r7, #4]
    6d8a:	4691      	mov	r9, r2
    6d8c:	2d10      	cmp	r5, #16
    6d8e:	dd2c      	ble.n	6dea <_svfprintf_r+0x7b2>
    6d90:	2210      	movs	r2, #16
    6d92:	0021      	movs	r1, r4
    6d94:	4692      	mov	sl, r2
    6d96:	9c09      	ldr	r4, [sp, #36]	; 0x24
    6d98:	0032      	movs	r2, r6
    6d9a:	002e      	movs	r6, r5
    6d9c:	464d      	mov	r5, r9
    6d9e:	e009      	b.n	6db4 <_svfprintf_r+0x77c>
    6da0:	0000b78c 	.word	0x0000b78c
    6da4:	0000b7a0 	.word	0x0000b7a0
    6da8:	0000b7d0 	.word	0x0000b7d0
    6dac:	3e10      	subs	r6, #16
    6dae:	3208      	adds	r2, #8
    6db0:	2e10      	cmp	r6, #16
    6db2:	dd16      	ble.n	6de2 <_svfprintf_r+0x7aa>
    6db4:	4650      	mov	r0, sl
    6db6:	3110      	adds	r1, #16
    6db8:	3301      	adds	r3, #1
    6dba:	6015      	str	r5, [r2, #0]
    6dbc:	6050      	str	r0, [r2, #4]
    6dbe:	60b9      	str	r1, [r7, #8]
    6dc0:	607b      	str	r3, [r7, #4]
    6dc2:	2b07      	cmp	r3, #7
    6dc4:	ddf2      	ble.n	6dac <_svfprintf_r+0x774>
    6dc6:	003a      	movs	r2, r7
    6dc8:	9906      	ldr	r1, [sp, #24]
    6dca:	0020      	movs	r0, r4
    6dcc:	f002 ff72 	bl	9cb4 <__ssprint_r>
    6dd0:	2800      	cmp	r0, #0
    6dd2:	d000      	beq.n	6dd6 <_svfprintf_r+0x79e>
    6dd4:	e4b7      	b.n	6746 <_svfprintf_r+0x10e>
    6dd6:	3e10      	subs	r6, #16
    6dd8:	68b9      	ldr	r1, [r7, #8]
    6dda:	687b      	ldr	r3, [r7, #4]
    6ddc:	aa32      	add	r2, sp, #200	; 0xc8
    6dde:	2e10      	cmp	r6, #16
    6de0:	dce8      	bgt.n	6db4 <_svfprintf_r+0x77c>
    6de2:	46a9      	mov	r9, r5
    6de4:	000c      	movs	r4, r1
    6de6:	0035      	movs	r5, r6
    6de8:	0016      	movs	r6, r2
    6dea:	464a      	mov	r2, r9
    6dec:	1964      	adds	r4, r4, r5
    6dee:	3301      	adds	r3, #1
    6df0:	6032      	str	r2, [r6, #0]
    6df2:	6075      	str	r5, [r6, #4]
    6df4:	60bc      	str	r4, [r7, #8]
    6df6:	607b      	str	r3, [r7, #4]
    6df8:	2b07      	cmp	r3, #7
    6dfa:	dd00      	ble.n	6dfe <_svfprintf_r+0x7c6>
    6dfc:	e151      	b.n	70a2 <_svfprintf_r+0xa6a>
    6dfe:	3608      	adds	r6, #8
    6e00:	9b08      	ldr	r3, [sp, #32]
    6e02:	05db      	lsls	r3, r3, #23
    6e04:	d500      	bpl.n	6e08 <_svfprintf_r+0x7d0>
    6e06:	e0b6      	b.n	6f76 <_svfprintf_r+0x93e>
    6e08:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6e0a:	6033      	str	r3, [r6, #0]
    6e0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6e0e:	469c      	mov	ip, r3
    6e10:	6073      	str	r3, [r6, #4]
    6e12:	687b      	ldr	r3, [r7, #4]
    6e14:	4464      	add	r4, ip
    6e16:	3301      	adds	r3, #1
    6e18:	60bc      	str	r4, [r7, #8]
    6e1a:	607b      	str	r3, [r7, #4]
    6e1c:	2b07      	cmp	r3, #7
    6e1e:	dd00      	ble.n	6e22 <_svfprintf_r+0x7ea>
    6e20:	e09d      	b.n	6f5e <_svfprintf_r+0x926>
    6e22:	3608      	adds	r6, #8
    6e24:	9b08      	ldr	r3, [sp, #32]
    6e26:	075b      	lsls	r3, r3, #29
    6e28:	d541      	bpl.n	6eae <_svfprintf_r+0x876>
    6e2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6e2c:	9a07      	ldr	r2, [sp, #28]
    6e2e:	1a9d      	subs	r5, r3, r2
    6e30:	2d00      	cmp	r5, #0
    6e32:	dd3c      	ble.n	6eae <_svfprintf_r+0x876>
    6e34:	4ac4      	ldr	r2, [pc, #784]	; (7148 <_svfprintf_r+0xb10>)
    6e36:	687b      	ldr	r3, [r7, #4]
    6e38:	4690      	mov	r8, r2
    6e3a:	2d10      	cmp	r5, #16
    6e3c:	dd26      	ble.n	6e8c <_svfprintf_r+0x854>
    6e3e:	2210      	movs	r2, #16
    6e40:	0021      	movs	r1, r4
    6e42:	4691      	mov	r9, r2
    6e44:	9c09      	ldr	r4, [sp, #36]	; 0x24
    6e46:	0032      	movs	r2, r6
    6e48:	002e      	movs	r6, r5
    6e4a:	9d06      	ldr	r5, [sp, #24]
    6e4c:	e003      	b.n	6e56 <_svfprintf_r+0x81e>
    6e4e:	3e10      	subs	r6, #16
    6e50:	3208      	adds	r2, #8
    6e52:	2e10      	cmp	r6, #16
    6e54:	dd17      	ble.n	6e86 <_svfprintf_r+0x84e>
    6e56:	48bc      	ldr	r0, [pc, #752]	; (7148 <_svfprintf_r+0xb10>)
    6e58:	3110      	adds	r1, #16
    6e5a:	6010      	str	r0, [r2, #0]
    6e5c:	4648      	mov	r0, r9
    6e5e:	3301      	adds	r3, #1
    6e60:	6050      	str	r0, [r2, #4]
    6e62:	60b9      	str	r1, [r7, #8]
    6e64:	607b      	str	r3, [r7, #4]
    6e66:	2b07      	cmp	r3, #7
    6e68:	ddf1      	ble.n	6e4e <_svfprintf_r+0x816>
    6e6a:	003a      	movs	r2, r7
    6e6c:	0029      	movs	r1, r5
    6e6e:	0020      	movs	r0, r4
    6e70:	f002 ff20 	bl	9cb4 <__ssprint_r>
    6e74:	2800      	cmp	r0, #0
    6e76:	d000      	beq.n	6e7a <_svfprintf_r+0x842>
    6e78:	e465      	b.n	6746 <_svfprintf_r+0x10e>
    6e7a:	3e10      	subs	r6, #16
    6e7c:	68b9      	ldr	r1, [r7, #8]
    6e7e:	687b      	ldr	r3, [r7, #4]
    6e80:	aa32      	add	r2, sp, #200	; 0xc8
    6e82:	2e10      	cmp	r6, #16
    6e84:	dce7      	bgt.n	6e56 <_svfprintf_r+0x81e>
    6e86:	0035      	movs	r5, r6
    6e88:	000c      	movs	r4, r1
    6e8a:	0016      	movs	r6, r2
    6e8c:	4642      	mov	r2, r8
    6e8e:	1964      	adds	r4, r4, r5
    6e90:	3301      	adds	r3, #1
    6e92:	c624      	stmia	r6!, {r2, r5}
    6e94:	60bc      	str	r4, [r7, #8]
    6e96:	607b      	str	r3, [r7, #4]
    6e98:	2b07      	cmp	r3, #7
    6e9a:	dd08      	ble.n	6eae <_svfprintf_r+0x876>
    6e9c:	003a      	movs	r2, r7
    6e9e:	9906      	ldr	r1, [sp, #24]
    6ea0:	9809      	ldr	r0, [sp, #36]	; 0x24
    6ea2:	f002 ff07 	bl	9cb4 <__ssprint_r>
    6ea6:	2800      	cmp	r0, #0
    6ea8:	d000      	beq.n	6eac <_svfprintf_r+0x874>
    6eaa:	e44c      	b.n	6746 <_svfprintf_r+0x10e>
    6eac:	68bc      	ldr	r4, [r7, #8]
    6eae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6eb0:	9907      	ldr	r1, [sp, #28]
    6eb2:	428b      	cmp	r3, r1
    6eb4:	da00      	bge.n	6eb8 <_svfprintf_r+0x880>
    6eb6:	000b      	movs	r3, r1
    6eb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6eba:	4694      	mov	ip, r2
    6ebc:	449c      	add	ip, r3
    6ebe:	4663      	mov	r3, ip
    6ec0:	930a      	str	r3, [sp, #40]	; 0x28
    6ec2:	2c00      	cmp	r4, #0
    6ec4:	d000      	beq.n	6ec8 <_svfprintf_r+0x890>
    6ec6:	e0d6      	b.n	7076 <_svfprintf_r+0xa3e>
    6ec8:	2300      	movs	r3, #0
    6eca:	ae32      	add	r6, sp, #200	; 0xc8
    6ecc:	607b      	str	r3, [r7, #4]
    6ece:	f7ff fbde 	bl	668e <_svfprintf_r+0x56>
    6ed2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6ed4:	2b01      	cmp	r3, #1
    6ed6:	dc00      	bgt.n	6eda <_svfprintf_r+0x8a2>
    6ed8:	e0ae      	b.n	7038 <_svfprintf_r+0xa00>
    6eda:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6edc:	3401      	adds	r4, #1
    6ede:	6033      	str	r3, [r6, #0]
    6ee0:	2301      	movs	r3, #1
    6ee2:	6073      	str	r3, [r6, #4]
    6ee4:	687b      	ldr	r3, [r7, #4]
    6ee6:	60bc      	str	r4, [r7, #8]
    6ee8:	3301      	adds	r3, #1
    6eea:	607b      	str	r3, [r7, #4]
    6eec:	2b07      	cmp	r3, #7
    6eee:	dd00      	ble.n	6ef2 <_svfprintf_r+0x8ba>
    6ef0:	e2df      	b.n	74b2 <_svfprintf_r+0xe7a>
    6ef2:	3608      	adds	r6, #8
    6ef4:	9a19      	ldr	r2, [sp, #100]	; 0x64
    6ef6:	3301      	adds	r3, #1
    6ef8:	6032      	str	r2, [r6, #0]
    6efa:	9a18      	ldr	r2, [sp, #96]	; 0x60
    6efc:	4698      	mov	r8, r3
    6efe:	4694      	mov	ip, r2
    6f00:	4464      	add	r4, ip
    6f02:	6072      	str	r2, [r6, #4]
    6f04:	60bc      	str	r4, [r7, #8]
    6f06:	607b      	str	r3, [r7, #4]
    6f08:	2b07      	cmp	r3, #7
    6f0a:	dd00      	ble.n	6f0e <_svfprintf_r+0x8d6>
    6f0c:	e2de      	b.n	74cc <_svfprintf_r+0xe94>
    6f0e:	3608      	adds	r6, #8
    6f10:	2200      	movs	r2, #0
    6f12:	2300      	movs	r3, #0
    6f14:	9816      	ldr	r0, [sp, #88]	; 0x58
    6f16:	9915      	ldr	r1, [sp, #84]	; 0x54
    6f18:	f7ff f912 	bl	6140 <__aeabi_dcmpeq>
    6f1c:	2800      	cmp	r0, #0
    6f1e:	d000      	beq.n	6f22 <_svfprintf_r+0x8ea>
    6f20:	e1a4      	b.n	726c <_svfprintf_r+0xc34>
    6f22:	9d11      	ldr	r5, [sp, #68]	; 0x44
    6f24:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6f26:	3501      	adds	r5, #1
    6f28:	3b01      	subs	r3, #1
    6f2a:	6035      	str	r5, [r6, #0]
    6f2c:	6073      	str	r3, [r6, #4]
    6f2e:	18e4      	adds	r4, r4, r3
    6f30:	2301      	movs	r3, #1
    6f32:	469c      	mov	ip, r3
    6f34:	44e0      	add	r8, ip
    6f36:	4643      	mov	r3, r8
    6f38:	60bc      	str	r4, [r7, #8]
    6f3a:	607b      	str	r3, [r7, #4]
    6f3c:	2b07      	cmp	r3, #7
    6f3e:	dd00      	ble.n	6f42 <_svfprintf_r+0x90a>
    6f40:	e08b      	b.n	705a <_svfprintf_r+0xa22>
    6f42:	3608      	adds	r6, #8
    6f44:	ab21      	add	r3, sp, #132	; 0x84
    6f46:	6033      	str	r3, [r6, #0]
    6f48:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    6f4a:	469c      	mov	ip, r3
    6f4c:	6073      	str	r3, [r6, #4]
    6f4e:	4643      	mov	r3, r8
    6f50:	4464      	add	r4, ip
    6f52:	3301      	adds	r3, #1
    6f54:	60bc      	str	r4, [r7, #8]
    6f56:	607b      	str	r3, [r7, #4]
    6f58:	2b07      	cmp	r3, #7
    6f5a:	dc00      	bgt.n	6f5e <_svfprintf_r+0x926>
    6f5c:	e761      	b.n	6e22 <_svfprintf_r+0x7ea>
    6f5e:	003a      	movs	r2, r7
    6f60:	9906      	ldr	r1, [sp, #24]
    6f62:	9809      	ldr	r0, [sp, #36]	; 0x24
    6f64:	f002 fea6 	bl	9cb4 <__ssprint_r>
    6f68:	2800      	cmp	r0, #0
    6f6a:	d001      	beq.n	6f70 <_svfprintf_r+0x938>
    6f6c:	f7ff fbeb 	bl	6746 <_svfprintf_r+0x10e>
    6f70:	68bc      	ldr	r4, [r7, #8]
    6f72:	ae32      	add	r6, sp, #200	; 0xc8
    6f74:	e756      	b.n	6e24 <_svfprintf_r+0x7ec>
    6f76:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6f78:	2b65      	cmp	r3, #101	; 0x65
    6f7a:	ddaa      	ble.n	6ed2 <_svfprintf_r+0x89a>
    6f7c:	2200      	movs	r2, #0
    6f7e:	2300      	movs	r3, #0
    6f80:	9816      	ldr	r0, [sp, #88]	; 0x58
    6f82:	9915      	ldr	r1, [sp, #84]	; 0x54
    6f84:	f7ff f8dc 	bl	6140 <__aeabi_dcmpeq>
    6f88:	2800      	cmp	r0, #0
    6f8a:	d100      	bne.n	6f8e <_svfprintf_r+0x956>
    6f8c:	e0e2      	b.n	7154 <_svfprintf_r+0xb1c>
    6f8e:	4b6f      	ldr	r3, [pc, #444]	; (714c <_svfprintf_r+0xb14>)
    6f90:	3401      	adds	r4, #1
    6f92:	6033      	str	r3, [r6, #0]
    6f94:	2301      	movs	r3, #1
    6f96:	6073      	str	r3, [r6, #4]
    6f98:	687b      	ldr	r3, [r7, #4]
    6f9a:	60bc      	str	r4, [r7, #8]
    6f9c:	3301      	adds	r3, #1
    6f9e:	607b      	str	r3, [r7, #4]
    6fa0:	2b07      	cmp	r3, #7
    6fa2:	dd00      	ble.n	6fa6 <_svfprintf_r+0x96e>
    6fa4:	e366      	b.n	7674 <_svfprintf_r+0x103c>
    6fa6:	3608      	adds	r6, #8
    6fa8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    6faa:	9a14      	ldr	r2, [sp, #80]	; 0x50
    6fac:	4293      	cmp	r3, r2
    6fae:	da00      	bge.n	6fb2 <_svfprintf_r+0x97a>
    6fb0:	e1a4      	b.n	72fc <_svfprintf_r+0xcc4>
    6fb2:	9b08      	ldr	r3, [sp, #32]
    6fb4:	07db      	lsls	r3, r3, #31
    6fb6:	d500      	bpl.n	6fba <_svfprintf_r+0x982>
    6fb8:	e1a0      	b.n	72fc <_svfprintf_r+0xcc4>
    6fba:	68bc      	ldr	r4, [r7, #8]
    6fbc:	e732      	b.n	6e24 <_svfprintf_r+0x7ec>
    6fbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6fc0:	9a07      	ldr	r2, [sp, #28]
    6fc2:	1a9d      	subs	r5, r3, r2
    6fc4:	2d00      	cmp	r5, #0
    6fc6:	dc00      	bgt.n	6fca <_svfprintf_r+0x992>
    6fc8:	e6d8      	b.n	6d7c <_svfprintf_r+0x744>
    6fca:	4a61      	ldr	r2, [pc, #388]	; (7150 <_svfprintf_r+0xb18>)
    6fcc:	687b      	ldr	r3, [r7, #4]
    6fce:	4691      	mov	r9, r2
    6fd0:	2d10      	cmp	r5, #16
    6fd2:	dd25      	ble.n	7020 <_svfprintf_r+0x9e8>
    6fd4:	2210      	movs	r2, #16
    6fd6:	0021      	movs	r1, r4
    6fd8:	4690      	mov	r8, r2
    6fda:	9c09      	ldr	r4, [sp, #36]	; 0x24
    6fdc:	0032      	movs	r2, r6
    6fde:	464e      	mov	r6, r9
    6fe0:	e003      	b.n	6fea <_svfprintf_r+0x9b2>
    6fe2:	3d10      	subs	r5, #16
    6fe4:	3208      	adds	r2, #8
    6fe6:	2d10      	cmp	r5, #16
    6fe8:	dd17      	ble.n	701a <_svfprintf_r+0x9e2>
    6fea:	4640      	mov	r0, r8
    6fec:	3110      	adds	r1, #16
    6fee:	3301      	adds	r3, #1
    6ff0:	6016      	str	r6, [r2, #0]
    6ff2:	6050      	str	r0, [r2, #4]
    6ff4:	60b9      	str	r1, [r7, #8]
    6ff6:	607b      	str	r3, [r7, #4]
    6ff8:	2b07      	cmp	r3, #7
    6ffa:	ddf2      	ble.n	6fe2 <_svfprintf_r+0x9aa>
    6ffc:	003a      	movs	r2, r7
    6ffe:	9906      	ldr	r1, [sp, #24]
    7000:	0020      	movs	r0, r4
    7002:	f002 fe57 	bl	9cb4 <__ssprint_r>
    7006:	2800      	cmp	r0, #0
    7008:	d001      	beq.n	700e <_svfprintf_r+0x9d6>
    700a:	f7ff fb9c 	bl	6746 <_svfprintf_r+0x10e>
    700e:	3d10      	subs	r5, #16
    7010:	68b9      	ldr	r1, [r7, #8]
    7012:	687b      	ldr	r3, [r7, #4]
    7014:	aa32      	add	r2, sp, #200	; 0xc8
    7016:	2d10      	cmp	r5, #16
    7018:	dce7      	bgt.n	6fea <_svfprintf_r+0x9b2>
    701a:	46b1      	mov	r9, r6
    701c:	000c      	movs	r4, r1
    701e:	0016      	movs	r6, r2
    7020:	464a      	mov	r2, r9
    7022:	1964      	adds	r4, r4, r5
    7024:	3301      	adds	r3, #1
    7026:	6032      	str	r2, [r6, #0]
    7028:	6075      	str	r5, [r6, #4]
    702a:	60bc      	str	r4, [r7, #8]
    702c:	607b      	str	r3, [r7, #4]
    702e:	2b07      	cmp	r3, #7
    7030:	dd00      	ble.n	7034 <_svfprintf_r+0x9fc>
    7032:	e27e      	b.n	7532 <_svfprintf_r+0xefa>
    7034:	3608      	adds	r6, #8
    7036:	e6a1      	b.n	6d7c <_svfprintf_r+0x744>
    7038:	2301      	movs	r3, #1
    703a:	9a08      	ldr	r2, [sp, #32]
    703c:	4213      	tst	r3, r2
    703e:	d000      	beq.n	7042 <_svfprintf_r+0xa0a>
    7040:	e74b      	b.n	6eda <_svfprintf_r+0x8a2>
    7042:	6073      	str	r3, [r6, #4]
    7044:	687b      	ldr	r3, [r7, #4]
    7046:	9a11      	ldr	r2, [sp, #68]	; 0x44
    7048:	3301      	adds	r3, #1
    704a:	3401      	adds	r4, #1
    704c:	6032      	str	r2, [r6, #0]
    704e:	60bc      	str	r4, [r7, #8]
    7050:	4698      	mov	r8, r3
    7052:	607b      	str	r3, [r7, #4]
    7054:	2b07      	cmp	r3, #7
    7056:	dc00      	bgt.n	705a <_svfprintf_r+0xa22>
    7058:	e773      	b.n	6f42 <_svfprintf_r+0x90a>
    705a:	003a      	movs	r2, r7
    705c:	9906      	ldr	r1, [sp, #24]
    705e:	9809      	ldr	r0, [sp, #36]	; 0x24
    7060:	f002 fe28 	bl	9cb4 <__ssprint_r>
    7064:	2800      	cmp	r0, #0
    7066:	d001      	beq.n	706c <_svfprintf_r+0xa34>
    7068:	f7ff fb6d 	bl	6746 <_svfprintf_r+0x10e>
    706c:	687b      	ldr	r3, [r7, #4]
    706e:	68bc      	ldr	r4, [r7, #8]
    7070:	4698      	mov	r8, r3
    7072:	ae32      	add	r6, sp, #200	; 0xc8
    7074:	e766      	b.n	6f44 <_svfprintf_r+0x90c>
    7076:	003a      	movs	r2, r7
    7078:	9906      	ldr	r1, [sp, #24]
    707a:	9809      	ldr	r0, [sp, #36]	; 0x24
    707c:	f002 fe1a 	bl	9cb4 <__ssprint_r>
    7080:	2800      	cmp	r0, #0
    7082:	d100      	bne.n	7086 <_svfprintf_r+0xa4e>
    7084:	e720      	b.n	6ec8 <_svfprintf_r+0x890>
    7086:	f7ff fb5e 	bl	6746 <_svfprintf_r+0x10e>
    708a:	9c08      	ldr	r4, [sp, #32]
    708c:	2b01      	cmp	r3, #1
    708e:	d100      	bne.n	7092 <_svfprintf_r+0xa5a>
    7090:	e184      	b.n	739c <_svfprintf_r+0xd64>
    7092:	2b02      	cmp	r3, #2
    7094:	d129      	bne.n	70ea <_svfprintf_r+0xab2>
    7096:	9408      	str	r4, [sp, #32]
    7098:	2300      	movs	r3, #0
    709a:	2400      	movs	r4, #0
    709c:	930c      	str	r3, [sp, #48]	; 0x30
    709e:	940d      	str	r4, [sp, #52]	; 0x34
    70a0:	e4c5      	b.n	6a2e <_svfprintf_r+0x3f6>
    70a2:	003a      	movs	r2, r7
    70a4:	9906      	ldr	r1, [sp, #24]
    70a6:	9809      	ldr	r0, [sp, #36]	; 0x24
    70a8:	f002 fe04 	bl	9cb4 <__ssprint_r>
    70ac:	2800      	cmp	r0, #0
    70ae:	d001      	beq.n	70b4 <_svfprintf_r+0xa7c>
    70b0:	f7ff fb49 	bl	6746 <_svfprintf_r+0x10e>
    70b4:	68bc      	ldr	r4, [r7, #8]
    70b6:	ae32      	add	r6, sp, #200	; 0xc8
    70b8:	e6a2      	b.n	6e00 <_svfprintf_r+0x7c8>
    70ba:	003a      	movs	r2, r7
    70bc:	9906      	ldr	r1, [sp, #24]
    70be:	9809      	ldr	r0, [sp, #36]	; 0x24
    70c0:	f002 fdf8 	bl	9cb4 <__ssprint_r>
    70c4:	2800      	cmp	r0, #0
    70c6:	d001      	beq.n	70cc <_svfprintf_r+0xa94>
    70c8:	f7ff fb3d 	bl	6746 <_svfprintf_r+0x10e>
    70cc:	68bc      	ldr	r4, [r7, #8]
    70ce:	ae32      	add	r6, sp, #200	; 0xc8
    70d0:	e640      	b.n	6d54 <_svfprintf_r+0x71c>
    70d2:	003a      	movs	r2, r7
    70d4:	9906      	ldr	r1, [sp, #24]
    70d6:	9809      	ldr	r0, [sp, #36]	; 0x24
    70d8:	f002 fdec 	bl	9cb4 <__ssprint_r>
    70dc:	2800      	cmp	r0, #0
    70de:	d001      	beq.n	70e4 <_svfprintf_r+0xaac>
    70e0:	f7ff fb31 	bl	6746 <_svfprintf_r+0x10e>
    70e4:	68bc      	ldr	r4, [r7, #8]
    70e6:	ae32      	add	r6, sp, #200	; 0xc8
    70e8:	e644      	b.n	6d74 <_svfprintf_r+0x73c>
    70ea:	9408      	str	r4, [sp, #32]
    70ec:	2300      	movs	r3, #0
    70ee:	2400      	movs	r4, #0
    70f0:	930c      	str	r3, [sp, #48]	; 0x30
    70f2:	940d      	str	r4, [sp, #52]	; 0x34
    70f4:	980c      	ldr	r0, [sp, #48]	; 0x30
    70f6:	990d      	ldr	r1, [sp, #52]	; 0x34
    70f8:	465b      	mov	r3, fp
    70fa:	aa32      	add	r2, sp, #200	; 0xc8
    70fc:	9307      	str	r3, [sp, #28]
    70fe:	4691      	mov	r9, r2
    7100:	46b3      	mov	fp, r6
    7102:	e000      	b.n	7106 <_svfprintf_r+0xace>
    7104:	46a1      	mov	r9, r4
    7106:	074a      	lsls	r2, r1, #29
    7108:	4694      	mov	ip, r2
    710a:	464b      	mov	r3, r9
    710c:	4665      	mov	r5, ip
    710e:	1e5c      	subs	r4, r3, #1
    7110:	08c6      	lsrs	r6, r0, #3
    7112:	2307      	movs	r3, #7
    7114:	08ca      	lsrs	r2, r1, #3
    7116:	4335      	orrs	r5, r6
    7118:	0011      	movs	r1, r2
    711a:	002a      	movs	r2, r5
    711c:	4003      	ands	r3, r0
    711e:	3330      	adds	r3, #48	; 0x30
    7120:	7023      	strb	r3, [r4, #0]
    7122:	0028      	movs	r0, r5
    7124:	430a      	orrs	r2, r1
    7126:	d1ed      	bne.n	7104 <_svfprintf_r+0xacc>
    7128:	900c      	str	r0, [sp, #48]	; 0x30
    712a:	910d      	str	r1, [sp, #52]	; 0x34
    712c:	9907      	ldr	r1, [sp, #28]
    712e:	465e      	mov	r6, fp
    7130:	468b      	mov	fp, r1
    7132:	9908      	ldr	r1, [sp, #32]
    7134:	464a      	mov	r2, r9
    7136:	9411      	str	r4, [sp, #68]	; 0x44
    7138:	07c9      	lsls	r1, r1, #31
    713a:	d500      	bpl.n	713e <_svfprintf_r+0xb06>
    713c:	e13d      	b.n	73ba <_svfprintf_r+0xd82>
    713e:	ab32      	add	r3, sp, #200	; 0xc8
    7140:	1b1b      	subs	r3, r3, r4
    7142:	930e      	str	r3, [sp, #56]	; 0x38
    7144:	f7ff fb88 	bl	6858 <_svfprintf_r+0x220>
    7148:	0000b7c0 	.word	0x0000b7c0
    714c:	0000b7bc 	.word	0x0000b7bc
    7150:	0000b7d0 	.word	0x0000b7d0
    7154:	981f      	ldr	r0, [sp, #124]	; 0x7c
    7156:	2800      	cmp	r0, #0
    7158:	dc00      	bgt.n	715c <_svfprintf_r+0xb24>
    715a:	e296      	b.n	768a <_svfprintf_r+0x1052>
    715c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    715e:	9914      	ldr	r1, [sp, #80]	; 0x50
    7160:	0013      	movs	r3, r2
    7162:	4690      	mov	r8, r2
    7164:	428b      	cmp	r3, r1
    7166:	dd00      	ble.n	716a <_svfprintf_r+0xb32>
    7168:	4688      	mov	r8, r1
    716a:	4643      	mov	r3, r8
    716c:	2b00      	cmp	r3, #0
    716e:	dd0c      	ble.n	718a <_svfprintf_r+0xb52>
    7170:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7172:	4444      	add	r4, r8
    7174:	6033      	str	r3, [r6, #0]
    7176:	4643      	mov	r3, r8
    7178:	6073      	str	r3, [r6, #4]
    717a:	687b      	ldr	r3, [r7, #4]
    717c:	60bc      	str	r4, [r7, #8]
    717e:	3301      	adds	r3, #1
    7180:	607b      	str	r3, [r7, #4]
    7182:	2b07      	cmp	r3, #7
    7184:	dd00      	ble.n	7188 <_svfprintf_r+0xb50>
    7186:	e3b7      	b.n	78f8 <_svfprintf_r+0x12c0>
    7188:	3608      	adds	r6, #8
    718a:	4643      	mov	r3, r8
    718c:	43db      	mvns	r3, r3
    718e:	4642      	mov	r2, r8
    7190:	17db      	asrs	r3, r3, #31
    7192:	4013      	ands	r3, r2
    7194:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    7196:	1ad3      	subs	r3, r2, r3
    7198:	4698      	mov	r8, r3
    719a:	2b00      	cmp	r3, #0
    719c:	dc00      	bgt.n	71a0 <_svfprintf_r+0xb68>
    719e:	e128      	b.n	73f2 <_svfprintf_r+0xdba>
    71a0:	2b10      	cmp	r3, #16
    71a2:	dc01      	bgt.n	71a8 <_svfprintf_r+0xb70>
    71a4:	f000 fce7 	bl	7b76 <_svfprintf_r+0x153e>
    71a8:	4acf      	ldr	r2, [pc, #828]	; (74e8 <_svfprintf_r+0xeb0>)
    71aa:	0021      	movs	r1, r4
    71ac:	4691      	mov	r9, r2
    71ae:	2210      	movs	r2, #16
    71b0:	687b      	ldr	r3, [r7, #4]
    71b2:	4692      	mov	sl, r2
    71b4:	9d09      	ldr	r5, [sp, #36]	; 0x24
    71b6:	0032      	movs	r2, r6
    71b8:	464c      	mov	r4, r9
    71ba:	4646      	mov	r6, r8
    71bc:	e004      	b.n	71c8 <_svfprintf_r+0xb90>
    71be:	3208      	adds	r2, #8
    71c0:	3e10      	subs	r6, #16
    71c2:	2e10      	cmp	r6, #16
    71c4:	dc00      	bgt.n	71c8 <_svfprintf_r+0xb90>
    71c6:	e104      	b.n	73d2 <_svfprintf_r+0xd9a>
    71c8:	4650      	mov	r0, sl
    71ca:	3110      	adds	r1, #16
    71cc:	3301      	adds	r3, #1
    71ce:	6014      	str	r4, [r2, #0]
    71d0:	6050      	str	r0, [r2, #4]
    71d2:	60b9      	str	r1, [r7, #8]
    71d4:	607b      	str	r3, [r7, #4]
    71d6:	2b07      	cmp	r3, #7
    71d8:	ddf1      	ble.n	71be <_svfprintf_r+0xb86>
    71da:	003a      	movs	r2, r7
    71dc:	9906      	ldr	r1, [sp, #24]
    71de:	0028      	movs	r0, r5
    71e0:	f002 fd68 	bl	9cb4 <__ssprint_r>
    71e4:	2800      	cmp	r0, #0
    71e6:	d001      	beq.n	71ec <_svfprintf_r+0xbb4>
    71e8:	f7ff faad 	bl	6746 <_svfprintf_r+0x10e>
    71ec:	68b9      	ldr	r1, [r7, #8]
    71ee:	687b      	ldr	r3, [r7, #4]
    71f0:	aa32      	add	r2, sp, #200	; 0xc8
    71f2:	e7e5      	b.n	71c0 <_svfprintf_r+0xb88>
    71f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    71f6:	2b00      	cmp	r3, #0
    71f8:	d100      	bne.n	71fc <_svfprintf_r+0xbc4>
    71fa:	e0ca      	b.n	7392 <_svfprintf_r+0xd5a>
    71fc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    71fe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    7200:	ab32      	add	r3, sp, #200	; 0xc8
    7202:	46b1      	mov	r9, r6
    7204:	001e      	movs	r6, r3
    7206:	0020      	movs	r0, r4
    7208:	0029      	movs	r1, r5
    720a:	220a      	movs	r2, #10
    720c:	2300      	movs	r3, #0
    720e:	f7fc fe85 	bl	3f1c <__aeabi_uldivmod>
    7212:	3e01      	subs	r6, #1
    7214:	3230      	adds	r2, #48	; 0x30
    7216:	7032      	strb	r2, [r6, #0]
    7218:	2300      	movs	r3, #0
    721a:	0020      	movs	r0, r4
    721c:	0029      	movs	r1, r5
    721e:	220a      	movs	r2, #10
    7220:	f7fc fe7c 	bl	3f1c <__aeabi_uldivmod>
    7224:	0003      	movs	r3, r0
    7226:	0004      	movs	r4, r0
    7228:	000d      	movs	r5, r1
    722a:	430b      	orrs	r3, r1
    722c:	d1eb      	bne.n	7206 <_svfprintf_r+0xbce>
    722e:	0032      	movs	r2, r6
    7230:	ab32      	add	r3, sp, #200	; 0xc8
    7232:	1a9b      	subs	r3, r3, r2
    7234:	9611      	str	r6, [sp, #68]	; 0x44
    7236:	940c      	str	r4, [sp, #48]	; 0x30
    7238:	950d      	str	r5, [sp, #52]	; 0x34
    723a:	464e      	mov	r6, r9
    723c:	930e      	str	r3, [sp, #56]	; 0x38
    723e:	f7ff fb0b 	bl	6858 <_svfprintf_r+0x220>
    7242:	2300      	movs	r3, #0
    7244:	930e      	str	r3, [sp, #56]	; 0x38
    7246:	ab32      	add	r3, sp, #200	; 0xc8
    7248:	9311      	str	r3, [sp, #68]	; 0x44
    724a:	f7ff fb05 	bl	6858 <_svfprintf_r+0x220>
    724e:	003a      	movs	r2, r7
    7250:	9906      	ldr	r1, [sp, #24]
    7252:	9809      	ldr	r0, [sp, #36]	; 0x24
    7254:	f002 fd2e 	bl	9cb4 <__ssprint_r>
    7258:	2800      	cmp	r0, #0
    725a:	d001      	beq.n	7260 <_svfprintf_r+0xc28>
    725c:	f7ff fa73 	bl	6746 <_svfprintf_r+0x10e>
    7260:	ab16      	add	r3, sp, #88	; 0x58
    7262:	7fdb      	ldrb	r3, [r3, #31]
    7264:	68bc      	ldr	r4, [r7, #8]
    7266:	4698      	mov	r8, r3
    7268:	ae32      	add	r6, sp, #200	; 0xc8
    726a:	e560      	b.n	6d2e <_svfprintf_r+0x6f6>
    726c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    726e:	1e5d      	subs	r5, r3, #1
    7270:	2d00      	cmp	r5, #0
    7272:	dc00      	bgt.n	7276 <_svfprintf_r+0xc3e>
    7274:	e666      	b.n	6f44 <_svfprintf_r+0x90c>
    7276:	4b9c      	ldr	r3, [pc, #624]	; (74e8 <_svfprintf_r+0xeb0>)
    7278:	4699      	mov	r9, r3
    727a:	2d10      	cmp	r5, #16
    727c:	dd29      	ble.n	72d2 <_svfprintf_r+0xc9a>
    727e:	2310      	movs	r3, #16
    7280:	0032      	movs	r2, r6
    7282:	469a      	mov	sl, r3
    7284:	002e      	movs	r6, r5
    7286:	0021      	movs	r1, r4
    7288:	4643      	mov	r3, r8
    728a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    728c:	464d      	mov	r5, r9
    728e:	e003      	b.n	7298 <_svfprintf_r+0xc60>
    7290:	3e10      	subs	r6, #16
    7292:	3208      	adds	r2, #8
    7294:	2e10      	cmp	r6, #16
    7296:	dd17      	ble.n	72c8 <_svfprintf_r+0xc90>
    7298:	4650      	mov	r0, sl
    729a:	3110      	adds	r1, #16
    729c:	3301      	adds	r3, #1
    729e:	6015      	str	r5, [r2, #0]
    72a0:	6050      	str	r0, [r2, #4]
    72a2:	60b9      	str	r1, [r7, #8]
    72a4:	607b      	str	r3, [r7, #4]
    72a6:	2b07      	cmp	r3, #7
    72a8:	ddf2      	ble.n	7290 <_svfprintf_r+0xc58>
    72aa:	003a      	movs	r2, r7
    72ac:	9906      	ldr	r1, [sp, #24]
    72ae:	0020      	movs	r0, r4
    72b0:	f002 fd00 	bl	9cb4 <__ssprint_r>
    72b4:	2800      	cmp	r0, #0
    72b6:	d001      	beq.n	72bc <_svfprintf_r+0xc84>
    72b8:	f7ff fa45 	bl	6746 <_svfprintf_r+0x10e>
    72bc:	3e10      	subs	r6, #16
    72be:	68b9      	ldr	r1, [r7, #8]
    72c0:	687b      	ldr	r3, [r7, #4]
    72c2:	aa32      	add	r2, sp, #200	; 0xc8
    72c4:	2e10      	cmp	r6, #16
    72c6:	dce7      	bgt.n	7298 <_svfprintf_r+0xc60>
    72c8:	46a9      	mov	r9, r5
    72ca:	000c      	movs	r4, r1
    72cc:	0035      	movs	r5, r6
    72ce:	4698      	mov	r8, r3
    72d0:	0016      	movs	r6, r2
    72d2:	464b      	mov	r3, r9
    72d4:	6075      	str	r5, [r6, #4]
    72d6:	6033      	str	r3, [r6, #0]
    72d8:	1964      	adds	r4, r4, r5
    72da:	e629      	b.n	6f30 <_svfprintf_r+0x8f8>
    72dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    72de:	681a      	ldr	r2, [r3, #0]
    72e0:	f7ff fbfb 	bl	6ada <_svfprintf_r+0x4a2>
    72e4:	6813      	ldr	r3, [r2, #0]
    72e6:	9307      	str	r3, [sp, #28]
    72e8:	f7ff fa82 	bl	67f0 <_svfprintf_r+0x1b8>
    72ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    72ee:	681a      	ldr	r2, [r3, #0]
    72f0:	f7ff fb84 	bl	69fc <_svfprintf_r+0x3c4>
    72f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    72f6:	681a      	ldr	r2, [r3, #0]
    72f8:	f7ff fbd1 	bl	6a9e <_svfprintf_r+0x466>
    72fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    72fe:	68ba      	ldr	r2, [r7, #8]
    7300:	6033      	str	r3, [r6, #0]
    7302:	9b18      	ldr	r3, [sp, #96]	; 0x60
    7304:	469c      	mov	ip, r3
    7306:	6073      	str	r3, [r6, #4]
    7308:	687b      	ldr	r3, [r7, #4]
    730a:	4462      	add	r2, ip
    730c:	3301      	adds	r3, #1
    730e:	0014      	movs	r4, r2
    7310:	60ba      	str	r2, [r7, #8]
    7312:	607b      	str	r3, [r7, #4]
    7314:	2b07      	cmp	r3, #7
    7316:	dd00      	ble.n	731a <_svfprintf_r+0xce2>
    7318:	e202      	b.n	7720 <_svfprintf_r+0x10e8>
    731a:	3608      	adds	r6, #8
    731c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    731e:	1e5d      	subs	r5, r3, #1
    7320:	2d00      	cmp	r5, #0
    7322:	dc00      	bgt.n	7326 <_svfprintf_r+0xcee>
    7324:	e57e      	b.n	6e24 <_svfprintf_r+0x7ec>
    7326:	4a70      	ldr	r2, [pc, #448]	; (74e8 <_svfprintf_r+0xeb0>)
    7328:	687b      	ldr	r3, [r7, #4]
    732a:	4691      	mov	r9, r2
    732c:	2d10      	cmp	r5, #16
    732e:	dd25      	ble.n	737c <_svfprintf_r+0xd44>
    7330:	2210      	movs	r2, #16
    7332:	0021      	movs	r1, r4
    7334:	4690      	mov	r8, r2
    7336:	9c09      	ldr	r4, [sp, #36]	; 0x24
    7338:	0032      	movs	r2, r6
    733a:	002e      	movs	r6, r5
    733c:	464d      	mov	r5, r9
    733e:	e003      	b.n	7348 <_svfprintf_r+0xd10>
    7340:	3208      	adds	r2, #8
    7342:	3e10      	subs	r6, #16
    7344:	2e10      	cmp	r6, #16
    7346:	dd15      	ble.n	7374 <_svfprintf_r+0xd3c>
    7348:	4640      	mov	r0, r8
    734a:	3110      	adds	r1, #16
    734c:	3301      	adds	r3, #1
    734e:	6015      	str	r5, [r2, #0]
    7350:	6050      	str	r0, [r2, #4]
    7352:	60b9      	str	r1, [r7, #8]
    7354:	607b      	str	r3, [r7, #4]
    7356:	2b07      	cmp	r3, #7
    7358:	ddf2      	ble.n	7340 <_svfprintf_r+0xd08>
    735a:	003a      	movs	r2, r7
    735c:	9906      	ldr	r1, [sp, #24]
    735e:	0020      	movs	r0, r4
    7360:	f002 fca8 	bl	9cb4 <__ssprint_r>
    7364:	2800      	cmp	r0, #0
    7366:	d001      	beq.n	736c <_svfprintf_r+0xd34>
    7368:	f7ff f9ed 	bl	6746 <_svfprintf_r+0x10e>
    736c:	68b9      	ldr	r1, [r7, #8]
    736e:	687b      	ldr	r3, [r7, #4]
    7370:	aa32      	add	r2, sp, #200	; 0xc8
    7372:	e7e6      	b.n	7342 <_svfprintf_r+0xd0a>
    7374:	46a9      	mov	r9, r5
    7376:	000c      	movs	r4, r1
    7378:	0035      	movs	r5, r6
    737a:	0016      	movs	r6, r2
    737c:	464a      	mov	r2, r9
    737e:	1964      	adds	r4, r4, r5
    7380:	3301      	adds	r3, #1
    7382:	6032      	str	r2, [r6, #0]
    7384:	6075      	str	r5, [r6, #4]
    7386:	60bc      	str	r4, [r7, #8]
    7388:	607b      	str	r3, [r7, #4]
    738a:	2b07      	cmp	r3, #7
    738c:	dc00      	bgt.n	7390 <_svfprintf_r+0xd58>
    738e:	e548      	b.n	6e22 <_svfprintf_r+0x7ea>
    7390:	e5e5      	b.n	6f5e <_svfprintf_r+0x926>
    7392:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7394:	2b09      	cmp	r3, #9
    7396:	d900      	bls.n	739a <_svfprintf_r+0xd62>
    7398:	e730      	b.n	71fc <_svfprintf_r+0xbc4>
    739a:	9c08      	ldr	r4, [sp, #32]
    739c:	2227      	movs	r2, #39	; 0x27
    739e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    73a0:	a928      	add	r1, sp, #160	; 0xa0
    73a2:	3330      	adds	r3, #48	; 0x30
    73a4:	548b      	strb	r3, [r1, r2]
    73a6:	2301      	movs	r3, #1
    73a8:	aa16      	add	r2, sp, #88	; 0x58
    73aa:	4694      	mov	ip, r2
    73ac:	930e      	str	r3, [sp, #56]	; 0x38
    73ae:	336e      	adds	r3, #110	; 0x6e
    73b0:	4463      	add	r3, ip
    73b2:	9408      	str	r4, [sp, #32]
    73b4:	9311      	str	r3, [sp, #68]	; 0x44
    73b6:	f7ff fa4f 	bl	6858 <_svfprintf_r+0x220>
    73ba:	2b30      	cmp	r3, #48	; 0x30
    73bc:	d100      	bne.n	73c0 <_svfprintf_r+0xd88>
    73be:	e20b      	b.n	77d8 <_svfprintf_r+0x11a0>
    73c0:	2330      	movs	r3, #48	; 0x30
    73c2:	3a02      	subs	r2, #2
    73c4:	7013      	strb	r3, [r2, #0]
    73c6:	ab32      	add	r3, sp, #200	; 0xc8
    73c8:	1a9b      	subs	r3, r3, r2
    73ca:	930e      	str	r3, [sp, #56]	; 0x38
    73cc:	9211      	str	r2, [sp, #68]	; 0x44
    73ce:	f7ff fa43 	bl	6858 <_svfprintf_r+0x220>
    73d2:	46b0      	mov	r8, r6
    73d4:	46a1      	mov	r9, r4
    73d6:	0016      	movs	r6, r2
    73d8:	000c      	movs	r4, r1
    73da:	464a      	mov	r2, r9
    73dc:	6032      	str	r2, [r6, #0]
    73de:	4642      	mov	r2, r8
    73e0:	4444      	add	r4, r8
    73e2:	3301      	adds	r3, #1
    73e4:	6072      	str	r2, [r6, #4]
    73e6:	60bc      	str	r4, [r7, #8]
    73e8:	607b      	str	r3, [r7, #4]
    73ea:	2b07      	cmp	r3, #7
    73ec:	dd00      	ble.n	73f0 <_svfprintf_r+0xdb8>
    73ee:	e29c      	b.n	792a <_svfprintf_r+0x12f2>
    73f0:	3608      	adds	r6, #8
    73f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    73f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
    73f6:	4293      	cmp	r3, r2
    73f8:	db4c      	blt.n	7494 <_svfprintf_r+0xe5c>
    73fa:	9a08      	ldr	r2, [sp, #32]
    73fc:	07d2      	lsls	r2, r2, #31
    73fe:	d449      	bmi.n	7494 <_svfprintf_r+0xe5c>
    7400:	9a14      	ldr	r2, [sp, #80]	; 0x50
    7402:	9913      	ldr	r1, [sp, #76]	; 0x4c
    7404:	1ad3      	subs	r3, r2, r3
    7406:	1a52      	subs	r2, r2, r1
    7408:	4690      	mov	r8, r2
    740a:	429a      	cmp	r2, r3
    740c:	dd00      	ble.n	7410 <_svfprintf_r+0xdd8>
    740e:	4698      	mov	r8, r3
    7410:	4642      	mov	r2, r8
    7412:	2a00      	cmp	r2, #0
    7414:	dd0f      	ble.n	7436 <_svfprintf_r+0xdfe>
    7416:	9913      	ldr	r1, [sp, #76]	; 0x4c
    7418:	9a11      	ldr	r2, [sp, #68]	; 0x44
    741a:	468c      	mov	ip, r1
    741c:	4462      	add	r2, ip
    741e:	6032      	str	r2, [r6, #0]
    7420:	4642      	mov	r2, r8
    7422:	6072      	str	r2, [r6, #4]
    7424:	687a      	ldr	r2, [r7, #4]
    7426:	4444      	add	r4, r8
    7428:	3201      	adds	r2, #1
    742a:	60bc      	str	r4, [r7, #8]
    742c:	607a      	str	r2, [r7, #4]
    742e:	2a07      	cmp	r2, #7
    7430:	dd00      	ble.n	7434 <_svfprintf_r+0xdfc>
    7432:	e286      	b.n	7942 <_svfprintf_r+0x130a>
    7434:	3608      	adds	r6, #8
    7436:	4642      	mov	r2, r8
    7438:	43d5      	mvns	r5, r2
    743a:	17ed      	asrs	r5, r5, #31
    743c:	4015      	ands	r5, r2
    743e:	1b5d      	subs	r5, r3, r5
    7440:	2d00      	cmp	r5, #0
    7442:	dc00      	bgt.n	7446 <_svfprintf_r+0xe0e>
    7444:	e4ee      	b.n	6e24 <_svfprintf_r+0x7ec>
    7446:	4a28      	ldr	r2, [pc, #160]	; (74e8 <_svfprintf_r+0xeb0>)
    7448:	687b      	ldr	r3, [r7, #4]
    744a:	4691      	mov	r9, r2
    744c:	2d10      	cmp	r5, #16
    744e:	dd95      	ble.n	737c <_svfprintf_r+0xd44>
    7450:	2210      	movs	r2, #16
    7452:	0021      	movs	r1, r4
    7454:	4690      	mov	r8, r2
    7456:	9c09      	ldr	r4, [sp, #36]	; 0x24
    7458:	0032      	movs	r2, r6
    745a:	002e      	movs	r6, r5
    745c:	464d      	mov	r5, r9
    745e:	e003      	b.n	7468 <_svfprintf_r+0xe30>
    7460:	3208      	adds	r2, #8
    7462:	3e10      	subs	r6, #16
    7464:	2e10      	cmp	r6, #16
    7466:	dd85      	ble.n	7374 <_svfprintf_r+0xd3c>
    7468:	4640      	mov	r0, r8
    746a:	3110      	adds	r1, #16
    746c:	3301      	adds	r3, #1
    746e:	6015      	str	r5, [r2, #0]
    7470:	6050      	str	r0, [r2, #4]
    7472:	60b9      	str	r1, [r7, #8]
    7474:	607b      	str	r3, [r7, #4]
    7476:	2b07      	cmp	r3, #7
    7478:	ddf2      	ble.n	7460 <_svfprintf_r+0xe28>
    747a:	003a      	movs	r2, r7
    747c:	9906      	ldr	r1, [sp, #24]
    747e:	0020      	movs	r0, r4
    7480:	f002 fc18 	bl	9cb4 <__ssprint_r>
    7484:	2800      	cmp	r0, #0
    7486:	d001      	beq.n	748c <_svfprintf_r+0xe54>
    7488:	f7ff f95d 	bl	6746 <_svfprintf_r+0x10e>
    748c:	68b9      	ldr	r1, [r7, #8]
    748e:	687b      	ldr	r3, [r7, #4]
    7490:	aa32      	add	r2, sp, #200	; 0xc8
    7492:	e7e6      	b.n	7462 <_svfprintf_r+0xe2a>
    7494:	9a19      	ldr	r2, [sp, #100]	; 0x64
    7496:	6032      	str	r2, [r6, #0]
    7498:	9a18      	ldr	r2, [sp, #96]	; 0x60
    749a:	4694      	mov	ip, r2
    749c:	6072      	str	r2, [r6, #4]
    749e:	687a      	ldr	r2, [r7, #4]
    74a0:	4464      	add	r4, ip
    74a2:	3201      	adds	r2, #1
    74a4:	60bc      	str	r4, [r7, #8]
    74a6:	607a      	str	r2, [r7, #4]
    74a8:	2a07      	cmp	r2, #7
    74aa:	dd00      	ble.n	74ae <_svfprintf_r+0xe76>
    74ac:	e230      	b.n	7910 <_svfprintf_r+0x12d8>
    74ae:	3608      	adds	r6, #8
    74b0:	e7a6      	b.n	7400 <_svfprintf_r+0xdc8>
    74b2:	003a      	movs	r2, r7
    74b4:	9906      	ldr	r1, [sp, #24]
    74b6:	9809      	ldr	r0, [sp, #36]	; 0x24
    74b8:	f002 fbfc 	bl	9cb4 <__ssprint_r>
    74bc:	2800      	cmp	r0, #0
    74be:	d001      	beq.n	74c4 <_svfprintf_r+0xe8c>
    74c0:	f7ff f941 	bl	6746 <_svfprintf_r+0x10e>
    74c4:	68bc      	ldr	r4, [r7, #8]
    74c6:	687b      	ldr	r3, [r7, #4]
    74c8:	ae32      	add	r6, sp, #200	; 0xc8
    74ca:	e513      	b.n	6ef4 <_svfprintf_r+0x8bc>
    74cc:	003a      	movs	r2, r7
    74ce:	9906      	ldr	r1, [sp, #24]
    74d0:	9809      	ldr	r0, [sp, #36]	; 0x24
    74d2:	f002 fbef 	bl	9cb4 <__ssprint_r>
    74d6:	2800      	cmp	r0, #0
    74d8:	d001      	beq.n	74de <_svfprintf_r+0xea6>
    74da:	f7ff f934 	bl	6746 <_svfprintf_r+0x10e>
    74de:	687b      	ldr	r3, [r7, #4]
    74e0:	68bc      	ldr	r4, [r7, #8]
    74e2:	4698      	mov	r8, r3
    74e4:	ae32      	add	r6, sp, #200	; 0xc8
    74e6:	e513      	b.n	6f10 <_svfprintf_r+0x8d8>
    74e8:	0000b7d0 	.word	0x0000b7d0
    74ec:	2307      	movs	r3, #7
    74ee:	3207      	adds	r2, #7
    74f0:	439a      	bics	r2, r3
    74f2:	3301      	adds	r3, #1
    74f4:	469c      	mov	ip, r3
    74f6:	4494      	add	ip, r2
    74f8:	4663      	mov	r3, ip
    74fa:	930f      	str	r3, [sp, #60]	; 0x3c
    74fc:	6853      	ldr	r3, [r2, #4]
    74fe:	6812      	ldr	r2, [r2, #0]
    7500:	930d      	str	r3, [sp, #52]	; 0x34
    7502:	920c      	str	r2, [sp, #48]	; 0x30
    7504:	2b00      	cmp	r3, #0
    7506:	db01      	blt.n	750c <_svfprintf_r+0xed4>
    7508:	f7ff f97a 	bl	6800 <_svfprintf_r+0x1c8>
    750c:	980c      	ldr	r0, [sp, #48]	; 0x30
    750e:	990d      	ldr	r1, [sp, #52]	; 0x34
    7510:	2300      	movs	r3, #0
    7512:	4242      	negs	r2, r0
    7514:	418b      	sbcs	r3, r1
    7516:	0011      	movs	r1, r2
    7518:	001a      	movs	r2, r3
    751a:	232d      	movs	r3, #45	; 0x2d
    751c:	a816      	add	r0, sp, #88	; 0x58
    751e:	77c3      	strb	r3, [r0, #31]
    7520:	0008      	movs	r0, r1
    7522:	4310      	orrs	r0, r2
    7524:	910c      	str	r1, [sp, #48]	; 0x30
    7526:	920d      	str	r2, [sp, #52]	; 0x34
    7528:	4698      	mov	r8, r3
    752a:	0002      	movs	r2, r0
    752c:	3b2c      	subs	r3, #44	; 0x2c
    752e:	f7ff f970 	bl	6812 <_svfprintf_r+0x1da>
    7532:	003a      	movs	r2, r7
    7534:	9906      	ldr	r1, [sp, #24]
    7536:	9809      	ldr	r0, [sp, #36]	; 0x24
    7538:	f002 fbbc 	bl	9cb4 <__ssprint_r>
    753c:	2800      	cmp	r0, #0
    753e:	d001      	beq.n	7544 <_svfprintf_r+0xf0c>
    7540:	f7ff f901 	bl	6746 <_svfprintf_r+0x10e>
    7544:	68bc      	ldr	r4, [r7, #8]
    7546:	ae32      	add	r6, sp, #200	; 0xc8
    7548:	e418      	b.n	6d7c <_svfprintf_r+0x744>
    754a:	9916      	ldr	r1, [sp, #88]	; 0x58
    754c:	9d15      	ldr	r5, [sp, #84]	; 0x54
    754e:	000a      	movs	r2, r1
    7550:	0008      	movs	r0, r1
    7552:	002b      	movs	r3, r5
    7554:	0029      	movs	r1, r5
    7556:	f003 fa25 	bl	a9a4 <__aeabi_dcmpun>
    755a:	2800      	cmp	r0, #0
    755c:	d000      	beq.n	7560 <_svfprintf_r+0xf28>
    755e:	e2e6      	b.n	7b2e <_svfprintf_r+0x14f6>
    7560:	4653      	mov	r3, sl
    7562:	3301      	adds	r3, #1
    7564:	d100      	bne.n	7568 <_svfprintf_r+0xf30>
    7566:	e20d      	b.n	7984 <_svfprintf_r+0x134c>
    7568:	2320      	movs	r3, #32
    756a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    756c:	439a      	bics	r2, r3
    756e:	920e      	str	r2, [sp, #56]	; 0x38
    7570:	2a47      	cmp	r2, #71	; 0x47
    7572:	d100      	bne.n	7576 <_svfprintf_r+0xf3e>
    7574:	e11c      	b.n	77b0 <_svfprintf_r+0x1178>
    7576:	2380      	movs	r3, #128	; 0x80
    7578:	005b      	lsls	r3, r3, #1
    757a:	4323      	orrs	r3, r4
    757c:	9308      	str	r3, [sp, #32]
    757e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    7580:	2b00      	cmp	r3, #0
    7582:	da00      	bge.n	7586 <_svfprintf_r+0xf4e>
    7584:	e221      	b.n	79ca <_svfprintf_r+0x1392>
    7586:	9a16      	ldr	r2, [sp, #88]	; 0x58
    7588:	9307      	str	r3, [sp, #28]
    758a:	2300      	movs	r3, #0
    758c:	4691      	mov	r9, r2
    758e:	9310      	str	r3, [sp, #64]	; 0x40
    7590:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7592:	2b66      	cmp	r3, #102	; 0x66
    7594:	d100      	bne.n	7598 <_svfprintf_r+0xf60>
    7596:	e1fc      	b.n	7992 <_svfprintf_r+0x135a>
    7598:	2b46      	cmp	r3, #70	; 0x46
    759a:	d100      	bne.n	759e <_svfprintf_r+0xf66>
    759c:	e0db      	b.n	7756 <_svfprintf_r+0x111e>
    759e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    75a0:	9809      	ldr	r0, [sp, #36]	; 0x24
    75a2:	3a45      	subs	r2, #69	; 0x45
    75a4:	0013      	movs	r3, r2
    75a6:	4259      	negs	r1, r3
    75a8:	4159      	adcs	r1, r3
    75aa:	ab20      	add	r3, sp, #128	; 0x80
    75ac:	000d      	movs	r5, r1
    75ae:	9303      	str	r3, [sp, #12]
    75b0:	ab1f      	add	r3, sp, #124	; 0x7c
    75b2:	9302      	str	r3, [sp, #8]
    75b4:	2302      	movs	r3, #2
    75b6:	aa23      	add	r2, sp, #140	; 0x8c
    75b8:	4455      	add	r5, sl
    75ba:	921b      	str	r2, [sp, #108]	; 0x6c
    75bc:	9204      	str	r2, [sp, #16]
    75be:	9300      	str	r3, [sp, #0]
    75c0:	9501      	str	r5, [sp, #4]
    75c2:	9b07      	ldr	r3, [sp, #28]
    75c4:	464a      	mov	r2, r9
    75c6:	f000 fbf9 	bl	7dbc <_dtoa_r>
    75ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
    75cc:	9011      	str	r0, [sp, #68]	; 0x44
    75ce:	2b67      	cmp	r3, #103	; 0x67
    75d0:	d000      	beq.n	75d4 <_svfprintf_r+0xf9c>
    75d2:	e239      	b.n	7a48 <_svfprintf_r+0x1410>
    75d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    75d6:	4698      	mov	r8, r3
    75d8:	44a8      	add	r8, r5
    75da:	07e3      	lsls	r3, r4, #31
    75dc:	d400      	bmi.n	75e0 <_svfprintf_r+0xfa8>
    75de:	e28b      	b.n	7af8 <_svfprintf_r+0x14c0>
    75e0:	2300      	movs	r3, #0
    75e2:	2200      	movs	r2, #0
    75e4:	4648      	mov	r0, r9
    75e6:	9907      	ldr	r1, [sp, #28]
    75e8:	f7fe fdaa 	bl	6140 <__aeabi_dcmpeq>
    75ec:	4643      	mov	r3, r8
    75ee:	2800      	cmp	r0, #0
    75f0:	d10a      	bne.n	7608 <_svfprintf_r+0xfd0>
    75f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    75f4:	4543      	cmp	r3, r8
    75f6:	d207      	bcs.n	7608 <_svfprintf_r+0xfd0>
    75f8:	2130      	movs	r1, #48	; 0x30
    75fa:	4640      	mov	r0, r8
    75fc:	1c5a      	adds	r2, r3, #1
    75fe:	9223      	str	r2, [sp, #140]	; 0x8c
    7600:	7019      	strb	r1, [r3, #0]
    7602:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    7604:	4298      	cmp	r0, r3
    7606:	d8f9      	bhi.n	75fc <_svfprintf_r+0xfc4>
    7608:	9a11      	ldr	r2, [sp, #68]	; 0x44
    760a:	1a9b      	subs	r3, r3, r2
    760c:	9314      	str	r3, [sp, #80]	; 0x50
    760e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7610:	2b47      	cmp	r3, #71	; 0x47
    7612:	d100      	bne.n	7616 <_svfprintf_r+0xfde>
    7614:	e0f6      	b.n	7804 <_svfprintf_r+0x11cc>
    7616:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7618:	2b65      	cmp	r3, #101	; 0x65
    761a:	dc00      	bgt.n	761e <_svfprintf_r+0xfe6>
    761c:	e226      	b.n	7a6c <_svfprintf_r+0x1434>
    761e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7620:	2b66      	cmp	r3, #102	; 0x66
    7622:	d100      	bne.n	7626 <_svfprintf_r+0xfee>
    7624:	e1f4      	b.n	7a10 <_svfprintf_r+0x13d8>
    7626:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    7628:	9313      	str	r3, [sp, #76]	; 0x4c
    762a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    762c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    762e:	0019      	movs	r1, r3
    7630:	4291      	cmp	r1, r2
    7632:	dd00      	ble.n	7636 <_svfprintf_r+0xffe>
    7634:	e1d4      	b.n	79e0 <_svfprintf_r+0x13a8>
    7636:	07e3      	lsls	r3, r4, #31
    7638:	d500      	bpl.n	763c <_svfprintf_r+0x1004>
    763a:	e249      	b.n	7ad0 <_svfprintf_r+0x1498>
    763c:	43d3      	mvns	r3, r2
    763e:	17db      	asrs	r3, r3, #31
    7640:	0011      	movs	r1, r2
    7642:	401a      	ands	r2, r3
    7644:	2367      	movs	r3, #103	; 0x67
    7646:	9207      	str	r2, [sp, #28]
    7648:	910e      	str	r1, [sp, #56]	; 0x38
    764a:	9312      	str	r3, [sp, #72]	; 0x48
    764c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    764e:	2b00      	cmp	r3, #0
    7650:	d000      	beq.n	7654 <_svfprintf_r+0x101c>
    7652:	e0cf      	b.n	77f4 <_svfprintf_r+0x11bc>
    7654:	ab16      	add	r3, sp, #88	; 0x58
    7656:	7fdb      	ldrb	r3, [r3, #31]
    7658:	4698      	mov	r8, r3
    765a:	2300      	movs	r3, #0
    765c:	469a      	mov	sl, r3
    765e:	f7ff f903 	bl	6868 <_svfprintf_r+0x230>
    7662:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7664:	990a      	ldr	r1, [sp, #40]	; 0x28
    7666:	6813      	ldr	r3, [r2, #0]
    7668:	6019      	str	r1, [r3, #0]
    766a:	0013      	movs	r3, r2
    766c:	3304      	adds	r3, #4
    766e:	930f      	str	r3, [sp, #60]	; 0x3c
    7670:	f7ff f80d 	bl	668e <_svfprintf_r+0x56>
    7674:	003a      	movs	r2, r7
    7676:	9906      	ldr	r1, [sp, #24]
    7678:	9809      	ldr	r0, [sp, #36]	; 0x24
    767a:	f002 fb1b 	bl	9cb4 <__ssprint_r>
    767e:	2800      	cmp	r0, #0
    7680:	d001      	beq.n	7686 <_svfprintf_r+0x104e>
    7682:	f7ff f860 	bl	6746 <_svfprintf_r+0x10e>
    7686:	ae32      	add	r6, sp, #200	; 0xc8
    7688:	e48e      	b.n	6fa8 <_svfprintf_r+0x970>
    768a:	4bde      	ldr	r3, [pc, #888]	; (7a04 <_svfprintf_r+0x13cc>)
    768c:	3401      	adds	r4, #1
    768e:	6033      	str	r3, [r6, #0]
    7690:	2301      	movs	r3, #1
    7692:	6073      	str	r3, [r6, #4]
    7694:	687b      	ldr	r3, [r7, #4]
    7696:	60bc      	str	r4, [r7, #8]
    7698:	3301      	adds	r3, #1
    769a:	607b      	str	r3, [r7, #4]
    769c:	2b07      	cmp	r3, #7
    769e:	dc7a      	bgt.n	7796 <_svfprintf_r+0x115e>
    76a0:	3608      	adds	r6, #8
    76a2:	2800      	cmp	r0, #0
    76a4:	d107      	bne.n	76b6 <_svfprintf_r+0x107e>
    76a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    76a8:	2b00      	cmp	r3, #0
    76aa:	d104      	bne.n	76b6 <_svfprintf_r+0x107e>
    76ac:	9b08      	ldr	r3, [sp, #32]
    76ae:	07db      	lsls	r3, r3, #31
    76b0:	d401      	bmi.n	76b6 <_svfprintf_r+0x107e>
    76b2:	f7ff fbb7 	bl	6e24 <_svfprintf_r+0x7ec>
    76b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
    76b8:	6033      	str	r3, [r6, #0]
    76ba:	9b18      	ldr	r3, [sp, #96]	; 0x60
    76bc:	1919      	adds	r1, r3, r4
    76be:	6073      	str	r3, [r6, #4]
    76c0:	687b      	ldr	r3, [r7, #4]
    76c2:	60b9      	str	r1, [r7, #8]
    76c4:	3301      	adds	r3, #1
    76c6:	607b      	str	r3, [r7, #4]
    76c8:	2b07      	cmp	r3, #7
    76ca:	dd00      	ble.n	76ce <_svfprintf_r+0x1096>
    76cc:	e1f2      	b.n	7ab4 <_svfprintf_r+0x147c>
    76ce:	0032      	movs	r2, r6
    76d0:	3208      	adds	r2, #8
    76d2:	2800      	cmp	r0, #0
    76d4:	da00      	bge.n	76d8 <_svfprintf_r+0x10a0>
    76d6:	e1cc      	b.n	7a72 <_svfprintf_r+0x143a>
    76d8:	9811      	ldr	r0, [sp, #68]	; 0x44
    76da:	3301      	adds	r3, #1
    76dc:	6010      	str	r0, [r2, #0]
    76de:	9814      	ldr	r0, [sp, #80]	; 0x50
    76e0:	607b      	str	r3, [r7, #4]
    76e2:	1844      	adds	r4, r0, r1
    76e4:	6050      	str	r0, [r2, #4]
    76e6:	60bc      	str	r4, [r7, #8]
    76e8:	2b07      	cmp	r3, #7
    76ea:	dd00      	ble.n	76ee <_svfprintf_r+0x10b6>
    76ec:	e437      	b.n	6f5e <_svfprintf_r+0x926>
    76ee:	3208      	adds	r2, #8
    76f0:	0016      	movs	r6, r2
    76f2:	f7ff fb97 	bl	6e24 <_svfprintf_r+0x7ec>
    76f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    76f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    76fa:	680b      	ldr	r3, [r1, #0]
    76fc:	601a      	str	r2, [r3, #0]
    76fe:	17d2      	asrs	r2, r2, #31
    7700:	605a      	str	r2, [r3, #4]
    7702:	000b      	movs	r3, r1
    7704:	3304      	adds	r3, #4
    7706:	930f      	str	r3, [sp, #60]	; 0x3c
    7708:	f7fe ffc1 	bl	668e <_svfprintf_r+0x56>
    770c:	464b      	mov	r3, r9
    770e:	3101      	adds	r1, #1
    7710:	431c      	orrs	r4, r3
    7712:	780b      	ldrb	r3, [r1, #0]
    7714:	f7fe fff4 	bl	6700 <_svfprintf_r+0xc8>
    7718:	4bbb      	ldr	r3, [pc, #748]	; (7a08 <_svfprintf_r+0x13d0>)
    771a:	9311      	str	r3, [sp, #68]	; 0x44
    771c:	f7ff f937 	bl	698e <_svfprintf_r+0x356>
    7720:	003a      	movs	r2, r7
    7722:	9906      	ldr	r1, [sp, #24]
    7724:	9809      	ldr	r0, [sp, #36]	; 0x24
    7726:	f002 fac5 	bl	9cb4 <__ssprint_r>
    772a:	2800      	cmp	r0, #0
    772c:	d001      	beq.n	7732 <_svfprintf_r+0x10fa>
    772e:	f7ff f80a 	bl	6746 <_svfprintf_r+0x10e>
    7732:	68bc      	ldr	r4, [r7, #8]
    7734:	ae32      	add	r6, sp, #200	; 0xc8
    7736:	e5f1      	b.n	731c <_svfprintf_r+0xce4>
    7738:	2140      	movs	r1, #64	; 0x40
    773a:	9809      	ldr	r0, [sp, #36]	; 0x24
    773c:	f001 fc5c 	bl	8ff8 <_malloc_r>
    7740:	9b06      	ldr	r3, [sp, #24]
    7742:	6018      	str	r0, [r3, #0]
    7744:	6118      	str	r0, [r3, #16]
    7746:	2800      	cmp	r0, #0
    7748:	d100      	bne.n	774c <_svfprintf_r+0x1114>
    774a:	e24f      	b.n	7bec <_svfprintf_r+0x15b4>
    774c:	2340      	movs	r3, #64	; 0x40
    774e:	9a06      	ldr	r2, [sp, #24]
    7750:	6153      	str	r3, [r2, #20]
    7752:	f7fe ff8e 	bl	6672 <_svfprintf_r+0x3a>
    7756:	ab23      	add	r3, sp, #140	; 0x8c
    7758:	931b      	str	r3, [sp, #108]	; 0x6c
    775a:	9304      	str	r3, [sp, #16]
    775c:	ab20      	add	r3, sp, #128	; 0x80
    775e:	9303      	str	r3, [sp, #12]
    7760:	ab1f      	add	r3, sp, #124	; 0x7c
    7762:	9302      	str	r3, [sp, #8]
    7764:	4653      	mov	r3, sl
    7766:	9301      	str	r3, [sp, #4]
    7768:	2303      	movs	r3, #3
    776a:	464a      	mov	r2, r9
    776c:	9300      	str	r3, [sp, #0]
    776e:	9809      	ldr	r0, [sp, #36]	; 0x24
    7770:	9b07      	ldr	r3, [sp, #28]
    7772:	f000 fb23 	bl	7dbc <_dtoa_r>
    7776:	4655      	mov	r5, sl
    7778:	9011      	str	r0, [sp, #68]	; 0x44
    777a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    777c:	4698      	mov	r8, r3
    777e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7780:	44a8      	add	r8, r5
    7782:	2b46      	cmp	r3, #70	; 0x46
    7784:	d000      	beq.n	7788 <_svfprintf_r+0x1150>
    7786:	e72b      	b.n	75e0 <_svfprintf_r+0xfa8>
    7788:	9b11      	ldr	r3, [sp, #68]	; 0x44
    778a:	781b      	ldrb	r3, [r3, #0]
    778c:	2b30      	cmp	r3, #48	; 0x30
    778e:	d016      	beq.n	77be <_svfprintf_r+0x1186>
    7790:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    7792:	4498      	add	r8, r3
    7794:	e724      	b.n	75e0 <_svfprintf_r+0xfa8>
    7796:	003a      	movs	r2, r7
    7798:	9906      	ldr	r1, [sp, #24]
    779a:	9809      	ldr	r0, [sp, #36]	; 0x24
    779c:	f002 fa8a 	bl	9cb4 <__ssprint_r>
    77a0:	2800      	cmp	r0, #0
    77a2:	d001      	beq.n	77a8 <_svfprintf_r+0x1170>
    77a4:	f7fe ffcf 	bl	6746 <_svfprintf_r+0x10e>
    77a8:	981f      	ldr	r0, [sp, #124]	; 0x7c
    77aa:	68bc      	ldr	r4, [r7, #8]
    77ac:	ae32      	add	r6, sp, #200	; 0xc8
    77ae:	e778      	b.n	76a2 <_svfprintf_r+0x106a>
    77b0:	4653      	mov	r3, sl
    77b2:	2b00      	cmp	r3, #0
    77b4:	d000      	beq.n	77b8 <_svfprintf_r+0x1180>
    77b6:	e6de      	b.n	7576 <_svfprintf_r+0xf3e>
    77b8:	3301      	adds	r3, #1
    77ba:	469a      	mov	sl, r3
    77bc:	e6db      	b.n	7576 <_svfprintf_r+0xf3e>
    77be:	2200      	movs	r2, #0
    77c0:	2300      	movs	r3, #0
    77c2:	4648      	mov	r0, r9
    77c4:	9907      	ldr	r1, [sp, #28]
    77c6:	f7fe fcbb 	bl	6140 <__aeabi_dcmpeq>
    77ca:	2800      	cmp	r0, #0
    77cc:	d1e0      	bne.n	7790 <_svfprintf_r+0x1158>
    77ce:	2301      	movs	r3, #1
    77d0:	1b5b      	subs	r3, r3, r5
    77d2:	931f      	str	r3, [sp, #124]	; 0x7c
    77d4:	4498      	add	r8, r3
    77d6:	e703      	b.n	75e0 <_svfprintf_r+0xfa8>
    77d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    77da:	ab32      	add	r3, sp, #200	; 0xc8
    77dc:	1a9b      	subs	r3, r3, r2
    77de:	930e      	str	r3, [sp, #56]	; 0x38
    77e0:	f7ff f83a 	bl	6858 <_svfprintf_r+0x220>
    77e4:	9811      	ldr	r0, [sp, #68]	; 0x44
    77e6:	f7fe fef5 	bl	65d4 <strlen>
    77ea:	0002      	movs	r2, r0
    77ec:	900e      	str	r0, [sp, #56]	; 0x38
    77ee:	0003      	movs	r3, r0
    77f0:	f7ff f9cd 	bl	6b8e <_svfprintf_r+0x556>
    77f4:	232d      	movs	r3, #45	; 0x2d
    77f6:	aa16      	add	r2, sp, #88	; 0x58
    77f8:	77d3      	strb	r3, [r2, #31]
    77fa:	4698      	mov	r8, r3
    77fc:	2300      	movs	r3, #0
    77fe:	469a      	mov	sl, r3
    7800:	f7ff f835 	bl	686e <_svfprintf_r+0x236>
    7804:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    7806:	9313      	str	r3, [sp, #76]	; 0x4c
    7808:	1cda      	adds	r2, r3, #3
    780a:	db02      	blt.n	7812 <_svfprintf_r+0x11da>
    780c:	459a      	cmp	sl, r3
    780e:	db00      	blt.n	7812 <_svfprintf_r+0x11da>
    7810:	e70b      	b.n	762a <_svfprintf_r+0xff2>
    7812:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7814:	3b02      	subs	r3, #2
    7816:	9312      	str	r3, [sp, #72]	; 0x48
    7818:	222c      	movs	r2, #44	; 0x2c
    781a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    781c:	2148      	movs	r1, #72	; 0x48
    781e:	1e5d      	subs	r5, r3, #1
    7820:	ab16      	add	r3, sp, #88	; 0x58
    7822:	189b      	adds	r3, r3, r2
    7824:	466a      	mov	r2, sp
    7826:	1852      	adds	r2, r2, r1
    7828:	7812      	ldrb	r2, [r2, #0]
    782a:	951f      	str	r5, [sp, #124]	; 0x7c
    782c:	701a      	strb	r2, [r3, #0]
    782e:	2d00      	cmp	r5, #0
    7830:	da00      	bge.n	7834 <_svfprintf_r+0x11fc>
    7832:	e1a4      	b.n	7b7e <_svfprintf_r+0x1546>
    7834:	212d      	movs	r1, #45	; 0x2d
    7836:	232b      	movs	r3, #43	; 0x2b
    7838:	aa16      	add	r2, sp, #88	; 0x58
    783a:	1852      	adds	r2, r2, r1
    783c:	7013      	strb	r3, [r2, #0]
    783e:	2d09      	cmp	r5, #9
    7840:	dc00      	bgt.n	7844 <_svfprintf_r+0x120c>
    7842:	e14c      	b.n	7ade <_svfprintf_r+0x14a6>
    7844:	aa16      	add	r2, sp, #88	; 0x58
    7846:	233b      	movs	r3, #59	; 0x3b
    7848:	4694      	mov	ip, r2
    784a:	4463      	add	r3, ip
    784c:	469a      	mov	sl, r3
    784e:	46b1      	mov	r9, r6
    7850:	46a0      	mov	r8, r4
    7852:	4656      	mov	r6, sl
    7854:	e000      	b.n	7858 <_svfprintf_r+0x1220>
    7856:	0026      	movs	r6, r4
    7858:	0028      	movs	r0, r5
    785a:	210a      	movs	r1, #10
    785c:	f7fc fb1e 	bl	3e9c <__aeabi_idivmod>
    7860:	1e74      	subs	r4, r6, #1
    7862:	3130      	adds	r1, #48	; 0x30
    7864:	7021      	strb	r1, [r4, #0]
    7866:	0028      	movs	r0, r5
    7868:	210a      	movs	r1, #10
    786a:	f7fc fa31 	bl	3cd0 <__divsi3>
    786e:	0005      	movs	r5, r0
    7870:	2809      	cmp	r0, #9
    7872:	dcf0      	bgt.n	7856 <_svfprintf_r+0x121e>
    7874:	0023      	movs	r3, r4
    7876:	4644      	mov	r4, r8
    7878:	46b0      	mov	r8, r6
    787a:	464e      	mov	r6, r9
    787c:	4699      	mov	r9, r3
    787e:	0003      	movs	r3, r0
    7880:	3330      	adds	r3, #48	; 0x30
    7882:	b2d8      	uxtb	r0, r3
    7884:	4643      	mov	r3, r8
    7886:	3b02      	subs	r3, #2
    7888:	7018      	strb	r0, [r3, #0]
    788a:	459a      	cmp	sl, r3
    788c:	d800      	bhi.n	7890 <_svfprintf_r+0x1258>
    788e:	e1b4      	b.n	7bfa <_svfprintf_r+0x15c2>
    7890:	4642      	mov	r2, r8
    7892:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7894:	4645      	mov	r5, r8
    7896:	1a99      	subs	r1, r3, r2
    7898:	2301      	movs	r3, #1
    789a:	3107      	adds	r1, #7
    789c:	425b      	negs	r3, r3
    789e:	e001      	b.n	78a4 <_svfprintf_r+0x126c>
    78a0:	5ce8      	ldrb	r0, [r5, r3]
    78a2:	3301      	adds	r3, #1
    78a4:	aa21      	add	r2, sp, #132	; 0x84
    78a6:	18d2      	adds	r2, r2, r3
    78a8:	70d0      	strb	r0, [r2, #3]
    78aa:	428b      	cmp	r3, r1
    78ac:	d1f8      	bne.n	78a0 <_svfprintf_r+0x1268>
    78ae:	a916      	add	r1, sp, #88	; 0x58
    78b0:	468c      	mov	ip, r1
    78b2:	222e      	movs	r2, #46	; 0x2e
    78b4:	464b      	mov	r3, r9
    78b6:	4462      	add	r2, ip
    78b8:	4694      	mov	ip, r2
    78ba:	1afb      	subs	r3, r7, r3
    78bc:	4463      	add	r3, ip
    78be:	aa21      	add	r2, sp, #132	; 0x84
    78c0:	9914      	ldr	r1, [sp, #80]	; 0x50
    78c2:	1a9b      	subs	r3, r3, r2
    78c4:	469c      	mov	ip, r3
    78c6:	000a      	movs	r2, r1
    78c8:	4462      	add	r2, ip
    78ca:	931a      	str	r3, [sp, #104]	; 0x68
    78cc:	920e      	str	r2, [sp, #56]	; 0x38
    78ce:	2901      	cmp	r1, #1
    78d0:	dc00      	bgt.n	78d4 <_svfprintf_r+0x129c>
    78d2:	e145      	b.n	7b60 <_svfprintf_r+0x1528>
    78d4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    78d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    78d8:	4694      	mov	ip, r2
    78da:	4463      	add	r3, ip
    78dc:	001a      	movs	r2, r3
    78de:	930e      	str	r3, [sp, #56]	; 0x38
    78e0:	43db      	mvns	r3, r3
    78e2:	17db      	asrs	r3, r3, #31
    78e4:	401a      	ands	r2, r3
    78e6:	2300      	movs	r3, #0
    78e8:	9207      	str	r2, [sp, #28]
    78ea:	9313      	str	r3, [sp, #76]	; 0x4c
    78ec:	e6ae      	b.n	764c <_svfprintf_r+0x1014>
    78ee:	2301      	movs	r3, #1
    78f0:	425b      	negs	r3, r3
    78f2:	930a      	str	r3, [sp, #40]	; 0x28
    78f4:	f7fe ff2d 	bl	6752 <_svfprintf_r+0x11a>
    78f8:	003a      	movs	r2, r7
    78fa:	9906      	ldr	r1, [sp, #24]
    78fc:	9809      	ldr	r0, [sp, #36]	; 0x24
    78fe:	f002 f9d9 	bl	9cb4 <__ssprint_r>
    7902:	2800      	cmp	r0, #0
    7904:	d001      	beq.n	790a <_svfprintf_r+0x12d2>
    7906:	f7fe ff1e 	bl	6746 <_svfprintf_r+0x10e>
    790a:	68bc      	ldr	r4, [r7, #8]
    790c:	ae32      	add	r6, sp, #200	; 0xc8
    790e:	e43c      	b.n	718a <_svfprintf_r+0xb52>
    7910:	003a      	movs	r2, r7
    7912:	9906      	ldr	r1, [sp, #24]
    7914:	9809      	ldr	r0, [sp, #36]	; 0x24
    7916:	f002 f9cd 	bl	9cb4 <__ssprint_r>
    791a:	2800      	cmp	r0, #0
    791c:	d001      	beq.n	7922 <_svfprintf_r+0x12ea>
    791e:	f7fe ff12 	bl	6746 <_svfprintf_r+0x10e>
    7922:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    7924:	68bc      	ldr	r4, [r7, #8]
    7926:	ae32      	add	r6, sp, #200	; 0xc8
    7928:	e56a      	b.n	7400 <_svfprintf_r+0xdc8>
    792a:	003a      	movs	r2, r7
    792c:	9906      	ldr	r1, [sp, #24]
    792e:	9809      	ldr	r0, [sp, #36]	; 0x24
    7930:	f002 f9c0 	bl	9cb4 <__ssprint_r>
    7934:	2800      	cmp	r0, #0
    7936:	d001      	beq.n	793c <_svfprintf_r+0x1304>
    7938:	f7fe ff05 	bl	6746 <_svfprintf_r+0x10e>
    793c:	68bc      	ldr	r4, [r7, #8]
    793e:	ae32      	add	r6, sp, #200	; 0xc8
    7940:	e557      	b.n	73f2 <_svfprintf_r+0xdba>
    7942:	003a      	movs	r2, r7
    7944:	9906      	ldr	r1, [sp, #24]
    7946:	9809      	ldr	r0, [sp, #36]	; 0x24
    7948:	f002 f9b4 	bl	9cb4 <__ssprint_r>
    794c:	2800      	cmp	r0, #0
    794e:	d001      	beq.n	7954 <_svfprintf_r+0x131c>
    7950:	f7fe fef9 	bl	6746 <_svfprintf_r+0x10e>
    7954:	9b14      	ldr	r3, [sp, #80]	; 0x50
    7956:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    7958:	68bc      	ldr	r4, [r7, #8]
    795a:	1a9b      	subs	r3, r3, r2
    795c:	ae32      	add	r6, sp, #200	; 0xc8
    795e:	e56a      	b.n	7436 <_svfprintf_r+0xdfe>
    7960:	4653      	mov	r3, sl
    7962:	9307      	str	r3, [sp, #28]
    7964:	2b06      	cmp	r3, #6
    7966:	d901      	bls.n	796c <_svfprintf_r+0x1334>
    7968:	2306      	movs	r3, #6
    796a:	9307      	str	r3, [sp, #28]
    796c:	9b07      	ldr	r3, [sp, #28]
    796e:	950f      	str	r5, [sp, #60]	; 0x3c
    7970:	930e      	str	r3, [sp, #56]	; 0x38
    7972:	2300      	movs	r3, #0
    7974:	4698      	mov	r8, r3
    7976:	469a      	mov	sl, r3
    7978:	9313      	str	r3, [sp, #76]	; 0x4c
    797a:	4b24      	ldr	r3, [pc, #144]	; (7a0c <_svfprintf_r+0x13d4>)
    797c:	9408      	str	r4, [sp, #32]
    797e:	9311      	str	r3, [sp, #68]	; 0x44
    7980:	f7fe ff78 	bl	6874 <_svfprintf_r+0x23c>
    7984:	2320      	movs	r3, #32
    7986:	9a12      	ldr	r2, [sp, #72]	; 0x48
    7988:	439a      	bics	r2, r3
    798a:	3b1a      	subs	r3, #26
    798c:	920e      	str	r2, [sp, #56]	; 0x38
    798e:	469a      	mov	sl, r3
    7990:	e5f1      	b.n	7576 <_svfprintf_r+0xf3e>
    7992:	ab23      	add	r3, sp, #140	; 0x8c
    7994:	931b      	str	r3, [sp, #108]	; 0x6c
    7996:	9304      	str	r3, [sp, #16]
    7998:	ab20      	add	r3, sp, #128	; 0x80
    799a:	9303      	str	r3, [sp, #12]
    799c:	ab1f      	add	r3, sp, #124	; 0x7c
    799e:	9302      	str	r3, [sp, #8]
    79a0:	4653      	mov	r3, sl
    79a2:	9301      	str	r3, [sp, #4]
    79a4:	2303      	movs	r3, #3
    79a6:	464a      	mov	r2, r9
    79a8:	9300      	str	r3, [sp, #0]
    79aa:	9809      	ldr	r0, [sp, #36]	; 0x24
    79ac:	9b07      	ldr	r3, [sp, #28]
    79ae:	f000 fa05 	bl	7dbc <_dtoa_r>
    79b2:	0003      	movs	r3, r0
    79b4:	4453      	add	r3, sl
    79b6:	9011      	str	r0, [sp, #68]	; 0x44
    79b8:	4698      	mov	r8, r3
    79ba:	4655      	mov	r5, sl
    79bc:	e6e4      	b.n	7788 <_svfprintf_r+0x1150>
    79be:	232d      	movs	r3, #45	; 0x2d
    79c0:	aa16      	add	r2, sp, #88	; 0x58
    79c2:	77d3      	strb	r3, [r2, #31]
    79c4:	4698      	mov	r8, r3
    79c6:	f7fe ffdb 	bl	6980 <_svfprintf_r+0x348>
    79ca:	2280      	movs	r2, #128	; 0x80
    79cc:	0612      	lsls	r2, r2, #24
    79ce:	4694      	mov	ip, r2
    79d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    79d2:	4699      	mov	r9, r3
    79d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    79d6:	4463      	add	r3, ip
    79d8:	9307      	str	r3, [sp, #28]
    79da:	232d      	movs	r3, #45	; 0x2d
    79dc:	9310      	str	r3, [sp, #64]	; 0x40
    79de:	e5d7      	b.n	7590 <_svfprintf_r+0xf58>
    79e0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    79e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    79e4:	4694      	mov	ip, r2
    79e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    79e8:	4463      	add	r3, ip
    79ea:	930e      	str	r3, [sp, #56]	; 0x38
    79ec:	2a00      	cmp	r2, #0
    79ee:	dc00      	bgt.n	79f2 <_svfprintf_r+0x13ba>
    79f0:	e0ce      	b.n	7b90 <_svfprintf_r+0x1558>
    79f2:	001a      	movs	r2, r3
    79f4:	43db      	mvns	r3, r3
    79f6:	17db      	asrs	r3, r3, #31
    79f8:	401a      	ands	r2, r3
    79fa:	2367      	movs	r3, #103	; 0x67
    79fc:	9207      	str	r2, [sp, #28]
    79fe:	9312      	str	r3, [sp, #72]	; 0x48
    7a00:	e624      	b.n	764c <_svfprintf_r+0x1014>
    7a02:	46c0      	nop			; (mov r8, r8)
    7a04:	0000b7bc 	.word	0x0000b7bc
    7a08:	0000b780 	.word	0x0000b780
    7a0c:	0000b7b4 	.word	0x0000b7b4
    7a10:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    7a12:	9313      	str	r3, [sp, #76]	; 0x4c
    7a14:	2b00      	cmp	r3, #0
    7a16:	dc00      	bgt.n	7a1a <_svfprintf_r+0x13e2>
    7a18:	e0d5      	b.n	7bc6 <_svfprintf_r+0x158e>
    7a1a:	4652      	mov	r2, sl
    7a1c:	2a00      	cmp	r2, #0
    7a1e:	d000      	beq.n	7a22 <_svfprintf_r+0x13ea>
    7a20:	e092      	b.n	7b48 <_svfprintf_r+0x1510>
    7a22:	07e2      	lsls	r2, r4, #31
    7a24:	d500      	bpl.n	7a28 <_svfprintf_r+0x13f0>
    7a26:	e08f      	b.n	7b48 <_svfprintf_r+0x1510>
    7a28:	9307      	str	r3, [sp, #28]
    7a2a:	930e      	str	r3, [sp, #56]	; 0x38
    7a2c:	e60e      	b.n	764c <_svfprintf_r+0x1014>
    7a2e:	ab16      	add	r3, sp, #88	; 0x58
    7a30:	7fdb      	ldrb	r3, [r3, #31]
    7a32:	950f      	str	r5, [sp, #60]	; 0x3c
    7a34:	4698      	mov	r8, r3
    7a36:	4653      	mov	r3, sl
    7a38:	9307      	str	r3, [sp, #28]
    7a3a:	930e      	str	r3, [sp, #56]	; 0x38
    7a3c:	2300      	movs	r3, #0
    7a3e:	9408      	str	r4, [sp, #32]
    7a40:	469a      	mov	sl, r3
    7a42:	9313      	str	r3, [sp, #76]	; 0x4c
    7a44:	f7fe ff10 	bl	6868 <_svfprintf_r+0x230>
    7a48:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7a4a:	4698      	mov	r8, r3
    7a4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7a4e:	44a8      	add	r8, r5
    7a50:	2b47      	cmp	r3, #71	; 0x47
    7a52:	d000      	beq.n	7a56 <_svfprintf_r+0x141e>
    7a54:	e5c4      	b.n	75e0 <_svfprintf_r+0xfa8>
    7a56:	07e3      	lsls	r3, r4, #31
    7a58:	d500      	bpl.n	7a5c <_svfprintf_r+0x1424>
    7a5a:	e68e      	b.n	777a <_svfprintf_r+0x1142>
    7a5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    7a5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    7a60:	1a9b      	subs	r3, r3, r2
    7a62:	9314      	str	r3, [sp, #80]	; 0x50
    7a64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7a66:	2b47      	cmp	r3, #71	; 0x47
    7a68:	d100      	bne.n	7a6c <_svfprintf_r+0x1434>
    7a6a:	e6cb      	b.n	7804 <_svfprintf_r+0x11cc>
    7a6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    7a6e:	9313      	str	r3, [sp, #76]	; 0x4c
    7a70:	e6d2      	b.n	7818 <_svfprintf_r+0x11e0>
    7a72:	4244      	negs	r4, r0
    7a74:	3010      	adds	r0, #16
    7a76:	db00      	blt.n	7a7a <_svfprintf_r+0x1442>
    7a78:	e0d0      	b.n	7c1c <_svfprintf_r+0x15e4>
    7a7a:	486e      	ldr	r0, [pc, #440]	; (7c34 <_svfprintf_r+0x15fc>)
    7a7c:	2610      	movs	r6, #16
    7a7e:	0005      	movs	r5, r0
    7a80:	e003      	b.n	7a8a <_svfprintf_r+0x1452>
    7a82:	3208      	adds	r2, #8
    7a84:	3c10      	subs	r4, #16
    7a86:	2c10      	cmp	r4, #16
    7a88:	dd38      	ble.n	7afc <_svfprintf_r+0x14c4>
    7a8a:	3110      	adds	r1, #16
    7a8c:	3301      	adds	r3, #1
    7a8e:	6015      	str	r5, [r2, #0]
    7a90:	6056      	str	r6, [r2, #4]
    7a92:	60b9      	str	r1, [r7, #8]
    7a94:	607b      	str	r3, [r7, #4]
    7a96:	2b07      	cmp	r3, #7
    7a98:	ddf3      	ble.n	7a82 <_svfprintf_r+0x144a>
    7a9a:	003a      	movs	r2, r7
    7a9c:	9906      	ldr	r1, [sp, #24]
    7a9e:	9809      	ldr	r0, [sp, #36]	; 0x24
    7aa0:	f002 f908 	bl	9cb4 <__ssprint_r>
    7aa4:	2800      	cmp	r0, #0
    7aa6:	d001      	beq.n	7aac <_svfprintf_r+0x1474>
    7aa8:	f7fe fe4d 	bl	6746 <_svfprintf_r+0x10e>
    7aac:	68b9      	ldr	r1, [r7, #8]
    7aae:	687b      	ldr	r3, [r7, #4]
    7ab0:	aa32      	add	r2, sp, #200	; 0xc8
    7ab2:	e7e7      	b.n	7a84 <_svfprintf_r+0x144c>
    7ab4:	003a      	movs	r2, r7
    7ab6:	9906      	ldr	r1, [sp, #24]
    7ab8:	9809      	ldr	r0, [sp, #36]	; 0x24
    7aba:	f002 f8fb 	bl	9cb4 <__ssprint_r>
    7abe:	2800      	cmp	r0, #0
    7ac0:	d001      	beq.n	7ac6 <_svfprintf_r+0x148e>
    7ac2:	f7fe fe40 	bl	6746 <_svfprintf_r+0x10e>
    7ac6:	981f      	ldr	r0, [sp, #124]	; 0x7c
    7ac8:	68b9      	ldr	r1, [r7, #8]
    7aca:	687b      	ldr	r3, [r7, #4]
    7acc:	aa32      	add	r2, sp, #200	; 0xc8
    7ace:	e600      	b.n	76d2 <_svfprintf_r+0x109a>
    7ad0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    7ad2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7ad4:	4694      	mov	ip, r2
    7ad6:	4463      	add	r3, ip
    7ad8:	001a      	movs	r2, r3
    7ada:	930e      	str	r3, [sp, #56]	; 0x38
    7adc:	e78a      	b.n	79f4 <_svfprintf_r+0x13bc>
    7ade:	212e      	movs	r1, #46	; 0x2e
    7ae0:	2330      	movs	r3, #48	; 0x30
    7ae2:	aa16      	add	r2, sp, #88	; 0x58
    7ae4:	1852      	adds	r2, r2, r1
    7ae6:	7013      	strb	r3, [r2, #0]
    7ae8:	002b      	movs	r3, r5
    7aea:	aa16      	add	r2, sp, #88	; 0x58
    7aec:	3101      	adds	r1, #1
    7aee:	3330      	adds	r3, #48	; 0x30
    7af0:	1852      	adds	r2, r2, r1
    7af2:	7013      	strb	r3, [r2, #0]
    7af4:	ab22      	add	r3, sp, #136	; 0x88
    7af6:	e6e2      	b.n	78be <_svfprintf_r+0x1286>
    7af8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    7afa:	e585      	b.n	7608 <_svfprintf_r+0xfd0>
    7afc:	46a9      	mov	r9, r5
    7afe:	4648      	mov	r0, r9
    7b00:	1909      	adds	r1, r1, r4
    7b02:	3301      	adds	r3, #1
    7b04:	6010      	str	r0, [r2, #0]
    7b06:	6054      	str	r4, [r2, #4]
    7b08:	60b9      	str	r1, [r7, #8]
    7b0a:	3208      	adds	r2, #8
    7b0c:	607b      	str	r3, [r7, #4]
    7b0e:	2b07      	cmp	r3, #7
    7b10:	dc00      	bgt.n	7b14 <_svfprintf_r+0x14dc>
    7b12:	e5e1      	b.n	76d8 <_svfprintf_r+0x10a0>
    7b14:	003a      	movs	r2, r7
    7b16:	9906      	ldr	r1, [sp, #24]
    7b18:	9809      	ldr	r0, [sp, #36]	; 0x24
    7b1a:	f002 f8cb 	bl	9cb4 <__ssprint_r>
    7b1e:	2800      	cmp	r0, #0
    7b20:	d001      	beq.n	7b26 <_svfprintf_r+0x14ee>
    7b22:	f7fe fe10 	bl	6746 <_svfprintf_r+0x10e>
    7b26:	68b9      	ldr	r1, [r7, #8]
    7b28:	687b      	ldr	r3, [r7, #4]
    7b2a:	aa32      	add	r2, sp, #200	; 0xc8
    7b2c:	e5d4      	b.n	76d8 <_svfprintf_r+0x10a0>
    7b2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    7b30:	2b00      	cmp	r3, #0
    7b32:	db38      	blt.n	7ba6 <_svfprintf_r+0x156e>
    7b34:	ab16      	add	r3, sp, #88	; 0x58
    7b36:	7fdb      	ldrb	r3, [r3, #31]
    7b38:	4698      	mov	r8, r3
    7b3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7b3c:	2b47      	cmp	r3, #71	; 0x47
    7b3e:	dc2e      	bgt.n	7b9e <_svfprintf_r+0x1566>
    7b40:	4b3d      	ldr	r3, [pc, #244]	; (7c38 <_svfprintf_r+0x1600>)
    7b42:	9311      	str	r3, [sp, #68]	; 0x44
    7b44:	f7fe ff23 	bl	698e <_svfprintf_r+0x356>
    7b48:	9a18      	ldr	r2, [sp, #96]	; 0x60
    7b4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7b4c:	4694      	mov	ip, r2
    7b4e:	4463      	add	r3, ip
    7b50:	4453      	add	r3, sl
    7b52:	001a      	movs	r2, r3
    7b54:	930e      	str	r3, [sp, #56]	; 0x38
    7b56:	43db      	mvns	r3, r3
    7b58:	17db      	asrs	r3, r3, #31
    7b5a:	401a      	ands	r2, r3
    7b5c:	9207      	str	r2, [sp, #28]
    7b5e:	e575      	b.n	764c <_svfprintf_r+0x1014>
    7b60:	2301      	movs	r3, #1
    7b62:	4023      	ands	r3, r4
    7b64:	9313      	str	r3, [sp, #76]	; 0x4c
    7b66:	d000      	beq.n	7b6a <_svfprintf_r+0x1532>
    7b68:	e6b4      	b.n	78d4 <_svfprintf_r+0x129c>
    7b6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7b6c:	43d3      	mvns	r3, r2
    7b6e:	17db      	asrs	r3, r3, #31
    7b70:	401a      	ands	r2, r3
    7b72:	9207      	str	r2, [sp, #28]
    7b74:	e56a      	b.n	764c <_svfprintf_r+0x1014>
    7b76:	4a2f      	ldr	r2, [pc, #188]	; (7c34 <_svfprintf_r+0x15fc>)
    7b78:	687b      	ldr	r3, [r7, #4]
    7b7a:	4691      	mov	r9, r2
    7b7c:	e42d      	b.n	73da <_svfprintf_r+0xda2>
    7b7e:	2301      	movs	r3, #1
    7b80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    7b82:	391b      	subs	r1, #27
    7b84:	1a9d      	subs	r5, r3, r2
    7b86:	aa16      	add	r2, sp, #88	; 0x58
    7b88:	332c      	adds	r3, #44	; 0x2c
    7b8a:	1852      	adds	r2, r2, r1
    7b8c:	7013      	strb	r3, [r2, #0]
    7b8e:	e656      	b.n	783e <_svfprintf_r+0x1206>
    7b90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7b92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    7b94:	1a98      	subs	r0, r3, r2
    7b96:	1c43      	adds	r3, r0, #1
    7b98:	001a      	movs	r2, r3
    7b9a:	930e      	str	r3, [sp, #56]	; 0x38
    7b9c:	e72a      	b.n	79f4 <_svfprintf_r+0x13bc>
    7b9e:	4b27      	ldr	r3, [pc, #156]	; (7c3c <_svfprintf_r+0x1604>)
    7ba0:	9311      	str	r3, [sp, #68]	; 0x44
    7ba2:	f7fe fef4 	bl	698e <_svfprintf_r+0x356>
    7ba6:	232d      	movs	r3, #45	; 0x2d
    7ba8:	aa16      	add	r2, sp, #88	; 0x58
    7baa:	77d3      	strb	r3, [r2, #31]
    7bac:	4698      	mov	r8, r3
    7bae:	e7c4      	b.n	7b3a <_svfprintf_r+0x1502>
    7bb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7bb2:	1d1a      	adds	r2, r3, #4
    7bb4:	681b      	ldr	r3, [r3, #0]
    7bb6:	469a      	mov	sl, r3
    7bb8:	2b00      	cmp	r3, #0
    7bba:	db36      	blt.n	7c2a <_svfprintf_r+0x15f2>
    7bbc:	784b      	ldrb	r3, [r1, #1]
    7bbe:	920f      	str	r2, [sp, #60]	; 0x3c
    7bc0:	4659      	mov	r1, fp
    7bc2:	f7fe fd9d 	bl	6700 <_svfprintf_r+0xc8>
    7bc6:	4653      	mov	r3, sl
    7bc8:	2b00      	cmp	r3, #0
    7bca:	d101      	bne.n	7bd0 <_svfprintf_r+0x1598>
    7bcc:	07e3      	lsls	r3, r4, #31
    7bce:	d503      	bpl.n	7bd8 <_svfprintf_r+0x15a0>
    7bd0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    7bd2:	1c58      	adds	r0, r3, #1
    7bd4:	0003      	movs	r3, r0
    7bd6:	e7bb      	b.n	7b50 <_svfprintf_r+0x1518>
    7bd8:	2301      	movs	r3, #1
    7bda:	e725      	b.n	7a28 <_svfprintf_r+0x13f0>
    7bdc:	ab16      	add	r3, sp, #88	; 0x58
    7bde:	77d8      	strb	r0, [r3, #31]
    7be0:	f7fe ff6c 	bl	6abc <_svfprintf_r+0x484>
    7be4:	ab16      	add	r3, sp, #88	; 0x58
    7be6:	77d8      	strb	r0, [r3, #31]
    7be8:	f7ff f814 	bl	6c14 <_svfprintf_r+0x5dc>
    7bec:	230c      	movs	r3, #12
    7bee:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7bf0:	6013      	str	r3, [r2, #0]
    7bf2:	3b0d      	subs	r3, #13
    7bf4:	930a      	str	r3, [sp, #40]	; 0x28
    7bf6:	f7fe fdac 	bl	6752 <_svfprintf_r+0x11a>
    7bfa:	aa16      	add	r2, sp, #88	; 0x58
    7bfc:	232e      	movs	r3, #46	; 0x2e
    7bfe:	4694      	mov	ip, r2
    7c00:	4463      	add	r3, ip
    7c02:	e65c      	b.n	78be <_svfprintf_r+0x1286>
    7c04:	ab16      	add	r3, sp, #88	; 0x58
    7c06:	77d8      	strb	r0, [r3, #31]
    7c08:	f7fe fe85 	bl	6916 <_svfprintf_r+0x2de>
    7c0c:	ab16      	add	r3, sp, #88	; 0x58
    7c0e:	77d8      	strb	r0, [r3, #31]
    7c10:	f7fe fddd 	bl	67ce <_svfprintf_r+0x196>
    7c14:	ab16      	add	r3, sp, #88	; 0x58
    7c16:	77d8      	strb	r0, [r3, #31]
    7c18:	f7ff f87d 	bl	6d16 <_svfprintf_r+0x6de>
    7c1c:	4805      	ldr	r0, [pc, #20]	; (7c34 <_svfprintf_r+0x15fc>)
    7c1e:	4681      	mov	r9, r0
    7c20:	e76d      	b.n	7afe <_svfprintf_r+0x14c6>
    7c22:	ab16      	add	r3, sp, #88	; 0x58
    7c24:	77d8      	strb	r0, [r3, #31]
    7c26:	f7fe ff79 	bl	6b1c <_svfprintf_r+0x4e4>
    7c2a:	2301      	movs	r3, #1
    7c2c:	425b      	negs	r3, r3
    7c2e:	469a      	mov	sl, r3
    7c30:	e7c4      	b.n	7bbc <_svfprintf_r+0x1584>
    7c32:	46c0      	nop			; (mov r8, r8)
    7c34:	0000b7d0 	.word	0x0000b7d0
    7c38:	0000b784 	.word	0x0000b784
    7c3c:	0000b788 	.word	0x0000b788

00007c40 <register_fini>:
    7c40:	4b03      	ldr	r3, [pc, #12]	; (7c50 <register_fini+0x10>)
    7c42:	b510      	push	{r4, lr}
    7c44:	2b00      	cmp	r3, #0
    7c46:	d002      	beq.n	7c4e <register_fini+0xe>
    7c48:	4802      	ldr	r0, [pc, #8]	; (7c54 <register_fini+0x14>)
    7c4a:	f000 f805 	bl	7c58 <atexit>
    7c4e:	bd10      	pop	{r4, pc}
    7c50:	00000000 	.word	0x00000000
    7c54:	00008d45 	.word	0x00008d45

00007c58 <atexit>:
    7c58:	b510      	push	{r4, lr}
    7c5a:	0001      	movs	r1, r0
    7c5c:	2300      	movs	r3, #0
    7c5e:	2200      	movs	r2, #0
    7c60:	2000      	movs	r0, #0
    7c62:	f002 f8b7 	bl	9dd4 <__register_exitproc>
    7c66:	bd10      	pop	{r4, pc}

00007c68 <quorem>:
    7c68:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c6a:	4645      	mov	r5, r8
    7c6c:	4680      	mov	r8, r0
    7c6e:	46de      	mov	lr, fp
    7c70:	4657      	mov	r7, sl
    7c72:	464e      	mov	r6, r9
    7c74:	4642      	mov	r2, r8
    7c76:	b5e0      	push	{r5, r6, r7, lr}
    7c78:	690c      	ldr	r4, [r1, #16]
    7c7a:	6912      	ldr	r2, [r2, #16]
    7c7c:	b085      	sub	sp, #20
    7c7e:	000b      	movs	r3, r1
    7c80:	9102      	str	r1, [sp, #8]
    7c82:	2000      	movs	r0, #0
    7c84:	4294      	cmp	r4, r2
    7c86:	dd00      	ble.n	7c8a <quorem+0x22>
    7c88:	e090      	b.n	7dac <quorem+0x144>
    7c8a:	2214      	movs	r2, #20
    7c8c:	4694      	mov	ip, r2
    7c8e:	4463      	add	r3, ip
    7c90:	4699      	mov	r9, r3
    7c92:	464a      	mov	r2, r9
    7c94:	3c01      	subs	r4, #1
    7c96:	00a3      	lsls	r3, r4, #2
    7c98:	18d6      	adds	r6, r2, r3
    7c9a:	2214      	movs	r2, #20
    7c9c:	4442      	add	r2, r8
    7c9e:	4693      	mov	fp, r2
    7ca0:	449b      	add	fp, r3
    7ca2:	6833      	ldr	r3, [r6, #0]
    7ca4:	0015      	movs	r5, r2
    7ca6:	1c59      	adds	r1, r3, #1
    7ca8:	465b      	mov	r3, fp
    7caa:	6818      	ldr	r0, [r3, #0]
    7cac:	9201      	str	r2, [sp, #4]
    7cae:	f7fb ff85 	bl	3bbc <__udivsi3>
    7cb2:	1e03      	subs	r3, r0, #0
    7cb4:	9000      	str	r0, [sp, #0]
    7cb6:	d042      	beq.n	7d3e <quorem+0xd6>
    7cb8:	0029      	movs	r1, r5
    7cba:	2700      	movs	r7, #0
    7cbc:	464d      	mov	r5, r9
    7cbe:	2000      	movs	r0, #0
    7cc0:	46b1      	mov	r9, r6
    7cc2:	46a2      	mov	sl, r4
    7cc4:	003e      	movs	r6, r7
    7cc6:	0004      	movs	r4, r0
    7cc8:	469c      	mov	ip, r3
    7cca:	002f      	movs	r7, r5
    7ccc:	0008      	movs	r0, r1
    7cce:	9503      	str	r5, [sp, #12]
    7cd0:	4663      	mov	r3, ip
    7cd2:	cf04      	ldmia	r7!, {r2}
    7cd4:	0415      	lsls	r5, r2, #16
    7cd6:	0c2d      	lsrs	r5, r5, #16
    7cd8:	435d      	muls	r5, r3
    7cda:	0c12      	lsrs	r2, r2, #16
    7cdc:	435a      	muls	r2, r3
    7cde:	19ad      	adds	r5, r5, r6
    7ce0:	0c2b      	lsrs	r3, r5, #16
    7ce2:	18d2      	adds	r2, r2, r3
    7ce4:	6803      	ldr	r3, [r0, #0]
    7ce6:	042d      	lsls	r5, r5, #16
    7ce8:	0419      	lsls	r1, r3, #16
    7cea:	0c09      	lsrs	r1, r1, #16
    7cec:	1909      	adds	r1, r1, r4
    7cee:	0c16      	lsrs	r6, r2, #16
    7cf0:	0c2d      	lsrs	r5, r5, #16
    7cf2:	0412      	lsls	r2, r2, #16
    7cf4:	1b49      	subs	r1, r1, r5
    7cf6:	0c12      	lsrs	r2, r2, #16
    7cf8:	0c1b      	lsrs	r3, r3, #16
    7cfa:	1a9b      	subs	r3, r3, r2
    7cfc:	140a      	asrs	r2, r1, #16
    7cfe:	189b      	adds	r3, r3, r2
    7d00:	0409      	lsls	r1, r1, #16
    7d02:	141c      	asrs	r4, r3, #16
    7d04:	0c09      	lsrs	r1, r1, #16
    7d06:	041b      	lsls	r3, r3, #16
    7d08:	4319      	orrs	r1, r3
    7d0a:	c002      	stmia	r0!, {r1}
    7d0c:	45b9      	cmp	r9, r7
    7d0e:	d2df      	bcs.n	7cd0 <quorem+0x68>
    7d10:	9b03      	ldr	r3, [sp, #12]
    7d12:	464e      	mov	r6, r9
    7d14:	4699      	mov	r9, r3
    7d16:	465b      	mov	r3, fp
    7d18:	681b      	ldr	r3, [r3, #0]
    7d1a:	4654      	mov	r4, sl
    7d1c:	2b00      	cmp	r3, #0
    7d1e:	d10e      	bne.n	7d3e <quorem+0xd6>
    7d20:	465b      	mov	r3, fp
    7d22:	9a01      	ldr	r2, [sp, #4]
    7d24:	3b04      	subs	r3, #4
    7d26:	429a      	cmp	r2, r3
    7d28:	d304      	bcc.n	7d34 <quorem+0xcc>
    7d2a:	e006      	b.n	7d3a <quorem+0xd2>
    7d2c:	3b04      	subs	r3, #4
    7d2e:	3c01      	subs	r4, #1
    7d30:	429a      	cmp	r2, r3
    7d32:	d202      	bcs.n	7d3a <quorem+0xd2>
    7d34:	6819      	ldr	r1, [r3, #0]
    7d36:	2900      	cmp	r1, #0
    7d38:	d0f8      	beq.n	7d2c <quorem+0xc4>
    7d3a:	4643      	mov	r3, r8
    7d3c:	611c      	str	r4, [r3, #16]
    7d3e:	9902      	ldr	r1, [sp, #8]
    7d40:	4640      	mov	r0, r8
    7d42:	f001 fe91 	bl	9a68 <__mcmp>
    7d46:	2800      	cmp	r0, #0
    7d48:	db2f      	blt.n	7daa <quorem+0x142>
    7d4a:	464f      	mov	r7, r9
    7d4c:	2000      	movs	r0, #0
    7d4e:	9b00      	ldr	r3, [sp, #0]
    7d50:	9d01      	ldr	r5, [sp, #4]
    7d52:	3301      	adds	r3, #1
    7d54:	9300      	str	r3, [sp, #0]
    7d56:	682b      	ldr	r3, [r5, #0]
    7d58:	cf02      	ldmia	r7!, {r1}
    7d5a:	041a      	lsls	r2, r3, #16
    7d5c:	0c12      	lsrs	r2, r2, #16
    7d5e:	1810      	adds	r0, r2, r0
    7d60:	040a      	lsls	r2, r1, #16
    7d62:	0c12      	lsrs	r2, r2, #16
    7d64:	1a82      	subs	r2, r0, r2
    7d66:	0c09      	lsrs	r1, r1, #16
    7d68:	0c1b      	lsrs	r3, r3, #16
    7d6a:	1a5b      	subs	r3, r3, r1
    7d6c:	1411      	asrs	r1, r2, #16
    7d6e:	185b      	adds	r3, r3, r1
    7d70:	0412      	lsls	r2, r2, #16
    7d72:	1418      	asrs	r0, r3, #16
    7d74:	0c12      	lsrs	r2, r2, #16
    7d76:	041b      	lsls	r3, r3, #16
    7d78:	4313      	orrs	r3, r2
    7d7a:	c508      	stmia	r5!, {r3}
    7d7c:	42be      	cmp	r6, r7
    7d7e:	d2ea      	bcs.n	7d56 <quorem+0xee>
    7d80:	9901      	ldr	r1, [sp, #4]
    7d82:	00a3      	lsls	r3, r4, #2
    7d84:	468c      	mov	ip, r1
    7d86:	4463      	add	r3, ip
    7d88:	681a      	ldr	r2, [r3, #0]
    7d8a:	2a00      	cmp	r2, #0
    7d8c:	d10d      	bne.n	7daa <quorem+0x142>
    7d8e:	3b04      	subs	r3, #4
    7d90:	000a      	movs	r2, r1
    7d92:	4299      	cmp	r1, r3
    7d94:	d304      	bcc.n	7da0 <quorem+0x138>
    7d96:	e006      	b.n	7da6 <quorem+0x13e>
    7d98:	3b04      	subs	r3, #4
    7d9a:	3c01      	subs	r4, #1
    7d9c:	429a      	cmp	r2, r3
    7d9e:	d202      	bcs.n	7da6 <quorem+0x13e>
    7da0:	6819      	ldr	r1, [r3, #0]
    7da2:	2900      	cmp	r1, #0
    7da4:	d0f8      	beq.n	7d98 <quorem+0x130>
    7da6:	4643      	mov	r3, r8
    7da8:	611c      	str	r4, [r3, #16]
    7daa:	9800      	ldr	r0, [sp, #0]
    7dac:	b005      	add	sp, #20
    7dae:	bc3c      	pop	{r2, r3, r4, r5}
    7db0:	4690      	mov	r8, r2
    7db2:	4699      	mov	r9, r3
    7db4:	46a2      	mov	sl, r4
    7db6:	46ab      	mov	fp, r5
    7db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7dba:	46c0      	nop			; (mov r8, r8)

00007dbc <_dtoa_r>:
    7dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7dbe:	4657      	mov	r7, sl
    7dc0:	464e      	mov	r6, r9
    7dc2:	4645      	mov	r5, r8
    7dc4:	46de      	mov	lr, fp
    7dc6:	b5e0      	push	{r5, r6, r7, lr}
    7dc8:	6c01      	ldr	r1, [r0, #64]	; 0x40
    7dca:	b099      	sub	sp, #100	; 0x64
    7dcc:	4682      	mov	sl, r0
    7dce:	001d      	movs	r5, r3
    7dd0:	0016      	movs	r6, r2
    7dd2:	001f      	movs	r7, r3
    7dd4:	2900      	cmp	r1, #0
    7dd6:	d009      	beq.n	7dec <_dtoa_r+0x30>
    7dd8:	2301      	movs	r3, #1
    7dda:	6c42      	ldr	r2, [r0, #68]	; 0x44
    7ddc:	4093      	lsls	r3, r2
    7dde:	604a      	str	r2, [r1, #4]
    7de0:	608b      	str	r3, [r1, #8]
    7de2:	f001 fc35 	bl	9650 <_Bfree>
    7de6:	2300      	movs	r3, #0
    7de8:	4652      	mov	r2, sl
    7dea:	6413      	str	r3, [r2, #64]	; 0x40
    7dec:	46b8      	mov	r8, r7
    7dee:	2f00      	cmp	r7, #0
    7df0:	db37      	blt.n	7e62 <_dtoa_r+0xa6>
    7df2:	2300      	movs	r3, #0
    7df4:	9a25      	ldr	r2, [sp, #148]	; 0x94
    7df6:	6013      	str	r3, [r2, #0]
    7df8:	4642      	mov	r2, r8
    7dfa:	4bd6      	ldr	r3, [pc, #856]	; (8154 <_dtoa_r+0x398>)
    7dfc:	401a      	ands	r2, r3
    7dfe:	429a      	cmp	r2, r3
    7e00:	d018      	beq.n	7e34 <_dtoa_r+0x78>
    7e02:	2200      	movs	r2, #0
    7e04:	2300      	movs	r3, #0
    7e06:	0030      	movs	r0, r6
    7e08:	0039      	movs	r1, r7
    7e0a:	f7fe f999 	bl	6140 <__aeabi_dcmpeq>
    7e0e:	2800      	cmp	r0, #0
    7e10:	d02f      	beq.n	7e72 <_dtoa_r+0xb6>
    7e12:	2301      	movs	r3, #1
    7e14:	9a24      	ldr	r2, [sp, #144]	; 0x90
    7e16:	6013      	str	r3, [r2, #0]
    7e18:	9b26      	ldr	r3, [sp, #152]	; 0x98
    7e1a:	2b00      	cmp	r3, #0
    7e1c:	d100      	bne.n	7e20 <_dtoa_r+0x64>
    7e1e:	e22a      	b.n	8276 <_dtoa_r+0x4ba>
    7e20:	48cd      	ldr	r0, [pc, #820]	; (8158 <_dtoa_r+0x39c>)
    7e22:	6018      	str	r0, [r3, #0]
    7e24:	3801      	subs	r0, #1
    7e26:	b019      	add	sp, #100	; 0x64
    7e28:	bc3c      	pop	{r2, r3, r4, r5}
    7e2a:	4690      	mov	r8, r2
    7e2c:	4699      	mov	r9, r3
    7e2e:	46a2      	mov	sl, r4
    7e30:	46ab      	mov	fp, r5
    7e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7e34:	4bc9      	ldr	r3, [pc, #804]	; (815c <_dtoa_r+0x3a0>)
    7e36:	9a24      	ldr	r2, [sp, #144]	; 0x90
    7e38:	6013      	str	r3, [r2, #0]
    7e3a:	2e00      	cmp	r6, #0
    7e3c:	d10b      	bne.n	7e56 <_dtoa_r+0x9a>
    7e3e:	4643      	mov	r3, r8
    7e40:	0318      	lsls	r0, r3, #12
    7e42:	d108      	bne.n	7e56 <_dtoa_r+0x9a>
    7e44:	9b26      	ldr	r3, [sp, #152]	; 0x98
    7e46:	48c6      	ldr	r0, [pc, #792]	; (8160 <_dtoa_r+0x3a4>)
    7e48:	2b00      	cmp	r3, #0
    7e4a:	d0ec      	beq.n	7e26 <_dtoa_r+0x6a>
    7e4c:	0003      	movs	r3, r0
    7e4e:	3308      	adds	r3, #8
    7e50:	9a26      	ldr	r2, [sp, #152]	; 0x98
    7e52:	6013      	str	r3, [r2, #0]
    7e54:	e7e7      	b.n	7e26 <_dtoa_r+0x6a>
    7e56:	9b26      	ldr	r3, [sp, #152]	; 0x98
    7e58:	48c2      	ldr	r0, [pc, #776]	; (8164 <_dtoa_r+0x3a8>)
    7e5a:	2b00      	cmp	r3, #0
    7e5c:	d0e3      	beq.n	7e26 <_dtoa_r+0x6a>
    7e5e:	1cc3      	adds	r3, r0, #3
    7e60:	e7f6      	b.n	7e50 <_dtoa_r+0x94>
    7e62:	2301      	movs	r3, #1
    7e64:	9a25      	ldr	r2, [sp, #148]	; 0x94
    7e66:	0068      	lsls	r0, r5, #1
    7e68:	6013      	str	r3, [r2, #0]
    7e6a:	0843      	lsrs	r3, r0, #1
    7e6c:	4698      	mov	r8, r3
    7e6e:	001f      	movs	r7, r3
    7e70:	e7c2      	b.n	7df8 <_dtoa_r+0x3c>
    7e72:	ab16      	add	r3, sp, #88	; 0x58
    7e74:	9301      	str	r3, [sp, #4]
    7e76:	ab17      	add	r3, sp, #92	; 0x5c
    7e78:	9300      	str	r3, [sp, #0]
    7e7a:	0032      	movs	r2, r6
    7e7c:	003b      	movs	r3, r7
    7e7e:	4650      	mov	r0, sl
    7e80:	f001 fea8 	bl	9bd4 <__d2b>
    7e84:	4643      	mov	r3, r8
    7e86:	4683      	mov	fp, r0
    7e88:	0d1a      	lsrs	r2, r3, #20
    7e8a:	d100      	bne.n	7e8e <_dtoa_r+0xd2>
    7e8c:	e1d6      	b.n	823c <_dtoa_r+0x480>
    7e8e:	033b      	lsls	r3, r7, #12
    7e90:	4cb5      	ldr	r4, [pc, #724]	; (8168 <_dtoa_r+0x3ac>)
    7e92:	0b1b      	lsrs	r3, r3, #12
    7e94:	431c      	orrs	r4, r3
    7e96:	4bb5      	ldr	r3, [pc, #724]	; (816c <_dtoa_r+0x3b0>)
    7e98:	0030      	movs	r0, r6
    7e9a:	4698      	mov	r8, r3
    7e9c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7e9e:	0021      	movs	r1, r4
    7ea0:	4699      	mov	r9, r3
    7ea2:	2300      	movs	r3, #0
    7ea4:	4490      	add	r8, r2
    7ea6:	930f      	str	r3, [sp, #60]	; 0x3c
    7ea8:	2200      	movs	r2, #0
    7eaa:	4bb1      	ldr	r3, [pc, #708]	; (8170 <_dtoa_r+0x3b4>)
    7eac:	f7fd fc98 	bl	57e0 <__aeabi_dsub>
    7eb0:	4ab0      	ldr	r2, [pc, #704]	; (8174 <_dtoa_r+0x3b8>)
    7eb2:	4bb1      	ldr	r3, [pc, #708]	; (8178 <_dtoa_r+0x3bc>)
    7eb4:	f7fd fa14 	bl	52e0 <__aeabi_dmul>
    7eb8:	4ab0      	ldr	r2, [pc, #704]	; (817c <_dtoa_r+0x3c0>)
    7eba:	4bb1      	ldr	r3, [pc, #708]	; (8180 <_dtoa_r+0x3c4>)
    7ebc:	f002 fa62 	bl	a384 <__aeabi_dadd>
    7ec0:	0004      	movs	r4, r0
    7ec2:	4640      	mov	r0, r8
    7ec4:	000d      	movs	r5, r1
    7ec6:	f7fd ffd5 	bl	5e74 <__aeabi_i2d>
    7eca:	4aae      	ldr	r2, [pc, #696]	; (8184 <_dtoa_r+0x3c8>)
    7ecc:	4bae      	ldr	r3, [pc, #696]	; (8188 <_dtoa_r+0x3cc>)
    7ece:	f7fd fa07 	bl	52e0 <__aeabi_dmul>
    7ed2:	0002      	movs	r2, r0
    7ed4:	000b      	movs	r3, r1
    7ed6:	0020      	movs	r0, r4
    7ed8:	0029      	movs	r1, r5
    7eda:	f002 fa53 	bl	a384 <__aeabi_dadd>
    7ede:	0004      	movs	r4, r0
    7ee0:	000d      	movs	r5, r1
    7ee2:	f7fd ff93 	bl	5e0c <__aeabi_d2iz>
    7ee6:	2200      	movs	r2, #0
    7ee8:	9003      	str	r0, [sp, #12]
    7eea:	2300      	movs	r3, #0
    7eec:	0020      	movs	r0, r4
    7eee:	0029      	movs	r1, r5
    7ef0:	f7fe f92c 	bl	614c <__aeabi_dcmplt>
    7ef4:	2800      	cmp	r0, #0
    7ef6:	d000      	beq.n	7efa <_dtoa_r+0x13e>
    7ef8:	e2b1      	b.n	845e <_dtoa_r+0x6a2>
    7efa:	2301      	movs	r3, #1
    7efc:	9c03      	ldr	r4, [sp, #12]
    7efe:	930c      	str	r3, [sp, #48]	; 0x30
    7f00:	2c16      	cmp	r4, #22
    7f02:	d810      	bhi.n	7f26 <_dtoa_r+0x16a>
    7f04:	49a1      	ldr	r1, [pc, #644]	; (818c <_dtoa_r+0x3d0>)
    7f06:	00e3      	lsls	r3, r4, #3
    7f08:	18c9      	adds	r1, r1, r3
    7f0a:	0032      	movs	r2, r6
    7f0c:	6808      	ldr	r0, [r1, #0]
    7f0e:	6849      	ldr	r1, [r1, #4]
    7f10:	003b      	movs	r3, r7
    7f12:	f7fe f92f 	bl	6174 <__aeabi_dcmpgt>
    7f16:	2800      	cmp	r0, #0
    7f18:	d100      	bne.n	7f1c <_dtoa_r+0x160>
    7f1a:	e31d      	b.n	8558 <_dtoa_r+0x79c>
    7f1c:	0023      	movs	r3, r4
    7f1e:	3b01      	subs	r3, #1
    7f20:	9303      	str	r3, [sp, #12]
    7f22:	2300      	movs	r3, #0
    7f24:	930c      	str	r3, [sp, #48]	; 0x30
    7f26:	464b      	mov	r3, r9
    7f28:	4642      	mov	r2, r8
    7f2a:	1a9a      	subs	r2, r3, r2
    7f2c:	2300      	movs	r3, #0
    7f2e:	9306      	str	r3, [sp, #24]
    7f30:	0013      	movs	r3, r2
    7f32:	3b01      	subs	r3, #1
    7f34:	9304      	str	r3, [sp, #16]
    7f36:	d500      	bpl.n	7f3a <_dtoa_r+0x17e>
    7f38:	e2a1      	b.n	847e <_dtoa_r+0x6c2>
    7f3a:	9b03      	ldr	r3, [sp, #12]
    7f3c:	2b00      	cmp	r3, #0
    7f3e:	da00      	bge.n	7f42 <_dtoa_r+0x186>
    7f40:	e284      	b.n	844c <_dtoa_r+0x690>
    7f42:	469c      	mov	ip, r3
    7f44:	930d      	str	r3, [sp, #52]	; 0x34
    7f46:	2300      	movs	r3, #0
    7f48:	9a04      	ldr	r2, [sp, #16]
    7f4a:	4699      	mov	r9, r3
    7f4c:	0011      	movs	r1, r2
    7f4e:	4461      	add	r1, ip
    7f50:	9104      	str	r1, [sp, #16]
    7f52:	9b22      	ldr	r3, [sp, #136]	; 0x88
    7f54:	2b09      	cmp	r3, #9
    7f56:	d900      	bls.n	7f5a <_dtoa_r+0x19e>
    7f58:	e18f      	b.n	827a <_dtoa_r+0x4be>
    7f5a:	2401      	movs	r4, #1
    7f5c:	2b05      	cmp	r3, #5
    7f5e:	dd02      	ble.n	7f66 <_dtoa_r+0x1aa>
    7f60:	2400      	movs	r4, #0
    7f62:	3b04      	subs	r3, #4
    7f64:	9322      	str	r3, [sp, #136]	; 0x88
    7f66:	9b22      	ldr	r3, [sp, #136]	; 0x88
    7f68:	2b03      	cmp	r3, #3
    7f6a:	d101      	bne.n	7f70 <_dtoa_r+0x1b4>
    7f6c:	f000 fcce 	bl	890c <_dtoa_r+0xb50>
    7f70:	dc01      	bgt.n	7f76 <_dtoa_r+0x1ba>
    7f72:	f000 fc92 	bl	889a <_dtoa_r+0xade>
    7f76:	9b22      	ldr	r3, [sp, #136]	; 0x88
    7f78:	2b04      	cmp	r3, #4
    7f7a:	d101      	bne.n	7f80 <_dtoa_r+0x1c4>
    7f7c:	f000 fc40 	bl	8800 <_dtoa_r+0xa44>
    7f80:	2301      	movs	r3, #1
    7f82:	930b      	str	r3, [sp, #44]	; 0x2c
    7f84:	9b22      	ldr	r3, [sp, #136]	; 0x88
    7f86:	2b05      	cmp	r3, #5
    7f88:	d001      	beq.n	7f8e <_dtoa_r+0x1d2>
    7f8a:	f000 fc8b 	bl	88a4 <_dtoa_r+0xae8>
    7f8e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    7f90:	9b03      	ldr	r3, [sp, #12]
    7f92:	4694      	mov	ip, r2
    7f94:	4463      	add	r3, ip
    7f96:	930e      	str	r3, [sp, #56]	; 0x38
    7f98:	3301      	adds	r3, #1
    7f9a:	9307      	str	r3, [sp, #28]
    7f9c:	1e1d      	subs	r5, r3, #0
    7f9e:	dc01      	bgt.n	7fa4 <_dtoa_r+0x1e8>
    7fa0:	f000 fd49 	bl	8a36 <_dtoa_r+0xc7a>
    7fa4:	9b07      	ldr	r3, [sp, #28]
    7fa6:	4698      	mov	r8, r3
    7fa8:	2300      	movs	r3, #0
    7faa:	4652      	mov	r2, sl
    7fac:	2100      	movs	r1, #0
    7fae:	6453      	str	r3, [r2, #68]	; 0x44
    7fb0:	2d17      	cmp	r5, #23
    7fb2:	d90a      	bls.n	7fca <_dtoa_r+0x20e>
    7fb4:	2201      	movs	r2, #1
    7fb6:	3304      	adds	r3, #4
    7fb8:	005b      	lsls	r3, r3, #1
    7fba:	0018      	movs	r0, r3
    7fbc:	3014      	adds	r0, #20
    7fbe:	0011      	movs	r1, r2
    7fc0:	3201      	adds	r2, #1
    7fc2:	4285      	cmp	r5, r0
    7fc4:	d2f8      	bcs.n	7fb8 <_dtoa_r+0x1fc>
    7fc6:	4653      	mov	r3, sl
    7fc8:	6459      	str	r1, [r3, #68]	; 0x44
    7fca:	4650      	mov	r0, sl
    7fcc:	f001 fb18 	bl	9600 <_Balloc>
    7fd0:	4653      	mov	r3, sl
    7fd2:	6418      	str	r0, [r3, #64]	; 0x40
    7fd4:	4643      	mov	r3, r8
    7fd6:	900a      	str	r0, [sp, #40]	; 0x28
    7fd8:	2b0e      	cmp	r3, #14
    7fda:	d900      	bls.n	7fde <_dtoa_r+0x222>
    7fdc:	e161      	b.n	82a2 <_dtoa_r+0x4e6>
    7fde:	2c00      	cmp	r4, #0
    7fe0:	d100      	bne.n	7fe4 <_dtoa_r+0x228>
    7fe2:	e15e      	b.n	82a2 <_dtoa_r+0x4e6>
    7fe4:	9610      	str	r6, [sp, #64]	; 0x40
    7fe6:	9711      	str	r7, [sp, #68]	; 0x44
    7fe8:	9e03      	ldr	r6, [sp, #12]
    7fea:	2e00      	cmp	r6, #0
    7fec:	dc01      	bgt.n	7ff2 <_dtoa_r+0x236>
    7fee:	f000 fd25 	bl	8a3c <_dtoa_r+0xc80>
    7ff2:	0032      	movs	r2, r6
    7ff4:	210f      	movs	r1, #15
    7ff6:	4b65      	ldr	r3, [pc, #404]	; (818c <_dtoa_r+0x3d0>)
    7ff8:	400a      	ands	r2, r1
    7ffa:	00d2      	lsls	r2, r2, #3
    7ffc:	189b      	adds	r3, r3, r2
    7ffe:	1136      	asrs	r6, r6, #4
    8000:	681c      	ldr	r4, [r3, #0]
    8002:	685d      	ldr	r5, [r3, #4]
    8004:	06f3      	lsls	r3, r6, #27
    8006:	d401      	bmi.n	800c <_dtoa_r+0x250>
    8008:	f000 fcca 	bl	89a0 <_dtoa_r+0xbe4>
    800c:	4b60      	ldr	r3, [pc, #384]	; (8190 <_dtoa_r+0x3d4>)
    800e:	400e      	ands	r6, r1
    8010:	6a1a      	ldr	r2, [r3, #32]
    8012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8014:	9810      	ldr	r0, [sp, #64]	; 0x40
    8016:	9911      	ldr	r1, [sp, #68]	; 0x44
    8018:	f7fc fe2e 	bl	4c78 <__aeabi_ddiv>
    801c:	2303      	movs	r3, #3
    801e:	4698      	mov	r8, r3
    8020:	9008      	str	r0, [sp, #32]
    8022:	9109      	str	r1, [sp, #36]	; 0x24
    8024:	2e00      	cmp	r6, #0
    8026:	d011      	beq.n	804c <_dtoa_r+0x290>
    8028:	4f59      	ldr	r7, [pc, #356]	; (8190 <_dtoa_r+0x3d4>)
    802a:	2301      	movs	r3, #1
    802c:	4233      	tst	r3, r6
    802e:	d009      	beq.n	8044 <_dtoa_r+0x288>
    8030:	469c      	mov	ip, r3
    8032:	683a      	ldr	r2, [r7, #0]
    8034:	687b      	ldr	r3, [r7, #4]
    8036:	0020      	movs	r0, r4
    8038:	0029      	movs	r1, r5
    803a:	44e0      	add	r8, ip
    803c:	f7fd f950 	bl	52e0 <__aeabi_dmul>
    8040:	0004      	movs	r4, r0
    8042:	000d      	movs	r5, r1
    8044:	1076      	asrs	r6, r6, #1
    8046:	3708      	adds	r7, #8
    8048:	2e00      	cmp	r6, #0
    804a:	d1ee      	bne.n	802a <_dtoa_r+0x26e>
    804c:	0022      	movs	r2, r4
    804e:	9808      	ldr	r0, [sp, #32]
    8050:	9909      	ldr	r1, [sp, #36]	; 0x24
    8052:	002b      	movs	r3, r5
    8054:	f7fc fe10 	bl	4c78 <__aeabi_ddiv>
    8058:	0006      	movs	r6, r0
    805a:	000f      	movs	r7, r1
    805c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    805e:	2b00      	cmp	r3, #0
    8060:	d009      	beq.n	8076 <_dtoa_r+0x2ba>
    8062:	2200      	movs	r2, #0
    8064:	4b40      	ldr	r3, [pc, #256]	; (8168 <_dtoa_r+0x3ac>)
    8066:	0030      	movs	r0, r6
    8068:	0039      	movs	r1, r7
    806a:	f7fe f86f 	bl	614c <__aeabi_dcmplt>
    806e:	2800      	cmp	r0, #0
    8070:	d001      	beq.n	8076 <_dtoa_r+0x2ba>
    8072:	f000 fdc2 	bl	8bfa <_dtoa_r+0xe3e>
    8076:	4640      	mov	r0, r8
    8078:	f7fd fefc 	bl	5e74 <__aeabi_i2d>
    807c:	0032      	movs	r2, r6
    807e:	003b      	movs	r3, r7
    8080:	f7fd f92e 	bl	52e0 <__aeabi_dmul>
    8084:	2200      	movs	r2, #0
    8086:	4b43      	ldr	r3, [pc, #268]	; (8194 <_dtoa_r+0x3d8>)
    8088:	f002 f97c 	bl	a384 <__aeabi_dadd>
    808c:	4a42      	ldr	r2, [pc, #264]	; (8198 <_dtoa_r+0x3dc>)
    808e:	000b      	movs	r3, r1
    8090:	4694      	mov	ip, r2
    8092:	4463      	add	r3, ip
    8094:	9008      	str	r0, [sp, #32]
    8096:	9109      	str	r1, [sp, #36]	; 0x24
    8098:	9309      	str	r3, [sp, #36]	; 0x24
    809a:	9b07      	ldr	r3, [sp, #28]
    809c:	2b00      	cmp	r3, #0
    809e:	d101      	bne.n	80a4 <_dtoa_r+0x2e8>
    80a0:	f000 fc50 	bl	8944 <_dtoa_r+0xb88>
    80a4:	9b03      	ldr	r3, [sp, #12]
    80a6:	9313      	str	r3, [sp, #76]	; 0x4c
    80a8:	9b07      	ldr	r3, [sp, #28]
    80aa:	9312      	str	r3, [sp, #72]	; 0x48
    80ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    80ae:	2b00      	cmp	r3, #0
    80b0:	d101      	bne.n	80b6 <_dtoa_r+0x2fa>
    80b2:	f000 fd1d 	bl	8af0 <_dtoa_r+0xd34>
    80b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    80b8:	2000      	movs	r0, #0
    80ba:	1e5a      	subs	r2, r3, #1
    80bc:	4b33      	ldr	r3, [pc, #204]	; (818c <_dtoa_r+0x3d0>)
    80be:	00d2      	lsls	r2, r2, #3
    80c0:	189b      	adds	r3, r3, r2
    80c2:	681a      	ldr	r2, [r3, #0]
    80c4:	685b      	ldr	r3, [r3, #4]
    80c6:	4935      	ldr	r1, [pc, #212]	; (819c <_dtoa_r+0x3e0>)
    80c8:	f7fc fdd6 	bl	4c78 <__aeabi_ddiv>
    80cc:	9a08      	ldr	r2, [sp, #32]
    80ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
    80d0:	f7fd fb86 	bl	57e0 <__aeabi_dsub>
    80d4:	9008      	str	r0, [sp, #32]
    80d6:	9109      	str	r1, [sp, #36]	; 0x24
    80d8:	0039      	movs	r1, r7
    80da:	0030      	movs	r0, r6
    80dc:	f7fd fe96 	bl	5e0c <__aeabi_d2iz>
    80e0:	0004      	movs	r4, r0
    80e2:	f7fd fec7 	bl	5e74 <__aeabi_i2d>
    80e6:	0002      	movs	r2, r0
    80e8:	000b      	movs	r3, r1
    80ea:	0030      	movs	r0, r6
    80ec:	0039      	movs	r1, r7
    80ee:	f7fd fb77 	bl	57e0 <__aeabi_dsub>
    80f2:	0005      	movs	r5, r0
    80f4:	000e      	movs	r6, r1
    80f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    80f8:	3430      	adds	r4, #48	; 0x30
    80fa:	1c51      	adds	r1, r2, #1
    80fc:	b2e7      	uxtb	r7, r4
    80fe:	9114      	str	r1, [sp, #80]	; 0x50
    8100:	7017      	strb	r7, [r2, #0]
    8102:	0033      	movs	r3, r6
    8104:	9808      	ldr	r0, [sp, #32]
    8106:	9909      	ldr	r1, [sp, #36]	; 0x24
    8108:	002a      	movs	r2, r5
    810a:	f7fe f833 	bl	6174 <__aeabi_dcmpgt>
    810e:	2800      	cmp	r0, #0
    8110:	d001      	beq.n	8116 <_dtoa_r+0x35a>
    8112:	f000 fdfe 	bl	8d12 <_dtoa_r+0xf56>
    8116:	002a      	movs	r2, r5
    8118:	0033      	movs	r3, r6
    811a:	2000      	movs	r0, #0
    811c:	4912      	ldr	r1, [pc, #72]	; (8168 <_dtoa_r+0x3ac>)
    811e:	f7fd fb5f 	bl	57e0 <__aeabi_dsub>
    8122:	0002      	movs	r2, r0
    8124:	000b      	movs	r3, r1
    8126:	9808      	ldr	r0, [sp, #32]
    8128:	9909      	ldr	r1, [sp, #36]	; 0x24
    812a:	f7fe f823 	bl	6174 <__aeabi_dcmpgt>
    812e:	2800      	cmp	r0, #0
    8130:	d001      	beq.n	8136 <_dtoa_r+0x37a>
    8132:	f000 fde7 	bl	8d04 <_dtoa_r+0xf48>
    8136:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8138:	2b01      	cmp	r3, #1
    813a:	d101      	bne.n	8140 <_dtoa_r+0x384>
    813c:	f000 fc78 	bl	8a30 <_dtoa_r+0xc74>
    8140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8142:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8144:	4694      	mov	ip, r2
    8146:	4463      	add	r3, ip
    8148:	4698      	mov	r8, r3
    814a:	464b      	mov	r3, r9
    814c:	9312      	str	r3, [sp, #72]	; 0x48
    814e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    8150:	4699      	mov	r9, r3
    8152:	e038      	b.n	81c6 <_dtoa_r+0x40a>
    8154:	7ff00000 	.word	0x7ff00000
    8158:	0000b7bd 	.word	0x0000b7bd
    815c:	0000270f 	.word	0x0000270f
    8160:	0000b7e0 	.word	0x0000b7e0
    8164:	0000b7ec 	.word	0x0000b7ec
    8168:	3ff00000 	.word	0x3ff00000
    816c:	fffffc01 	.word	0xfffffc01
    8170:	3ff80000 	.word	0x3ff80000
    8174:	636f4361 	.word	0x636f4361
    8178:	3fd287a7 	.word	0x3fd287a7
    817c:	8b60c8b3 	.word	0x8b60c8b3
    8180:	3fc68a28 	.word	0x3fc68a28
    8184:	509f79fb 	.word	0x509f79fb
    8188:	3fd34413 	.word	0x3fd34413
    818c:	0000b818 	.word	0x0000b818
    8190:	0000b7f0 	.word	0x0000b7f0
    8194:	401c0000 	.word	0x401c0000
    8198:	fcc00000 	.word	0xfcc00000
    819c:	3fe00000 	.word	0x3fe00000
    81a0:	002a      	movs	r2, r5
    81a2:	0033      	movs	r3, r6
    81a4:	2000      	movs	r0, #0
    81a6:	49b9      	ldr	r1, [pc, #740]	; (848c <_dtoa_r+0x6d0>)
    81a8:	f7fd fb1a 	bl	57e0 <__aeabi_dsub>
    81ac:	9a08      	ldr	r2, [sp, #32]
    81ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    81b0:	f7fd ffcc 	bl	614c <__aeabi_dcmplt>
    81b4:	2800      	cmp	r0, #0
    81b6:	d001      	beq.n	81bc <_dtoa_r+0x400>
    81b8:	f000 fd74 	bl	8ca4 <_dtoa_r+0xee8>
    81bc:	46a1      	mov	r9, r4
    81be:	4544      	cmp	r4, r8
    81c0:	d101      	bne.n	81c6 <_dtoa_r+0x40a>
    81c2:	f000 fc33 	bl	8a2c <_dtoa_r+0xc70>
    81c6:	9808      	ldr	r0, [sp, #32]
    81c8:	9909      	ldr	r1, [sp, #36]	; 0x24
    81ca:	2200      	movs	r2, #0
    81cc:	4bb0      	ldr	r3, [pc, #704]	; (8490 <_dtoa_r+0x6d4>)
    81ce:	f7fd f887 	bl	52e0 <__aeabi_dmul>
    81d2:	2200      	movs	r2, #0
    81d4:	4bae      	ldr	r3, [pc, #696]	; (8490 <_dtoa_r+0x6d4>)
    81d6:	9008      	str	r0, [sp, #32]
    81d8:	9109      	str	r1, [sp, #36]	; 0x24
    81da:	0028      	movs	r0, r5
    81dc:	0031      	movs	r1, r6
    81de:	f7fd f87f 	bl	52e0 <__aeabi_dmul>
    81e2:	000d      	movs	r5, r1
    81e4:	0004      	movs	r4, r0
    81e6:	f7fd fe11 	bl	5e0c <__aeabi_d2iz>
    81ea:	0007      	movs	r7, r0
    81ec:	f7fd fe42 	bl	5e74 <__aeabi_i2d>
    81f0:	0002      	movs	r2, r0
    81f2:	000b      	movs	r3, r1
    81f4:	0020      	movs	r0, r4
    81f6:	0029      	movs	r1, r5
    81f8:	f7fd faf2 	bl	57e0 <__aeabi_dsub>
    81fc:	464b      	mov	r3, r9
    81fe:	3730      	adds	r7, #48	; 0x30
    8200:	b2ff      	uxtb	r7, r7
    8202:	1c5c      	adds	r4, r3, #1
    8204:	701f      	strb	r7, [r3, #0]
    8206:	9a08      	ldr	r2, [sp, #32]
    8208:	9b09      	ldr	r3, [sp, #36]	; 0x24
    820a:	0005      	movs	r5, r0
    820c:	000e      	movs	r6, r1
    820e:	f7fd ff9d 	bl	614c <__aeabi_dcmplt>
    8212:	2800      	cmp	r0, #0
    8214:	d0c4      	beq.n	81a0 <_dtoa_r+0x3e4>
    8216:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8218:	9303      	str	r3, [sp, #12]
    821a:	4659      	mov	r1, fp
    821c:	4650      	mov	r0, sl
    821e:	f001 fa17 	bl	9650 <_Bfree>
    8222:	2300      	movs	r3, #0
    8224:	7023      	strb	r3, [r4, #0]
    8226:	9b03      	ldr	r3, [sp, #12]
    8228:	9a24      	ldr	r2, [sp, #144]	; 0x90
    822a:	3301      	adds	r3, #1
    822c:	6013      	str	r3, [r2, #0]
    822e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    8230:	2b00      	cmp	r3, #0
    8232:	d100      	bne.n	8236 <_dtoa_r+0x47a>
    8234:	e3a8      	b.n	8988 <_dtoa_r+0xbcc>
    8236:	601c      	str	r4, [r3, #0]
    8238:	980a      	ldr	r0, [sp, #40]	; 0x28
    823a:	e5f4      	b.n	7e26 <_dtoa_r+0x6a>
    823c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    823e:	4699      	mov	r9, r3
    8240:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    8242:	444b      	add	r3, r9
    8244:	001c      	movs	r4, r3
    8246:	4b93      	ldr	r3, [pc, #588]	; (8494 <_dtoa_r+0x6d8>)
    8248:	18e3      	adds	r3, r4, r3
    824a:	2b20      	cmp	r3, #32
    824c:	dc00      	bgt.n	8250 <_dtoa_r+0x494>
    824e:	e17e      	b.n	854e <_dtoa_r+0x792>
    8250:	0031      	movs	r1, r6
    8252:	4a91      	ldr	r2, [pc, #580]	; (8498 <_dtoa_r+0x6dc>)
    8254:	4640      	mov	r0, r8
    8256:	18a2      	adds	r2, r4, r2
    8258:	40d1      	lsrs	r1, r2
    825a:	000a      	movs	r2, r1
    825c:	2140      	movs	r1, #64	; 0x40
    825e:	1acb      	subs	r3, r1, r3
    8260:	4098      	lsls	r0, r3
    8262:	4310      	orrs	r0, r2
    8264:	f7fd fe48 	bl	5ef8 <__aeabi_ui2d>
    8268:	1e63      	subs	r3, r4, #1
    826a:	4698      	mov	r8, r3
    826c:	2301      	movs	r3, #1
    826e:	4d8b      	ldr	r5, [pc, #556]	; (849c <_dtoa_r+0x6e0>)
    8270:	930f      	str	r3, [sp, #60]	; 0x3c
    8272:	1949      	adds	r1, r1, r5
    8274:	e618      	b.n	7ea8 <_dtoa_r+0xec>
    8276:	488a      	ldr	r0, [pc, #552]	; (84a0 <_dtoa_r+0x6e4>)
    8278:	e5d5      	b.n	7e26 <_dtoa_r+0x6a>
    827a:	2300      	movs	r3, #0
    827c:	4652      	mov	r2, sl
    827e:	2100      	movs	r1, #0
    8280:	6453      	str	r3, [r2, #68]	; 0x44
    8282:	4650      	mov	r0, sl
    8284:	f001 f9bc 	bl	9600 <_Balloc>
    8288:	4653      	mov	r3, sl
    828a:	6418      	str	r0, [r3, #64]	; 0x40
    828c:	2301      	movs	r3, #1
    828e:	425b      	negs	r3, r3
    8290:	9307      	str	r3, [sp, #28]
    8292:	930e      	str	r3, [sp, #56]	; 0x38
    8294:	3302      	adds	r3, #2
    8296:	2200      	movs	r2, #0
    8298:	930b      	str	r3, [sp, #44]	; 0x2c
    829a:	2300      	movs	r3, #0
    829c:	900a      	str	r0, [sp, #40]	; 0x28
    829e:	9223      	str	r2, [sp, #140]	; 0x8c
    82a0:	9322      	str	r3, [sp, #136]	; 0x88
    82a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    82a4:	2b00      	cmp	r3, #0
    82a6:	da00      	bge.n	82aa <_dtoa_r+0x4ee>
    82a8:	e0ab      	b.n	8402 <_dtoa_r+0x646>
    82aa:	9a03      	ldr	r2, [sp, #12]
    82ac:	2a0e      	cmp	r2, #14
    82ae:	dd00      	ble.n	82b2 <_dtoa_r+0x4f6>
    82b0:	e0a7      	b.n	8402 <_dtoa_r+0x646>
    82b2:	4b7c      	ldr	r3, [pc, #496]	; (84a4 <_dtoa_r+0x6e8>)
    82b4:	00d2      	lsls	r2, r2, #3
    82b6:	189b      	adds	r3, r3, r2
    82b8:	685c      	ldr	r4, [r3, #4]
    82ba:	681b      	ldr	r3, [r3, #0]
    82bc:	9304      	str	r3, [sp, #16]
    82be:	9405      	str	r4, [sp, #20]
    82c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    82c2:	2b00      	cmp	r3, #0
    82c4:	da00      	bge.n	82c8 <_dtoa_r+0x50c>
    82c6:	e2a7      	b.n	8818 <_dtoa_r+0xa5c>
    82c8:	9c04      	ldr	r4, [sp, #16]
    82ca:	9d05      	ldr	r5, [sp, #20]
    82cc:	0030      	movs	r0, r6
    82ce:	0022      	movs	r2, r4
    82d0:	002b      	movs	r3, r5
    82d2:	0039      	movs	r1, r7
    82d4:	f7fc fcd0 	bl	4c78 <__aeabi_ddiv>
    82d8:	f7fd fd98 	bl	5e0c <__aeabi_d2iz>
    82dc:	4680      	mov	r8, r0
    82de:	f7fd fdc9 	bl	5e74 <__aeabi_i2d>
    82e2:	0022      	movs	r2, r4
    82e4:	002b      	movs	r3, r5
    82e6:	f7fc fffb 	bl	52e0 <__aeabi_dmul>
    82ea:	0002      	movs	r2, r0
    82ec:	000b      	movs	r3, r1
    82ee:	0030      	movs	r0, r6
    82f0:	0039      	movs	r1, r7
    82f2:	f7fd fa75 	bl	57e0 <__aeabi_dsub>
    82f6:	4643      	mov	r3, r8
    82f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    82fa:	3330      	adds	r3, #48	; 0x30
    82fc:	7013      	strb	r3, [r2, #0]
    82fe:	9b07      	ldr	r3, [sp, #28]
    8300:	0006      	movs	r6, r0
    8302:	000f      	movs	r7, r1
    8304:	1c54      	adds	r4, r2, #1
    8306:	2b01      	cmp	r3, #1
    8308:	d04e      	beq.n	83a8 <_dtoa_r+0x5ec>
    830a:	2200      	movs	r2, #0
    830c:	4b60      	ldr	r3, [pc, #384]	; (8490 <_dtoa_r+0x6d4>)
    830e:	f7fc ffe7 	bl	52e0 <__aeabi_dmul>
    8312:	2200      	movs	r2, #0
    8314:	2300      	movs	r3, #0
    8316:	0006      	movs	r6, r0
    8318:	000f      	movs	r7, r1
    831a:	f7fd ff11 	bl	6140 <__aeabi_dcmpeq>
    831e:	2800      	cmp	r0, #0
    8320:	d000      	beq.n	8324 <_dtoa_r+0x568>
    8322:	e77a      	b.n	821a <_dtoa_r+0x45e>
    8324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8326:	9a07      	ldr	r2, [sp, #28]
    8328:	1c9d      	adds	r5, r3, #2
    832a:	469c      	mov	ip, r3
    832c:	465b      	mov	r3, fp
    832e:	9306      	str	r3, [sp, #24]
    8330:	4653      	mov	r3, sl
    8332:	4462      	add	r2, ip
    8334:	46aa      	mov	sl, r5
    8336:	9c04      	ldr	r4, [sp, #16]
    8338:	9d05      	ldr	r5, [sp, #20]
    833a:	4691      	mov	r9, r2
    833c:	9307      	str	r3, [sp, #28]
    833e:	e00f      	b.n	8360 <_dtoa_r+0x5a4>
    8340:	2200      	movs	r2, #0
    8342:	4b53      	ldr	r3, [pc, #332]	; (8490 <_dtoa_r+0x6d4>)
    8344:	f7fc ffcc 	bl	52e0 <__aeabi_dmul>
    8348:	2301      	movs	r3, #1
    834a:	469c      	mov	ip, r3
    834c:	2200      	movs	r2, #0
    834e:	2300      	movs	r3, #0
    8350:	0006      	movs	r6, r0
    8352:	000f      	movs	r7, r1
    8354:	44e2      	add	sl, ip
    8356:	f7fd fef3 	bl	6140 <__aeabi_dcmpeq>
    835a:	2800      	cmp	r0, #0
    835c:	d000      	beq.n	8360 <_dtoa_r+0x5a4>
    835e:	e2d9      	b.n	8914 <_dtoa_r+0xb58>
    8360:	0022      	movs	r2, r4
    8362:	002b      	movs	r3, r5
    8364:	0030      	movs	r0, r6
    8366:	0039      	movs	r1, r7
    8368:	f7fc fc86 	bl	4c78 <__aeabi_ddiv>
    836c:	f7fd fd4e 	bl	5e0c <__aeabi_d2iz>
    8370:	4680      	mov	r8, r0
    8372:	f7fd fd7f 	bl	5e74 <__aeabi_i2d>
    8376:	0022      	movs	r2, r4
    8378:	002b      	movs	r3, r5
    837a:	f7fc ffb1 	bl	52e0 <__aeabi_dmul>
    837e:	0002      	movs	r2, r0
    8380:	000b      	movs	r3, r1
    8382:	0030      	movs	r0, r6
    8384:	0039      	movs	r1, r7
    8386:	f7fd fa2b 	bl	57e0 <__aeabi_dsub>
    838a:	4653      	mov	r3, sl
    838c:	4642      	mov	r2, r8
    838e:	3b01      	subs	r3, #1
    8390:	3230      	adds	r2, #48	; 0x30
    8392:	0006      	movs	r6, r0
    8394:	000f      	movs	r7, r1
    8396:	46d3      	mov	fp, sl
    8398:	701a      	strb	r2, [r3, #0]
    839a:	45d1      	cmp	r9, sl
    839c:	d1d0      	bne.n	8340 <_dtoa_r+0x584>
    839e:	9b06      	ldr	r3, [sp, #24]
    83a0:	4654      	mov	r4, sl
    83a2:	469b      	mov	fp, r3
    83a4:	9b07      	ldr	r3, [sp, #28]
    83a6:	469a      	mov	sl, r3
    83a8:	0032      	movs	r2, r6
    83aa:	003b      	movs	r3, r7
    83ac:	0030      	movs	r0, r6
    83ae:	0039      	movs	r1, r7
    83b0:	f001 ffe8 	bl	a384 <__aeabi_dadd>
    83b4:	0006      	movs	r6, r0
    83b6:	000f      	movs	r7, r1
    83b8:	0002      	movs	r2, r0
    83ba:	000b      	movs	r3, r1
    83bc:	9804      	ldr	r0, [sp, #16]
    83be:	9905      	ldr	r1, [sp, #20]
    83c0:	f7fd fec4 	bl	614c <__aeabi_dcmplt>
    83c4:	2800      	cmp	r0, #0
    83c6:	d10c      	bne.n	83e2 <_dtoa_r+0x626>
    83c8:	9804      	ldr	r0, [sp, #16]
    83ca:	9905      	ldr	r1, [sp, #20]
    83cc:	0032      	movs	r2, r6
    83ce:	003b      	movs	r3, r7
    83d0:	f7fd feb6 	bl	6140 <__aeabi_dcmpeq>
    83d4:	2800      	cmp	r0, #0
    83d6:	d100      	bne.n	83da <_dtoa_r+0x61e>
    83d8:	e71f      	b.n	821a <_dtoa_r+0x45e>
    83da:	4643      	mov	r3, r8
    83dc:	07db      	lsls	r3, r3, #31
    83de:	d400      	bmi.n	83e2 <_dtoa_r+0x626>
    83e0:	e71b      	b.n	821a <_dtoa_r+0x45e>
    83e2:	1e65      	subs	r5, r4, #1
    83e4:	782f      	ldrb	r7, [r5, #0]
    83e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    83e8:	e006      	b.n	83f8 <_dtoa_r+0x63c>
    83ea:	429d      	cmp	r5, r3
    83ec:	d100      	bne.n	83f0 <_dtoa_r+0x634>
    83ee:	e351      	b.n	8a94 <_dtoa_r+0xcd8>
    83f0:	3c02      	subs	r4, #2
    83f2:	7827      	ldrb	r7, [r4, #0]
    83f4:	002c      	movs	r4, r5
    83f6:	3d01      	subs	r5, #1
    83f8:	2f39      	cmp	r7, #57	; 0x39
    83fa:	d0f6      	beq.n	83ea <_dtoa_r+0x62e>
    83fc:	3701      	adds	r7, #1
    83fe:	702f      	strb	r7, [r5, #0]
    8400:	e70b      	b.n	821a <_dtoa_r+0x45e>
    8402:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8404:	2a00      	cmp	r2, #0
    8406:	d04f      	beq.n	84a8 <_dtoa_r+0x6ec>
    8408:	9a22      	ldr	r2, [sp, #136]	; 0x88
    840a:	2a01      	cmp	r2, #1
    840c:	dc00      	bgt.n	8410 <_dtoa_r+0x654>
    840e:	e22c      	b.n	886a <_dtoa_r+0xaae>
    8410:	9b07      	ldr	r3, [sp, #28]
    8412:	1e5c      	subs	r4, r3, #1
    8414:	464b      	mov	r3, r9
    8416:	45a1      	cmp	r9, r4
    8418:	da00      	bge.n	841c <_dtoa_r+0x660>
    841a:	e2b8      	b.n	898e <_dtoa_r+0xbd2>
    841c:	1b1c      	subs	r4, r3, r4
    841e:	9b07      	ldr	r3, [sp, #28]
    8420:	2b00      	cmp	r3, #0
    8422:	da00      	bge.n	8426 <_dtoa_r+0x66a>
    8424:	e3d4      	b.n	8bd0 <_dtoa_r+0xe14>
    8426:	9b06      	ldr	r3, [sp, #24]
    8428:	9308      	str	r3, [sp, #32]
    842a:	9b07      	ldr	r3, [sp, #28]
    842c:	9a06      	ldr	r2, [sp, #24]
    842e:	2101      	movs	r1, #1
    8430:	4694      	mov	ip, r2
    8432:	449c      	add	ip, r3
    8434:	4662      	mov	r2, ip
    8436:	9206      	str	r2, [sp, #24]
    8438:	9a04      	ldr	r2, [sp, #16]
    843a:	4650      	mov	r0, sl
    843c:	4694      	mov	ip, r2
    843e:	449c      	add	ip, r3
    8440:	4663      	mov	r3, ip
    8442:	9304      	str	r3, [sp, #16]
    8444:	f001 f99c 	bl	9780 <__i2b>
    8448:	4680      	mov	r8, r0
    844a:	e032      	b.n	84b2 <_dtoa_r+0x6f6>
    844c:	9a06      	ldr	r2, [sp, #24]
    844e:	9b03      	ldr	r3, [sp, #12]
    8450:	1ad2      	subs	r2, r2, r3
    8452:	425b      	negs	r3, r3
    8454:	4699      	mov	r9, r3
    8456:	2300      	movs	r3, #0
    8458:	9206      	str	r2, [sp, #24]
    845a:	930d      	str	r3, [sp, #52]	; 0x34
    845c:	e579      	b.n	7f52 <_dtoa_r+0x196>
    845e:	9803      	ldr	r0, [sp, #12]
    8460:	f7fd fd08 	bl	5e74 <__aeabi_i2d>
    8464:	000b      	movs	r3, r1
    8466:	0002      	movs	r2, r0
    8468:	0029      	movs	r1, r5
    846a:	0020      	movs	r0, r4
    846c:	f7fd fe68 	bl	6140 <__aeabi_dcmpeq>
    8470:	0002      	movs	r2, r0
    8472:	4250      	negs	r0, r2
    8474:	4150      	adcs	r0, r2
    8476:	9b03      	ldr	r3, [sp, #12]
    8478:	1a1b      	subs	r3, r3, r0
    847a:	9303      	str	r3, [sp, #12]
    847c:	e53d      	b.n	7efa <_dtoa_r+0x13e>
    847e:	2301      	movs	r3, #1
    8480:	1a9b      	subs	r3, r3, r2
    8482:	9306      	str	r3, [sp, #24]
    8484:	2300      	movs	r3, #0
    8486:	9304      	str	r3, [sp, #16]
    8488:	e557      	b.n	7f3a <_dtoa_r+0x17e>
    848a:	46c0      	nop			; (mov r8, r8)
    848c:	3ff00000 	.word	0x3ff00000
    8490:	40240000 	.word	0x40240000
    8494:	00000432 	.word	0x00000432
    8498:	00000412 	.word	0x00000412
    849c:	fe100000 	.word	0xfe100000
    84a0:	0000b7bc 	.word	0x0000b7bc
    84a4:	0000b818 	.word	0x0000b818
    84a8:	9b06      	ldr	r3, [sp, #24]
    84aa:	464c      	mov	r4, r9
    84ac:	9308      	str	r3, [sp, #32]
    84ae:	2300      	movs	r3, #0
    84b0:	4698      	mov	r8, r3
    84b2:	9908      	ldr	r1, [sp, #32]
    84b4:	1e0b      	subs	r3, r1, #0
    84b6:	dd0e      	ble.n	84d6 <_dtoa_r+0x71a>
    84b8:	9a04      	ldr	r2, [sp, #16]
    84ba:	2a00      	cmp	r2, #0
    84bc:	dd0b      	ble.n	84d6 <_dtoa_r+0x71a>
    84be:	4293      	cmp	r3, r2
    84c0:	dd00      	ble.n	84c4 <_dtoa_r+0x708>
    84c2:	e187      	b.n	87d4 <_dtoa_r+0xa18>
    84c4:	9a06      	ldr	r2, [sp, #24]
    84c6:	1ad2      	subs	r2, r2, r3
    84c8:	9206      	str	r2, [sp, #24]
    84ca:	9a08      	ldr	r2, [sp, #32]
    84cc:	1ad2      	subs	r2, r2, r3
    84ce:	9208      	str	r2, [sp, #32]
    84d0:	9a04      	ldr	r2, [sp, #16]
    84d2:	1ad3      	subs	r3, r2, r3
    84d4:	9304      	str	r3, [sp, #16]
    84d6:	464b      	mov	r3, r9
    84d8:	2b00      	cmp	r3, #0
    84da:	d01a      	beq.n	8512 <_dtoa_r+0x756>
    84dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    84de:	2b00      	cmp	r3, #0
    84e0:	d100      	bne.n	84e4 <_dtoa_r+0x728>
    84e2:	e1bb      	b.n	885c <_dtoa_r+0xaa0>
    84e4:	2c00      	cmp	r4, #0
    84e6:	dd10      	ble.n	850a <_dtoa_r+0x74e>
    84e8:	4641      	mov	r1, r8
    84ea:	0022      	movs	r2, r4
    84ec:	4650      	mov	r0, sl
    84ee:	f001 f9fb 	bl	98e8 <__pow5mult>
    84f2:	465a      	mov	r2, fp
    84f4:	0001      	movs	r1, r0
    84f6:	4680      	mov	r8, r0
    84f8:	4650      	mov	r0, sl
    84fa:	f001 f94b 	bl	9794 <__multiply>
    84fe:	0005      	movs	r5, r0
    8500:	4659      	mov	r1, fp
    8502:	4650      	mov	r0, sl
    8504:	f001 f8a4 	bl	9650 <_Bfree>
    8508:	46ab      	mov	fp, r5
    850a:	464b      	mov	r3, r9
    850c:	1b1a      	subs	r2, r3, r4
    850e:	d000      	beq.n	8512 <_dtoa_r+0x756>
    8510:	e1a5      	b.n	885e <_dtoa_r+0xaa2>
    8512:	2101      	movs	r1, #1
    8514:	4650      	mov	r0, sl
    8516:	f001 f933 	bl	9780 <__i2b>
    851a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    851c:	4681      	mov	r9, r0
    851e:	2b00      	cmp	r3, #0
    8520:	dd1d      	ble.n	855e <_dtoa_r+0x7a2>
    8522:	001a      	movs	r2, r3
    8524:	0001      	movs	r1, r0
    8526:	4650      	mov	r0, sl
    8528:	f001 f9de 	bl	98e8 <__pow5mult>
    852c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    852e:	4681      	mov	r9, r0
    8530:	2b01      	cmp	r3, #1
    8532:	dc00      	bgt.n	8536 <_dtoa_r+0x77a>
    8534:	e150      	b.n	87d8 <_dtoa_r+0xa1c>
    8536:	2400      	movs	r4, #0
    8538:	464b      	mov	r3, r9
    853a:	691b      	ldr	r3, [r3, #16]
    853c:	3303      	adds	r3, #3
    853e:	009b      	lsls	r3, r3, #2
    8540:	444b      	add	r3, r9
    8542:	6858      	ldr	r0, [r3, #4]
    8544:	f001 f8d4 	bl	96f0 <__hi0bits>
    8548:	2320      	movs	r3, #32
    854a:	1a1b      	subs	r3, r3, r0
    854c:	e010      	b.n	8570 <_dtoa_r+0x7b4>
    854e:	2220      	movs	r2, #32
    8550:	0030      	movs	r0, r6
    8552:	1ad3      	subs	r3, r2, r3
    8554:	4098      	lsls	r0, r3
    8556:	e685      	b.n	8264 <_dtoa_r+0x4a8>
    8558:	2300      	movs	r3, #0
    855a:	930c      	str	r3, [sp, #48]	; 0x30
    855c:	e4e3      	b.n	7f26 <_dtoa_r+0x16a>
    855e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    8560:	2400      	movs	r4, #0
    8562:	2b01      	cmp	r3, #1
    8564:	dc00      	bgt.n	8568 <_dtoa_r+0x7ac>
    8566:	e18b      	b.n	8880 <_dtoa_r+0xac4>
    8568:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    856a:	2301      	movs	r3, #1
    856c:	2a00      	cmp	r2, #0
    856e:	d1e3      	bne.n	8538 <_dtoa_r+0x77c>
    8570:	9904      	ldr	r1, [sp, #16]
    8572:	201f      	movs	r0, #31
    8574:	468c      	mov	ip, r1
    8576:	4463      	add	r3, ip
    8578:	4018      	ands	r0, r3
    857a:	d100      	bne.n	857e <_dtoa_r+0x7c2>
    857c:	e0ae      	b.n	86dc <_dtoa_r+0x920>
    857e:	2320      	movs	r3, #32
    8580:	1a1b      	subs	r3, r3, r0
    8582:	2b04      	cmp	r3, #4
    8584:	dc00      	bgt.n	8588 <_dtoa_r+0x7cc>
    8586:	e3cc      	b.n	8d22 <_dtoa_r+0xf66>
    8588:	231c      	movs	r3, #28
    858a:	1a18      	subs	r0, r3, r0
    858c:	9b06      	ldr	r3, [sp, #24]
    858e:	469c      	mov	ip, r3
    8590:	4484      	add	ip, r0
    8592:	4663      	mov	r3, ip
    8594:	9306      	str	r3, [sp, #24]
    8596:	9b08      	ldr	r3, [sp, #32]
    8598:	469c      	mov	ip, r3
    859a:	4484      	add	ip, r0
    859c:	4663      	mov	r3, ip
    859e:	468c      	mov	ip, r1
    85a0:	4484      	add	ip, r0
    85a2:	9308      	str	r3, [sp, #32]
    85a4:	4663      	mov	r3, ip
    85a6:	9304      	str	r3, [sp, #16]
    85a8:	9b06      	ldr	r3, [sp, #24]
    85aa:	2b00      	cmp	r3, #0
    85ac:	dd05      	ble.n	85ba <_dtoa_r+0x7fe>
    85ae:	4659      	mov	r1, fp
    85b0:	001a      	movs	r2, r3
    85b2:	4650      	mov	r0, sl
    85b4:	f001 f9f8 	bl	99a8 <__lshift>
    85b8:	4683      	mov	fp, r0
    85ba:	9b04      	ldr	r3, [sp, #16]
    85bc:	2b00      	cmp	r3, #0
    85be:	dd05      	ble.n	85cc <_dtoa_r+0x810>
    85c0:	4649      	mov	r1, r9
    85c2:	001a      	movs	r2, r3
    85c4:	4650      	mov	r0, sl
    85c6:	f001 f9ef 	bl	99a8 <__lshift>
    85ca:	4681      	mov	r9, r0
    85cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    85ce:	2b00      	cmp	r3, #0
    85d0:	d000      	beq.n	85d4 <_dtoa_r+0x818>
    85d2:	e094      	b.n	86fe <_dtoa_r+0x942>
    85d4:	9b07      	ldr	r3, [sp, #28]
    85d6:	2b00      	cmp	r3, #0
    85d8:	dc00      	bgt.n	85dc <_dtoa_r+0x820>
    85da:	e175      	b.n	88c8 <_dtoa_r+0xb0c>
    85dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    85de:	2b00      	cmp	r3, #0
    85e0:	d100      	bne.n	85e4 <_dtoa_r+0x828>
    85e2:	e0a6      	b.n	8732 <_dtoa_r+0x976>
    85e4:	9b08      	ldr	r3, [sp, #32]
    85e6:	2b00      	cmp	r3, #0
    85e8:	dd05      	ble.n	85f6 <_dtoa_r+0x83a>
    85ea:	4641      	mov	r1, r8
    85ec:	001a      	movs	r2, r3
    85ee:	4650      	mov	r0, sl
    85f0:	f001 f9da 	bl	99a8 <__lshift>
    85f4:	4680      	mov	r8, r0
    85f6:	4643      	mov	r3, r8
    85f8:	930c      	str	r3, [sp, #48]	; 0x30
    85fa:	2c00      	cmp	r4, #0
    85fc:	d000      	beq.n	8600 <_dtoa_r+0x844>
    85fe:	e250      	b.n	8aa2 <_dtoa_r+0xce6>
    8600:	9c07      	ldr	r4, [sp, #28]
    8602:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8604:	3c01      	subs	r4, #1
    8606:	0023      	movs	r3, r4
    8608:	4694      	mov	ip, r2
    860a:	4463      	add	r3, ip
    860c:	9308      	str	r3, [sp, #32]
    860e:	2301      	movs	r3, #1
    8610:	4033      	ands	r3, r6
    8612:	9307      	str	r3, [sp, #28]
    8614:	464b      	mov	r3, r9
    8616:	9306      	str	r3, [sp, #24]
    8618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    861a:	4657      	mov	r7, sl
    861c:	4645      	mov	r5, r8
    861e:	465e      	mov	r6, fp
    8620:	4692      	mov	sl, r2
    8622:	4698      	mov	r8, r3
    8624:	9b06      	ldr	r3, [sp, #24]
    8626:	0030      	movs	r0, r6
    8628:	0019      	movs	r1, r3
    862a:	4699      	mov	r9, r3
    862c:	f7ff fb1c 	bl	7c68 <quorem>
    8630:	0003      	movs	r3, r0
    8632:	900b      	str	r0, [sp, #44]	; 0x2c
    8634:	3330      	adds	r3, #48	; 0x30
    8636:	0029      	movs	r1, r5
    8638:	0030      	movs	r0, r6
    863a:	9304      	str	r3, [sp, #16]
    863c:	f001 fa14 	bl	9a68 <__mcmp>
    8640:	4649      	mov	r1, r9
    8642:	0004      	movs	r4, r0
    8644:	4642      	mov	r2, r8
    8646:	0038      	movs	r0, r7
    8648:	f001 fa28 	bl	9a9c <__mdiff>
    864c:	68c3      	ldr	r3, [r0, #12]
    864e:	4681      	mov	r9, r0
    8650:	2b00      	cmp	r3, #0
    8652:	d000      	beq.n	8656 <_dtoa_r+0x89a>
    8654:	e11e      	b.n	8894 <_dtoa_r+0xad8>
    8656:	0001      	movs	r1, r0
    8658:	0030      	movs	r0, r6
    865a:	f001 fa05 	bl	9a68 <__mcmp>
    865e:	4683      	mov	fp, r0
    8660:	4649      	mov	r1, r9
    8662:	0038      	movs	r0, r7
    8664:	f000 fff4 	bl	9650 <_Bfree>
    8668:	465b      	mov	r3, fp
    866a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    866c:	4313      	orrs	r3, r2
    866e:	d103      	bne.n	8678 <_dtoa_r+0x8bc>
    8670:	9b07      	ldr	r3, [sp, #28]
    8672:	2b00      	cmp	r3, #0
    8674:	d100      	bne.n	8678 <_dtoa_r+0x8bc>
    8676:	e306      	b.n	8c86 <_dtoa_r+0xeca>
    8678:	2c00      	cmp	r4, #0
    867a:	da00      	bge.n	867e <_dtoa_r+0x8c2>
    867c:	e1a8      	b.n	89d0 <_dtoa_r+0xc14>
    867e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    8680:	431c      	orrs	r4, r3
    8682:	d103      	bne.n	868c <_dtoa_r+0x8d0>
    8684:	9b07      	ldr	r3, [sp, #28]
    8686:	2b00      	cmp	r3, #0
    8688:	d100      	bne.n	868c <_dtoa_r+0x8d0>
    868a:	e1a1      	b.n	89d0 <_dtoa_r+0xc14>
    868c:	465b      	mov	r3, fp
    868e:	2b00      	cmp	r3, #0
    8690:	dd00      	ble.n	8694 <_dtoa_r+0x8d8>
    8692:	e282      	b.n	8b9a <_dtoa_r+0xdde>
    8694:	4669      	mov	r1, sp
    8696:	4652      	mov	r2, sl
    8698:	4653      	mov	r3, sl
    869a:	7c09      	ldrb	r1, [r1, #16]
    869c:	1c5c      	adds	r4, r3, #1
    869e:	7011      	strb	r1, [r2, #0]
    86a0:	9a08      	ldr	r2, [sp, #32]
    86a2:	4552      	cmp	r2, sl
    86a4:	d100      	bne.n	86a8 <_dtoa_r+0x8ec>
    86a6:	e28a      	b.n	8bbe <_dtoa_r+0xe02>
    86a8:	0031      	movs	r1, r6
    86aa:	2300      	movs	r3, #0
    86ac:	220a      	movs	r2, #10
    86ae:	0038      	movs	r0, r7
    86b0:	f000 ffd8 	bl	9664 <__multadd>
    86b4:	2300      	movs	r3, #0
    86b6:	0006      	movs	r6, r0
    86b8:	220a      	movs	r2, #10
    86ba:	0029      	movs	r1, r5
    86bc:	0038      	movs	r0, r7
    86be:	4545      	cmp	r5, r8
    86c0:	d100      	bne.n	86c4 <_dtoa_r+0x908>
    86c2:	e0e1      	b.n	8888 <_dtoa_r+0xacc>
    86c4:	f000 ffce 	bl	9664 <__multadd>
    86c8:	4641      	mov	r1, r8
    86ca:	0005      	movs	r5, r0
    86cc:	2300      	movs	r3, #0
    86ce:	220a      	movs	r2, #10
    86d0:	0038      	movs	r0, r7
    86d2:	f000 ffc7 	bl	9664 <__multadd>
    86d6:	46a2      	mov	sl, r4
    86d8:	4680      	mov	r8, r0
    86da:	e7a3      	b.n	8624 <_dtoa_r+0x868>
    86dc:	201c      	movs	r0, #28
    86de:	9b06      	ldr	r3, [sp, #24]
    86e0:	469c      	mov	ip, r3
    86e2:	4484      	add	ip, r0
    86e4:	4663      	mov	r3, ip
    86e6:	9306      	str	r3, [sp, #24]
    86e8:	9b08      	ldr	r3, [sp, #32]
    86ea:	469c      	mov	ip, r3
    86ec:	4484      	add	ip, r0
    86ee:	4663      	mov	r3, ip
    86f0:	9308      	str	r3, [sp, #32]
    86f2:	9b04      	ldr	r3, [sp, #16]
    86f4:	469c      	mov	ip, r3
    86f6:	4484      	add	ip, r0
    86f8:	4663      	mov	r3, ip
    86fa:	9304      	str	r3, [sp, #16]
    86fc:	e754      	b.n	85a8 <_dtoa_r+0x7ec>
    86fe:	4649      	mov	r1, r9
    8700:	4658      	mov	r0, fp
    8702:	f001 f9b1 	bl	9a68 <__mcmp>
    8706:	2800      	cmp	r0, #0
    8708:	db00      	blt.n	870c <_dtoa_r+0x950>
    870a:	e763      	b.n	85d4 <_dtoa_r+0x818>
    870c:	9b03      	ldr	r3, [sp, #12]
    870e:	4659      	mov	r1, fp
    8710:	3b01      	subs	r3, #1
    8712:	9303      	str	r3, [sp, #12]
    8714:	220a      	movs	r2, #10
    8716:	2300      	movs	r3, #0
    8718:	4650      	mov	r0, sl
    871a:	f000 ffa3 	bl	9664 <__multadd>
    871e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8720:	4683      	mov	fp, r0
    8722:	2b00      	cmp	r3, #0
    8724:	d000      	beq.n	8728 <_dtoa_r+0x96c>
    8726:	e2ca      	b.n	8cbe <_dtoa_r+0xf02>
    8728:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    872a:	2b00      	cmp	r3, #0
    872c:	dc00      	bgt.n	8730 <_dtoa_r+0x974>
    872e:	e2d8      	b.n	8ce2 <_dtoa_r+0xf26>
    8730:	9307      	str	r3, [sp, #28]
    8732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8734:	465d      	mov	r5, fp
    8736:	2400      	movs	r4, #0
    8738:	9f07      	ldr	r7, [sp, #28]
    873a:	469b      	mov	fp, r3
    873c:	e006      	b.n	874c <_dtoa_r+0x990>
    873e:	0029      	movs	r1, r5
    8740:	2300      	movs	r3, #0
    8742:	220a      	movs	r2, #10
    8744:	4650      	mov	r0, sl
    8746:	f000 ff8d 	bl	9664 <__multadd>
    874a:	0005      	movs	r5, r0
    874c:	4649      	mov	r1, r9
    874e:	0028      	movs	r0, r5
    8750:	f7ff fa8a 	bl	7c68 <quorem>
    8754:	465b      	mov	r3, fp
    8756:	3030      	adds	r0, #48	; 0x30
    8758:	5518      	strb	r0, [r3, r4]
    875a:	3401      	adds	r4, #1
    875c:	42bc      	cmp	r4, r7
    875e:	dbee      	blt.n	873e <_dtoa_r+0x982>
    8760:	46ab      	mov	fp, r5
    8762:	0006      	movs	r6, r0
    8764:	9c07      	ldr	r4, [sp, #28]
    8766:	2c00      	cmp	r4, #0
    8768:	dc00      	bgt.n	876c <_dtoa_r+0x9b0>
    876a:	e237      	b.n	8bdc <_dtoa_r+0xe20>
    876c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    876e:	2700      	movs	r7, #0
    8770:	469c      	mov	ip, r3
    8772:	4464      	add	r4, ip
    8774:	4659      	mov	r1, fp
    8776:	2201      	movs	r2, #1
    8778:	4650      	mov	r0, sl
    877a:	f001 f915 	bl	99a8 <__lshift>
    877e:	4649      	mov	r1, r9
    8780:	4683      	mov	fp, r0
    8782:	f001 f971 	bl	9a68 <__mcmp>
    8786:	2800      	cmp	r0, #0
    8788:	dc00      	bgt.n	878c <_dtoa_r+0x9d0>
    878a:	e144      	b.n	8a16 <_dtoa_r+0xc5a>
    878c:	1e65      	subs	r5, r4, #1
    878e:	782b      	ldrb	r3, [r5, #0]
    8790:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8792:	e006      	b.n	87a2 <_dtoa_r+0x9e6>
    8794:	4295      	cmp	r5, r2
    8796:	d100      	bne.n	879a <_dtoa_r+0x9de>
    8798:	e0b1      	b.n	88fe <_dtoa_r+0xb42>
    879a:	3c02      	subs	r4, #2
    879c:	7823      	ldrb	r3, [r4, #0]
    879e:	002c      	movs	r4, r5
    87a0:	3d01      	subs	r5, #1
    87a2:	2b39      	cmp	r3, #57	; 0x39
    87a4:	d0f6      	beq.n	8794 <_dtoa_r+0x9d8>
    87a6:	3301      	adds	r3, #1
    87a8:	702b      	strb	r3, [r5, #0]
    87aa:	4649      	mov	r1, r9
    87ac:	4650      	mov	r0, sl
    87ae:	f000 ff4f 	bl	9650 <_Bfree>
    87b2:	4643      	mov	r3, r8
    87b4:	2b00      	cmp	r3, #0
    87b6:	d100      	bne.n	87ba <_dtoa_r+0x9fe>
    87b8:	e52f      	b.n	821a <_dtoa_r+0x45e>
    87ba:	2f00      	cmp	r7, #0
    87bc:	d005      	beq.n	87ca <_dtoa_r+0xa0e>
    87be:	4547      	cmp	r7, r8
    87c0:	d003      	beq.n	87ca <_dtoa_r+0xa0e>
    87c2:	0039      	movs	r1, r7
    87c4:	4650      	mov	r0, sl
    87c6:	f000 ff43 	bl	9650 <_Bfree>
    87ca:	4641      	mov	r1, r8
    87cc:	4650      	mov	r0, sl
    87ce:	f000 ff3f 	bl	9650 <_Bfree>
    87d2:	e522      	b.n	821a <_dtoa_r+0x45e>
    87d4:	0013      	movs	r3, r2
    87d6:	e675      	b.n	84c4 <_dtoa_r+0x708>
    87d8:	2e00      	cmp	r6, #0
    87da:	d000      	beq.n	87de <_dtoa_r+0xa22>
    87dc:	e6ab      	b.n	8536 <_dtoa_r+0x77a>
    87de:	033b      	lsls	r3, r7, #12
    87e0:	2400      	movs	r4, #0
    87e2:	2b00      	cmp	r3, #0
    87e4:	d000      	beq.n	87e8 <_dtoa_r+0xa2c>
    87e6:	e6bf      	b.n	8568 <_dtoa_r+0x7ac>
    87e8:	4bba      	ldr	r3, [pc, #744]	; (8ad4 <_dtoa_r+0xd18>)
    87ea:	423b      	tst	r3, r7
    87ec:	d100      	bne.n	87f0 <_dtoa_r+0xa34>
    87ee:	e6bb      	b.n	8568 <_dtoa_r+0x7ac>
    87f0:	9b06      	ldr	r3, [sp, #24]
    87f2:	3401      	adds	r4, #1
    87f4:	3301      	adds	r3, #1
    87f6:	9306      	str	r3, [sp, #24]
    87f8:	9b04      	ldr	r3, [sp, #16]
    87fa:	3301      	adds	r3, #1
    87fc:	9304      	str	r3, [sp, #16]
    87fe:	e6b3      	b.n	8568 <_dtoa_r+0x7ac>
    8800:	2301      	movs	r3, #1
    8802:	930b      	str	r3, [sp, #44]	; 0x2c
    8804:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    8806:	2b00      	cmp	r3, #0
    8808:	dc00      	bgt.n	880c <_dtoa_r+0xa50>
    880a:	e0d1      	b.n	89b0 <_dtoa_r+0xbf4>
    880c:	001d      	movs	r5, r3
    880e:	4698      	mov	r8, r3
    8810:	930e      	str	r3, [sp, #56]	; 0x38
    8812:	9307      	str	r3, [sp, #28]
    8814:	f7ff fbc8 	bl	7fa8 <_dtoa_r+0x1ec>
    8818:	9b07      	ldr	r3, [sp, #28]
    881a:	2b00      	cmp	r3, #0
    881c:	dd00      	ble.n	8820 <_dtoa_r+0xa64>
    881e:	e553      	b.n	82c8 <_dtoa_r+0x50c>
    8820:	d000      	beq.n	8824 <_dtoa_r+0xa68>
    8822:	e0ad      	b.n	8980 <_dtoa_r+0xbc4>
    8824:	9804      	ldr	r0, [sp, #16]
    8826:	9905      	ldr	r1, [sp, #20]
    8828:	2200      	movs	r2, #0
    882a:	4bab      	ldr	r3, [pc, #684]	; (8ad8 <_dtoa_r+0xd1c>)
    882c:	f7fc fd58 	bl	52e0 <__aeabi_dmul>
    8830:	003b      	movs	r3, r7
    8832:	0032      	movs	r2, r6
    8834:	f7fd fca8 	bl	6188 <__aeabi_dcmpge>
    8838:	2300      	movs	r3, #0
    883a:	4699      	mov	r9, r3
    883c:	4698      	mov	r8, r3
    883e:	2800      	cmp	r0, #0
    8840:	d055      	beq.n	88ee <_dtoa_r+0xb32>
    8842:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    8844:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    8846:	43db      	mvns	r3, r3
    8848:	9303      	str	r3, [sp, #12]
    884a:	4649      	mov	r1, r9
    884c:	4650      	mov	r0, sl
    884e:	f000 feff 	bl	9650 <_Bfree>
    8852:	4643      	mov	r3, r8
    8854:	2b00      	cmp	r3, #0
    8856:	d100      	bne.n	885a <_dtoa_r+0xa9e>
    8858:	e4df      	b.n	821a <_dtoa_r+0x45e>
    885a:	e7b6      	b.n	87ca <_dtoa_r+0xa0e>
    885c:	464a      	mov	r2, r9
    885e:	4659      	mov	r1, fp
    8860:	4650      	mov	r0, sl
    8862:	f001 f841 	bl	98e8 <__pow5mult>
    8866:	4683      	mov	fp, r0
    8868:	e653      	b.n	8512 <_dtoa_r+0x756>
    886a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    886c:	2a00      	cmp	r2, #0
    886e:	d100      	bne.n	8872 <_dtoa_r+0xab6>
    8870:	e1b6      	b.n	8be0 <_dtoa_r+0xe24>
    8872:	4a9a      	ldr	r2, [pc, #616]	; (8adc <_dtoa_r+0xd20>)
    8874:	464c      	mov	r4, r9
    8876:	4694      	mov	ip, r2
    8878:	9a06      	ldr	r2, [sp, #24]
    887a:	4463      	add	r3, ip
    887c:	9208      	str	r2, [sp, #32]
    887e:	e5d5      	b.n	842c <_dtoa_r+0x670>
    8880:	2e00      	cmp	r6, #0
    8882:	d000      	beq.n	8886 <_dtoa_r+0xaca>
    8884:	e670      	b.n	8568 <_dtoa_r+0x7ac>
    8886:	e7aa      	b.n	87de <_dtoa_r+0xa22>
    8888:	f000 feec 	bl	9664 <__multadd>
    888c:	46a2      	mov	sl, r4
    888e:	0005      	movs	r5, r0
    8890:	4680      	mov	r8, r0
    8892:	e6c7      	b.n	8624 <_dtoa_r+0x868>
    8894:	2301      	movs	r3, #1
    8896:	469b      	mov	fp, r3
    8898:	e6e2      	b.n	8660 <_dtoa_r+0x8a4>
    889a:	2300      	movs	r3, #0
    889c:	930b      	str	r3, [sp, #44]	; 0x2c
    889e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    88a0:	2b02      	cmp	r3, #2
    88a2:	d0af      	beq.n	8804 <_dtoa_r+0xa48>
    88a4:	2400      	movs	r4, #0
    88a6:	4653      	mov	r3, sl
    88a8:	0021      	movs	r1, r4
    88aa:	645c      	str	r4, [r3, #68]	; 0x44
    88ac:	4650      	mov	r0, sl
    88ae:	f000 fea7 	bl	9600 <_Balloc>
    88b2:	4653      	mov	r3, sl
    88b4:	6418      	str	r0, [r3, #64]	; 0x40
    88b6:	2301      	movs	r3, #1
    88b8:	425b      	negs	r3, r3
    88ba:	9307      	str	r3, [sp, #28]
    88bc:	930e      	str	r3, [sp, #56]	; 0x38
    88be:	3302      	adds	r3, #2
    88c0:	900a      	str	r0, [sp, #40]	; 0x28
    88c2:	9423      	str	r4, [sp, #140]	; 0x8c
    88c4:	930b      	str	r3, [sp, #44]	; 0x2c
    88c6:	e4ec      	b.n	82a2 <_dtoa_r+0x4e6>
    88c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
    88ca:	2b02      	cmp	r3, #2
    88cc:	dc00      	bgt.n	88d0 <_dtoa_r+0xb14>
    88ce:	e685      	b.n	85dc <_dtoa_r+0x820>
    88d0:	9b07      	ldr	r3, [sp, #28]
    88d2:	2b00      	cmp	r3, #0
    88d4:	d1b5      	bne.n	8842 <_dtoa_r+0xa86>
    88d6:	4649      	mov	r1, r9
    88d8:	2205      	movs	r2, #5
    88da:	4650      	mov	r0, sl
    88dc:	f000 fec2 	bl	9664 <__multadd>
    88e0:	4681      	mov	r9, r0
    88e2:	0001      	movs	r1, r0
    88e4:	4658      	mov	r0, fp
    88e6:	f001 f8bf 	bl	9a68 <__mcmp>
    88ea:	2800      	cmp	r0, #0
    88ec:	dda9      	ble.n	8842 <_dtoa_r+0xa86>
    88ee:	2331      	movs	r3, #49	; 0x31
    88f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    88f2:	7013      	strb	r3, [r2, #0]
    88f4:	9b03      	ldr	r3, [sp, #12]
    88f6:	1c54      	adds	r4, r2, #1
    88f8:	3301      	adds	r3, #1
    88fa:	9303      	str	r3, [sp, #12]
    88fc:	e7a5      	b.n	884a <_dtoa_r+0xa8e>
    88fe:	9b03      	ldr	r3, [sp, #12]
    8900:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8902:	3301      	adds	r3, #1
    8904:	9303      	str	r3, [sp, #12]
    8906:	2331      	movs	r3, #49	; 0x31
    8908:	7013      	strb	r3, [r2, #0]
    890a:	e74e      	b.n	87aa <_dtoa_r+0x9ee>
    890c:	2300      	movs	r3, #0
    890e:	930b      	str	r3, [sp, #44]	; 0x2c
    8910:	f7ff fb3d 	bl	7f8e <_dtoa_r+0x1d2>
    8914:	9b06      	ldr	r3, [sp, #24]
    8916:	465c      	mov	r4, fp
    8918:	469b      	mov	fp, r3
    891a:	9b07      	ldr	r3, [sp, #28]
    891c:	469a      	mov	sl, r3
    891e:	e47c      	b.n	821a <_dtoa_r+0x45e>
    8920:	4640      	mov	r0, r8
    8922:	f7fd faa7 	bl	5e74 <__aeabi_i2d>
    8926:	0032      	movs	r2, r6
    8928:	003b      	movs	r3, r7
    892a:	f7fc fcd9 	bl	52e0 <__aeabi_dmul>
    892e:	2200      	movs	r2, #0
    8930:	4b6b      	ldr	r3, [pc, #428]	; (8ae0 <_dtoa_r+0xd24>)
    8932:	f001 fd27 	bl	a384 <__aeabi_dadd>
    8936:	4a6b      	ldr	r2, [pc, #428]	; (8ae4 <_dtoa_r+0xd28>)
    8938:	000b      	movs	r3, r1
    893a:	4694      	mov	ip, r2
    893c:	4463      	add	r3, ip
    893e:	9008      	str	r0, [sp, #32]
    8940:	9109      	str	r1, [sp, #36]	; 0x24
    8942:	9309      	str	r3, [sp, #36]	; 0x24
    8944:	2200      	movs	r2, #0
    8946:	4b64      	ldr	r3, [pc, #400]	; (8ad8 <_dtoa_r+0xd1c>)
    8948:	0030      	movs	r0, r6
    894a:	0039      	movs	r1, r7
    894c:	f7fc ff48 	bl	57e0 <__aeabi_dsub>
    8950:	9e08      	ldr	r6, [sp, #32]
    8952:	9f09      	ldr	r7, [sp, #36]	; 0x24
    8954:	0032      	movs	r2, r6
    8956:	003b      	movs	r3, r7
    8958:	0004      	movs	r4, r0
    895a:	000d      	movs	r5, r1
    895c:	f7fd fc0a 	bl	6174 <__aeabi_dcmpgt>
    8960:	2800      	cmp	r0, #0
    8962:	d000      	beq.n	8966 <_dtoa_r+0xbaa>
    8964:	e0b2      	b.n	8acc <_dtoa_r+0xd10>
    8966:	2080      	movs	r0, #128	; 0x80
    8968:	0600      	lsls	r0, r0, #24
    896a:	4684      	mov	ip, r0
    896c:	0039      	movs	r1, r7
    896e:	4461      	add	r1, ip
    8970:	000b      	movs	r3, r1
    8972:	0032      	movs	r2, r6
    8974:	0020      	movs	r0, r4
    8976:	0029      	movs	r1, r5
    8978:	f7fd fbe8 	bl	614c <__aeabi_dcmplt>
    897c:	2800      	cmp	r0, #0
    897e:	d057      	beq.n	8a30 <_dtoa_r+0xc74>
    8980:	2300      	movs	r3, #0
    8982:	4699      	mov	r9, r3
    8984:	4698      	mov	r8, r3
    8986:	e75c      	b.n	8842 <_dtoa_r+0xa86>
    8988:	980a      	ldr	r0, [sp, #40]	; 0x28
    898a:	f7ff fa4c 	bl	7e26 <_dtoa_r+0x6a>
    898e:	1ae2      	subs	r2, r4, r3
    8990:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8992:	46a1      	mov	r9, r4
    8994:	469c      	mov	ip, r3
    8996:	4494      	add	ip, r2
    8998:	4663      	mov	r3, ip
    899a:	2400      	movs	r4, #0
    899c:	930d      	str	r3, [sp, #52]	; 0x34
    899e:	e53e      	b.n	841e <_dtoa_r+0x662>
    89a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    89a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    89a4:	9208      	str	r2, [sp, #32]
    89a6:	9309      	str	r3, [sp, #36]	; 0x24
    89a8:	2302      	movs	r3, #2
    89aa:	4698      	mov	r8, r3
    89ac:	f7ff fb3a 	bl	8024 <_dtoa_r+0x268>
    89b0:	2300      	movs	r3, #0
    89b2:	4652      	mov	r2, sl
    89b4:	2100      	movs	r1, #0
    89b6:	6453      	str	r3, [r2, #68]	; 0x44
    89b8:	4650      	mov	r0, sl
    89ba:	f000 fe21 	bl	9600 <_Balloc>
    89be:	4653      	mov	r3, sl
    89c0:	6418      	str	r0, [r3, #64]	; 0x40
    89c2:	2301      	movs	r3, #1
    89c4:	900a      	str	r0, [sp, #40]	; 0x28
    89c6:	9307      	str	r3, [sp, #28]
    89c8:	9323      	str	r3, [sp, #140]	; 0x8c
    89ca:	930e      	str	r3, [sp, #56]	; 0x38
    89cc:	f7ff fb07 	bl	7fde <_dtoa_r+0x222>
    89d0:	4643      	mov	r3, r8
    89d2:	930c      	str	r3, [sp, #48]	; 0x30
    89d4:	465b      	mov	r3, fp
    89d6:	9a06      	ldr	r2, [sp, #24]
    89d8:	46a8      	mov	r8, r5
    89da:	46b3      	mov	fp, r6
    89dc:	4655      	mov	r5, sl
    89de:	9e04      	ldr	r6, [sp, #16]
    89e0:	4691      	mov	r9, r2
    89e2:	46ba      	mov	sl, r7
    89e4:	2b00      	cmp	r3, #0
    89e6:	dd10      	ble.n	8a0a <_dtoa_r+0xc4e>
    89e8:	4659      	mov	r1, fp
    89ea:	2201      	movs	r2, #1
    89ec:	0038      	movs	r0, r7
    89ee:	f000 ffdb 	bl	99a8 <__lshift>
    89f2:	4649      	mov	r1, r9
    89f4:	4683      	mov	fp, r0
    89f6:	f001 f837 	bl	9a68 <__mcmp>
    89fa:	2800      	cmp	r0, #0
    89fc:	dc00      	bgt.n	8a00 <_dtoa_r+0xc44>
    89fe:	e157      	b.n	8cb0 <_dtoa_r+0xef4>
    8a00:	2e39      	cmp	r6, #57	; 0x39
    8a02:	d100      	bne.n	8a06 <_dtoa_r+0xc4a>
    8a04:	e122      	b.n	8c4c <_dtoa_r+0xe90>
    8a06:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    8a08:	3631      	adds	r6, #49	; 0x31
    8a0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8a0c:	4647      	mov	r7, r8
    8a0e:	1c6c      	adds	r4, r5, #1
    8a10:	702e      	strb	r6, [r5, #0]
    8a12:	4698      	mov	r8, r3
    8a14:	e6c9      	b.n	87aa <_dtoa_r+0x9ee>
    8a16:	2800      	cmp	r0, #0
    8a18:	d103      	bne.n	8a22 <_dtoa_r+0xc66>
    8a1a:	07f3      	lsls	r3, r6, #31
    8a1c:	d501      	bpl.n	8a22 <_dtoa_r+0xc66>
    8a1e:	e6b5      	b.n	878c <_dtoa_r+0x9d0>
    8a20:	001c      	movs	r4, r3
    8a22:	1e63      	subs	r3, r4, #1
    8a24:	781a      	ldrb	r2, [r3, #0]
    8a26:	2a30      	cmp	r2, #48	; 0x30
    8a28:	d0fa      	beq.n	8a20 <_dtoa_r+0xc64>
    8a2a:	e6be      	b.n	87aa <_dtoa_r+0x9ee>
    8a2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8a2e:	4699      	mov	r9, r3
    8a30:	9e10      	ldr	r6, [sp, #64]	; 0x40
    8a32:	9f11      	ldr	r7, [sp, #68]	; 0x44
    8a34:	e435      	b.n	82a2 <_dtoa_r+0x4e6>
    8a36:	2501      	movs	r5, #1
    8a38:	f7ff fab4 	bl	7fa4 <_dtoa_r+0x1e8>
    8a3c:	9b03      	ldr	r3, [sp, #12]
    8a3e:	2b00      	cmp	r3, #0
    8a40:	d100      	bne.n	8a44 <_dtoa_r+0xc88>
    8a42:	e0d4      	b.n	8bee <_dtoa_r+0xe32>
    8a44:	9810      	ldr	r0, [sp, #64]	; 0x40
    8a46:	9911      	ldr	r1, [sp, #68]	; 0x44
    8a48:	425c      	negs	r4, r3
    8a4a:	230f      	movs	r3, #15
    8a4c:	4a26      	ldr	r2, [pc, #152]	; (8ae8 <_dtoa_r+0xd2c>)
    8a4e:	4023      	ands	r3, r4
    8a50:	00db      	lsls	r3, r3, #3
    8a52:	18d3      	adds	r3, r2, r3
    8a54:	681a      	ldr	r2, [r3, #0]
    8a56:	685b      	ldr	r3, [r3, #4]
    8a58:	f7fc fc42 	bl	52e0 <__aeabi_dmul>
    8a5c:	1124      	asrs	r4, r4, #4
    8a5e:	0006      	movs	r6, r0
    8a60:	000f      	movs	r7, r1
    8a62:	2c00      	cmp	r4, #0
    8a64:	d100      	bne.n	8a68 <_dtoa_r+0xcac>
    8a66:	e149      	b.n	8cfc <_dtoa_r+0xf40>
    8a68:	2302      	movs	r3, #2
    8a6a:	4698      	mov	r8, r3
    8a6c:	4d1f      	ldr	r5, [pc, #124]	; (8aec <_dtoa_r+0xd30>)
    8a6e:	2301      	movs	r3, #1
    8a70:	4223      	tst	r3, r4
    8a72:	d009      	beq.n	8a88 <_dtoa_r+0xccc>
    8a74:	469c      	mov	ip, r3
    8a76:	682a      	ldr	r2, [r5, #0]
    8a78:	686b      	ldr	r3, [r5, #4]
    8a7a:	0030      	movs	r0, r6
    8a7c:	0039      	movs	r1, r7
    8a7e:	44e0      	add	r8, ip
    8a80:	f7fc fc2e 	bl	52e0 <__aeabi_dmul>
    8a84:	0006      	movs	r6, r0
    8a86:	000f      	movs	r7, r1
    8a88:	1064      	asrs	r4, r4, #1
    8a8a:	3508      	adds	r5, #8
    8a8c:	2c00      	cmp	r4, #0
    8a8e:	d1ee      	bne.n	8a6e <_dtoa_r+0xcb2>
    8a90:	f7ff fae4 	bl	805c <_dtoa_r+0x2a0>
    8a94:	9b03      	ldr	r3, [sp, #12]
    8a96:	2730      	movs	r7, #48	; 0x30
    8a98:	3301      	adds	r3, #1
    8a9a:	9303      	str	r3, [sp, #12]
    8a9c:	2330      	movs	r3, #48	; 0x30
    8a9e:	702b      	strb	r3, [r5, #0]
    8aa0:	e4ac      	b.n	83fc <_dtoa_r+0x640>
    8aa2:	6859      	ldr	r1, [r3, #4]
    8aa4:	4650      	mov	r0, sl
    8aa6:	f000 fdab 	bl	9600 <_Balloc>
    8aaa:	4643      	mov	r3, r8
    8aac:	4641      	mov	r1, r8
    8aae:	0004      	movs	r4, r0
    8ab0:	691b      	ldr	r3, [r3, #16]
    8ab2:	310c      	adds	r1, #12
    8ab4:	1c9a      	adds	r2, r3, #2
    8ab6:	0092      	lsls	r2, r2, #2
    8ab8:	300c      	adds	r0, #12
    8aba:	f7fd fcdd 	bl	6478 <memcpy>
    8abe:	2201      	movs	r2, #1
    8ac0:	0021      	movs	r1, r4
    8ac2:	4650      	mov	r0, sl
    8ac4:	f000 ff70 	bl	99a8 <__lshift>
    8ac8:	900c      	str	r0, [sp, #48]	; 0x30
    8aca:	e599      	b.n	8600 <_dtoa_r+0x844>
    8acc:	2300      	movs	r3, #0
    8ace:	4699      	mov	r9, r3
    8ad0:	4698      	mov	r8, r3
    8ad2:	e70c      	b.n	88ee <_dtoa_r+0xb32>
    8ad4:	7ff00000 	.word	0x7ff00000
    8ad8:	40140000 	.word	0x40140000
    8adc:	00000433 	.word	0x00000433
    8ae0:	401c0000 	.word	0x401c0000
    8ae4:	fcc00000 	.word	0xfcc00000
    8ae8:	0000b818 	.word	0x0000b818
    8aec:	0000b7f0 	.word	0x0000b7f0
    8af0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8af2:	498f      	ldr	r1, [pc, #572]	; (8d30 <_dtoa_r+0xf74>)
    8af4:	3b01      	subs	r3, #1
    8af6:	00db      	lsls	r3, r3, #3
    8af8:	18c9      	adds	r1, r1, r3
    8afa:	6808      	ldr	r0, [r1, #0]
    8afc:	6849      	ldr	r1, [r1, #4]
    8afe:	9a08      	ldr	r2, [sp, #32]
    8b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8b02:	f7fc fbed 	bl	52e0 <__aeabi_dmul>
    8b06:	9014      	str	r0, [sp, #80]	; 0x50
    8b08:	9115      	str	r1, [sp, #84]	; 0x54
    8b0a:	0039      	movs	r1, r7
    8b0c:	0030      	movs	r0, r6
    8b0e:	f7fd f97d 	bl	5e0c <__aeabi_d2iz>
    8b12:	0005      	movs	r5, r0
    8b14:	f7fd f9ae 	bl	5e74 <__aeabi_i2d>
    8b18:	0002      	movs	r2, r0
    8b1a:	000b      	movs	r3, r1
    8b1c:	0030      	movs	r0, r6
    8b1e:	0039      	movs	r1, r7
    8b20:	f7fc fe5e 	bl	57e0 <__aeabi_dsub>
    8b24:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8b26:	9008      	str	r0, [sp, #32]
    8b28:	9109      	str	r1, [sp, #36]	; 0x24
    8b2a:	990a      	ldr	r1, [sp, #40]	; 0x28
    8b2c:	001a      	movs	r2, r3
    8b2e:	468c      	mov	ip, r1
    8b30:	3530      	adds	r5, #48	; 0x30
    8b32:	4462      	add	r2, ip
    8b34:	1c4c      	adds	r4, r1, #1
    8b36:	700d      	strb	r5, [r1, #0]
    8b38:	4690      	mov	r8, r2
    8b3a:	2b01      	cmp	r3, #1
    8b3c:	d01b      	beq.n	8b76 <_dtoa_r+0xdba>
    8b3e:	9808      	ldr	r0, [sp, #32]
    8b40:	9909      	ldr	r1, [sp, #36]	; 0x24
    8b42:	0025      	movs	r5, r4
    8b44:	2200      	movs	r2, #0
    8b46:	4b7b      	ldr	r3, [pc, #492]	; (8d34 <_dtoa_r+0xf78>)
    8b48:	f7fc fbca 	bl	52e0 <__aeabi_dmul>
    8b4c:	000f      	movs	r7, r1
    8b4e:	0006      	movs	r6, r0
    8b50:	f7fd f95c 	bl	5e0c <__aeabi_d2iz>
    8b54:	0004      	movs	r4, r0
    8b56:	f7fd f98d 	bl	5e74 <__aeabi_i2d>
    8b5a:	3430      	adds	r4, #48	; 0x30
    8b5c:	0002      	movs	r2, r0
    8b5e:	000b      	movs	r3, r1
    8b60:	0030      	movs	r0, r6
    8b62:	0039      	movs	r1, r7
    8b64:	f7fc fe3c 	bl	57e0 <__aeabi_dsub>
    8b68:	702c      	strb	r4, [r5, #0]
    8b6a:	3501      	adds	r5, #1
    8b6c:	45a8      	cmp	r8, r5
    8b6e:	d1e9      	bne.n	8b44 <_dtoa_r+0xd88>
    8b70:	4644      	mov	r4, r8
    8b72:	9008      	str	r0, [sp, #32]
    8b74:	9109      	str	r1, [sp, #36]	; 0x24
    8b76:	9814      	ldr	r0, [sp, #80]	; 0x50
    8b78:	9915      	ldr	r1, [sp, #84]	; 0x54
    8b7a:	2200      	movs	r2, #0
    8b7c:	4b6e      	ldr	r3, [pc, #440]	; (8d38 <_dtoa_r+0xf7c>)
    8b7e:	f001 fc01 	bl	a384 <__aeabi_dadd>
    8b82:	9a08      	ldr	r2, [sp, #32]
    8b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8b86:	f7fd fae1 	bl	614c <__aeabi_dcmplt>
    8b8a:	2800      	cmp	r0, #0
    8b8c:	d067      	beq.n	8c5e <_dtoa_r+0xea2>
    8b8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8b90:	1e65      	subs	r5, r4, #1
    8b92:	9303      	str	r3, [sp, #12]
    8b94:	782f      	ldrb	r7, [r5, #0]
    8b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8b98:	e42e      	b.n	83f8 <_dtoa_r+0x63c>
    8b9a:	4643      	mov	r3, r8
    8b9c:	46b3      	mov	fp, r6
    8b9e:	930c      	str	r3, [sp, #48]	; 0x30
    8ba0:	9e04      	ldr	r6, [sp, #16]
    8ba2:	9b06      	ldr	r3, [sp, #24]
    8ba4:	46a8      	mov	r8, r5
    8ba6:	4699      	mov	r9, r3
    8ba8:	4655      	mov	r5, sl
    8baa:	46ba      	mov	sl, r7
    8bac:	2e39      	cmp	r6, #57	; 0x39
    8bae:	d04d      	beq.n	8c4c <_dtoa_r+0xe90>
    8bb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8bb2:	3601      	adds	r6, #1
    8bb4:	4647      	mov	r7, r8
    8bb6:	1c6c      	adds	r4, r5, #1
    8bb8:	702e      	strb	r6, [r5, #0]
    8bba:	4698      	mov	r8, r3
    8bbc:	e5f5      	b.n	87aa <_dtoa_r+0x9ee>
    8bbe:	4642      	mov	r2, r8
    8bc0:	9b06      	ldr	r3, [sp, #24]
    8bc2:	46b3      	mov	fp, r6
    8bc4:	46ba      	mov	sl, r7
    8bc6:	9e04      	ldr	r6, [sp, #16]
    8bc8:	4699      	mov	r9, r3
    8bca:	002f      	movs	r7, r5
    8bcc:	4690      	mov	r8, r2
    8bce:	e5d1      	b.n	8774 <_dtoa_r+0x9b8>
    8bd0:	9b06      	ldr	r3, [sp, #24]
    8bd2:	9a07      	ldr	r2, [sp, #28]
    8bd4:	1a9b      	subs	r3, r3, r2
    8bd6:	9308      	str	r3, [sp, #32]
    8bd8:	2300      	movs	r3, #0
    8bda:	e427      	b.n	842c <_dtoa_r+0x670>
    8bdc:	2401      	movs	r4, #1
    8bde:	e5c5      	b.n	876c <_dtoa_r+0x9b0>
    8be0:	2336      	movs	r3, #54	; 0x36
    8be2:	9a16      	ldr	r2, [sp, #88]	; 0x58
    8be4:	464c      	mov	r4, r9
    8be6:	1a9b      	subs	r3, r3, r2
    8be8:	9a06      	ldr	r2, [sp, #24]
    8bea:	9208      	str	r2, [sp, #32]
    8bec:	e41e      	b.n	842c <_dtoa_r+0x670>
    8bee:	2302      	movs	r3, #2
    8bf0:	9e10      	ldr	r6, [sp, #64]	; 0x40
    8bf2:	9f11      	ldr	r7, [sp, #68]	; 0x44
    8bf4:	4698      	mov	r8, r3
    8bf6:	f7ff fa31 	bl	805c <_dtoa_r+0x2a0>
    8bfa:	9b07      	ldr	r3, [sp, #28]
    8bfc:	2b00      	cmp	r3, #0
    8bfe:	d100      	bne.n	8c02 <_dtoa_r+0xe46>
    8c00:	e68e      	b.n	8920 <_dtoa_r+0xb64>
    8c02:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    8c04:	2c00      	cmp	r4, #0
    8c06:	dc00      	bgt.n	8c0a <_dtoa_r+0xe4e>
    8c08:	e712      	b.n	8a30 <_dtoa_r+0xc74>
    8c0a:	9b03      	ldr	r3, [sp, #12]
    8c0c:	2200      	movs	r2, #0
    8c0e:	3b01      	subs	r3, #1
    8c10:	9313      	str	r3, [sp, #76]	; 0x4c
    8c12:	0030      	movs	r0, r6
    8c14:	4b47      	ldr	r3, [pc, #284]	; (8d34 <_dtoa_r+0xf78>)
    8c16:	0039      	movs	r1, r7
    8c18:	f7fc fb62 	bl	52e0 <__aeabi_dmul>
    8c1c:	0006      	movs	r6, r0
    8c1e:	4640      	mov	r0, r8
    8c20:	000f      	movs	r7, r1
    8c22:	3001      	adds	r0, #1
    8c24:	f7fd f926 	bl	5e74 <__aeabi_i2d>
    8c28:	0032      	movs	r2, r6
    8c2a:	003b      	movs	r3, r7
    8c2c:	f7fc fb58 	bl	52e0 <__aeabi_dmul>
    8c30:	2200      	movs	r2, #0
    8c32:	4b42      	ldr	r3, [pc, #264]	; (8d3c <_dtoa_r+0xf80>)
    8c34:	f001 fba6 	bl	a384 <__aeabi_dadd>
    8c38:	4a41      	ldr	r2, [pc, #260]	; (8d40 <_dtoa_r+0xf84>)
    8c3a:	000b      	movs	r3, r1
    8c3c:	4694      	mov	ip, r2
    8c3e:	4463      	add	r3, ip
    8c40:	9008      	str	r0, [sp, #32]
    8c42:	9109      	str	r1, [sp, #36]	; 0x24
    8c44:	9412      	str	r4, [sp, #72]	; 0x48
    8c46:	9309      	str	r3, [sp, #36]	; 0x24
    8c48:	f7ff fa30 	bl	80ac <_dtoa_r+0x2f0>
    8c4c:	2339      	movs	r3, #57	; 0x39
    8c4e:	702b      	strb	r3, [r5, #0]
    8c50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8c52:	4647      	mov	r7, r8
    8c54:	1c6c      	adds	r4, r5, #1
    8c56:	4698      	mov	r8, r3
    8c58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8c5a:	2339      	movs	r3, #57	; 0x39
    8c5c:	e5a1      	b.n	87a2 <_dtoa_r+0x9e6>
    8c5e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    8c60:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8c62:	2000      	movs	r0, #0
    8c64:	4934      	ldr	r1, [pc, #208]	; (8d38 <_dtoa_r+0xf7c>)
    8c66:	f7fc fdbb 	bl	57e0 <__aeabi_dsub>
    8c6a:	9a08      	ldr	r2, [sp, #32]
    8c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8c6e:	f7fd fa81 	bl	6174 <__aeabi_dcmpgt>
    8c72:	2800      	cmp	r0, #0
    8c74:	d101      	bne.n	8c7a <_dtoa_r+0xebe>
    8c76:	e6db      	b.n	8a30 <_dtoa_r+0xc74>
    8c78:	001c      	movs	r4, r3
    8c7a:	1e63      	subs	r3, r4, #1
    8c7c:	781a      	ldrb	r2, [r3, #0]
    8c7e:	2a30      	cmp	r2, #48	; 0x30
    8c80:	d0fa      	beq.n	8c78 <_dtoa_r+0xebc>
    8c82:	f7ff fac8 	bl	8216 <_dtoa_r+0x45a>
    8c86:	4643      	mov	r3, r8
    8c88:	46b3      	mov	fp, r6
    8c8a:	930c      	str	r3, [sp, #48]	; 0x30
    8c8c:	9e04      	ldr	r6, [sp, #16]
    8c8e:	9b06      	ldr	r3, [sp, #24]
    8c90:	46a8      	mov	r8, r5
    8c92:	4699      	mov	r9, r3
    8c94:	4655      	mov	r5, sl
    8c96:	46ba      	mov	sl, r7
    8c98:	2e39      	cmp	r6, #57	; 0x39
    8c9a:	d0d7      	beq.n	8c4c <_dtoa_r+0xe90>
    8c9c:	2c00      	cmp	r4, #0
    8c9e:	dd00      	ble.n	8ca2 <_dtoa_r+0xee6>
    8ca0:	e6b1      	b.n	8a06 <_dtoa_r+0xc4a>
    8ca2:	e6b2      	b.n	8a0a <_dtoa_r+0xc4e>
    8ca4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8ca6:	464d      	mov	r5, r9
    8ca8:	9203      	str	r2, [sp, #12]
    8caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8cac:	f7ff fba4 	bl	83f8 <_dtoa_r+0x63c>
    8cb0:	2800      	cmp	r0, #0
    8cb2:	d000      	beq.n	8cb6 <_dtoa_r+0xefa>
    8cb4:	e6a9      	b.n	8a0a <_dtoa_r+0xc4e>
    8cb6:	07f3      	lsls	r3, r6, #31
    8cb8:	d400      	bmi.n	8cbc <_dtoa_r+0xf00>
    8cba:	e6a6      	b.n	8a0a <_dtoa_r+0xc4e>
    8cbc:	e6a0      	b.n	8a00 <_dtoa_r+0xc44>
    8cbe:	2300      	movs	r3, #0
    8cc0:	4641      	mov	r1, r8
    8cc2:	220a      	movs	r2, #10
    8cc4:	4650      	mov	r0, sl
    8cc6:	f000 fccd 	bl	9664 <__multadd>
    8cca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8ccc:	4680      	mov	r8, r0
    8cce:	2b00      	cmp	r3, #0
    8cd0:	dd01      	ble.n	8cd6 <_dtoa_r+0xf1a>
    8cd2:	9307      	str	r3, [sp, #28]
    8cd4:	e486      	b.n	85e4 <_dtoa_r+0x828>
    8cd6:	9b22      	ldr	r3, [sp, #136]	; 0x88
    8cd8:	2b02      	cmp	r3, #2
    8cda:	dc1f      	bgt.n	8d1c <_dtoa_r+0xf60>
    8cdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8cde:	9307      	str	r3, [sp, #28]
    8ce0:	e480      	b.n	85e4 <_dtoa_r+0x828>
    8ce2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    8ce4:	2b02      	cmp	r3, #2
    8ce6:	dc19      	bgt.n	8d1c <_dtoa_r+0xf60>
    8ce8:	4649      	mov	r1, r9
    8cea:	f7fe ffbd 	bl	7c68 <quorem>
    8cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8cf0:	3030      	adds	r0, #48	; 0x30
    8cf2:	7018      	strb	r0, [r3, #0]
    8cf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8cf6:	0006      	movs	r6, r0
    8cf8:	9307      	str	r3, [sp, #28]
    8cfa:	e533      	b.n	8764 <_dtoa_r+0x9a8>
    8cfc:	2302      	movs	r3, #2
    8cfe:	4698      	mov	r8, r3
    8d00:	f7ff f9ac 	bl	805c <_dtoa_r+0x2a0>
    8d04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8d06:	9c14      	ldr	r4, [sp, #80]	; 0x50
    8d08:	9303      	str	r3, [sp, #12]
    8d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d0c:	001d      	movs	r5, r3
    8d0e:	f7ff fb73 	bl	83f8 <_dtoa_r+0x63c>
    8d12:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8d14:	9c14      	ldr	r4, [sp, #80]	; 0x50
    8d16:	9303      	str	r3, [sp, #12]
    8d18:	f7ff fa7f 	bl	821a <_dtoa_r+0x45e>
    8d1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8d1e:	9307      	str	r3, [sp, #28]
    8d20:	e5d6      	b.n	88d0 <_dtoa_r+0xb14>
    8d22:	2b04      	cmp	r3, #4
    8d24:	d100      	bne.n	8d28 <_dtoa_r+0xf6c>
    8d26:	e43f      	b.n	85a8 <_dtoa_r+0x7ec>
    8d28:	233c      	movs	r3, #60	; 0x3c
    8d2a:	1a18      	subs	r0, r3, r0
    8d2c:	e4d7      	b.n	86de <_dtoa_r+0x922>
    8d2e:	46c0      	nop			; (mov r8, r8)
    8d30:	0000b818 	.word	0x0000b818
    8d34:	40240000 	.word	0x40240000
    8d38:	3fe00000 	.word	0x3fe00000
    8d3c:	401c0000 	.word	0x401c0000
    8d40:	fcc00000 	.word	0xfcc00000

00008d44 <__libc_fini_array>:
    8d44:	b570      	push	{r4, r5, r6, lr}
    8d46:	4b09      	ldr	r3, [pc, #36]	; (8d6c <__libc_fini_array+0x28>)
    8d48:	4c09      	ldr	r4, [pc, #36]	; (8d70 <__libc_fini_array+0x2c>)
    8d4a:	1ae4      	subs	r4, r4, r3
    8d4c:	10a4      	asrs	r4, r4, #2
    8d4e:	d009      	beq.n	8d64 <__libc_fini_array+0x20>
    8d50:	4a08      	ldr	r2, [pc, #32]	; (8d74 <__libc_fini_array+0x30>)
    8d52:	18a5      	adds	r5, r4, r2
    8d54:	00ad      	lsls	r5, r5, #2
    8d56:	18ed      	adds	r5, r5, r3
    8d58:	682b      	ldr	r3, [r5, #0]
    8d5a:	3c01      	subs	r4, #1
    8d5c:	4798      	blx	r3
    8d5e:	3d04      	subs	r5, #4
    8d60:	2c00      	cmp	r4, #0
    8d62:	d1f9      	bne.n	8d58 <__libc_fini_array+0x14>
    8d64:	f002 fe56 	bl	ba14 <_fini>
    8d68:	bd70      	pop	{r4, r5, r6, pc}
    8d6a:	46c0      	nop			; (mov r8, r8)
    8d6c:	0000ba20 	.word	0x0000ba20
    8d70:	0000ba24 	.word	0x0000ba24
    8d74:	3fffffff 	.word	0x3fffffff

00008d78 <_malloc_trim_r>:
    8d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d7a:	000c      	movs	r4, r1
    8d7c:	0006      	movs	r6, r0
    8d7e:	f000 fc2f 	bl	95e0 <__malloc_lock>
    8d82:	4f20      	ldr	r7, [pc, #128]	; (8e04 <_malloc_trim_r+0x8c>)
    8d84:	68bb      	ldr	r3, [r7, #8]
    8d86:	685d      	ldr	r5, [r3, #4]
    8d88:	2303      	movs	r3, #3
    8d8a:	439d      	bics	r5, r3
    8d8c:	4b1e      	ldr	r3, [pc, #120]	; (8e08 <_malloc_trim_r+0x90>)
    8d8e:	1b2c      	subs	r4, r5, r4
    8d90:	469c      	mov	ip, r3
    8d92:	4464      	add	r4, ip
    8d94:	0b24      	lsrs	r4, r4, #12
    8d96:	4b1d      	ldr	r3, [pc, #116]	; (8e0c <_malloc_trim_r+0x94>)
    8d98:	3c01      	subs	r4, #1
    8d9a:	0324      	lsls	r4, r4, #12
    8d9c:	429c      	cmp	r4, r3
    8d9e:	dd07      	ble.n	8db0 <_malloc_trim_r+0x38>
    8da0:	2100      	movs	r1, #0
    8da2:	0030      	movs	r0, r6
    8da4:	f000 ff74 	bl	9c90 <_sbrk_r>
    8da8:	68bb      	ldr	r3, [r7, #8]
    8daa:	195b      	adds	r3, r3, r5
    8dac:	4298      	cmp	r0, r3
    8dae:	d004      	beq.n	8dba <_malloc_trim_r+0x42>
    8db0:	0030      	movs	r0, r6
    8db2:	f000 fc1d 	bl	95f0 <__malloc_unlock>
    8db6:	2000      	movs	r0, #0
    8db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8dba:	4261      	negs	r1, r4
    8dbc:	0030      	movs	r0, r6
    8dbe:	f000 ff67 	bl	9c90 <_sbrk_r>
    8dc2:	1c43      	adds	r3, r0, #1
    8dc4:	d00d      	beq.n	8de2 <_malloc_trim_r+0x6a>
    8dc6:	2201      	movs	r2, #1
    8dc8:	68bb      	ldr	r3, [r7, #8]
    8dca:	1b2d      	subs	r5, r5, r4
    8dcc:	4315      	orrs	r5, r2
    8dce:	605d      	str	r5, [r3, #4]
    8dd0:	4b0f      	ldr	r3, [pc, #60]	; (8e10 <_malloc_trim_r+0x98>)
    8dd2:	0030      	movs	r0, r6
    8dd4:	681a      	ldr	r2, [r3, #0]
    8dd6:	1b14      	subs	r4, r2, r4
    8dd8:	601c      	str	r4, [r3, #0]
    8dda:	f000 fc09 	bl	95f0 <__malloc_unlock>
    8dde:	2001      	movs	r0, #1
    8de0:	e7ea      	b.n	8db8 <_malloc_trim_r+0x40>
    8de2:	2100      	movs	r1, #0
    8de4:	0030      	movs	r0, r6
    8de6:	f000 ff53 	bl	9c90 <_sbrk_r>
    8dea:	68ba      	ldr	r2, [r7, #8]
    8dec:	1a83      	subs	r3, r0, r2
    8dee:	2b0f      	cmp	r3, #15
    8df0:	ddde      	ble.n	8db0 <_malloc_trim_r+0x38>
    8df2:	4908      	ldr	r1, [pc, #32]	; (8e14 <_malloc_trim_r+0x9c>)
    8df4:	6809      	ldr	r1, [r1, #0]
    8df6:	1a40      	subs	r0, r0, r1
    8df8:	4905      	ldr	r1, [pc, #20]	; (8e10 <_malloc_trim_r+0x98>)
    8dfa:	6008      	str	r0, [r1, #0]
    8dfc:	2101      	movs	r1, #1
    8dfe:	430b      	orrs	r3, r1
    8e00:	6053      	str	r3, [r2, #4]
    8e02:	e7d5      	b.n	8db0 <_malloc_trim_r+0x38>
    8e04:	2000044c 	.word	0x2000044c
    8e08:	00000fef 	.word	0x00000fef
    8e0c:	00000fff 	.word	0x00000fff
    8e10:	20000e0c 	.word	0x20000e0c
    8e14:	20000854 	.word	0x20000854

00008e18 <_free_r>:
    8e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e1a:	0004      	movs	r4, r0
    8e1c:	1e0d      	subs	r5, r1, #0
    8e1e:	d03c      	beq.n	8e9a <_free_r+0x82>
    8e20:	f000 fbde 	bl	95e0 <__malloc_lock>
    8e24:	0029      	movs	r1, r5
    8e26:	3908      	subs	r1, #8
    8e28:	6848      	ldr	r0, [r1, #4]
    8e2a:	2301      	movs	r3, #1
    8e2c:	0005      	movs	r5, r0
    8e2e:	2603      	movs	r6, #3
    8e30:	439d      	bics	r5, r3
    8e32:	194a      	adds	r2, r1, r5
    8e34:	469c      	mov	ip, r3
    8e36:	4f61      	ldr	r7, [pc, #388]	; (8fbc <_free_r+0x1a4>)
    8e38:	6853      	ldr	r3, [r2, #4]
    8e3a:	43b3      	bics	r3, r6
    8e3c:	68be      	ldr	r6, [r7, #8]
    8e3e:	42b2      	cmp	r2, r6
    8e40:	d056      	beq.n	8ef0 <_free_r+0xd8>
    8e42:	4666      	mov	r6, ip
    8e44:	6053      	str	r3, [r2, #4]
    8e46:	4206      	tst	r6, r0
    8e48:	d10a      	bne.n	8e60 <_free_r+0x48>
    8e4a:	003e      	movs	r6, r7
    8e4c:	6808      	ldr	r0, [r1, #0]
    8e4e:	3608      	adds	r6, #8
    8e50:	1a09      	subs	r1, r1, r0
    8e52:	182d      	adds	r5, r5, r0
    8e54:	6888      	ldr	r0, [r1, #8]
    8e56:	42b0      	cmp	r0, r6
    8e58:	d065      	beq.n	8f26 <_free_r+0x10e>
    8e5a:	68ce      	ldr	r6, [r1, #12]
    8e5c:	60c6      	str	r6, [r0, #12]
    8e5e:	60b0      	str	r0, [r6, #8]
    8e60:	2001      	movs	r0, #1
    8e62:	18d6      	adds	r6, r2, r3
    8e64:	6876      	ldr	r6, [r6, #4]
    8e66:	4206      	tst	r6, r0
    8e68:	d033      	beq.n	8ed2 <_free_r+0xba>
    8e6a:	4b55      	ldr	r3, [pc, #340]	; (8fc0 <_free_r+0x1a8>)
    8e6c:	4328      	orrs	r0, r5
    8e6e:	6048      	str	r0, [r1, #4]
    8e70:	514d      	str	r5, [r1, r5]
    8e72:	429d      	cmp	r5, r3
    8e74:	d812      	bhi.n	8e9c <_free_r+0x84>
    8e76:	08ed      	lsrs	r5, r5, #3
    8e78:	3bff      	subs	r3, #255	; 0xff
    8e7a:	10aa      	asrs	r2, r5, #2
    8e7c:	3bff      	subs	r3, #255	; 0xff
    8e7e:	4093      	lsls	r3, r2
    8e80:	687a      	ldr	r2, [r7, #4]
    8e82:	00ed      	lsls	r5, r5, #3
    8e84:	4313      	orrs	r3, r2
    8e86:	607b      	str	r3, [r7, #4]
    8e88:	19ef      	adds	r7, r5, r7
    8e8a:	68bb      	ldr	r3, [r7, #8]
    8e8c:	60cf      	str	r7, [r1, #12]
    8e8e:	608b      	str	r3, [r1, #8]
    8e90:	60b9      	str	r1, [r7, #8]
    8e92:	60d9      	str	r1, [r3, #12]
    8e94:	0020      	movs	r0, r4
    8e96:	f000 fbab 	bl	95f0 <__malloc_unlock>
    8e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8e9c:	0a68      	lsrs	r0, r5, #9
    8e9e:	2804      	cmp	r0, #4
    8ea0:	d850      	bhi.n	8f44 <_free_r+0x12c>
    8ea2:	09a8      	lsrs	r0, r5, #6
    8ea4:	0002      	movs	r2, r0
    8ea6:	3039      	adds	r0, #57	; 0x39
    8ea8:	3238      	adds	r2, #56	; 0x38
    8eaa:	00c0      	lsls	r0, r0, #3
    8eac:	1838      	adds	r0, r7, r0
    8eae:	3808      	subs	r0, #8
    8eb0:	6883      	ldr	r3, [r0, #8]
    8eb2:	2603      	movs	r6, #3
    8eb4:	4298      	cmp	r0, r3
    8eb6:	d04c      	beq.n	8f52 <_free_r+0x13a>
    8eb8:	685a      	ldr	r2, [r3, #4]
    8eba:	43b2      	bics	r2, r6
    8ebc:	4295      	cmp	r5, r2
    8ebe:	d230      	bcs.n	8f22 <_free_r+0x10a>
    8ec0:	689b      	ldr	r3, [r3, #8]
    8ec2:	4298      	cmp	r0, r3
    8ec4:	d1f8      	bne.n	8eb8 <_free_r+0xa0>
    8ec6:	68c3      	ldr	r3, [r0, #12]
    8ec8:	60cb      	str	r3, [r1, #12]
    8eca:	6088      	str	r0, [r1, #8]
    8ecc:	6099      	str	r1, [r3, #8]
    8ece:	60c1      	str	r1, [r0, #12]
    8ed0:	e7e0      	b.n	8e94 <_free_r+0x7c>
    8ed2:	18ed      	adds	r5, r5, r3
    8ed4:	4e3b      	ldr	r6, [pc, #236]	; (8fc4 <_free_r+0x1ac>)
    8ed6:	6893      	ldr	r3, [r2, #8]
    8ed8:	42b3      	cmp	r3, r6
    8eda:	d042      	beq.n	8f62 <_free_r+0x14a>
    8edc:	68d2      	ldr	r2, [r2, #12]
    8ede:	4328      	orrs	r0, r5
    8ee0:	60da      	str	r2, [r3, #12]
    8ee2:	6093      	str	r3, [r2, #8]
    8ee4:	4b36      	ldr	r3, [pc, #216]	; (8fc0 <_free_r+0x1a8>)
    8ee6:	6048      	str	r0, [r1, #4]
    8ee8:	514d      	str	r5, [r1, r5]
    8eea:	429d      	cmp	r5, r3
    8eec:	d8d6      	bhi.n	8e9c <_free_r+0x84>
    8eee:	e7c2      	b.n	8e76 <_free_r+0x5e>
    8ef0:	4662      	mov	r2, ip
    8ef2:	18eb      	adds	r3, r5, r3
    8ef4:	4202      	tst	r2, r0
    8ef6:	d106      	bne.n	8f06 <_free_r+0xee>
    8ef8:	680a      	ldr	r2, [r1, #0]
    8efa:	1a89      	subs	r1, r1, r2
    8efc:	6888      	ldr	r0, [r1, #8]
    8efe:	189b      	adds	r3, r3, r2
    8f00:	68ca      	ldr	r2, [r1, #12]
    8f02:	60c2      	str	r2, [r0, #12]
    8f04:	6090      	str	r0, [r2, #8]
    8f06:	2201      	movs	r2, #1
    8f08:	431a      	orrs	r2, r3
    8f0a:	604a      	str	r2, [r1, #4]
    8f0c:	4a2e      	ldr	r2, [pc, #184]	; (8fc8 <_free_r+0x1b0>)
    8f0e:	60b9      	str	r1, [r7, #8]
    8f10:	6812      	ldr	r2, [r2, #0]
    8f12:	4293      	cmp	r3, r2
    8f14:	d3be      	bcc.n	8e94 <_free_r+0x7c>
    8f16:	4b2d      	ldr	r3, [pc, #180]	; (8fcc <_free_r+0x1b4>)
    8f18:	0020      	movs	r0, r4
    8f1a:	6819      	ldr	r1, [r3, #0]
    8f1c:	f7ff ff2c 	bl	8d78 <_malloc_trim_r>
    8f20:	e7b8      	b.n	8e94 <_free_r+0x7c>
    8f22:	0018      	movs	r0, r3
    8f24:	e7cf      	b.n	8ec6 <_free_r+0xae>
    8f26:	4666      	mov	r6, ip
    8f28:	18d0      	adds	r0, r2, r3
    8f2a:	6840      	ldr	r0, [r0, #4]
    8f2c:	4230      	tst	r0, r6
    8f2e:	d13f      	bne.n	8fb0 <_free_r+0x198>
    8f30:	6890      	ldr	r0, [r2, #8]
    8f32:	195d      	adds	r5, r3, r5
    8f34:	68d3      	ldr	r3, [r2, #12]
    8f36:	60c3      	str	r3, [r0, #12]
    8f38:	6098      	str	r0, [r3, #8]
    8f3a:	4663      	mov	r3, ip
    8f3c:	432b      	orrs	r3, r5
    8f3e:	604b      	str	r3, [r1, #4]
    8f40:	514d      	str	r5, [r1, r5]
    8f42:	e7a7      	b.n	8e94 <_free_r+0x7c>
    8f44:	2814      	cmp	r0, #20
    8f46:	d814      	bhi.n	8f72 <_free_r+0x15a>
    8f48:	0002      	movs	r2, r0
    8f4a:	305c      	adds	r0, #92	; 0x5c
    8f4c:	325b      	adds	r2, #91	; 0x5b
    8f4e:	00c0      	lsls	r0, r0, #3
    8f50:	e7ac      	b.n	8eac <_free_r+0x94>
    8f52:	2301      	movs	r3, #1
    8f54:	1092      	asrs	r2, r2, #2
    8f56:	4093      	lsls	r3, r2
    8f58:	687a      	ldr	r2, [r7, #4]
    8f5a:	4313      	orrs	r3, r2
    8f5c:	607b      	str	r3, [r7, #4]
    8f5e:	0003      	movs	r3, r0
    8f60:	e7b2      	b.n	8ec8 <_free_r+0xb0>
    8f62:	4328      	orrs	r0, r5
    8f64:	60d9      	str	r1, [r3, #12]
    8f66:	6099      	str	r1, [r3, #8]
    8f68:	60cb      	str	r3, [r1, #12]
    8f6a:	608b      	str	r3, [r1, #8]
    8f6c:	6048      	str	r0, [r1, #4]
    8f6e:	514d      	str	r5, [r1, r5]
    8f70:	e790      	b.n	8e94 <_free_r+0x7c>
    8f72:	2854      	cmp	r0, #84	; 0x54
    8f74:	d805      	bhi.n	8f82 <_free_r+0x16a>
    8f76:	0b28      	lsrs	r0, r5, #12
    8f78:	0002      	movs	r2, r0
    8f7a:	306f      	adds	r0, #111	; 0x6f
    8f7c:	326e      	adds	r2, #110	; 0x6e
    8f7e:	00c0      	lsls	r0, r0, #3
    8f80:	e794      	b.n	8eac <_free_r+0x94>
    8f82:	22aa      	movs	r2, #170	; 0xaa
    8f84:	0052      	lsls	r2, r2, #1
    8f86:	4290      	cmp	r0, r2
    8f88:	d805      	bhi.n	8f96 <_free_r+0x17e>
    8f8a:	0be8      	lsrs	r0, r5, #15
    8f8c:	0002      	movs	r2, r0
    8f8e:	3078      	adds	r0, #120	; 0x78
    8f90:	3277      	adds	r2, #119	; 0x77
    8f92:	00c0      	lsls	r0, r0, #3
    8f94:	e78a      	b.n	8eac <_free_r+0x94>
    8f96:	4a0e      	ldr	r2, [pc, #56]	; (8fd0 <_free_r+0x1b8>)
    8f98:	4290      	cmp	r0, r2
    8f9a:	d805      	bhi.n	8fa8 <_free_r+0x190>
    8f9c:	0ca8      	lsrs	r0, r5, #18
    8f9e:	0002      	movs	r2, r0
    8fa0:	307d      	adds	r0, #125	; 0x7d
    8fa2:	327c      	adds	r2, #124	; 0x7c
    8fa4:	00c0      	lsls	r0, r0, #3
    8fa6:	e781      	b.n	8eac <_free_r+0x94>
    8fa8:	20fe      	movs	r0, #254	; 0xfe
    8faa:	227e      	movs	r2, #126	; 0x7e
    8fac:	0080      	lsls	r0, r0, #2
    8fae:	e77d      	b.n	8eac <_free_r+0x94>
    8fb0:	4663      	mov	r3, ip
    8fb2:	432b      	orrs	r3, r5
    8fb4:	604b      	str	r3, [r1, #4]
    8fb6:	6015      	str	r5, [r2, #0]
    8fb8:	e76c      	b.n	8e94 <_free_r+0x7c>
    8fba:	46c0      	nop			; (mov r8, r8)
    8fbc:	2000044c 	.word	0x2000044c
    8fc0:	000001ff 	.word	0x000001ff
    8fc4:	20000454 	.word	0x20000454
    8fc8:	20000858 	.word	0x20000858
    8fcc:	20000e3c 	.word	0x20000e3c
    8fd0:	00000554 	.word	0x00000554

00008fd4 <_localeconv_r>:
    8fd4:	4b04      	ldr	r3, [pc, #16]	; (8fe8 <_localeconv_r+0x14>)
    8fd6:	681b      	ldr	r3, [r3, #0]
    8fd8:	6b58      	ldr	r0, [r3, #52]	; 0x34
    8fda:	2800      	cmp	r0, #0
    8fdc:	d001      	beq.n	8fe2 <_localeconv_r+0xe>
    8fde:	30f0      	adds	r0, #240	; 0xf0
    8fe0:	4770      	bx	lr
    8fe2:	4802      	ldr	r0, [pc, #8]	; (8fec <_localeconv_r+0x18>)
    8fe4:	e7fb      	b.n	8fde <_localeconv_r+0xa>
    8fe6:	46c0      	nop			; (mov r8, r8)
    8fe8:	2000001c 	.word	0x2000001c
    8fec:	2000085c 	.word	0x2000085c

00008ff0 <__retarget_lock_acquire_recursive>:
    8ff0:	4770      	bx	lr
    8ff2:	46c0      	nop			; (mov r8, r8)

00008ff4 <__retarget_lock_release_recursive>:
    8ff4:	4770      	bx	lr
    8ff6:	46c0      	nop			; (mov r8, r8)

00008ff8 <_malloc_r>:
    8ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8ffa:	4657      	mov	r7, sl
    8ffc:	4645      	mov	r5, r8
    8ffe:	46de      	mov	lr, fp
    9000:	464e      	mov	r6, r9
    9002:	b5e0      	push	{r5, r6, r7, lr}
    9004:	000d      	movs	r5, r1
    9006:	350b      	adds	r5, #11
    9008:	b083      	sub	sp, #12
    900a:	0007      	movs	r7, r0
    900c:	2d16      	cmp	r5, #22
    900e:	d800      	bhi.n	9012 <_malloc_r+0x1a>
    9010:	e09f      	b.n	9152 <_malloc_r+0x15a>
    9012:	2307      	movs	r3, #7
    9014:	439d      	bics	r5, r3
    9016:	d500      	bpl.n	901a <_malloc_r+0x22>
    9018:	e0c4      	b.n	91a4 <_malloc_r+0x1ac>
    901a:	42a9      	cmp	r1, r5
    901c:	d900      	bls.n	9020 <_malloc_r+0x28>
    901e:	e0c1      	b.n	91a4 <_malloc_r+0x1ac>
    9020:	f000 fade 	bl	95e0 <__malloc_lock>
    9024:	23f8      	movs	r3, #248	; 0xf8
    9026:	33ff      	adds	r3, #255	; 0xff
    9028:	429d      	cmp	r5, r3
    902a:	d800      	bhi.n	902e <_malloc_r+0x36>
    902c:	e28f      	b.n	954e <_malloc_r+0x556>
    902e:	0a68      	lsrs	r0, r5, #9
    9030:	d100      	bne.n	9034 <_malloc_r+0x3c>
    9032:	e0bb      	b.n	91ac <_malloc_r+0x1b4>
    9034:	2804      	cmp	r0, #4
    9036:	d900      	bls.n	903a <_malloc_r+0x42>
    9038:	e162      	b.n	9300 <_malloc_r+0x308>
    903a:	2338      	movs	r3, #56	; 0x38
    903c:	4698      	mov	r8, r3
    903e:	09a8      	lsrs	r0, r5, #6
    9040:	4480      	add	r8, r0
    9042:	3039      	adds	r0, #57	; 0x39
    9044:	00c1      	lsls	r1, r0, #3
    9046:	4ed2      	ldr	r6, [pc, #840]	; (9390 <_malloc_r+0x398>)
    9048:	1871      	adds	r1, r6, r1
    904a:	3908      	subs	r1, #8
    904c:	68cc      	ldr	r4, [r1, #12]
    904e:	42a1      	cmp	r1, r4
    9050:	d019      	beq.n	9086 <_malloc_r+0x8e>
    9052:	2303      	movs	r3, #3
    9054:	6862      	ldr	r2, [r4, #4]
    9056:	439a      	bics	r2, r3
    9058:	0013      	movs	r3, r2
    905a:	1b52      	subs	r2, r2, r5
    905c:	2a0f      	cmp	r2, #15
    905e:	dd00      	ble.n	9062 <_malloc_r+0x6a>
    9060:	e0aa      	b.n	91b8 <_malloc_r+0x1c0>
    9062:	2a00      	cmp	r2, #0
    9064:	db00      	blt.n	9068 <_malloc_r+0x70>
    9066:	e088      	b.n	917a <_malloc_r+0x182>
    9068:	2303      	movs	r3, #3
    906a:	469c      	mov	ip, r3
    906c:	e008      	b.n	9080 <_malloc_r+0x88>
    906e:	4662      	mov	r2, ip
    9070:	6863      	ldr	r3, [r4, #4]
    9072:	4393      	bics	r3, r2
    9074:	1b5a      	subs	r2, r3, r5
    9076:	2a0f      	cmp	r2, #15
    9078:	dd00      	ble.n	907c <_malloc_r+0x84>
    907a:	e09d      	b.n	91b8 <_malloc_r+0x1c0>
    907c:	2a00      	cmp	r2, #0
    907e:	da7c      	bge.n	917a <_malloc_r+0x182>
    9080:	68e4      	ldr	r4, [r4, #12]
    9082:	42a1      	cmp	r1, r4
    9084:	d1f3      	bne.n	906e <_malloc_r+0x76>
    9086:	0032      	movs	r2, r6
    9088:	6934      	ldr	r4, [r6, #16]
    908a:	3208      	adds	r2, #8
    908c:	4294      	cmp	r4, r2
    908e:	d100      	bne.n	9092 <_malloc_r+0x9a>
    9090:	e190      	b.n	93b4 <_malloc_r+0x3bc>
    9092:	2303      	movs	r3, #3
    9094:	6861      	ldr	r1, [r4, #4]
    9096:	4399      	bics	r1, r3
    9098:	4689      	mov	r9, r1
    909a:	1b49      	subs	r1, r1, r5
    909c:	290f      	cmp	r1, #15
    909e:	dd00      	ble.n	90a2 <_malloc_r+0xaa>
    90a0:	e162      	b.n	9368 <_malloc_r+0x370>
    90a2:	6172      	str	r2, [r6, #20]
    90a4:	6132      	str	r2, [r6, #16]
    90a6:	2900      	cmp	r1, #0
    90a8:	db00      	blt.n	90ac <_malloc_r+0xb4>
    90aa:	e087      	b.n	91bc <_malloc_r+0x1c4>
    90ac:	4ab9      	ldr	r2, [pc, #740]	; (9394 <_malloc_r+0x39c>)
    90ae:	464b      	mov	r3, r9
    90b0:	4591      	cmp	r9, r2
    90b2:	d900      	bls.n	90b6 <_malloc_r+0xbe>
    90b4:	e130      	b.n	9318 <_malloc_r+0x320>
    90b6:	08db      	lsrs	r3, r3, #3
    90b8:	3aff      	subs	r2, #255	; 0xff
    90ba:	1099      	asrs	r1, r3, #2
    90bc:	3aff      	subs	r2, #255	; 0xff
    90be:	408a      	lsls	r2, r1
    90c0:	00db      	lsls	r3, r3, #3
    90c2:	6871      	ldr	r1, [r6, #4]
    90c4:	199b      	adds	r3, r3, r6
    90c6:	430a      	orrs	r2, r1
    90c8:	6899      	ldr	r1, [r3, #8]
    90ca:	6072      	str	r2, [r6, #4]
    90cc:	60e3      	str	r3, [r4, #12]
    90ce:	60a1      	str	r1, [r4, #8]
    90d0:	609c      	str	r4, [r3, #8]
    90d2:	0013      	movs	r3, r2
    90d4:	60cc      	str	r4, [r1, #12]
    90d6:	2101      	movs	r1, #1
    90d8:	1082      	asrs	r2, r0, #2
    90da:	4091      	lsls	r1, r2
    90dc:	4299      	cmp	r1, r3
    90de:	d86f      	bhi.n	91c0 <_malloc_r+0x1c8>
    90e0:	420b      	tst	r3, r1
    90e2:	d105      	bne.n	90f0 <_malloc_r+0xf8>
    90e4:	2203      	movs	r2, #3
    90e6:	4390      	bics	r0, r2
    90e8:	0049      	lsls	r1, r1, #1
    90ea:	3004      	adds	r0, #4
    90ec:	420b      	tst	r3, r1
    90ee:	d0fb      	beq.n	90e8 <_malloc_r+0xf0>
    90f0:	2303      	movs	r3, #3
    90f2:	4698      	mov	r8, r3
    90f4:	00c3      	lsls	r3, r0, #3
    90f6:	4699      	mov	r9, r3
    90f8:	44b1      	add	r9, r6
    90fa:	46cc      	mov	ip, r9
    90fc:	4682      	mov	sl, r0
    90fe:	4663      	mov	r3, ip
    9100:	68dc      	ldr	r4, [r3, #12]
    9102:	45a4      	cmp	ip, r4
    9104:	d107      	bne.n	9116 <_malloc_r+0x11e>
    9106:	e157      	b.n	93b8 <_malloc_r+0x3c0>
    9108:	2a00      	cmp	r2, #0
    910a:	db00      	blt.n	910e <_malloc_r+0x116>
    910c:	e166      	b.n	93dc <_malloc_r+0x3e4>
    910e:	68e4      	ldr	r4, [r4, #12]
    9110:	45a4      	cmp	ip, r4
    9112:	d100      	bne.n	9116 <_malloc_r+0x11e>
    9114:	e150      	b.n	93b8 <_malloc_r+0x3c0>
    9116:	4642      	mov	r2, r8
    9118:	6863      	ldr	r3, [r4, #4]
    911a:	4393      	bics	r3, r2
    911c:	1b5a      	subs	r2, r3, r5
    911e:	2a0f      	cmp	r2, #15
    9120:	ddf2      	ble.n	9108 <_malloc_r+0x110>
    9122:	2001      	movs	r0, #1
    9124:	4680      	mov	r8, r0
    9126:	1961      	adds	r1, r4, r5
    9128:	4305      	orrs	r5, r0
    912a:	6065      	str	r5, [r4, #4]
    912c:	68a0      	ldr	r0, [r4, #8]
    912e:	68e5      	ldr	r5, [r4, #12]
    9130:	3608      	adds	r6, #8
    9132:	60c5      	str	r5, [r0, #12]
    9134:	60a8      	str	r0, [r5, #8]
    9136:	4640      	mov	r0, r8
    9138:	60f1      	str	r1, [r6, #12]
    913a:	60b1      	str	r1, [r6, #8]
    913c:	4310      	orrs	r0, r2
    913e:	6048      	str	r0, [r1, #4]
    9140:	60ce      	str	r6, [r1, #12]
    9142:	608e      	str	r6, [r1, #8]
    9144:	0038      	movs	r0, r7
    9146:	50e2      	str	r2, [r4, r3]
    9148:	f000 fa52 	bl	95f0 <__malloc_unlock>
    914c:	0020      	movs	r0, r4
    914e:	3008      	adds	r0, #8
    9150:	e021      	b.n	9196 <_malloc_r+0x19e>
    9152:	2910      	cmp	r1, #16
    9154:	d826      	bhi.n	91a4 <_malloc_r+0x1ac>
    9156:	0038      	movs	r0, r7
    9158:	f000 fa42 	bl	95e0 <__malloc_lock>
    915c:	2510      	movs	r5, #16
    915e:	2318      	movs	r3, #24
    9160:	2002      	movs	r0, #2
    9162:	4e8b      	ldr	r6, [pc, #556]	; (9390 <_malloc_r+0x398>)
    9164:	18f3      	adds	r3, r6, r3
    9166:	001a      	movs	r2, r3
    9168:	685c      	ldr	r4, [r3, #4]
    916a:	3a08      	subs	r2, #8
    916c:	4294      	cmp	r4, r2
    916e:	d100      	bne.n	9172 <_malloc_r+0x17a>
    9170:	e12e      	b.n	93d0 <_malloc_r+0x3d8>
    9172:	2303      	movs	r3, #3
    9174:	6862      	ldr	r2, [r4, #4]
    9176:	439a      	bics	r2, r3
    9178:	0013      	movs	r3, r2
    917a:	68e2      	ldr	r2, [r4, #12]
    917c:	68a1      	ldr	r1, [r4, #8]
    917e:	60ca      	str	r2, [r1, #12]
    9180:	6091      	str	r1, [r2, #8]
    9182:	2201      	movs	r2, #1
    9184:	18e3      	adds	r3, r4, r3
    9186:	6859      	ldr	r1, [r3, #4]
    9188:	0038      	movs	r0, r7
    918a:	430a      	orrs	r2, r1
    918c:	605a      	str	r2, [r3, #4]
    918e:	f000 fa2f 	bl	95f0 <__malloc_unlock>
    9192:	0020      	movs	r0, r4
    9194:	3008      	adds	r0, #8
    9196:	b003      	add	sp, #12
    9198:	bc3c      	pop	{r2, r3, r4, r5}
    919a:	4690      	mov	r8, r2
    919c:	4699      	mov	r9, r3
    919e:	46a2      	mov	sl, r4
    91a0:	46ab      	mov	fp, r5
    91a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    91a4:	230c      	movs	r3, #12
    91a6:	2000      	movs	r0, #0
    91a8:	603b      	str	r3, [r7, #0]
    91aa:	e7f4      	b.n	9196 <_malloc_r+0x19e>
    91ac:	2180      	movs	r1, #128	; 0x80
    91ae:	233f      	movs	r3, #63	; 0x3f
    91b0:	2040      	movs	r0, #64	; 0x40
    91b2:	0089      	lsls	r1, r1, #2
    91b4:	4698      	mov	r8, r3
    91b6:	e746      	b.n	9046 <_malloc_r+0x4e>
    91b8:	4640      	mov	r0, r8
    91ba:	e764      	b.n	9086 <_malloc_r+0x8e>
    91bc:	464b      	mov	r3, r9
    91be:	e7e0      	b.n	9182 <_malloc_r+0x18a>
    91c0:	2303      	movs	r3, #3
    91c2:	68b4      	ldr	r4, [r6, #8]
    91c4:	6862      	ldr	r2, [r4, #4]
    91c6:	439a      	bics	r2, r3
    91c8:	4690      	mov	r8, r2
    91ca:	42aa      	cmp	r2, r5
    91cc:	d303      	bcc.n	91d6 <_malloc_r+0x1de>
    91ce:	1b53      	subs	r3, r2, r5
    91d0:	2b0f      	cmp	r3, #15
    91d2:	dd00      	ble.n	91d6 <_malloc_r+0x1de>
    91d4:	e086      	b.n	92e4 <_malloc_r+0x2ec>
    91d6:	0023      	movs	r3, r4
    91d8:	4443      	add	r3, r8
    91da:	4a6f      	ldr	r2, [pc, #444]	; (9398 <_malloc_r+0x3a0>)
    91dc:	9301      	str	r3, [sp, #4]
    91de:	4b6f      	ldr	r3, [pc, #444]	; (939c <_malloc_r+0x3a4>)
    91e0:	4693      	mov	fp, r2
    91e2:	681b      	ldr	r3, [r3, #0]
    91e4:	6812      	ldr	r2, [r2, #0]
    91e6:	18eb      	adds	r3, r5, r3
    91e8:	3201      	adds	r2, #1
    91ea:	d100      	bne.n	91ee <_malloc_r+0x1f6>
    91ec:	e168      	b.n	94c0 <_malloc_r+0x4c8>
    91ee:	4a6c      	ldr	r2, [pc, #432]	; (93a0 <_malloc_r+0x3a8>)
    91f0:	4694      	mov	ip, r2
    91f2:	4463      	add	r3, ip
    91f4:	0b1b      	lsrs	r3, r3, #12
    91f6:	031b      	lsls	r3, r3, #12
    91f8:	9300      	str	r3, [sp, #0]
    91fa:	9900      	ldr	r1, [sp, #0]
    91fc:	0038      	movs	r0, r7
    91fe:	f000 fd47 	bl	9c90 <_sbrk_r>
    9202:	0003      	movs	r3, r0
    9204:	4681      	mov	r9, r0
    9206:	3301      	adds	r3, #1
    9208:	d061      	beq.n	92ce <_malloc_r+0x2d6>
    920a:	9b01      	ldr	r3, [sp, #4]
    920c:	4283      	cmp	r3, r0
    920e:	d900      	bls.n	9212 <_malloc_r+0x21a>
    9210:	e0ff      	b.n	9412 <_malloc_r+0x41a>
    9212:	4b64      	ldr	r3, [pc, #400]	; (93a4 <_malloc_r+0x3ac>)
    9214:	9a00      	ldr	r2, [sp, #0]
    9216:	469a      	mov	sl, r3
    9218:	681b      	ldr	r3, [r3, #0]
    921a:	469c      	mov	ip, r3
    921c:	4653      	mov	r3, sl
    921e:	4462      	add	r2, ip
    9220:	601a      	str	r2, [r3, #0]
    9222:	9b01      	ldr	r3, [sp, #4]
    9224:	0011      	movs	r1, r2
    9226:	4283      	cmp	r3, r0
    9228:	d100      	bne.n	922c <_malloc_r+0x234>
    922a:	e155      	b.n	94d8 <_malloc_r+0x4e0>
    922c:	465b      	mov	r3, fp
    922e:	681b      	ldr	r3, [r3, #0]
    9230:	3301      	adds	r3, #1
    9232:	d100      	bne.n	9236 <_malloc_r+0x23e>
    9234:	e16c      	b.n	9510 <_malloc_r+0x518>
    9236:	464b      	mov	r3, r9
    9238:	9a01      	ldr	r2, [sp, #4]
    923a:	1a9b      	subs	r3, r3, r2
    923c:	1859      	adds	r1, r3, r1
    923e:	4653      	mov	r3, sl
    9240:	6019      	str	r1, [r3, #0]
    9242:	2307      	movs	r3, #7
    9244:	464a      	mov	r2, r9
    9246:	4013      	ands	r3, r2
    9248:	d100      	bne.n	924c <_malloc_r+0x254>
    924a:	e124      	b.n	9496 <_malloc_r+0x49e>
    924c:	2108      	movs	r1, #8
    924e:	4689      	mov	r9, r1
    9250:	4955      	ldr	r1, [pc, #340]	; (93a8 <_malloc_r+0x3b0>)
    9252:	1ad2      	subs	r2, r2, r3
    9254:	4491      	add	r9, r2
    9256:	1acb      	subs	r3, r1, r3
    9258:	9a00      	ldr	r2, [sp, #0]
    925a:	0038      	movs	r0, r7
    925c:	444a      	add	r2, r9
    925e:	0511      	lsls	r1, r2, #20
    9260:	0d09      	lsrs	r1, r1, #20
    9262:	1a5b      	subs	r3, r3, r1
    9264:	0019      	movs	r1, r3
    9266:	469b      	mov	fp, r3
    9268:	f000 fd12 	bl	9c90 <_sbrk_r>
    926c:	1c43      	adds	r3, r0, #1
    926e:	d100      	bne.n	9272 <_malloc_r+0x27a>
    9270:	e142      	b.n	94f8 <_malloc_r+0x500>
    9272:	464b      	mov	r3, r9
    9274:	1ac0      	subs	r0, r0, r3
    9276:	2301      	movs	r3, #1
    9278:	4458      	add	r0, fp
    927a:	4318      	orrs	r0, r3
    927c:	4653      	mov	r3, sl
    927e:	681b      	ldr	r3, [r3, #0]
    9280:	445b      	add	r3, fp
    9282:	0019      	movs	r1, r3
    9284:	4653      	mov	r3, sl
    9286:	6019      	str	r1, [r3, #0]
    9288:	464b      	mov	r3, r9
    928a:	60b3      	str	r3, [r6, #8]
    928c:	6058      	str	r0, [r3, #4]
    928e:	42b4      	cmp	r4, r6
    9290:	d013      	beq.n	92ba <_malloc_r+0x2c2>
    9292:	4643      	mov	r3, r8
    9294:	2b0f      	cmp	r3, #15
    9296:	d800      	bhi.n	929a <_malloc_r+0x2a2>
    9298:	e0e8      	b.n	946c <_malloc_r+0x474>
    929a:	4643      	mov	r3, r8
    929c:	2207      	movs	r2, #7
    929e:	6860      	ldr	r0, [r4, #4]
    92a0:	3b0c      	subs	r3, #12
    92a2:	4393      	bics	r3, r2
    92a4:	3a06      	subs	r2, #6
    92a6:	4002      	ands	r2, r0
    92a8:	2005      	movs	r0, #5
    92aa:	431a      	orrs	r2, r3
    92ac:	6062      	str	r2, [r4, #4]
    92ae:	18e2      	adds	r2, r4, r3
    92b0:	6050      	str	r0, [r2, #4]
    92b2:	6090      	str	r0, [r2, #8]
    92b4:	2b0f      	cmp	r3, #15
    92b6:	d900      	bls.n	92ba <_malloc_r+0x2c2>
    92b8:	e122      	b.n	9500 <_malloc_r+0x508>
    92ba:	4b3c      	ldr	r3, [pc, #240]	; (93ac <_malloc_r+0x3b4>)
    92bc:	681a      	ldr	r2, [r3, #0]
    92be:	4291      	cmp	r1, r2
    92c0:	d900      	bls.n	92c4 <_malloc_r+0x2cc>
    92c2:	6019      	str	r1, [r3, #0]
    92c4:	4b3a      	ldr	r3, [pc, #232]	; (93b0 <_malloc_r+0x3b8>)
    92c6:	681a      	ldr	r2, [r3, #0]
    92c8:	4291      	cmp	r1, r2
    92ca:	d900      	bls.n	92ce <_malloc_r+0x2d6>
    92cc:	6019      	str	r1, [r3, #0]
    92ce:	2303      	movs	r3, #3
    92d0:	68b4      	ldr	r4, [r6, #8]
    92d2:	6862      	ldr	r2, [r4, #4]
    92d4:	439a      	bics	r2, r3
    92d6:	1b53      	subs	r3, r2, r5
    92d8:	4295      	cmp	r5, r2
    92da:	d900      	bls.n	92de <_malloc_r+0x2e6>
    92dc:	e0c9      	b.n	9472 <_malloc_r+0x47a>
    92de:	2b0f      	cmp	r3, #15
    92e0:	dc00      	bgt.n	92e4 <_malloc_r+0x2ec>
    92e2:	e0c6      	b.n	9472 <_malloc_r+0x47a>
    92e4:	2201      	movs	r2, #1
    92e6:	0029      	movs	r1, r5
    92e8:	4313      	orrs	r3, r2
    92ea:	4311      	orrs	r1, r2
    92ec:	1965      	adds	r5, r4, r5
    92ee:	6061      	str	r1, [r4, #4]
    92f0:	0038      	movs	r0, r7
    92f2:	60b5      	str	r5, [r6, #8]
    92f4:	606b      	str	r3, [r5, #4]
    92f6:	f000 f97b 	bl	95f0 <__malloc_unlock>
    92fa:	0020      	movs	r0, r4
    92fc:	3008      	adds	r0, #8
    92fe:	e74a      	b.n	9196 <_malloc_r+0x19e>
    9300:	2814      	cmp	r0, #20
    9302:	d97a      	bls.n	93fa <_malloc_r+0x402>
    9304:	2854      	cmp	r0, #84	; 0x54
    9306:	d900      	bls.n	930a <_malloc_r+0x312>
    9308:	e0ba      	b.n	9480 <_malloc_r+0x488>
    930a:	236e      	movs	r3, #110	; 0x6e
    930c:	4698      	mov	r8, r3
    930e:	0b28      	lsrs	r0, r5, #12
    9310:	4480      	add	r8, r0
    9312:	306f      	adds	r0, #111	; 0x6f
    9314:	00c1      	lsls	r1, r0, #3
    9316:	e696      	b.n	9046 <_malloc_r+0x4e>
    9318:	0a5a      	lsrs	r2, r3, #9
    931a:	2a04      	cmp	r2, #4
    931c:	d973      	bls.n	9406 <_malloc_r+0x40e>
    931e:	2a14      	cmp	r2, #20
    9320:	d900      	bls.n	9324 <_malloc_r+0x32c>
    9322:	e0d0      	b.n	94c6 <_malloc_r+0x4ce>
    9324:	0011      	movs	r1, r2
    9326:	325c      	adds	r2, #92	; 0x5c
    9328:	315b      	adds	r1, #91	; 0x5b
    932a:	00d2      	lsls	r2, r2, #3
    932c:	2308      	movs	r3, #8
    932e:	425b      	negs	r3, r3
    9330:	469c      	mov	ip, r3
    9332:	18b2      	adds	r2, r6, r2
    9334:	4494      	add	ip, r2
    9336:	4663      	mov	r3, ip
    9338:	689a      	ldr	r2, [r3, #8]
    933a:	2303      	movs	r3, #3
    933c:	4698      	mov	r8, r3
    933e:	4594      	cmp	ip, r2
    9340:	d100      	bne.n	9344 <_malloc_r+0x34c>
    9342:	e0ab      	b.n	949c <_malloc_r+0x4a4>
    9344:	4643      	mov	r3, r8
    9346:	6851      	ldr	r1, [r2, #4]
    9348:	4399      	bics	r1, r3
    934a:	4589      	cmp	r9, r1
    934c:	d300      	bcc.n	9350 <_malloc_r+0x358>
    934e:	e095      	b.n	947c <_malloc_r+0x484>
    9350:	6892      	ldr	r2, [r2, #8]
    9352:	4594      	cmp	ip, r2
    9354:	d1f6      	bne.n	9344 <_malloc_r+0x34c>
    9356:	4663      	mov	r3, ip
    9358:	68da      	ldr	r2, [r3, #12]
    935a:	6873      	ldr	r3, [r6, #4]
    935c:	4661      	mov	r1, ip
    935e:	60e2      	str	r2, [r4, #12]
    9360:	60a1      	str	r1, [r4, #8]
    9362:	6094      	str	r4, [r2, #8]
    9364:	60cc      	str	r4, [r1, #12]
    9366:	e6b6      	b.n	90d6 <_malloc_r+0xde>
    9368:	2301      	movs	r3, #1
    936a:	1960      	adds	r0, r4, r5
    936c:	431d      	orrs	r5, r3
    936e:	6065      	str	r5, [r4, #4]
    9370:	6170      	str	r0, [r6, #20]
    9372:	6130      	str	r0, [r6, #16]
    9374:	60c2      	str	r2, [r0, #12]
    9376:	6082      	str	r2, [r0, #8]
    9378:	001a      	movs	r2, r3
    937a:	464b      	mov	r3, r9
    937c:	430a      	orrs	r2, r1
    937e:	6042      	str	r2, [r0, #4]
    9380:	0038      	movs	r0, r7
    9382:	50e1      	str	r1, [r4, r3]
    9384:	f000 f934 	bl	95f0 <__malloc_unlock>
    9388:	0020      	movs	r0, r4
    938a:	3008      	adds	r0, #8
    938c:	e703      	b.n	9196 <_malloc_r+0x19e>
    938e:	46c0      	nop			; (mov r8, r8)
    9390:	2000044c 	.word	0x2000044c
    9394:	000001ff 	.word	0x000001ff
    9398:	20000854 	.word	0x20000854
    939c:	20000e3c 	.word	0x20000e3c
    93a0:	0000100f 	.word	0x0000100f
    93a4:	20000e0c 	.word	0x20000e0c
    93a8:	00001008 	.word	0x00001008
    93ac:	20000e34 	.word	0x20000e34
    93b0:	20000e38 	.word	0x20000e38
    93b4:	6873      	ldr	r3, [r6, #4]
    93b6:	e68e      	b.n	90d6 <_malloc_r+0xde>
    93b8:	2308      	movs	r3, #8
    93ba:	469b      	mov	fp, r3
    93bc:	3b07      	subs	r3, #7
    93be:	44dc      	add	ip, fp
    93c0:	469b      	mov	fp, r3
    93c2:	44da      	add	sl, fp
    93c4:	4643      	mov	r3, r8
    93c6:	4652      	mov	r2, sl
    93c8:	4213      	tst	r3, r2
    93ca:	d000      	beq.n	93ce <_malloc_r+0x3d6>
    93cc:	e697      	b.n	90fe <_malloc_r+0x106>
    93ce:	e037      	b.n	9440 <_malloc_r+0x448>
    93d0:	68dc      	ldr	r4, [r3, #12]
    93d2:	3002      	adds	r0, #2
    93d4:	42a3      	cmp	r3, r4
    93d6:	d100      	bne.n	93da <_malloc_r+0x3e2>
    93d8:	e655      	b.n	9086 <_malloc_r+0x8e>
    93da:	e6ca      	b.n	9172 <_malloc_r+0x17a>
    93dc:	2201      	movs	r2, #1
    93de:	18e3      	adds	r3, r4, r3
    93e0:	6859      	ldr	r1, [r3, #4]
    93e2:	0038      	movs	r0, r7
    93e4:	430a      	orrs	r2, r1
    93e6:	605a      	str	r2, [r3, #4]
    93e8:	68e3      	ldr	r3, [r4, #12]
    93ea:	68a2      	ldr	r2, [r4, #8]
    93ec:	60d3      	str	r3, [r2, #12]
    93ee:	609a      	str	r2, [r3, #8]
    93f0:	f000 f8fe 	bl	95f0 <__malloc_unlock>
    93f4:	0020      	movs	r0, r4
    93f6:	3008      	adds	r0, #8
    93f8:	e6cd      	b.n	9196 <_malloc_r+0x19e>
    93fa:	235b      	movs	r3, #91	; 0x5b
    93fc:	4698      	mov	r8, r3
    93fe:	4480      	add	r8, r0
    9400:	305c      	adds	r0, #92	; 0x5c
    9402:	00c1      	lsls	r1, r0, #3
    9404:	e61f      	b.n	9046 <_malloc_r+0x4e>
    9406:	099a      	lsrs	r2, r3, #6
    9408:	0011      	movs	r1, r2
    940a:	3239      	adds	r2, #57	; 0x39
    940c:	3138      	adds	r1, #56	; 0x38
    940e:	00d2      	lsls	r2, r2, #3
    9410:	e78c      	b.n	932c <_malloc_r+0x334>
    9412:	42b4      	cmp	r4, r6
    9414:	d000      	beq.n	9418 <_malloc_r+0x420>
    9416:	e75a      	b.n	92ce <_malloc_r+0x2d6>
    9418:	4b4f      	ldr	r3, [pc, #316]	; (9558 <_malloc_r+0x560>)
    941a:	9a00      	ldr	r2, [sp, #0]
    941c:	469a      	mov	sl, r3
    941e:	681b      	ldr	r3, [r3, #0]
    9420:	469c      	mov	ip, r3
    9422:	4653      	mov	r3, sl
    9424:	4462      	add	r2, ip
    9426:	0011      	movs	r1, r2
    9428:	601a      	str	r2, [r3, #0]
    942a:	e6ff      	b.n	922c <_malloc_r+0x234>
    942c:	2308      	movs	r3, #8
    942e:	425b      	negs	r3, r3
    9430:	469c      	mov	ip, r3
    9432:	44e1      	add	r9, ip
    9434:	464b      	mov	r3, r9
    9436:	689b      	ldr	r3, [r3, #8]
    9438:	3801      	subs	r0, #1
    943a:	4599      	cmp	r9, r3
    943c:	d000      	beq.n	9440 <_malloc_r+0x448>
    943e:	e084      	b.n	954a <_malloc_r+0x552>
    9440:	4643      	mov	r3, r8
    9442:	4203      	tst	r3, r0
    9444:	d1f2      	bne.n	942c <_malloc_r+0x434>
    9446:	6873      	ldr	r3, [r6, #4]
    9448:	438b      	bics	r3, r1
    944a:	6073      	str	r3, [r6, #4]
    944c:	0049      	lsls	r1, r1, #1
    944e:	4299      	cmp	r1, r3
    9450:	d900      	bls.n	9454 <_malloc_r+0x45c>
    9452:	e6b5      	b.n	91c0 <_malloc_r+0x1c8>
    9454:	2900      	cmp	r1, #0
    9456:	d100      	bne.n	945a <_malloc_r+0x462>
    9458:	e6b2      	b.n	91c0 <_malloc_r+0x1c8>
    945a:	4650      	mov	r0, sl
    945c:	420b      	tst	r3, r1
    945e:	d000      	beq.n	9462 <_malloc_r+0x46a>
    9460:	e648      	b.n	90f4 <_malloc_r+0xfc>
    9462:	0049      	lsls	r1, r1, #1
    9464:	3004      	adds	r0, #4
    9466:	420b      	tst	r3, r1
    9468:	d0fb      	beq.n	9462 <_malloc_r+0x46a>
    946a:	e643      	b.n	90f4 <_malloc_r+0xfc>
    946c:	2301      	movs	r3, #1
    946e:	464a      	mov	r2, r9
    9470:	6053      	str	r3, [r2, #4]
    9472:	0038      	movs	r0, r7
    9474:	f000 f8bc 	bl	95f0 <__malloc_unlock>
    9478:	2000      	movs	r0, #0
    947a:	e68c      	b.n	9196 <_malloc_r+0x19e>
    947c:	4694      	mov	ip, r2
    947e:	e76a      	b.n	9356 <_malloc_r+0x35e>
    9480:	23aa      	movs	r3, #170	; 0xaa
    9482:	005b      	lsls	r3, r3, #1
    9484:	4298      	cmp	r0, r3
    9486:	d811      	bhi.n	94ac <_malloc_r+0x4b4>
    9488:	3bdd      	subs	r3, #221	; 0xdd
    948a:	4698      	mov	r8, r3
    948c:	0be8      	lsrs	r0, r5, #15
    948e:	4480      	add	r8, r0
    9490:	3078      	adds	r0, #120	; 0x78
    9492:	00c1      	lsls	r1, r0, #3
    9494:	e5d7      	b.n	9046 <_malloc_r+0x4e>
    9496:	2380      	movs	r3, #128	; 0x80
    9498:	015b      	lsls	r3, r3, #5
    949a:	e6dd      	b.n	9258 <_malloc_r+0x260>
    949c:	1089      	asrs	r1, r1, #2
    949e:	3b02      	subs	r3, #2
    94a0:	408b      	lsls	r3, r1
    94a2:	6872      	ldr	r2, [r6, #4]
    94a4:	4313      	orrs	r3, r2
    94a6:	6073      	str	r3, [r6, #4]
    94a8:	4662      	mov	r2, ip
    94aa:	e757      	b.n	935c <_malloc_r+0x364>
    94ac:	4b2b      	ldr	r3, [pc, #172]	; (955c <_malloc_r+0x564>)
    94ae:	4298      	cmp	r0, r3
    94b0:	d81c      	bhi.n	94ec <_malloc_r+0x4f4>
    94b2:	237c      	movs	r3, #124	; 0x7c
    94b4:	4698      	mov	r8, r3
    94b6:	0ca8      	lsrs	r0, r5, #18
    94b8:	4480      	add	r8, r0
    94ba:	307d      	adds	r0, #125	; 0x7d
    94bc:	00c1      	lsls	r1, r0, #3
    94be:	e5c2      	b.n	9046 <_malloc_r+0x4e>
    94c0:	3310      	adds	r3, #16
    94c2:	9300      	str	r3, [sp, #0]
    94c4:	e699      	b.n	91fa <_malloc_r+0x202>
    94c6:	2a54      	cmp	r2, #84	; 0x54
    94c8:	d826      	bhi.n	9518 <_malloc_r+0x520>
    94ca:	464b      	mov	r3, r9
    94cc:	0b1a      	lsrs	r2, r3, #12
    94ce:	0011      	movs	r1, r2
    94d0:	326f      	adds	r2, #111	; 0x6f
    94d2:	316e      	adds	r1, #110	; 0x6e
    94d4:	00d2      	lsls	r2, r2, #3
    94d6:	e729      	b.n	932c <_malloc_r+0x334>
    94d8:	051b      	lsls	r3, r3, #20
    94da:	d000      	beq.n	94de <_malloc_r+0x4e6>
    94dc:	e6a6      	b.n	922c <_malloc_r+0x234>
    94de:	2001      	movs	r0, #1
    94e0:	9b00      	ldr	r3, [sp, #0]
    94e2:	68b2      	ldr	r2, [r6, #8]
    94e4:	4443      	add	r3, r8
    94e6:	4303      	orrs	r3, r0
    94e8:	6053      	str	r3, [r2, #4]
    94ea:	e6e6      	b.n	92ba <_malloc_r+0x2c2>
    94ec:	21fe      	movs	r1, #254	; 0xfe
    94ee:	237e      	movs	r3, #126	; 0x7e
    94f0:	207f      	movs	r0, #127	; 0x7f
    94f2:	0089      	lsls	r1, r1, #2
    94f4:	4698      	mov	r8, r3
    94f6:	e5a6      	b.n	9046 <_malloc_r+0x4e>
    94f8:	2300      	movs	r3, #0
    94fa:	2001      	movs	r0, #1
    94fc:	469b      	mov	fp, r3
    94fe:	e6bd      	b.n	927c <_malloc_r+0x284>
    9500:	0021      	movs	r1, r4
    9502:	0038      	movs	r0, r7
    9504:	3108      	adds	r1, #8
    9506:	f7ff fc87 	bl	8e18 <_free_r>
    950a:	4653      	mov	r3, sl
    950c:	6819      	ldr	r1, [r3, #0]
    950e:	e6d4      	b.n	92ba <_malloc_r+0x2c2>
    9510:	465b      	mov	r3, fp
    9512:	464a      	mov	r2, r9
    9514:	601a      	str	r2, [r3, #0]
    9516:	e694      	b.n	9242 <_malloc_r+0x24a>
    9518:	21aa      	movs	r1, #170	; 0xaa
    951a:	0049      	lsls	r1, r1, #1
    951c:	428a      	cmp	r2, r1
    951e:	d806      	bhi.n	952e <_malloc_r+0x536>
    9520:	464b      	mov	r3, r9
    9522:	0bda      	lsrs	r2, r3, #15
    9524:	0011      	movs	r1, r2
    9526:	3278      	adds	r2, #120	; 0x78
    9528:	3177      	adds	r1, #119	; 0x77
    952a:	00d2      	lsls	r2, r2, #3
    952c:	e6fe      	b.n	932c <_malloc_r+0x334>
    952e:	490b      	ldr	r1, [pc, #44]	; (955c <_malloc_r+0x564>)
    9530:	428a      	cmp	r2, r1
    9532:	d806      	bhi.n	9542 <_malloc_r+0x54a>
    9534:	464b      	mov	r3, r9
    9536:	0c9a      	lsrs	r2, r3, #18
    9538:	0011      	movs	r1, r2
    953a:	327d      	adds	r2, #125	; 0x7d
    953c:	317c      	adds	r1, #124	; 0x7c
    953e:	00d2      	lsls	r2, r2, #3
    9540:	e6f4      	b.n	932c <_malloc_r+0x334>
    9542:	22fe      	movs	r2, #254	; 0xfe
    9544:	217e      	movs	r1, #126	; 0x7e
    9546:	0092      	lsls	r2, r2, #2
    9548:	e6f0      	b.n	932c <_malloc_r+0x334>
    954a:	6873      	ldr	r3, [r6, #4]
    954c:	e77e      	b.n	944c <_malloc_r+0x454>
    954e:	002b      	movs	r3, r5
    9550:	08e8      	lsrs	r0, r5, #3
    9552:	3308      	adds	r3, #8
    9554:	e605      	b.n	9162 <_malloc_r+0x16a>
    9556:	46c0      	nop			; (mov r8, r8)
    9558:	20000e0c 	.word	0x20000e0c
    955c:	00000554 	.word	0x00000554

00009560 <memchr>:
    9560:	b570      	push	{r4, r5, r6, lr}
    9562:	b2cd      	uxtb	r5, r1
    9564:	0783      	lsls	r3, r0, #30
    9566:	d034      	beq.n	95d2 <memchr+0x72>
    9568:	1e54      	subs	r4, r2, #1
    956a:	2a00      	cmp	r2, #0
    956c:	d01b      	beq.n	95a6 <memchr+0x46>
    956e:	7803      	ldrb	r3, [r0, #0]
    9570:	42ab      	cmp	r3, r5
    9572:	d019      	beq.n	95a8 <memchr+0x48>
    9574:	2203      	movs	r2, #3
    9576:	e004      	b.n	9582 <memchr+0x22>
    9578:	3c01      	subs	r4, #1
    957a:	d314      	bcc.n	95a6 <memchr+0x46>
    957c:	7803      	ldrb	r3, [r0, #0]
    957e:	42ab      	cmp	r3, r5
    9580:	d012      	beq.n	95a8 <memchr+0x48>
    9582:	3001      	adds	r0, #1
    9584:	4210      	tst	r0, r2
    9586:	d1f7      	bne.n	9578 <memchr+0x18>
    9588:	2c03      	cmp	r4, #3
    958a:	d80e      	bhi.n	95aa <memchr+0x4a>
    958c:	2c00      	cmp	r4, #0
    958e:	d00a      	beq.n	95a6 <memchr+0x46>
    9590:	7803      	ldrb	r3, [r0, #0]
    9592:	42ab      	cmp	r3, r5
    9594:	d008      	beq.n	95a8 <memchr+0x48>
    9596:	1904      	adds	r4, r0, r4
    9598:	e002      	b.n	95a0 <memchr+0x40>
    959a:	7803      	ldrb	r3, [r0, #0]
    959c:	42ab      	cmp	r3, r5
    959e:	d003      	beq.n	95a8 <memchr+0x48>
    95a0:	3001      	adds	r0, #1
    95a2:	4284      	cmp	r4, r0
    95a4:	d1f9      	bne.n	959a <memchr+0x3a>
    95a6:	2000      	movs	r0, #0
    95a8:	bd70      	pop	{r4, r5, r6, pc}
    95aa:	22ff      	movs	r2, #255	; 0xff
    95ac:	060b      	lsls	r3, r1, #24
    95ae:	0c1b      	lsrs	r3, r3, #16
    95b0:	4011      	ands	r1, r2
    95b2:	4319      	orrs	r1, r3
    95b4:	040b      	lsls	r3, r1, #16
    95b6:	4e08      	ldr	r6, [pc, #32]	; (95d8 <memchr+0x78>)
    95b8:	4319      	orrs	r1, r3
    95ba:	6803      	ldr	r3, [r0, #0]
    95bc:	4a07      	ldr	r2, [pc, #28]	; (95dc <memchr+0x7c>)
    95be:	404b      	eors	r3, r1
    95c0:	189a      	adds	r2, r3, r2
    95c2:	439a      	bics	r2, r3
    95c4:	4232      	tst	r2, r6
    95c6:	d1e3      	bne.n	9590 <memchr+0x30>
    95c8:	3c04      	subs	r4, #4
    95ca:	3004      	adds	r0, #4
    95cc:	2c03      	cmp	r4, #3
    95ce:	d8f4      	bhi.n	95ba <memchr+0x5a>
    95d0:	e7dc      	b.n	958c <memchr+0x2c>
    95d2:	0014      	movs	r4, r2
    95d4:	e7d8      	b.n	9588 <memchr+0x28>
    95d6:	46c0      	nop			; (mov r8, r8)
    95d8:	80808080 	.word	0x80808080
    95dc:	fefefeff 	.word	0xfefefeff

000095e0 <__malloc_lock>:
    95e0:	b510      	push	{r4, lr}
    95e2:	4802      	ldr	r0, [pc, #8]	; (95ec <__malloc_lock+0xc>)
    95e4:	f7ff fd04 	bl	8ff0 <__retarget_lock_acquire_recursive>
    95e8:	bd10      	pop	{r4, pc}
    95ea:	46c0      	nop			; (mov r8, r8)
    95ec:	200010ac 	.word	0x200010ac

000095f0 <__malloc_unlock>:
    95f0:	b510      	push	{r4, lr}
    95f2:	4802      	ldr	r0, [pc, #8]	; (95fc <__malloc_unlock+0xc>)
    95f4:	f7ff fcfe 	bl	8ff4 <__retarget_lock_release_recursive>
    95f8:	bd10      	pop	{r4, pc}
    95fa:	46c0      	nop			; (mov r8, r8)
    95fc:	200010ac 	.word	0x200010ac

00009600 <_Balloc>:
    9600:	b570      	push	{r4, r5, r6, lr}
    9602:	0004      	movs	r4, r0
    9604:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    9606:	000d      	movs	r5, r1
    9608:	2800      	cmp	r0, #0
    960a:	d00a      	beq.n	9622 <_Balloc+0x22>
    960c:	00ab      	lsls	r3, r5, #2
    960e:	18c3      	adds	r3, r0, r3
    9610:	6818      	ldr	r0, [r3, #0]
    9612:	2800      	cmp	r0, #0
    9614:	d00f      	beq.n	9636 <_Balloc+0x36>
    9616:	6802      	ldr	r2, [r0, #0]
    9618:	601a      	str	r2, [r3, #0]
    961a:	2300      	movs	r3, #0
    961c:	6103      	str	r3, [r0, #16]
    961e:	60c3      	str	r3, [r0, #12]
    9620:	bd70      	pop	{r4, r5, r6, pc}
    9622:	2221      	movs	r2, #33	; 0x21
    9624:	2104      	movs	r1, #4
    9626:	0020      	movs	r0, r4
    9628:	f000 fc4e 	bl	9ec8 <_calloc_r>
    962c:	64e0      	str	r0, [r4, #76]	; 0x4c
    962e:	2800      	cmp	r0, #0
    9630:	d1ec      	bne.n	960c <_Balloc+0xc>
    9632:	2000      	movs	r0, #0
    9634:	e7f4      	b.n	9620 <_Balloc+0x20>
    9636:	2601      	movs	r6, #1
    9638:	40ae      	lsls	r6, r5
    963a:	1d72      	adds	r2, r6, #5
    963c:	0092      	lsls	r2, r2, #2
    963e:	2101      	movs	r1, #1
    9640:	0020      	movs	r0, r4
    9642:	f000 fc41 	bl	9ec8 <_calloc_r>
    9646:	2800      	cmp	r0, #0
    9648:	d0f3      	beq.n	9632 <_Balloc+0x32>
    964a:	6045      	str	r5, [r0, #4]
    964c:	6086      	str	r6, [r0, #8]
    964e:	e7e4      	b.n	961a <_Balloc+0x1a>

00009650 <_Bfree>:
    9650:	2900      	cmp	r1, #0
    9652:	d006      	beq.n	9662 <_Bfree+0x12>
    9654:	684b      	ldr	r3, [r1, #4]
    9656:	009a      	lsls	r2, r3, #2
    9658:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    965a:	189b      	adds	r3, r3, r2
    965c:	681a      	ldr	r2, [r3, #0]
    965e:	600a      	str	r2, [r1, #0]
    9660:	6019      	str	r1, [r3, #0]
    9662:	4770      	bx	lr

00009664 <__multadd>:
    9664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9666:	46ce      	mov	lr, r9
    9668:	4647      	mov	r7, r8
    966a:	4681      	mov	r9, r0
    966c:	0008      	movs	r0, r1
    966e:	b580      	push	{r7, lr}
    9670:	000d      	movs	r5, r1
    9672:	690c      	ldr	r4, [r1, #16]
    9674:	001f      	movs	r7, r3
    9676:	2100      	movs	r1, #0
    9678:	3014      	adds	r0, #20
    967a:	6803      	ldr	r3, [r0, #0]
    967c:	3101      	adds	r1, #1
    967e:	041e      	lsls	r6, r3, #16
    9680:	0c36      	lsrs	r6, r6, #16
    9682:	4356      	muls	r6, r2
    9684:	0c1b      	lsrs	r3, r3, #16
    9686:	4353      	muls	r3, r2
    9688:	19f6      	adds	r6, r6, r7
    968a:	0c37      	lsrs	r7, r6, #16
    968c:	19db      	adds	r3, r3, r7
    968e:	0436      	lsls	r6, r6, #16
    9690:	0c1f      	lsrs	r7, r3, #16
    9692:	0c36      	lsrs	r6, r6, #16
    9694:	041b      	lsls	r3, r3, #16
    9696:	199b      	adds	r3, r3, r6
    9698:	c008      	stmia	r0!, {r3}
    969a:	428c      	cmp	r4, r1
    969c:	dced      	bgt.n	967a <__multadd+0x16>
    969e:	2f00      	cmp	r7, #0
    96a0:	d008      	beq.n	96b4 <__multadd+0x50>
    96a2:	68ab      	ldr	r3, [r5, #8]
    96a4:	429c      	cmp	r4, r3
    96a6:	da0a      	bge.n	96be <__multadd+0x5a>
    96a8:	1d23      	adds	r3, r4, #4
    96aa:	009b      	lsls	r3, r3, #2
    96ac:	18eb      	adds	r3, r5, r3
    96ae:	3401      	adds	r4, #1
    96b0:	605f      	str	r7, [r3, #4]
    96b2:	612c      	str	r4, [r5, #16]
    96b4:	0028      	movs	r0, r5
    96b6:	bc0c      	pop	{r2, r3}
    96b8:	4690      	mov	r8, r2
    96ba:	4699      	mov	r9, r3
    96bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    96be:	686b      	ldr	r3, [r5, #4]
    96c0:	4648      	mov	r0, r9
    96c2:	1c59      	adds	r1, r3, #1
    96c4:	f7ff ff9c 	bl	9600 <_Balloc>
    96c8:	0029      	movs	r1, r5
    96ca:	692b      	ldr	r3, [r5, #16]
    96cc:	4680      	mov	r8, r0
    96ce:	1c9a      	adds	r2, r3, #2
    96d0:	0092      	lsls	r2, r2, #2
    96d2:	310c      	adds	r1, #12
    96d4:	300c      	adds	r0, #12
    96d6:	f7fc fecf 	bl	6478 <memcpy>
    96da:	686b      	ldr	r3, [r5, #4]
    96dc:	009a      	lsls	r2, r3, #2
    96de:	464b      	mov	r3, r9
    96e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    96e2:	189b      	adds	r3, r3, r2
    96e4:	681a      	ldr	r2, [r3, #0]
    96e6:	602a      	str	r2, [r5, #0]
    96e8:	601d      	str	r5, [r3, #0]
    96ea:	4645      	mov	r5, r8
    96ec:	e7dc      	b.n	96a8 <__multadd+0x44>
    96ee:	46c0      	nop			; (mov r8, r8)

000096f0 <__hi0bits>:
    96f0:	0003      	movs	r3, r0
    96f2:	0c02      	lsrs	r2, r0, #16
    96f4:	2000      	movs	r0, #0
    96f6:	2a00      	cmp	r2, #0
    96f8:	d101      	bne.n	96fe <__hi0bits+0xe>
    96fa:	041b      	lsls	r3, r3, #16
    96fc:	3010      	adds	r0, #16
    96fe:	0e1a      	lsrs	r2, r3, #24
    9700:	d101      	bne.n	9706 <__hi0bits+0x16>
    9702:	3008      	adds	r0, #8
    9704:	021b      	lsls	r3, r3, #8
    9706:	0f1a      	lsrs	r2, r3, #28
    9708:	d101      	bne.n	970e <__hi0bits+0x1e>
    970a:	3004      	adds	r0, #4
    970c:	011b      	lsls	r3, r3, #4
    970e:	0f9a      	lsrs	r2, r3, #30
    9710:	d101      	bne.n	9716 <__hi0bits+0x26>
    9712:	3002      	adds	r0, #2
    9714:	009b      	lsls	r3, r3, #2
    9716:	2b00      	cmp	r3, #0
    9718:	db03      	blt.n	9722 <__hi0bits+0x32>
    971a:	3001      	adds	r0, #1
    971c:	005b      	lsls	r3, r3, #1
    971e:	d400      	bmi.n	9722 <__hi0bits+0x32>
    9720:	2020      	movs	r0, #32
    9722:	4770      	bx	lr

00009724 <__lo0bits>:
    9724:	6803      	ldr	r3, [r0, #0]
    9726:	075a      	lsls	r2, r3, #29
    9728:	d009      	beq.n	973e <__lo0bits+0x1a>
    972a:	2200      	movs	r2, #0
    972c:	07d9      	lsls	r1, r3, #31
    972e:	d404      	bmi.n	973a <__lo0bits+0x16>
    9730:	079a      	lsls	r2, r3, #30
    9732:	d420      	bmi.n	9776 <__lo0bits+0x52>
    9734:	2202      	movs	r2, #2
    9736:	089b      	lsrs	r3, r3, #2
    9738:	6003      	str	r3, [r0, #0]
    973a:	0010      	movs	r0, r2
    973c:	4770      	bx	lr
    973e:	0419      	lsls	r1, r3, #16
    9740:	2200      	movs	r2, #0
    9742:	2900      	cmp	r1, #0
    9744:	d101      	bne.n	974a <__lo0bits+0x26>
    9746:	0c1b      	lsrs	r3, r3, #16
    9748:	3210      	adds	r2, #16
    974a:	21ff      	movs	r1, #255	; 0xff
    974c:	4219      	tst	r1, r3
    974e:	d101      	bne.n	9754 <__lo0bits+0x30>
    9750:	3208      	adds	r2, #8
    9752:	0a1b      	lsrs	r3, r3, #8
    9754:	0719      	lsls	r1, r3, #28
    9756:	d101      	bne.n	975c <__lo0bits+0x38>
    9758:	3204      	adds	r2, #4
    975a:	091b      	lsrs	r3, r3, #4
    975c:	0799      	lsls	r1, r3, #30
    975e:	d101      	bne.n	9764 <__lo0bits+0x40>
    9760:	3202      	adds	r2, #2
    9762:	089b      	lsrs	r3, r3, #2
    9764:	07d9      	lsls	r1, r3, #31
    9766:	d404      	bmi.n	9772 <__lo0bits+0x4e>
    9768:	085b      	lsrs	r3, r3, #1
    976a:	d101      	bne.n	9770 <__lo0bits+0x4c>
    976c:	2220      	movs	r2, #32
    976e:	e7e4      	b.n	973a <__lo0bits+0x16>
    9770:	3201      	adds	r2, #1
    9772:	6003      	str	r3, [r0, #0]
    9774:	e7e1      	b.n	973a <__lo0bits+0x16>
    9776:	085b      	lsrs	r3, r3, #1
    9778:	6003      	str	r3, [r0, #0]
    977a:	2201      	movs	r2, #1
    977c:	e7dd      	b.n	973a <__lo0bits+0x16>
    977e:	46c0      	nop			; (mov r8, r8)

00009780 <__i2b>:
    9780:	b510      	push	{r4, lr}
    9782:	000c      	movs	r4, r1
    9784:	2101      	movs	r1, #1
    9786:	f7ff ff3b 	bl	9600 <_Balloc>
    978a:	2301      	movs	r3, #1
    978c:	6144      	str	r4, [r0, #20]
    978e:	6103      	str	r3, [r0, #16]
    9790:	bd10      	pop	{r4, pc}
    9792:	46c0      	nop			; (mov r8, r8)

00009794 <__multiply>:
    9794:	b5f0      	push	{r4, r5, r6, r7, lr}
    9796:	4657      	mov	r7, sl
    9798:	464e      	mov	r6, r9
    979a:	4645      	mov	r5, r8
    979c:	46de      	mov	lr, fp
    979e:	b5e0      	push	{r5, r6, r7, lr}
    97a0:	6914      	ldr	r4, [r2, #16]
    97a2:	690e      	ldr	r6, [r1, #16]
    97a4:	b085      	sub	sp, #20
    97a6:	000f      	movs	r7, r1
    97a8:	0015      	movs	r5, r2
    97aa:	42a6      	cmp	r6, r4
    97ac:	da04      	bge.n	97b8 <__multiply+0x24>
    97ae:	0033      	movs	r3, r6
    97b0:	0017      	movs	r7, r2
    97b2:	0026      	movs	r6, r4
    97b4:	000d      	movs	r5, r1
    97b6:	001c      	movs	r4, r3
    97b8:	1933      	adds	r3, r6, r4
    97ba:	4698      	mov	r8, r3
    97bc:	68bb      	ldr	r3, [r7, #8]
    97be:	6879      	ldr	r1, [r7, #4]
    97c0:	4598      	cmp	r8, r3
    97c2:	dd00      	ble.n	97c6 <__multiply+0x32>
    97c4:	3101      	adds	r1, #1
    97c6:	f7ff ff1b 	bl	9600 <_Balloc>
    97ca:	2214      	movs	r2, #20
    97cc:	0003      	movs	r3, r0
    97ce:	4694      	mov	ip, r2
    97d0:	4463      	add	r3, ip
    97d2:	469b      	mov	fp, r3
    97d4:	4643      	mov	r3, r8
    97d6:	009b      	lsls	r3, r3, #2
    97d8:	445b      	add	r3, fp
    97da:	0019      	movs	r1, r3
    97dc:	9302      	str	r3, [sp, #8]
    97de:	9003      	str	r0, [sp, #12]
    97e0:	465b      	mov	r3, fp
    97e2:	2200      	movs	r2, #0
    97e4:	458b      	cmp	fp, r1
    97e6:	d203      	bcs.n	97f0 <__multiply+0x5c>
    97e8:	9902      	ldr	r1, [sp, #8]
    97ea:	c304      	stmia	r3!, {r2}
    97ec:	4299      	cmp	r1, r3
    97ee:	d8fc      	bhi.n	97ea <__multiply+0x56>
    97f0:	2314      	movs	r3, #20
    97f2:	00a4      	lsls	r4, r4, #2
    97f4:	469a      	mov	sl, r3
    97f6:	3714      	adds	r7, #20
    97f8:	0023      	movs	r3, r4
    97fa:	46bc      	mov	ip, r7
    97fc:	44aa      	add	sl, r5
    97fe:	00b6      	lsls	r6, r6, #2
    9800:	4453      	add	r3, sl
    9802:	9700      	str	r7, [sp, #0]
    9804:	44b4      	add	ip, r6
    9806:	9301      	str	r3, [sp, #4]
    9808:	459a      	cmp	sl, r3
    980a:	d24f      	bcs.n	98ac <__multiply+0x118>
    980c:	4653      	mov	r3, sl
    980e:	681b      	ldr	r3, [r3, #0]
    9810:	041e      	lsls	r6, r3, #16
    9812:	0c36      	lsrs	r6, r6, #16
    9814:	d020      	beq.n	9858 <__multiply+0xc4>
    9816:	465c      	mov	r4, fp
    9818:	2700      	movs	r7, #0
    981a:	9d00      	ldr	r5, [sp, #0]
    981c:	0021      	movs	r1, r4
    981e:	cc08      	ldmia	r4!, {r3}
    9820:	cd04      	ldmia	r5!, {r2}
    9822:	4699      	mov	r9, r3
    9824:	4648      	mov	r0, r9
    9826:	0413      	lsls	r3, r2, #16
    9828:	0c1b      	lsrs	r3, r3, #16
    982a:	4373      	muls	r3, r6
    982c:	0400      	lsls	r0, r0, #16
    982e:	0c00      	lsrs	r0, r0, #16
    9830:	181b      	adds	r3, r3, r0
    9832:	19d8      	adds	r0, r3, r7
    9834:	0c13      	lsrs	r3, r2, #16
    9836:	464a      	mov	r2, r9
    9838:	4373      	muls	r3, r6
    983a:	0c12      	lsrs	r2, r2, #16
    983c:	189b      	adds	r3, r3, r2
    983e:	0c02      	lsrs	r2, r0, #16
    9840:	189b      	adds	r3, r3, r2
    9842:	0402      	lsls	r2, r0, #16
    9844:	0c1f      	lsrs	r7, r3, #16
    9846:	0c12      	lsrs	r2, r2, #16
    9848:	041b      	lsls	r3, r3, #16
    984a:	4313      	orrs	r3, r2
    984c:	600b      	str	r3, [r1, #0]
    984e:	45ac      	cmp	ip, r5
    9850:	d8e4      	bhi.n	981c <__multiply+0x88>
    9852:	4653      	mov	r3, sl
    9854:	6027      	str	r7, [r4, #0]
    9856:	681b      	ldr	r3, [r3, #0]
    9858:	0c1e      	lsrs	r6, r3, #16
    985a:	d020      	beq.n	989e <__multiply+0x10a>
    985c:	465b      	mov	r3, fp
    985e:	2100      	movs	r1, #0
    9860:	681b      	ldr	r3, [r3, #0]
    9862:	465c      	mov	r4, fp
    9864:	0018      	movs	r0, r3
    9866:	000f      	movs	r7, r1
    9868:	4662      	mov	r2, ip
    986a:	9d00      	ldr	r5, [sp, #0]
    986c:	8829      	ldrh	r1, [r5, #0]
    986e:	0c00      	lsrs	r0, r0, #16
    9870:	4371      	muls	r1, r6
    9872:	1809      	adds	r1, r1, r0
    9874:	19c9      	adds	r1, r1, r7
    9876:	041b      	lsls	r3, r3, #16
    9878:	0408      	lsls	r0, r1, #16
    987a:	0c1b      	lsrs	r3, r3, #16
    987c:	4303      	orrs	r3, r0
    987e:	6023      	str	r3, [r4, #0]
    9880:	cd08      	ldmia	r5!, {r3}
    9882:	6860      	ldr	r0, [r4, #4]
    9884:	0c1b      	lsrs	r3, r3, #16
    9886:	4373      	muls	r3, r6
    9888:	0407      	lsls	r7, r0, #16
    988a:	0c3f      	lsrs	r7, r7, #16
    988c:	19db      	adds	r3, r3, r7
    988e:	0c09      	lsrs	r1, r1, #16
    9890:	185b      	adds	r3, r3, r1
    9892:	0c1f      	lsrs	r7, r3, #16
    9894:	3404      	adds	r4, #4
    9896:	42aa      	cmp	r2, r5
    9898:	d8e8      	bhi.n	986c <__multiply+0xd8>
    989a:	4694      	mov	ip, r2
    989c:	6023      	str	r3, [r4, #0]
    989e:	2304      	movs	r3, #4
    98a0:	4699      	mov	r9, r3
    98a2:	9b01      	ldr	r3, [sp, #4]
    98a4:	44ca      	add	sl, r9
    98a6:	44cb      	add	fp, r9
    98a8:	4553      	cmp	r3, sl
    98aa:	d8af      	bhi.n	980c <__multiply+0x78>
    98ac:	4643      	mov	r3, r8
    98ae:	2b00      	cmp	r3, #0
    98b0:	dd0e      	ble.n	98d0 <__multiply+0x13c>
    98b2:	9b02      	ldr	r3, [sp, #8]
    98b4:	3b04      	subs	r3, #4
    98b6:	681a      	ldr	r2, [r3, #0]
    98b8:	2a00      	cmp	r2, #0
    98ba:	d109      	bne.n	98d0 <__multiply+0x13c>
    98bc:	4642      	mov	r2, r8
    98be:	e003      	b.n	98c8 <__multiply+0x134>
    98c0:	3b04      	subs	r3, #4
    98c2:	6819      	ldr	r1, [r3, #0]
    98c4:	2900      	cmp	r1, #0
    98c6:	d102      	bne.n	98ce <__multiply+0x13a>
    98c8:	3a01      	subs	r2, #1
    98ca:	2a00      	cmp	r2, #0
    98cc:	d1f8      	bne.n	98c0 <__multiply+0x12c>
    98ce:	4690      	mov	r8, r2
    98d0:	9b03      	ldr	r3, [sp, #12]
    98d2:	4642      	mov	r2, r8
    98d4:	0018      	movs	r0, r3
    98d6:	611a      	str	r2, [r3, #16]
    98d8:	b005      	add	sp, #20
    98da:	bc3c      	pop	{r2, r3, r4, r5}
    98dc:	4690      	mov	r8, r2
    98de:	4699      	mov	r9, r3
    98e0:	46a2      	mov	sl, r4
    98e2:	46ab      	mov	fp, r5
    98e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    98e6:	46c0      	nop			; (mov r8, r8)

000098e8 <__pow5mult>:
    98e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    98ea:	4647      	mov	r7, r8
    98ec:	46ce      	mov	lr, r9
    98ee:	2303      	movs	r3, #3
    98f0:	b580      	push	{r7, lr}
    98f2:	4680      	mov	r8, r0
    98f4:	000f      	movs	r7, r1
    98f6:	0014      	movs	r4, r2
    98f8:	4013      	ands	r3, r2
    98fa:	d13a      	bne.n	9972 <__pow5mult+0x8a>
    98fc:	10a4      	asrs	r4, r4, #2
    98fe:	003e      	movs	r6, r7
    9900:	2c00      	cmp	r4, #0
    9902:	d025      	beq.n	9950 <__pow5mult+0x68>
    9904:	4643      	mov	r3, r8
    9906:	6c9d      	ldr	r5, [r3, #72]	; 0x48
    9908:	2d00      	cmp	r5, #0
    990a:	d03b      	beq.n	9984 <__pow5mult+0x9c>
    990c:	003e      	movs	r6, r7
    990e:	2300      	movs	r3, #0
    9910:	2701      	movs	r7, #1
    9912:	4699      	mov	r9, r3
    9914:	4227      	tst	r7, r4
    9916:	d107      	bne.n	9928 <__pow5mult+0x40>
    9918:	1064      	asrs	r4, r4, #1
    991a:	d019      	beq.n	9950 <__pow5mult+0x68>
    991c:	6828      	ldr	r0, [r5, #0]
    991e:	2800      	cmp	r0, #0
    9920:	d01b      	beq.n	995a <__pow5mult+0x72>
    9922:	0005      	movs	r5, r0
    9924:	4227      	tst	r7, r4
    9926:	d0f7      	beq.n	9918 <__pow5mult+0x30>
    9928:	002a      	movs	r2, r5
    992a:	0031      	movs	r1, r6
    992c:	4640      	mov	r0, r8
    992e:	f7ff ff31 	bl	9794 <__multiply>
    9932:	2e00      	cmp	r6, #0
    9934:	d01b      	beq.n	996e <__pow5mult+0x86>
    9936:	4642      	mov	r2, r8
    9938:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    993a:	6873      	ldr	r3, [r6, #4]
    993c:	4694      	mov	ip, r2
    993e:	009b      	lsls	r3, r3, #2
    9940:	4463      	add	r3, ip
    9942:	681a      	ldr	r2, [r3, #0]
    9944:	1064      	asrs	r4, r4, #1
    9946:	6032      	str	r2, [r6, #0]
    9948:	601e      	str	r6, [r3, #0]
    994a:	0006      	movs	r6, r0
    994c:	2c00      	cmp	r4, #0
    994e:	d1e5      	bne.n	991c <__pow5mult+0x34>
    9950:	0030      	movs	r0, r6
    9952:	bc0c      	pop	{r2, r3}
    9954:	4690      	mov	r8, r2
    9956:	4699      	mov	r9, r3
    9958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    995a:	002a      	movs	r2, r5
    995c:	0029      	movs	r1, r5
    995e:	4640      	mov	r0, r8
    9960:	f7ff ff18 	bl	9794 <__multiply>
    9964:	464b      	mov	r3, r9
    9966:	6028      	str	r0, [r5, #0]
    9968:	6003      	str	r3, [r0, #0]
    996a:	0005      	movs	r5, r0
    996c:	e7da      	b.n	9924 <__pow5mult+0x3c>
    996e:	0006      	movs	r6, r0
    9970:	e7d2      	b.n	9918 <__pow5mult+0x30>
    9972:	4a0b      	ldr	r2, [pc, #44]	; (99a0 <__pow5mult+0xb8>)
    9974:	3b01      	subs	r3, #1
    9976:	009b      	lsls	r3, r3, #2
    9978:	589a      	ldr	r2, [r3, r2]
    997a:	2300      	movs	r3, #0
    997c:	f7ff fe72 	bl	9664 <__multadd>
    9980:	0007      	movs	r7, r0
    9982:	e7bb      	b.n	98fc <__pow5mult+0x14>
    9984:	2101      	movs	r1, #1
    9986:	4640      	mov	r0, r8
    9988:	f7ff fe3a 	bl	9600 <_Balloc>
    998c:	4b05      	ldr	r3, [pc, #20]	; (99a4 <__pow5mult+0xbc>)
    998e:	0005      	movs	r5, r0
    9990:	6143      	str	r3, [r0, #20]
    9992:	2301      	movs	r3, #1
    9994:	6103      	str	r3, [r0, #16]
    9996:	4643      	mov	r3, r8
    9998:	6498      	str	r0, [r3, #72]	; 0x48
    999a:	2300      	movs	r3, #0
    999c:	6003      	str	r3, [r0, #0]
    999e:	e7b5      	b.n	990c <__pow5mult+0x24>
    99a0:	0000b8e0 	.word	0x0000b8e0
    99a4:	00000271 	.word	0x00000271

000099a8 <__lshift>:
    99a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    99aa:	464e      	mov	r6, r9
    99ac:	4645      	mov	r5, r8
    99ae:	46de      	mov	lr, fp
    99b0:	4657      	mov	r7, sl
    99b2:	b5e0      	push	{r5, r6, r7, lr}
    99b4:	000e      	movs	r6, r1
    99b6:	6933      	ldr	r3, [r6, #16]
    99b8:	1154      	asrs	r4, r2, #5
    99ba:	4698      	mov	r8, r3
    99bc:	44a0      	add	r8, r4
    99be:	4643      	mov	r3, r8
    99c0:	1c5d      	adds	r5, r3, #1
    99c2:	68b3      	ldr	r3, [r6, #8]
    99c4:	4683      	mov	fp, r0
    99c6:	4691      	mov	r9, r2
    99c8:	6849      	ldr	r1, [r1, #4]
    99ca:	429d      	cmp	r5, r3
    99cc:	dd03      	ble.n	99d6 <__lshift+0x2e>
    99ce:	3101      	adds	r1, #1
    99d0:	005b      	lsls	r3, r3, #1
    99d2:	429d      	cmp	r5, r3
    99d4:	dcfb      	bgt.n	99ce <__lshift+0x26>
    99d6:	4658      	mov	r0, fp
    99d8:	f7ff fe12 	bl	9600 <_Balloc>
    99dc:	0003      	movs	r3, r0
    99de:	4684      	mov	ip, r0
    99e0:	3314      	adds	r3, #20
    99e2:	2c00      	cmp	r4, #0
    99e4:	dd06      	ble.n	99f4 <__lshift+0x4c>
    99e6:	2100      	movs	r1, #0
    99e8:	00a4      	lsls	r4, r4, #2
    99ea:	001a      	movs	r2, r3
    99ec:	191b      	adds	r3, r3, r4
    99ee:	c202      	stmia	r2!, {r1}
    99f0:	4293      	cmp	r3, r2
    99f2:	d1fc      	bne.n	99ee <__lshift+0x46>
    99f4:	6932      	ldr	r2, [r6, #16]
    99f6:	4648      	mov	r0, r9
    99f8:	0097      	lsls	r7, r2, #2
    99fa:	0031      	movs	r1, r6
    99fc:	221f      	movs	r2, #31
    99fe:	3114      	adds	r1, #20
    9a00:	4010      	ands	r0, r2
    9a02:	19cf      	adds	r7, r1, r7
    9a04:	4681      	mov	r9, r0
    9a06:	2800      	cmp	r0, #0
    9a08:	d025      	beq.n	9a56 <__lshift+0xae>
    9a0a:	2220      	movs	r2, #32
    9a0c:	1a12      	subs	r2, r2, r0
    9a0e:	4692      	mov	sl, r2
    9a10:	2200      	movs	r2, #0
    9a12:	4648      	mov	r0, r9
    9a14:	680c      	ldr	r4, [r1, #0]
    9a16:	4084      	lsls	r4, r0
    9a18:	4650      	mov	r0, sl
    9a1a:	4314      	orrs	r4, r2
    9a1c:	601c      	str	r4, [r3, #0]
    9a1e:	c904      	ldmia	r1!, {r2}
    9a20:	3304      	adds	r3, #4
    9a22:	40c2      	lsrs	r2, r0
    9a24:	428f      	cmp	r7, r1
    9a26:	d8f4      	bhi.n	9a12 <__lshift+0x6a>
    9a28:	601a      	str	r2, [r3, #0]
    9a2a:	2a00      	cmp	r2, #0
    9a2c:	d001      	beq.n	9a32 <__lshift+0x8a>
    9a2e:	4645      	mov	r5, r8
    9a30:	3502      	adds	r5, #2
    9a32:	4663      	mov	r3, ip
    9a34:	3d01      	subs	r5, #1
    9a36:	611d      	str	r5, [r3, #16]
    9a38:	6873      	ldr	r3, [r6, #4]
    9a3a:	4660      	mov	r0, ip
    9a3c:	009a      	lsls	r2, r3, #2
    9a3e:	465b      	mov	r3, fp
    9a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    9a42:	189b      	adds	r3, r3, r2
    9a44:	681a      	ldr	r2, [r3, #0]
    9a46:	6032      	str	r2, [r6, #0]
    9a48:	601e      	str	r6, [r3, #0]
    9a4a:	bc3c      	pop	{r2, r3, r4, r5}
    9a4c:	4690      	mov	r8, r2
    9a4e:	4699      	mov	r9, r3
    9a50:	46a2      	mov	sl, r4
    9a52:	46ab      	mov	fp, r5
    9a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9a56:	c904      	ldmia	r1!, {r2}
    9a58:	c304      	stmia	r3!, {r2}
    9a5a:	428f      	cmp	r7, r1
    9a5c:	d9e9      	bls.n	9a32 <__lshift+0x8a>
    9a5e:	c904      	ldmia	r1!, {r2}
    9a60:	c304      	stmia	r3!, {r2}
    9a62:	428f      	cmp	r7, r1
    9a64:	d8f7      	bhi.n	9a56 <__lshift+0xae>
    9a66:	e7e4      	b.n	9a32 <__lshift+0x8a>

00009a68 <__mcmp>:
    9a68:	690a      	ldr	r2, [r1, #16]
    9a6a:	6903      	ldr	r3, [r0, #16]
    9a6c:	b530      	push	{r4, r5, lr}
    9a6e:	0005      	movs	r5, r0
    9a70:	1a98      	subs	r0, r3, r2
    9a72:	d111      	bne.n	9a98 <__mcmp+0x30>
    9a74:	0092      	lsls	r2, r2, #2
    9a76:	3514      	adds	r5, #20
    9a78:	3114      	adds	r1, #20
    9a7a:	18ab      	adds	r3, r5, r2
    9a7c:	1889      	adds	r1, r1, r2
    9a7e:	e001      	b.n	9a84 <__mcmp+0x1c>
    9a80:	429d      	cmp	r5, r3
    9a82:	d209      	bcs.n	9a98 <__mcmp+0x30>
    9a84:	3b04      	subs	r3, #4
    9a86:	3904      	subs	r1, #4
    9a88:	681c      	ldr	r4, [r3, #0]
    9a8a:	680a      	ldr	r2, [r1, #0]
    9a8c:	4294      	cmp	r4, r2
    9a8e:	d0f7      	beq.n	9a80 <__mcmp+0x18>
    9a90:	4294      	cmp	r4, r2
    9a92:	4180      	sbcs	r0, r0
    9a94:	2201      	movs	r2, #1
    9a96:	4310      	orrs	r0, r2
    9a98:	bd30      	pop	{r4, r5, pc}
    9a9a:	46c0      	nop			; (mov r8, r8)

00009a9c <__mdiff>:
    9a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9a9e:	4645      	mov	r5, r8
    9aa0:	46de      	mov	lr, fp
    9aa2:	4657      	mov	r7, sl
    9aa4:	464e      	mov	r6, r9
    9aa6:	0014      	movs	r4, r2
    9aa8:	690b      	ldr	r3, [r1, #16]
    9aaa:	6912      	ldr	r2, [r2, #16]
    9aac:	b5e0      	push	{r5, r6, r7, lr}
    9aae:	4688      	mov	r8, r1
    9ab0:	1a9d      	subs	r5, r3, r2
    9ab2:	d11a      	bne.n	9aea <__mdiff+0x4e>
    9ab4:	000f      	movs	r7, r1
    9ab6:	2114      	movs	r1, #20
    9ab8:	468c      	mov	ip, r1
    9aba:	0092      	lsls	r2, r2, #2
    9abc:	3714      	adds	r7, #20
    9abe:	44a4      	add	ip, r4
    9ac0:	18bb      	adds	r3, r7, r2
    9ac2:	4462      	add	r2, ip
    9ac4:	e002      	b.n	9acc <__mdiff+0x30>
    9ac6:	429f      	cmp	r7, r3
    9ac8:	d300      	bcc.n	9acc <__mdiff+0x30>
    9aca:	e070      	b.n	9bae <__mdiff+0x112>
    9acc:	3b04      	subs	r3, #4
    9ace:	3a04      	subs	r2, #4
    9ad0:	681e      	ldr	r6, [r3, #0]
    9ad2:	6811      	ldr	r1, [r2, #0]
    9ad4:	428e      	cmp	r6, r1
    9ad6:	d0f6      	beq.n	9ac6 <__mdiff+0x2a>
    9ad8:	d300      	bcc.n	9adc <__mdiff+0x40>
    9ada:	e071      	b.n	9bc0 <__mdiff+0x124>
    9adc:	4643      	mov	r3, r8
    9ade:	003e      	movs	r6, r7
    9ae0:	46a0      	mov	r8, r4
    9ae2:	4667      	mov	r7, ip
    9ae4:	001c      	movs	r4, r3
    9ae6:	2501      	movs	r5, #1
    9ae8:	e006      	b.n	9af8 <__mdiff+0x5c>
    9aea:	2d00      	cmp	r5, #0
    9aec:	db6a      	blt.n	9bc4 <__mdiff+0x128>
    9aee:	4647      	mov	r7, r8
    9af0:	0026      	movs	r6, r4
    9af2:	2500      	movs	r5, #0
    9af4:	3714      	adds	r7, #20
    9af6:	3614      	adds	r6, #20
    9af8:	4643      	mov	r3, r8
    9afa:	6859      	ldr	r1, [r3, #4]
    9afc:	f7ff fd80 	bl	9600 <_Balloc>
    9b00:	4643      	mov	r3, r8
    9b02:	4681      	mov	r9, r0
    9b04:	60c5      	str	r5, [r0, #12]
    9b06:	6918      	ldr	r0, [r3, #16]
    9b08:	464d      	mov	r5, r9
    9b0a:	0083      	lsls	r3, r0, #2
    9b0c:	469c      	mov	ip, r3
    9b0e:	6923      	ldr	r3, [r4, #16]
    9b10:	44bc      	add	ip, r7
    9b12:	009b      	lsls	r3, r3, #2
    9b14:	4698      	mov	r8, r3
    9b16:	2300      	movs	r3, #0
    9b18:	44b0      	add	r8, r6
    9b1a:	3514      	adds	r5, #20
    9b1c:	469a      	mov	sl, r3
    9b1e:	e000      	b.n	9b22 <__mdiff+0x86>
    9b20:	0027      	movs	r7, r4
    9b22:	ce04      	ldmia	r6!, {r2}
    9b24:	003c      	movs	r4, r7
    9b26:	4693      	mov	fp, r2
    9b28:	4659      	mov	r1, fp
    9b2a:	cc08      	ldmia	r4!, {r3}
    9b2c:	0409      	lsls	r1, r1, #16
    9b2e:	041a      	lsls	r2, r3, #16
    9b30:	0c12      	lsrs	r2, r2, #16
    9b32:	4452      	add	r2, sl
    9b34:	0c09      	lsrs	r1, r1, #16
    9b36:	1a52      	subs	r2, r2, r1
    9b38:	0c19      	lsrs	r1, r3, #16
    9b3a:	465b      	mov	r3, fp
    9b3c:	0c1b      	lsrs	r3, r3, #16
    9b3e:	1acb      	subs	r3, r1, r3
    9b40:	1411      	asrs	r1, r2, #16
    9b42:	185b      	adds	r3, r3, r1
    9b44:	0412      	lsls	r2, r2, #16
    9b46:	1419      	asrs	r1, r3, #16
    9b48:	0c12      	lsrs	r2, r2, #16
    9b4a:	041b      	lsls	r3, r3, #16
    9b4c:	468a      	mov	sl, r1
    9b4e:	4313      	orrs	r3, r2
    9b50:	1d29      	adds	r1, r5, #4
    9b52:	602b      	str	r3, [r5, #0]
    9b54:	000d      	movs	r5, r1
    9b56:	45b0      	cmp	r8, r6
    9b58:	d8e2      	bhi.n	9b20 <__mdiff+0x84>
    9b5a:	45a4      	cmp	ip, r4
    9b5c:	d916      	bls.n	9b8c <__mdiff+0xf0>
    9b5e:	cc08      	ldmia	r4!, {r3}
    9b60:	041a      	lsls	r2, r3, #16
    9b62:	0c12      	lsrs	r2, r2, #16
    9b64:	4452      	add	r2, sl
    9b66:	1416      	asrs	r6, r2, #16
    9b68:	0c1b      	lsrs	r3, r3, #16
    9b6a:	199b      	adds	r3, r3, r6
    9b6c:	0412      	lsls	r2, r2, #16
    9b6e:	141e      	asrs	r6, r3, #16
    9b70:	0c12      	lsrs	r2, r2, #16
    9b72:	041b      	lsls	r3, r3, #16
    9b74:	4313      	orrs	r3, r2
    9b76:	46b2      	mov	sl, r6
    9b78:	c508      	stmia	r5!, {r3}
    9b7a:	45a4      	cmp	ip, r4
    9b7c:	d8ef      	bhi.n	9b5e <__mdiff+0xc2>
    9b7e:	4662      	mov	r2, ip
    9b80:	2403      	movs	r4, #3
    9b82:	1bd2      	subs	r2, r2, r7
    9b84:	3a05      	subs	r2, #5
    9b86:	43a2      	bics	r2, r4
    9b88:	3204      	adds	r2, #4
    9b8a:	1889      	adds	r1, r1, r2
    9b8c:	3904      	subs	r1, #4
    9b8e:	2b00      	cmp	r3, #0
    9b90:	d104      	bne.n	9b9c <__mdiff+0x100>
    9b92:	3904      	subs	r1, #4
    9b94:	680b      	ldr	r3, [r1, #0]
    9b96:	3801      	subs	r0, #1
    9b98:	2b00      	cmp	r3, #0
    9b9a:	d0fa      	beq.n	9b92 <__mdiff+0xf6>
    9b9c:	464b      	mov	r3, r9
    9b9e:	6118      	str	r0, [r3, #16]
    9ba0:	4648      	mov	r0, r9
    9ba2:	bc3c      	pop	{r2, r3, r4, r5}
    9ba4:	4690      	mov	r8, r2
    9ba6:	4699      	mov	r9, r3
    9ba8:	46a2      	mov	sl, r4
    9baa:	46ab      	mov	fp, r5
    9bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9bae:	2100      	movs	r1, #0
    9bb0:	f7ff fd26 	bl	9600 <_Balloc>
    9bb4:	2301      	movs	r3, #1
    9bb6:	6103      	str	r3, [r0, #16]
    9bb8:	2300      	movs	r3, #0
    9bba:	4681      	mov	r9, r0
    9bbc:	6143      	str	r3, [r0, #20]
    9bbe:	e7ef      	b.n	9ba0 <__mdiff+0x104>
    9bc0:	4666      	mov	r6, ip
    9bc2:	e799      	b.n	9af8 <__mdiff+0x5c>
    9bc4:	0027      	movs	r7, r4
    9bc6:	000e      	movs	r6, r1
    9bc8:	46a0      	mov	r8, r4
    9bca:	3714      	adds	r7, #20
    9bcc:	3614      	adds	r6, #20
    9bce:	000c      	movs	r4, r1
    9bd0:	2501      	movs	r5, #1
    9bd2:	e791      	b.n	9af8 <__mdiff+0x5c>

00009bd4 <__d2b>:
    9bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9bd6:	2101      	movs	r1, #1
    9bd8:	001c      	movs	r4, r3
    9bda:	b083      	sub	sp, #12
    9bdc:	9e08      	ldr	r6, [sp, #32]
    9bde:	0015      	movs	r5, r2
    9be0:	f7ff fd0e 	bl	9600 <_Balloc>
    9be4:	0323      	lsls	r3, r4, #12
    9be6:	0064      	lsls	r4, r4, #1
    9be8:	0007      	movs	r7, r0
    9bea:	0b1b      	lsrs	r3, r3, #12
    9bec:	0d64      	lsrs	r4, r4, #21
    9bee:	d002      	beq.n	9bf6 <__d2b+0x22>
    9bf0:	2280      	movs	r2, #128	; 0x80
    9bf2:	0352      	lsls	r2, r2, #13
    9bf4:	4313      	orrs	r3, r2
    9bf6:	9301      	str	r3, [sp, #4]
    9bf8:	2d00      	cmp	r5, #0
    9bfa:	d019      	beq.n	9c30 <__d2b+0x5c>
    9bfc:	4668      	mov	r0, sp
    9bfe:	9500      	str	r5, [sp, #0]
    9c00:	f7ff fd90 	bl	9724 <__lo0bits>
    9c04:	2800      	cmp	r0, #0
    9c06:	d130      	bne.n	9c6a <__d2b+0x96>
    9c08:	9b00      	ldr	r3, [sp, #0]
    9c0a:	617b      	str	r3, [r7, #20]
    9c0c:	9b01      	ldr	r3, [sp, #4]
    9c0e:	61bb      	str	r3, [r7, #24]
    9c10:	1e5a      	subs	r2, r3, #1
    9c12:	4193      	sbcs	r3, r2
    9c14:	1c5d      	adds	r5, r3, #1
    9c16:	613d      	str	r5, [r7, #16]
    9c18:	2c00      	cmp	r4, #0
    9c1a:	d014      	beq.n	9c46 <__d2b+0x72>
    9c1c:	4b19      	ldr	r3, [pc, #100]	; (9c84 <__d2b+0xb0>)
    9c1e:	469c      	mov	ip, r3
    9c20:	2335      	movs	r3, #53	; 0x35
    9c22:	4464      	add	r4, ip
    9c24:	1824      	adds	r4, r4, r0
    9c26:	1a18      	subs	r0, r3, r0
    9c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9c2a:	6034      	str	r4, [r6, #0]
    9c2c:	6018      	str	r0, [r3, #0]
    9c2e:	e019      	b.n	9c64 <__d2b+0x90>
    9c30:	a801      	add	r0, sp, #4
    9c32:	f7ff fd77 	bl	9724 <__lo0bits>
    9c36:	9b01      	ldr	r3, [sp, #4]
    9c38:	3020      	adds	r0, #32
    9c3a:	617b      	str	r3, [r7, #20]
    9c3c:	2301      	movs	r3, #1
    9c3e:	2501      	movs	r5, #1
    9c40:	613b      	str	r3, [r7, #16]
    9c42:	2c00      	cmp	r4, #0
    9c44:	d1ea      	bne.n	9c1c <__d2b+0x48>
    9c46:	4b10      	ldr	r3, [pc, #64]	; (9c88 <__d2b+0xb4>)
    9c48:	469c      	mov	ip, r3
    9c4a:	4b10      	ldr	r3, [pc, #64]	; (9c8c <__d2b+0xb8>)
    9c4c:	4460      	add	r0, ip
    9c4e:	18eb      	adds	r3, r5, r3
    9c50:	009b      	lsls	r3, r3, #2
    9c52:	18fb      	adds	r3, r7, r3
    9c54:	6030      	str	r0, [r6, #0]
    9c56:	6958      	ldr	r0, [r3, #20]
    9c58:	f7ff fd4a 	bl	96f0 <__hi0bits>
    9c5c:	016b      	lsls	r3, r5, #5
    9c5e:	1a18      	subs	r0, r3, r0
    9c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9c62:	6018      	str	r0, [r3, #0]
    9c64:	0038      	movs	r0, r7
    9c66:	b003      	add	sp, #12
    9c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9c6a:	9b01      	ldr	r3, [sp, #4]
    9c6c:	2220      	movs	r2, #32
    9c6e:	0019      	movs	r1, r3
    9c70:	1a12      	subs	r2, r2, r0
    9c72:	4091      	lsls	r1, r2
    9c74:	000a      	movs	r2, r1
    9c76:	40c3      	lsrs	r3, r0
    9c78:	9900      	ldr	r1, [sp, #0]
    9c7a:	9301      	str	r3, [sp, #4]
    9c7c:	430a      	orrs	r2, r1
    9c7e:	617a      	str	r2, [r7, #20]
    9c80:	e7c5      	b.n	9c0e <__d2b+0x3a>
    9c82:	46c0      	nop			; (mov r8, r8)
    9c84:	fffffbcd 	.word	0xfffffbcd
    9c88:	fffffbce 	.word	0xfffffbce
    9c8c:	3fffffff 	.word	0x3fffffff

00009c90 <_sbrk_r>:
    9c90:	2300      	movs	r3, #0
    9c92:	b570      	push	{r4, r5, r6, lr}
    9c94:	4c06      	ldr	r4, [pc, #24]	; (9cb0 <_sbrk_r+0x20>)
    9c96:	0005      	movs	r5, r0
    9c98:	0008      	movs	r0, r1
    9c9a:	6023      	str	r3, [r4, #0]
    9c9c:	f7f7 fee6 	bl	1a6c <_sbrk>
    9ca0:	1c43      	adds	r3, r0, #1
    9ca2:	d000      	beq.n	9ca6 <_sbrk_r+0x16>
    9ca4:	bd70      	pop	{r4, r5, r6, pc}
    9ca6:	6823      	ldr	r3, [r4, #0]
    9ca8:	2b00      	cmp	r3, #0
    9caa:	d0fb      	beq.n	9ca4 <_sbrk_r+0x14>
    9cac:	602b      	str	r3, [r5, #0]
    9cae:	e7f9      	b.n	9ca4 <_sbrk_r+0x14>
    9cb0:	200010d0 	.word	0x200010d0

00009cb4 <__ssprint_r>:
    9cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9cb6:	4657      	mov	r7, sl
    9cb8:	464e      	mov	r6, r9
    9cba:	46de      	mov	lr, fp
    9cbc:	4645      	mov	r5, r8
    9cbe:	b5e0      	push	{r5, r6, r7, lr}
    9cc0:	6893      	ldr	r3, [r2, #8]
    9cc2:	b083      	sub	sp, #12
    9cc4:	9001      	str	r0, [sp, #4]
    9cc6:	000e      	movs	r6, r1
    9cc8:	4692      	mov	sl, r2
    9cca:	2b00      	cmp	r3, #0
    9ccc:	d070      	beq.n	9db0 <__ssprint_r+0xfc>
    9cce:	688d      	ldr	r5, [r1, #8]
    9cd0:	6813      	ldr	r3, [r2, #0]
    9cd2:	002c      	movs	r4, r5
    9cd4:	6808      	ldr	r0, [r1, #0]
    9cd6:	001d      	movs	r5, r3
    9cd8:	e046      	b.n	9d68 <__ssprint_r+0xb4>
    9cda:	2290      	movs	r2, #144	; 0x90
    9cdc:	89b3      	ldrh	r3, [r6, #12]
    9cde:	00d2      	lsls	r2, r2, #3
    9ce0:	4213      	tst	r3, r2
    9ce2:	d030      	beq.n	9d46 <__ssprint_r+0x92>
    9ce4:	6931      	ldr	r1, [r6, #16]
    9ce6:	1a42      	subs	r2, r0, r1
    9ce8:	4693      	mov	fp, r2
    9cea:	6970      	ldr	r0, [r6, #20]
    9cec:	0042      	lsls	r2, r0, #1
    9cee:	1812      	adds	r2, r2, r0
    9cf0:	0fd0      	lsrs	r0, r2, #31
    9cf2:	1882      	adds	r2, r0, r2
    9cf4:	1052      	asrs	r2, r2, #1
    9cf6:	4690      	mov	r8, r2
    9cf8:	465a      	mov	r2, fp
    9cfa:	1c50      	adds	r0, r2, #1
    9cfc:	19c0      	adds	r0, r0, r7
    9cfe:	4642      	mov	r2, r8
    9d00:	4540      	cmp	r0, r8
    9d02:	d901      	bls.n	9d08 <__ssprint_r+0x54>
    9d04:	4680      	mov	r8, r0
    9d06:	0002      	movs	r2, r0
    9d08:	2080      	movs	r0, #128	; 0x80
    9d0a:	00c0      	lsls	r0, r0, #3
    9d0c:	4203      	tst	r3, r0
    9d0e:	d038      	beq.n	9d82 <__ssprint_r+0xce>
    9d10:	0011      	movs	r1, r2
    9d12:	9801      	ldr	r0, [sp, #4]
    9d14:	f7ff f970 	bl	8ff8 <_malloc_r>
    9d18:	1e04      	subs	r4, r0, #0
    9d1a:	d054      	beq.n	9dc6 <__ssprint_r+0x112>
    9d1c:	465a      	mov	r2, fp
    9d1e:	6931      	ldr	r1, [r6, #16]
    9d20:	f7fc fbaa 	bl	6478 <memcpy>
    9d24:	89b3      	ldrh	r3, [r6, #12]
    9d26:	4a2a      	ldr	r2, [pc, #168]	; (9dd0 <__ssprint_r+0x11c>)
    9d28:	4013      	ands	r3, r2
    9d2a:	2280      	movs	r2, #128	; 0x80
    9d2c:	4313      	orrs	r3, r2
    9d2e:	81b3      	strh	r3, [r6, #12]
    9d30:	4643      	mov	r3, r8
    9d32:	0020      	movs	r0, r4
    9d34:	465a      	mov	r2, fp
    9d36:	6134      	str	r4, [r6, #16]
    9d38:	46b8      	mov	r8, r7
    9d3a:	003c      	movs	r4, r7
    9d3c:	4458      	add	r0, fp
    9d3e:	6173      	str	r3, [r6, #20]
    9d40:	1a9b      	subs	r3, r3, r2
    9d42:	6030      	str	r0, [r6, #0]
    9d44:	60b3      	str	r3, [r6, #8]
    9d46:	4642      	mov	r2, r8
    9d48:	4649      	mov	r1, r9
    9d4a:	f000 f8ff 	bl	9f4c <memmove>
    9d4e:	68b3      	ldr	r3, [r6, #8]
    9d50:	1b1c      	subs	r4, r3, r4
    9d52:	6833      	ldr	r3, [r6, #0]
    9d54:	60b4      	str	r4, [r6, #8]
    9d56:	4443      	add	r3, r8
    9d58:	6033      	str	r3, [r6, #0]
    9d5a:	0018      	movs	r0, r3
    9d5c:	4653      	mov	r3, sl
    9d5e:	689b      	ldr	r3, [r3, #8]
    9d60:	1bdf      	subs	r7, r3, r7
    9d62:	4653      	mov	r3, sl
    9d64:	609f      	str	r7, [r3, #8]
    9d66:	d023      	beq.n	9db0 <__ssprint_r+0xfc>
    9d68:	686f      	ldr	r7, [r5, #4]
    9d6a:	002b      	movs	r3, r5
    9d6c:	3508      	adds	r5, #8
    9d6e:	2f00      	cmp	r7, #0
    9d70:	d0fa      	beq.n	9d68 <__ssprint_r+0xb4>
    9d72:	681b      	ldr	r3, [r3, #0]
    9d74:	46a0      	mov	r8, r4
    9d76:	4699      	mov	r9, r3
    9d78:	42a7      	cmp	r7, r4
    9d7a:	d2ae      	bcs.n	9cda <__ssprint_r+0x26>
    9d7c:	003c      	movs	r4, r7
    9d7e:	46b8      	mov	r8, r7
    9d80:	e7e1      	b.n	9d46 <__ssprint_r+0x92>
    9d82:	9801      	ldr	r0, [sp, #4]
    9d84:	f000 f932 	bl	9fec <_realloc_r>
    9d88:	1e04      	subs	r4, r0, #0
    9d8a:	d1d1      	bne.n	9d30 <__ssprint_r+0x7c>
    9d8c:	9c01      	ldr	r4, [sp, #4]
    9d8e:	6931      	ldr	r1, [r6, #16]
    9d90:	0020      	movs	r0, r4
    9d92:	f7ff f841 	bl	8e18 <_free_r>
    9d96:	230c      	movs	r3, #12
    9d98:	6023      	str	r3, [r4, #0]
    9d9a:	2240      	movs	r2, #64	; 0x40
    9d9c:	89b3      	ldrh	r3, [r6, #12]
    9d9e:	2001      	movs	r0, #1
    9da0:	4313      	orrs	r3, r2
    9da2:	81b3      	strh	r3, [r6, #12]
    9da4:	4652      	mov	r2, sl
    9da6:	2300      	movs	r3, #0
    9da8:	4240      	negs	r0, r0
    9daa:	6093      	str	r3, [r2, #8]
    9dac:	6053      	str	r3, [r2, #4]
    9dae:	e003      	b.n	9db8 <__ssprint_r+0x104>
    9db0:	2300      	movs	r3, #0
    9db2:	4652      	mov	r2, sl
    9db4:	2000      	movs	r0, #0
    9db6:	6053      	str	r3, [r2, #4]
    9db8:	b003      	add	sp, #12
    9dba:	bc3c      	pop	{r2, r3, r4, r5}
    9dbc:	4690      	mov	r8, r2
    9dbe:	4699      	mov	r9, r3
    9dc0:	46a2      	mov	sl, r4
    9dc2:	46ab      	mov	fp, r5
    9dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9dc6:	230c      	movs	r3, #12
    9dc8:	9a01      	ldr	r2, [sp, #4]
    9dca:	6013      	str	r3, [r2, #0]
    9dcc:	e7e5      	b.n	9d9a <__ssprint_r+0xe6>
    9dce:	46c0      	nop			; (mov r8, r8)
    9dd0:	fffffb7f 	.word	0xfffffb7f

00009dd4 <__register_exitproc>:
    9dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9dd6:	464e      	mov	r6, r9
    9dd8:	4645      	mov	r5, r8
    9dda:	46de      	mov	lr, fp
    9ddc:	4657      	mov	r7, sl
    9dde:	b5e0      	push	{r5, r6, r7, lr}
    9de0:	4d36      	ldr	r5, [pc, #216]	; (9ebc <__register_exitproc+0xe8>)
    9de2:	b083      	sub	sp, #12
    9de4:	0006      	movs	r6, r0
    9de6:	6828      	ldr	r0, [r5, #0]
    9de8:	4698      	mov	r8, r3
    9dea:	000f      	movs	r7, r1
    9dec:	4691      	mov	r9, r2
    9dee:	f7ff f8ff 	bl	8ff0 <__retarget_lock_acquire_recursive>
    9df2:	4b33      	ldr	r3, [pc, #204]	; (9ec0 <__register_exitproc+0xec>)
    9df4:	681c      	ldr	r4, [r3, #0]
    9df6:	23a4      	movs	r3, #164	; 0xa4
    9df8:	005b      	lsls	r3, r3, #1
    9dfa:	58e0      	ldr	r0, [r4, r3]
    9dfc:	2800      	cmp	r0, #0
    9dfe:	d052      	beq.n	9ea6 <__register_exitproc+0xd2>
    9e00:	6843      	ldr	r3, [r0, #4]
    9e02:	2b1f      	cmp	r3, #31
    9e04:	dc13      	bgt.n	9e2e <__register_exitproc+0x5a>
    9e06:	1c5a      	adds	r2, r3, #1
    9e08:	9201      	str	r2, [sp, #4]
    9e0a:	2e00      	cmp	r6, #0
    9e0c:	d128      	bne.n	9e60 <__register_exitproc+0x8c>
    9e0e:	9a01      	ldr	r2, [sp, #4]
    9e10:	3302      	adds	r3, #2
    9e12:	009b      	lsls	r3, r3, #2
    9e14:	6042      	str	r2, [r0, #4]
    9e16:	501f      	str	r7, [r3, r0]
    9e18:	6828      	ldr	r0, [r5, #0]
    9e1a:	f7ff f8eb 	bl	8ff4 <__retarget_lock_release_recursive>
    9e1e:	2000      	movs	r0, #0
    9e20:	b003      	add	sp, #12
    9e22:	bc3c      	pop	{r2, r3, r4, r5}
    9e24:	4690      	mov	r8, r2
    9e26:	4699      	mov	r9, r3
    9e28:	46a2      	mov	sl, r4
    9e2a:	46ab      	mov	fp, r5
    9e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9e2e:	4b25      	ldr	r3, [pc, #148]	; (9ec4 <__register_exitproc+0xf0>)
    9e30:	2b00      	cmp	r3, #0
    9e32:	d03d      	beq.n	9eb0 <__register_exitproc+0xdc>
    9e34:	20c8      	movs	r0, #200	; 0xc8
    9e36:	0040      	lsls	r0, r0, #1
    9e38:	e000      	b.n	9e3c <__register_exitproc+0x68>
    9e3a:	bf00      	nop
    9e3c:	2800      	cmp	r0, #0
    9e3e:	d037      	beq.n	9eb0 <__register_exitproc+0xdc>
    9e40:	22a4      	movs	r2, #164	; 0xa4
    9e42:	2300      	movs	r3, #0
    9e44:	0052      	lsls	r2, r2, #1
    9e46:	58a1      	ldr	r1, [r4, r2]
    9e48:	6043      	str	r3, [r0, #4]
    9e4a:	6001      	str	r1, [r0, #0]
    9e4c:	50a0      	str	r0, [r4, r2]
    9e4e:	3240      	adds	r2, #64	; 0x40
    9e50:	5083      	str	r3, [r0, r2]
    9e52:	3204      	adds	r2, #4
    9e54:	5083      	str	r3, [r0, r2]
    9e56:	3301      	adds	r3, #1
    9e58:	9301      	str	r3, [sp, #4]
    9e5a:	2300      	movs	r3, #0
    9e5c:	2e00      	cmp	r6, #0
    9e5e:	d0d6      	beq.n	9e0e <__register_exitproc+0x3a>
    9e60:	009a      	lsls	r2, r3, #2
    9e62:	4692      	mov	sl, r2
    9e64:	4482      	add	sl, r0
    9e66:	464a      	mov	r2, r9
    9e68:	2188      	movs	r1, #136	; 0x88
    9e6a:	4654      	mov	r4, sl
    9e6c:	5062      	str	r2, [r4, r1]
    9e6e:	22c4      	movs	r2, #196	; 0xc4
    9e70:	0052      	lsls	r2, r2, #1
    9e72:	4691      	mov	r9, r2
    9e74:	4481      	add	r9, r0
    9e76:	464a      	mov	r2, r9
    9e78:	3987      	subs	r1, #135	; 0x87
    9e7a:	4099      	lsls	r1, r3
    9e7c:	6812      	ldr	r2, [r2, #0]
    9e7e:	468b      	mov	fp, r1
    9e80:	430a      	orrs	r2, r1
    9e82:	4694      	mov	ip, r2
    9e84:	464a      	mov	r2, r9
    9e86:	4661      	mov	r1, ip
    9e88:	6011      	str	r1, [r2, #0]
    9e8a:	2284      	movs	r2, #132	; 0x84
    9e8c:	4641      	mov	r1, r8
    9e8e:	0052      	lsls	r2, r2, #1
    9e90:	50a1      	str	r1, [r4, r2]
    9e92:	2e02      	cmp	r6, #2
    9e94:	d1bb      	bne.n	9e0e <__register_exitproc+0x3a>
    9e96:	0002      	movs	r2, r0
    9e98:	465c      	mov	r4, fp
    9e9a:	328d      	adds	r2, #141	; 0x8d
    9e9c:	32ff      	adds	r2, #255	; 0xff
    9e9e:	6811      	ldr	r1, [r2, #0]
    9ea0:	430c      	orrs	r4, r1
    9ea2:	6014      	str	r4, [r2, #0]
    9ea4:	e7b3      	b.n	9e0e <__register_exitproc+0x3a>
    9ea6:	0020      	movs	r0, r4
    9ea8:	304d      	adds	r0, #77	; 0x4d
    9eaa:	30ff      	adds	r0, #255	; 0xff
    9eac:	50e0      	str	r0, [r4, r3]
    9eae:	e7a7      	b.n	9e00 <__register_exitproc+0x2c>
    9eb0:	6828      	ldr	r0, [r5, #0]
    9eb2:	f7ff f89f 	bl	8ff4 <__retarget_lock_release_recursive>
    9eb6:	2001      	movs	r0, #1
    9eb8:	4240      	negs	r0, r0
    9eba:	e7b1      	b.n	9e20 <__register_exitproc+0x4c>
    9ebc:	20000448 	.word	0x20000448
    9ec0:	0000b614 	.word	0x0000b614
    9ec4:	00000000 	.word	0x00000000

00009ec8 <_calloc_r>:
    9ec8:	b510      	push	{r4, lr}
    9eca:	4351      	muls	r1, r2
    9ecc:	f7ff f894 	bl	8ff8 <_malloc_r>
    9ed0:	1e04      	subs	r4, r0, #0
    9ed2:	d01c      	beq.n	9f0e <_calloc_r+0x46>
    9ed4:	0003      	movs	r3, r0
    9ed6:	3b08      	subs	r3, #8
    9ed8:	685a      	ldr	r2, [r3, #4]
    9eda:	2303      	movs	r3, #3
    9edc:	439a      	bics	r2, r3
    9ede:	3a04      	subs	r2, #4
    9ee0:	2a24      	cmp	r2, #36	; 0x24
    9ee2:	d816      	bhi.n	9f12 <_calloc_r+0x4a>
    9ee4:	0003      	movs	r3, r0
    9ee6:	2a13      	cmp	r2, #19
    9ee8:	d90d      	bls.n	9f06 <_calloc_r+0x3e>
    9eea:	2100      	movs	r1, #0
    9eec:	3308      	adds	r3, #8
    9eee:	6001      	str	r1, [r0, #0]
    9ef0:	6041      	str	r1, [r0, #4]
    9ef2:	2a1b      	cmp	r2, #27
    9ef4:	d907      	bls.n	9f06 <_calloc_r+0x3e>
    9ef6:	6081      	str	r1, [r0, #8]
    9ef8:	60c1      	str	r1, [r0, #12]
    9efa:	2a24      	cmp	r2, #36	; 0x24
    9efc:	d10d      	bne.n	9f1a <_calloc_r+0x52>
    9efe:	0003      	movs	r3, r0
    9f00:	6101      	str	r1, [r0, #16]
    9f02:	3318      	adds	r3, #24
    9f04:	6141      	str	r1, [r0, #20]
    9f06:	2200      	movs	r2, #0
    9f08:	601a      	str	r2, [r3, #0]
    9f0a:	605a      	str	r2, [r3, #4]
    9f0c:	609a      	str	r2, [r3, #8]
    9f0e:	0020      	movs	r0, r4
    9f10:	bd10      	pop	{r4, pc}
    9f12:	2100      	movs	r1, #0
    9f14:	f7fc faf2 	bl	64fc <memset>
    9f18:	e7f9      	b.n	9f0e <_calloc_r+0x46>
    9f1a:	0003      	movs	r3, r0
    9f1c:	3310      	adds	r3, #16
    9f1e:	e7f2      	b.n	9f06 <_calloc_r+0x3e>

00009f20 <__ascii_mbtowc>:
    9f20:	b082      	sub	sp, #8
    9f22:	2900      	cmp	r1, #0
    9f24:	d00a      	beq.n	9f3c <__ascii_mbtowc+0x1c>
    9f26:	2a00      	cmp	r2, #0
    9f28:	d00b      	beq.n	9f42 <__ascii_mbtowc+0x22>
    9f2a:	2b00      	cmp	r3, #0
    9f2c:	d00b      	beq.n	9f46 <__ascii_mbtowc+0x26>
    9f2e:	7813      	ldrb	r3, [r2, #0]
    9f30:	600b      	str	r3, [r1, #0]
    9f32:	7810      	ldrb	r0, [r2, #0]
    9f34:	1e43      	subs	r3, r0, #1
    9f36:	4198      	sbcs	r0, r3
    9f38:	b002      	add	sp, #8
    9f3a:	4770      	bx	lr
    9f3c:	a901      	add	r1, sp, #4
    9f3e:	2a00      	cmp	r2, #0
    9f40:	d1f3      	bne.n	9f2a <__ascii_mbtowc+0xa>
    9f42:	2000      	movs	r0, #0
    9f44:	e7f8      	b.n	9f38 <__ascii_mbtowc+0x18>
    9f46:	2002      	movs	r0, #2
    9f48:	4240      	negs	r0, r0
    9f4a:	e7f5      	b.n	9f38 <__ascii_mbtowc+0x18>

00009f4c <memmove>:
    9f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f4e:	4288      	cmp	r0, r1
    9f50:	d90a      	bls.n	9f68 <memmove+0x1c>
    9f52:	188b      	adds	r3, r1, r2
    9f54:	4298      	cmp	r0, r3
    9f56:	d207      	bcs.n	9f68 <memmove+0x1c>
    9f58:	1e53      	subs	r3, r2, #1
    9f5a:	2a00      	cmp	r2, #0
    9f5c:	d003      	beq.n	9f66 <memmove+0x1a>
    9f5e:	5cca      	ldrb	r2, [r1, r3]
    9f60:	54c2      	strb	r2, [r0, r3]
    9f62:	3b01      	subs	r3, #1
    9f64:	d2fb      	bcs.n	9f5e <memmove+0x12>
    9f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9f68:	0005      	movs	r5, r0
    9f6a:	2a0f      	cmp	r2, #15
    9f6c:	d808      	bhi.n	9f80 <memmove+0x34>
    9f6e:	2a00      	cmp	r2, #0
    9f70:	d0f9      	beq.n	9f66 <memmove+0x1a>
    9f72:	2300      	movs	r3, #0
    9f74:	5ccc      	ldrb	r4, [r1, r3]
    9f76:	54ec      	strb	r4, [r5, r3]
    9f78:	3301      	adds	r3, #1
    9f7a:	4293      	cmp	r3, r2
    9f7c:	d1fa      	bne.n	9f74 <memmove+0x28>
    9f7e:	e7f2      	b.n	9f66 <memmove+0x1a>
    9f80:	000b      	movs	r3, r1
    9f82:	4303      	orrs	r3, r0
    9f84:	079b      	lsls	r3, r3, #30
    9f86:	d12d      	bne.n	9fe4 <memmove+0x98>
    9f88:	0015      	movs	r5, r2
    9f8a:	000c      	movs	r4, r1
    9f8c:	0003      	movs	r3, r0
    9f8e:	3d10      	subs	r5, #16
    9f90:	092f      	lsrs	r7, r5, #4
    9f92:	3701      	adds	r7, #1
    9f94:	013f      	lsls	r7, r7, #4
    9f96:	19c7      	adds	r7, r0, r7
    9f98:	6826      	ldr	r6, [r4, #0]
    9f9a:	601e      	str	r6, [r3, #0]
    9f9c:	6866      	ldr	r6, [r4, #4]
    9f9e:	605e      	str	r6, [r3, #4]
    9fa0:	68a6      	ldr	r6, [r4, #8]
    9fa2:	609e      	str	r6, [r3, #8]
    9fa4:	68e6      	ldr	r6, [r4, #12]
    9fa6:	3410      	adds	r4, #16
    9fa8:	60de      	str	r6, [r3, #12]
    9faa:	3310      	adds	r3, #16
    9fac:	429f      	cmp	r7, r3
    9fae:	d1f3      	bne.n	9f98 <memmove+0x4c>
    9fb0:	240f      	movs	r4, #15
    9fb2:	43a5      	bics	r5, r4
    9fb4:	3510      	adds	r5, #16
    9fb6:	1949      	adds	r1, r1, r5
    9fb8:	4014      	ands	r4, r2
    9fba:	1945      	adds	r5, r0, r5
    9fbc:	2c03      	cmp	r4, #3
    9fbe:	d913      	bls.n	9fe8 <memmove+0x9c>
    9fc0:	2300      	movs	r3, #0
    9fc2:	1f27      	subs	r7, r4, #4
    9fc4:	08be      	lsrs	r6, r7, #2
    9fc6:	3601      	adds	r6, #1
    9fc8:	00b6      	lsls	r6, r6, #2
    9fca:	58cc      	ldr	r4, [r1, r3]
    9fcc:	50ec      	str	r4, [r5, r3]
    9fce:	3304      	adds	r3, #4
    9fd0:	42b3      	cmp	r3, r6
    9fd2:	d1fa      	bne.n	9fca <memmove+0x7e>
    9fd4:	2603      	movs	r6, #3
    9fd6:	43b7      	bics	r7, r6
    9fd8:	1d3c      	adds	r4, r7, #4
    9fda:	1909      	adds	r1, r1, r4
    9fdc:	192d      	adds	r5, r5, r4
    9fde:	4032      	ands	r2, r6
    9fe0:	d1c7      	bne.n	9f72 <memmove+0x26>
    9fe2:	e7c0      	b.n	9f66 <memmove+0x1a>
    9fe4:	0005      	movs	r5, r0
    9fe6:	e7c4      	b.n	9f72 <memmove+0x26>
    9fe8:	0022      	movs	r2, r4
    9fea:	e7c0      	b.n	9f6e <memmove+0x22>

00009fec <_realloc_r>:
    9fec:	b5f0      	push	{r4, r5, r6, r7, lr}
    9fee:	464e      	mov	r6, r9
    9ff0:	4645      	mov	r5, r8
    9ff2:	46de      	mov	lr, fp
    9ff4:	4657      	mov	r7, sl
    9ff6:	b5e0      	push	{r5, r6, r7, lr}
    9ff8:	b085      	sub	sp, #20
    9ffa:	9001      	str	r0, [sp, #4]
    9ffc:	000e      	movs	r6, r1
    9ffe:	0015      	movs	r5, r2
    a000:	2900      	cmp	r1, #0
    a002:	d100      	bne.n	a006 <_realloc_r+0x1a>
    a004:	e09e      	b.n	a144 <_realloc_r+0x158>
    a006:	0037      	movs	r7, r6
    a008:	9801      	ldr	r0, [sp, #4]
    a00a:	3f08      	subs	r7, #8
    a00c:	f7ff fae8 	bl	95e0 <__malloc_lock>
    a010:	687a      	ldr	r2, [r7, #4]
    a012:	2303      	movs	r3, #3
    a014:	0014      	movs	r4, r2
    a016:	439c      	bics	r4, r3
    a018:	002b      	movs	r3, r5
    a01a:	330b      	adds	r3, #11
    a01c:	46b9      	mov	r9, r7
    a01e:	2b16      	cmp	r3, #22
    a020:	d847      	bhi.n	a0b2 <_realloc_r+0xc6>
    a022:	2110      	movs	r1, #16
    a024:	2310      	movs	r3, #16
    a026:	4688      	mov	r8, r1
    a028:	4545      	cmp	r5, r8
    a02a:	d846      	bhi.n	a0ba <_realloc_r+0xce>
    a02c:	429c      	cmp	r4, r3
    a02e:	da49      	bge.n	a0c4 <_realloc_r+0xd8>
    a030:	49cc      	ldr	r1, [pc, #816]	; (a364 <_realloc_r+0x378>)
    a032:	1938      	adds	r0, r7, r4
    a034:	468b      	mov	fp, r1
    a036:	6889      	ldr	r1, [r1, #8]
    a038:	9002      	str	r0, [sp, #8]
    a03a:	4288      	cmp	r0, r1
    a03c:	d100      	bne.n	a040 <_realloc_r+0x54>
    a03e:	e0c2      	b.n	a1c6 <_realloc_r+0x1da>
    a040:	2101      	movs	r1, #1
    a042:	468a      	mov	sl, r1
    a044:	6840      	ldr	r0, [r0, #4]
    a046:	0001      	movs	r1, r0
    a048:	9003      	str	r0, [sp, #12]
    a04a:	4650      	mov	r0, sl
    a04c:	4381      	bics	r1, r0
    a04e:	468c      	mov	ip, r1
    a050:	9902      	ldr	r1, [sp, #8]
    a052:	468b      	mov	fp, r1
    a054:	44dc      	add	ip, fp
    a056:	4661      	mov	r1, ip
    a058:	6849      	ldr	r1, [r1, #4]
    a05a:	4201      	tst	r1, r0
    a05c:	d04d      	beq.n	a0fa <_realloc_r+0x10e>
    a05e:	4210      	tst	r0, r2
    a060:	d100      	bne.n	a064 <_realloc_r+0x78>
    a062:	e0a2      	b.n	a1aa <_realloc_r+0x1be>
    a064:	0029      	movs	r1, r5
    a066:	9801      	ldr	r0, [sp, #4]
    a068:	f7fe ffc6 	bl	8ff8 <_malloc_r>
    a06c:	1e05      	subs	r5, r0, #0
    a06e:	d039      	beq.n	a0e4 <_realloc_r+0xf8>
    a070:	2301      	movs	r3, #1
    a072:	0002      	movs	r2, r0
    a074:	6879      	ldr	r1, [r7, #4]
    a076:	3a08      	subs	r2, #8
    a078:	4399      	bics	r1, r3
    a07a:	187f      	adds	r7, r7, r1
    a07c:	42ba      	cmp	r2, r7
    a07e:	d100      	bne.n	a082 <_realloc_r+0x96>
    a080:	e12e      	b.n	a2e0 <_realloc_r+0x2f4>
    a082:	1f22      	subs	r2, r4, #4
    a084:	2a24      	cmp	r2, #36	; 0x24
    a086:	d900      	bls.n	a08a <_realloc_r+0x9e>
    a088:	e114      	b.n	a2b4 <_realloc_r+0x2c8>
    a08a:	2a13      	cmp	r2, #19
    a08c:	d900      	bls.n	a090 <_realloc_r+0xa4>
    a08e:	e0e8      	b.n	a262 <_realloc_r+0x276>
    a090:	0003      	movs	r3, r0
    a092:	0032      	movs	r2, r6
    a094:	6811      	ldr	r1, [r2, #0]
    a096:	6019      	str	r1, [r3, #0]
    a098:	6851      	ldr	r1, [r2, #4]
    a09a:	6059      	str	r1, [r3, #4]
    a09c:	6892      	ldr	r2, [r2, #8]
    a09e:	609a      	str	r2, [r3, #8]
    a0a0:	9c01      	ldr	r4, [sp, #4]
    a0a2:	0031      	movs	r1, r6
    a0a4:	0020      	movs	r0, r4
    a0a6:	f7fe feb7 	bl	8e18 <_free_r>
    a0aa:	0020      	movs	r0, r4
    a0ac:	f7ff faa0 	bl	95f0 <__malloc_unlock>
    a0b0:	e01b      	b.n	a0ea <_realloc_r+0xfe>
    a0b2:	2107      	movs	r1, #7
    a0b4:	438b      	bics	r3, r1
    a0b6:	4698      	mov	r8, r3
    a0b8:	d5b6      	bpl.n	a028 <_realloc_r+0x3c>
    a0ba:	230c      	movs	r3, #12
    a0bc:	9a01      	ldr	r2, [sp, #4]
    a0be:	2500      	movs	r5, #0
    a0c0:	6013      	str	r3, [r2, #0]
    a0c2:	e012      	b.n	a0ea <_realloc_r+0xfe>
    a0c4:	0035      	movs	r5, r6
    a0c6:	4643      	mov	r3, r8
    a0c8:	1ae3      	subs	r3, r4, r3
    a0ca:	2b0f      	cmp	r3, #15
    a0cc:	d825      	bhi.n	a11a <_realloc_r+0x12e>
    a0ce:	464b      	mov	r3, r9
    a0d0:	2201      	movs	r2, #1
    a0d2:	4649      	mov	r1, r9
    a0d4:	685b      	ldr	r3, [r3, #4]
    a0d6:	4013      	ands	r3, r2
    a0d8:	4323      	orrs	r3, r4
    a0da:	604b      	str	r3, [r1, #4]
    a0dc:	444c      	add	r4, r9
    a0de:	6863      	ldr	r3, [r4, #4]
    a0e0:	431a      	orrs	r2, r3
    a0e2:	6062      	str	r2, [r4, #4]
    a0e4:	9801      	ldr	r0, [sp, #4]
    a0e6:	f7ff fa83 	bl	95f0 <__malloc_unlock>
    a0ea:	0028      	movs	r0, r5
    a0ec:	b005      	add	sp, #20
    a0ee:	bc3c      	pop	{r2, r3, r4, r5}
    a0f0:	4690      	mov	r8, r2
    a0f2:	4699      	mov	r9, r3
    a0f4:	46a2      	mov	sl, r4
    a0f6:	46ab      	mov	fp, r5
    a0f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a0fa:	2103      	movs	r1, #3
    a0fc:	9803      	ldr	r0, [sp, #12]
    a0fe:	468c      	mov	ip, r1
    a100:	4388      	bics	r0, r1
    a102:	1821      	adds	r1, r4, r0
    a104:	468b      	mov	fp, r1
    a106:	4299      	cmp	r1, r3
    a108:	db21      	blt.n	a14e <_realloc_r+0x162>
    a10a:	9a02      	ldr	r2, [sp, #8]
    a10c:	0035      	movs	r5, r6
    a10e:	68d3      	ldr	r3, [r2, #12]
    a110:	6892      	ldr	r2, [r2, #8]
    a112:	465c      	mov	r4, fp
    a114:	60d3      	str	r3, [r2, #12]
    a116:	609a      	str	r2, [r3, #8]
    a118:	e7d5      	b.n	a0c6 <_realloc_r+0xda>
    a11a:	464a      	mov	r2, r9
    a11c:	2001      	movs	r0, #1
    a11e:	4646      	mov	r6, r8
    a120:	6852      	ldr	r2, [r2, #4]
    a122:	4649      	mov	r1, r9
    a124:	4002      	ands	r2, r0
    a126:	4332      	orrs	r2, r6
    a128:	464e      	mov	r6, r9
    a12a:	4441      	add	r1, r8
    a12c:	4303      	orrs	r3, r0
    a12e:	6072      	str	r2, [r6, #4]
    a130:	444c      	add	r4, r9
    a132:	604b      	str	r3, [r1, #4]
    a134:	6863      	ldr	r3, [r4, #4]
    a136:	3108      	adds	r1, #8
    a138:	4318      	orrs	r0, r3
    a13a:	6060      	str	r0, [r4, #4]
    a13c:	9801      	ldr	r0, [sp, #4]
    a13e:	f7fe fe6b 	bl	8e18 <_free_r>
    a142:	e7cf      	b.n	a0e4 <_realloc_r+0xf8>
    a144:	0011      	movs	r1, r2
    a146:	f7fe ff57 	bl	8ff8 <_malloc_r>
    a14a:	0005      	movs	r5, r0
    a14c:	e7cd      	b.n	a0ea <_realloc_r+0xfe>
    a14e:	4651      	mov	r1, sl
    a150:	4211      	tst	r1, r2
    a152:	d000      	beq.n	a156 <_realloc_r+0x16a>
    a154:	e786      	b.n	a064 <_realloc_r+0x78>
    a156:	4661      	mov	r1, ip
    a158:	683a      	ldr	r2, [r7, #0]
    a15a:	1aba      	subs	r2, r7, r2
    a15c:	4692      	mov	sl, r2
    a15e:	6852      	ldr	r2, [r2, #4]
    a160:	438a      	bics	r2, r1
    a162:	1880      	adds	r0, r0, r2
    a164:	4683      	mov	fp, r0
    a166:	44a3      	add	fp, r4
    a168:	459b      	cmp	fp, r3
    a16a:	db26      	blt.n	a1ba <_realloc_r+0x1ce>
    a16c:	9a02      	ldr	r2, [sp, #8]
    a16e:	68d3      	ldr	r3, [r2, #12]
    a170:	6892      	ldr	r2, [r2, #8]
    a172:	60d3      	str	r3, [r2, #12]
    a174:	609a      	str	r2, [r3, #8]
    a176:	4653      	mov	r3, sl
    a178:	4652      	mov	r2, sl
    a17a:	4655      	mov	r5, sl
    a17c:	6892      	ldr	r2, [r2, #8]
    a17e:	68db      	ldr	r3, [r3, #12]
    a180:	3508      	adds	r5, #8
    a182:	60d3      	str	r3, [r2, #12]
    a184:	609a      	str	r2, [r3, #8]
    a186:	1f22      	subs	r2, r4, #4
    a188:	2a24      	cmp	r2, #36	; 0x24
    a18a:	d900      	bls.n	a18e <_realloc_r+0x1a2>
    a18c:	e096      	b.n	a2bc <_realloc_r+0x2d0>
    a18e:	2a13      	cmp	r2, #19
    a190:	d972      	bls.n	a278 <_realloc_r+0x28c>
    a192:	4653      	mov	r3, sl
    a194:	6831      	ldr	r1, [r6, #0]
    a196:	6099      	str	r1, [r3, #8]
    a198:	6871      	ldr	r1, [r6, #4]
    a19a:	60d9      	str	r1, [r3, #12]
    a19c:	2a1b      	cmp	r2, #27
    a19e:	d900      	bls.n	a1a2 <_realloc_r+0x1b6>
    a1a0:	e0a4      	b.n	a2ec <_realloc_r+0x300>
    a1a2:	0032      	movs	r2, r6
    a1a4:	3310      	adds	r3, #16
    a1a6:	3208      	adds	r2, #8
    a1a8:	e068      	b.n	a27c <_realloc_r+0x290>
    a1aa:	683a      	ldr	r2, [r7, #0]
    a1ac:	1aba      	subs	r2, r7, r2
    a1ae:	4692      	mov	sl, r2
    a1b0:	4651      	mov	r1, sl
    a1b2:	2203      	movs	r2, #3
    a1b4:	6849      	ldr	r1, [r1, #4]
    a1b6:	4391      	bics	r1, r2
    a1b8:	000a      	movs	r2, r1
    a1ba:	4693      	mov	fp, r2
    a1bc:	44a3      	add	fp, r4
    a1be:	459b      	cmp	fp, r3
    a1c0:	da00      	bge.n	a1c4 <_realloc_r+0x1d8>
    a1c2:	e74f      	b.n	a064 <_realloc_r+0x78>
    a1c4:	e7d7      	b.n	a176 <_realloc_r+0x18a>
    a1c6:	2003      	movs	r0, #3
    a1c8:	9902      	ldr	r1, [sp, #8]
    a1ca:	4684      	mov	ip, r0
    a1cc:	6849      	ldr	r1, [r1, #4]
    a1ce:	4381      	bics	r1, r0
    a1d0:	4640      	mov	r0, r8
    a1d2:	1909      	adds	r1, r1, r4
    a1d4:	3010      	adds	r0, #16
    a1d6:	9002      	str	r0, [sp, #8]
    a1d8:	4281      	cmp	r1, r0
    a1da:	da58      	bge.n	a28e <_realloc_r+0x2a2>
    a1dc:	07d2      	lsls	r2, r2, #31
    a1de:	d500      	bpl.n	a1e2 <_realloc_r+0x1f6>
    a1e0:	e740      	b.n	a064 <_realloc_r+0x78>
    a1e2:	4660      	mov	r0, ip
    a1e4:	683a      	ldr	r2, [r7, #0]
    a1e6:	1aba      	subs	r2, r7, r2
    a1e8:	4692      	mov	sl, r2
    a1ea:	6852      	ldr	r2, [r2, #4]
    a1ec:	4382      	bics	r2, r0
    a1ee:	9802      	ldr	r0, [sp, #8]
    a1f0:	1851      	adds	r1, r2, r1
    a1f2:	9103      	str	r1, [sp, #12]
    a1f4:	4288      	cmp	r0, r1
    a1f6:	dce0      	bgt.n	a1ba <_realloc_r+0x1ce>
    a1f8:	4653      	mov	r3, sl
    a1fa:	4652      	mov	r2, sl
    a1fc:	4655      	mov	r5, sl
    a1fe:	6892      	ldr	r2, [r2, #8]
    a200:	68db      	ldr	r3, [r3, #12]
    a202:	3508      	adds	r5, #8
    a204:	60d3      	str	r3, [r2, #12]
    a206:	609a      	str	r2, [r3, #8]
    a208:	1f22      	subs	r2, r4, #4
    a20a:	2a24      	cmp	r2, #36	; 0x24
    a20c:	d900      	bls.n	a210 <_realloc_r+0x224>
    a20e:	e08e      	b.n	a32e <_realloc_r+0x342>
    a210:	2a13      	cmp	r2, #19
    a212:	d800      	bhi.n	a216 <_realloc_r+0x22a>
    a214:	e088      	b.n	a328 <_realloc_r+0x33c>
    a216:	4653      	mov	r3, sl
    a218:	6831      	ldr	r1, [r6, #0]
    a21a:	6099      	str	r1, [r3, #8]
    a21c:	6871      	ldr	r1, [r6, #4]
    a21e:	60d9      	str	r1, [r3, #12]
    a220:	2a1b      	cmp	r2, #27
    a222:	d900      	bls.n	a226 <_realloc_r+0x23a>
    a224:	e088      	b.n	a338 <_realloc_r+0x34c>
    a226:	0032      	movs	r2, r6
    a228:	3310      	adds	r3, #16
    a22a:	3208      	adds	r2, #8
    a22c:	6811      	ldr	r1, [r2, #0]
    a22e:	6019      	str	r1, [r3, #0]
    a230:	6851      	ldr	r1, [r2, #4]
    a232:	6059      	str	r1, [r3, #4]
    a234:	6892      	ldr	r2, [r2, #8]
    a236:	609a      	str	r2, [r3, #8]
    a238:	4651      	mov	r1, sl
    a23a:	465b      	mov	r3, fp
    a23c:	4642      	mov	r2, r8
    a23e:	4441      	add	r1, r8
    a240:	6099      	str	r1, [r3, #8]
    a242:	9b03      	ldr	r3, [sp, #12]
    a244:	9801      	ldr	r0, [sp, #4]
    a246:	1a9a      	subs	r2, r3, r2
    a248:	2301      	movs	r3, #1
    a24a:	431a      	orrs	r2, r3
    a24c:	604a      	str	r2, [r1, #4]
    a24e:	4652      	mov	r2, sl
    a250:	6852      	ldr	r2, [r2, #4]
    a252:	4013      	ands	r3, r2
    a254:	4642      	mov	r2, r8
    a256:	4313      	orrs	r3, r2
    a258:	4652      	mov	r2, sl
    a25a:	6053      	str	r3, [r2, #4]
    a25c:	f7ff f9c8 	bl	95f0 <__malloc_unlock>
    a260:	e743      	b.n	a0ea <_realloc_r+0xfe>
    a262:	6833      	ldr	r3, [r6, #0]
    a264:	6003      	str	r3, [r0, #0]
    a266:	6873      	ldr	r3, [r6, #4]
    a268:	6043      	str	r3, [r0, #4]
    a26a:	2a1b      	cmp	r2, #27
    a26c:	d82d      	bhi.n	a2ca <_realloc_r+0x2de>
    a26e:	0003      	movs	r3, r0
    a270:	0032      	movs	r2, r6
    a272:	3308      	adds	r3, #8
    a274:	3208      	adds	r2, #8
    a276:	e70d      	b.n	a094 <_realloc_r+0xa8>
    a278:	002b      	movs	r3, r5
    a27a:	0032      	movs	r2, r6
    a27c:	6811      	ldr	r1, [r2, #0]
    a27e:	465c      	mov	r4, fp
    a280:	6019      	str	r1, [r3, #0]
    a282:	6851      	ldr	r1, [r2, #4]
    a284:	46d1      	mov	r9, sl
    a286:	6059      	str	r1, [r3, #4]
    a288:	6892      	ldr	r2, [r2, #8]
    a28a:	609a      	str	r2, [r3, #8]
    a28c:	e71b      	b.n	a0c6 <_realloc_r+0xda>
    a28e:	4643      	mov	r3, r8
    a290:	18fa      	adds	r2, r7, r3
    a292:	465b      	mov	r3, fp
    a294:	609a      	str	r2, [r3, #8]
    a296:	4643      	mov	r3, r8
    a298:	1ac9      	subs	r1, r1, r3
    a29a:	2301      	movs	r3, #1
    a29c:	4319      	orrs	r1, r3
    a29e:	6051      	str	r1, [r2, #4]
    a2a0:	687a      	ldr	r2, [r7, #4]
    a2a2:	9801      	ldr	r0, [sp, #4]
    a2a4:	4013      	ands	r3, r2
    a2a6:	4642      	mov	r2, r8
    a2a8:	4313      	orrs	r3, r2
    a2aa:	607b      	str	r3, [r7, #4]
    a2ac:	f7ff f9a0 	bl	95f0 <__malloc_unlock>
    a2b0:	0035      	movs	r5, r6
    a2b2:	e71a      	b.n	a0ea <_realloc_r+0xfe>
    a2b4:	0031      	movs	r1, r6
    a2b6:	f7ff fe49 	bl	9f4c <memmove>
    a2ba:	e6f1      	b.n	a0a0 <_realloc_r+0xb4>
    a2bc:	0031      	movs	r1, r6
    a2be:	0028      	movs	r0, r5
    a2c0:	f7ff fe44 	bl	9f4c <memmove>
    a2c4:	465c      	mov	r4, fp
    a2c6:	46d1      	mov	r9, sl
    a2c8:	e6fd      	b.n	a0c6 <_realloc_r+0xda>
    a2ca:	68b3      	ldr	r3, [r6, #8]
    a2cc:	6083      	str	r3, [r0, #8]
    a2ce:	68f3      	ldr	r3, [r6, #12]
    a2d0:	60c3      	str	r3, [r0, #12]
    a2d2:	2a24      	cmp	r2, #36	; 0x24
    a2d4:	d015      	beq.n	a302 <_realloc_r+0x316>
    a2d6:	0003      	movs	r3, r0
    a2d8:	0032      	movs	r2, r6
    a2da:	3310      	adds	r3, #16
    a2dc:	3210      	adds	r2, #16
    a2de:	e6d9      	b.n	a094 <_realloc_r+0xa8>
    a2e0:	6853      	ldr	r3, [r2, #4]
    a2e2:	2203      	movs	r2, #3
    a2e4:	4393      	bics	r3, r2
    a2e6:	18e4      	adds	r4, r4, r3
    a2e8:	0035      	movs	r5, r6
    a2ea:	e6ec      	b.n	a0c6 <_realloc_r+0xda>
    a2ec:	4653      	mov	r3, sl
    a2ee:	68b1      	ldr	r1, [r6, #8]
    a2f0:	6119      	str	r1, [r3, #16]
    a2f2:	68f1      	ldr	r1, [r6, #12]
    a2f4:	6159      	str	r1, [r3, #20]
    a2f6:	2a24      	cmp	r2, #36	; 0x24
    a2f8:	d00c      	beq.n	a314 <_realloc_r+0x328>
    a2fa:	0032      	movs	r2, r6
    a2fc:	3318      	adds	r3, #24
    a2fe:	3210      	adds	r2, #16
    a300:	e7bc      	b.n	a27c <_realloc_r+0x290>
    a302:	6933      	ldr	r3, [r6, #16]
    a304:	0032      	movs	r2, r6
    a306:	6103      	str	r3, [r0, #16]
    a308:	0003      	movs	r3, r0
    a30a:	6971      	ldr	r1, [r6, #20]
    a30c:	3318      	adds	r3, #24
    a30e:	3218      	adds	r2, #24
    a310:	6141      	str	r1, [r0, #20]
    a312:	e6bf      	b.n	a094 <_realloc_r+0xa8>
    a314:	4653      	mov	r3, sl
    a316:	6932      	ldr	r2, [r6, #16]
    a318:	4651      	mov	r1, sl
    a31a:	619a      	str	r2, [r3, #24]
    a31c:	0032      	movs	r2, r6
    a31e:	6970      	ldr	r0, [r6, #20]
    a320:	3320      	adds	r3, #32
    a322:	3218      	adds	r2, #24
    a324:	61c8      	str	r0, [r1, #28]
    a326:	e7a9      	b.n	a27c <_realloc_r+0x290>
    a328:	002b      	movs	r3, r5
    a32a:	0032      	movs	r2, r6
    a32c:	e77e      	b.n	a22c <_realloc_r+0x240>
    a32e:	0031      	movs	r1, r6
    a330:	0028      	movs	r0, r5
    a332:	f7ff fe0b 	bl	9f4c <memmove>
    a336:	e77f      	b.n	a238 <_realloc_r+0x24c>
    a338:	4653      	mov	r3, sl
    a33a:	68b1      	ldr	r1, [r6, #8]
    a33c:	6119      	str	r1, [r3, #16]
    a33e:	68f1      	ldr	r1, [r6, #12]
    a340:	6159      	str	r1, [r3, #20]
    a342:	2a24      	cmp	r2, #36	; 0x24
    a344:	d003      	beq.n	a34e <_realloc_r+0x362>
    a346:	0032      	movs	r2, r6
    a348:	3318      	adds	r3, #24
    a34a:	3210      	adds	r2, #16
    a34c:	e76e      	b.n	a22c <_realloc_r+0x240>
    a34e:	4653      	mov	r3, sl
    a350:	6932      	ldr	r2, [r6, #16]
    a352:	4651      	mov	r1, sl
    a354:	619a      	str	r2, [r3, #24]
    a356:	0032      	movs	r2, r6
    a358:	6970      	ldr	r0, [r6, #20]
    a35a:	3320      	adds	r3, #32
    a35c:	3218      	adds	r2, #24
    a35e:	61c8      	str	r0, [r1, #28]
    a360:	e764      	b.n	a22c <_realloc_r+0x240>
    a362:	46c0      	nop			; (mov r8, r8)
    a364:	2000044c 	.word	0x2000044c

0000a368 <__ascii_wctomb>:
    a368:	2900      	cmp	r1, #0
    a36a:	d004      	beq.n	a376 <__ascii_wctomb+0xe>
    a36c:	2aff      	cmp	r2, #255	; 0xff
    a36e:	d804      	bhi.n	a37a <__ascii_wctomb+0x12>
    a370:	2001      	movs	r0, #1
    a372:	700a      	strb	r2, [r1, #0]
    a374:	4770      	bx	lr
    a376:	2000      	movs	r0, #0
    a378:	e7fc      	b.n	a374 <__ascii_wctomb+0xc>
    a37a:	238a      	movs	r3, #138	; 0x8a
    a37c:	6003      	str	r3, [r0, #0]
    a37e:	2001      	movs	r0, #1
    a380:	4240      	negs	r0, r0
    a382:	e7f7      	b.n	a374 <__ascii_wctomb+0xc>

0000a384 <__aeabi_dadd>:
    a384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a386:	4645      	mov	r5, r8
    a388:	46de      	mov	lr, fp
    a38a:	4657      	mov	r7, sl
    a38c:	464e      	mov	r6, r9
    a38e:	030c      	lsls	r4, r1, #12
    a390:	b5e0      	push	{r5, r6, r7, lr}
    a392:	004e      	lsls	r6, r1, #1
    a394:	0fc9      	lsrs	r1, r1, #31
    a396:	4688      	mov	r8, r1
    a398:	000d      	movs	r5, r1
    a39a:	0a61      	lsrs	r1, r4, #9
    a39c:	0f44      	lsrs	r4, r0, #29
    a39e:	430c      	orrs	r4, r1
    a3a0:	00c7      	lsls	r7, r0, #3
    a3a2:	0319      	lsls	r1, r3, #12
    a3a4:	0058      	lsls	r0, r3, #1
    a3a6:	0fdb      	lsrs	r3, r3, #31
    a3a8:	469b      	mov	fp, r3
    a3aa:	0a4b      	lsrs	r3, r1, #9
    a3ac:	0f51      	lsrs	r1, r2, #29
    a3ae:	430b      	orrs	r3, r1
    a3b0:	0d76      	lsrs	r6, r6, #21
    a3b2:	0d40      	lsrs	r0, r0, #21
    a3b4:	0019      	movs	r1, r3
    a3b6:	00d2      	lsls	r2, r2, #3
    a3b8:	45d8      	cmp	r8, fp
    a3ba:	d100      	bne.n	a3be <__aeabi_dadd+0x3a>
    a3bc:	e0ae      	b.n	a51c <__aeabi_dadd+0x198>
    a3be:	1a35      	subs	r5, r6, r0
    a3c0:	2d00      	cmp	r5, #0
    a3c2:	dc00      	bgt.n	a3c6 <__aeabi_dadd+0x42>
    a3c4:	e0f6      	b.n	a5b4 <__aeabi_dadd+0x230>
    a3c6:	2800      	cmp	r0, #0
    a3c8:	d10f      	bne.n	a3ea <__aeabi_dadd+0x66>
    a3ca:	4313      	orrs	r3, r2
    a3cc:	d100      	bne.n	a3d0 <__aeabi_dadd+0x4c>
    a3ce:	e0db      	b.n	a588 <__aeabi_dadd+0x204>
    a3d0:	1e6b      	subs	r3, r5, #1
    a3d2:	2b00      	cmp	r3, #0
    a3d4:	d000      	beq.n	a3d8 <__aeabi_dadd+0x54>
    a3d6:	e137      	b.n	a648 <__aeabi_dadd+0x2c4>
    a3d8:	1aba      	subs	r2, r7, r2
    a3da:	4297      	cmp	r7, r2
    a3dc:	41bf      	sbcs	r7, r7
    a3de:	1a64      	subs	r4, r4, r1
    a3e0:	427f      	negs	r7, r7
    a3e2:	1be4      	subs	r4, r4, r7
    a3e4:	2601      	movs	r6, #1
    a3e6:	0017      	movs	r7, r2
    a3e8:	e024      	b.n	a434 <__aeabi_dadd+0xb0>
    a3ea:	4bc6      	ldr	r3, [pc, #792]	; (a704 <__aeabi_dadd+0x380>)
    a3ec:	429e      	cmp	r6, r3
    a3ee:	d04d      	beq.n	a48c <__aeabi_dadd+0x108>
    a3f0:	2380      	movs	r3, #128	; 0x80
    a3f2:	041b      	lsls	r3, r3, #16
    a3f4:	4319      	orrs	r1, r3
    a3f6:	2d38      	cmp	r5, #56	; 0x38
    a3f8:	dd00      	ble.n	a3fc <__aeabi_dadd+0x78>
    a3fa:	e107      	b.n	a60c <__aeabi_dadd+0x288>
    a3fc:	2d1f      	cmp	r5, #31
    a3fe:	dd00      	ble.n	a402 <__aeabi_dadd+0x7e>
    a400:	e138      	b.n	a674 <__aeabi_dadd+0x2f0>
    a402:	2020      	movs	r0, #32
    a404:	1b43      	subs	r3, r0, r5
    a406:	469a      	mov	sl, r3
    a408:	000b      	movs	r3, r1
    a40a:	4650      	mov	r0, sl
    a40c:	4083      	lsls	r3, r0
    a40e:	4699      	mov	r9, r3
    a410:	0013      	movs	r3, r2
    a412:	4648      	mov	r0, r9
    a414:	40eb      	lsrs	r3, r5
    a416:	4318      	orrs	r0, r3
    a418:	0003      	movs	r3, r0
    a41a:	4650      	mov	r0, sl
    a41c:	4082      	lsls	r2, r0
    a41e:	1e50      	subs	r0, r2, #1
    a420:	4182      	sbcs	r2, r0
    a422:	40e9      	lsrs	r1, r5
    a424:	431a      	orrs	r2, r3
    a426:	1aba      	subs	r2, r7, r2
    a428:	1a61      	subs	r1, r4, r1
    a42a:	4297      	cmp	r7, r2
    a42c:	41a4      	sbcs	r4, r4
    a42e:	0017      	movs	r7, r2
    a430:	4264      	negs	r4, r4
    a432:	1b0c      	subs	r4, r1, r4
    a434:	0223      	lsls	r3, r4, #8
    a436:	d562      	bpl.n	a4fe <__aeabi_dadd+0x17a>
    a438:	0264      	lsls	r4, r4, #9
    a43a:	0a65      	lsrs	r5, r4, #9
    a43c:	2d00      	cmp	r5, #0
    a43e:	d100      	bne.n	a442 <__aeabi_dadd+0xbe>
    a440:	e0df      	b.n	a602 <__aeabi_dadd+0x27e>
    a442:	0028      	movs	r0, r5
    a444:	f7fb feaa 	bl	619c <__clzsi2>
    a448:	0003      	movs	r3, r0
    a44a:	3b08      	subs	r3, #8
    a44c:	2b1f      	cmp	r3, #31
    a44e:	dd00      	ble.n	a452 <__aeabi_dadd+0xce>
    a450:	e0d2      	b.n	a5f8 <__aeabi_dadd+0x274>
    a452:	2220      	movs	r2, #32
    a454:	003c      	movs	r4, r7
    a456:	1ad2      	subs	r2, r2, r3
    a458:	409d      	lsls	r5, r3
    a45a:	40d4      	lsrs	r4, r2
    a45c:	409f      	lsls	r7, r3
    a45e:	4325      	orrs	r5, r4
    a460:	429e      	cmp	r6, r3
    a462:	dd00      	ble.n	a466 <__aeabi_dadd+0xe2>
    a464:	e0c4      	b.n	a5f0 <__aeabi_dadd+0x26c>
    a466:	1b9e      	subs	r6, r3, r6
    a468:	1c73      	adds	r3, r6, #1
    a46a:	2b1f      	cmp	r3, #31
    a46c:	dd00      	ble.n	a470 <__aeabi_dadd+0xec>
    a46e:	e0f1      	b.n	a654 <__aeabi_dadd+0x2d0>
    a470:	2220      	movs	r2, #32
    a472:	0038      	movs	r0, r7
    a474:	0029      	movs	r1, r5
    a476:	1ad2      	subs	r2, r2, r3
    a478:	40d8      	lsrs	r0, r3
    a47a:	4091      	lsls	r1, r2
    a47c:	4097      	lsls	r7, r2
    a47e:	002c      	movs	r4, r5
    a480:	4301      	orrs	r1, r0
    a482:	1e78      	subs	r0, r7, #1
    a484:	4187      	sbcs	r7, r0
    a486:	40dc      	lsrs	r4, r3
    a488:	2600      	movs	r6, #0
    a48a:	430f      	orrs	r7, r1
    a48c:	077b      	lsls	r3, r7, #29
    a48e:	d009      	beq.n	a4a4 <__aeabi_dadd+0x120>
    a490:	230f      	movs	r3, #15
    a492:	403b      	ands	r3, r7
    a494:	2b04      	cmp	r3, #4
    a496:	d005      	beq.n	a4a4 <__aeabi_dadd+0x120>
    a498:	1d3b      	adds	r3, r7, #4
    a49a:	42bb      	cmp	r3, r7
    a49c:	41bf      	sbcs	r7, r7
    a49e:	427f      	negs	r7, r7
    a4a0:	19e4      	adds	r4, r4, r7
    a4a2:	001f      	movs	r7, r3
    a4a4:	0223      	lsls	r3, r4, #8
    a4a6:	d52c      	bpl.n	a502 <__aeabi_dadd+0x17e>
    a4a8:	4b96      	ldr	r3, [pc, #600]	; (a704 <__aeabi_dadd+0x380>)
    a4aa:	3601      	adds	r6, #1
    a4ac:	429e      	cmp	r6, r3
    a4ae:	d100      	bne.n	a4b2 <__aeabi_dadd+0x12e>
    a4b0:	e09a      	b.n	a5e8 <__aeabi_dadd+0x264>
    a4b2:	4645      	mov	r5, r8
    a4b4:	4b94      	ldr	r3, [pc, #592]	; (a708 <__aeabi_dadd+0x384>)
    a4b6:	08ff      	lsrs	r7, r7, #3
    a4b8:	401c      	ands	r4, r3
    a4ba:	0760      	lsls	r0, r4, #29
    a4bc:	0576      	lsls	r6, r6, #21
    a4be:	0264      	lsls	r4, r4, #9
    a4c0:	4307      	orrs	r7, r0
    a4c2:	0b24      	lsrs	r4, r4, #12
    a4c4:	0d76      	lsrs	r6, r6, #21
    a4c6:	2100      	movs	r1, #0
    a4c8:	0324      	lsls	r4, r4, #12
    a4ca:	0b23      	lsrs	r3, r4, #12
    a4cc:	0d0c      	lsrs	r4, r1, #20
    a4ce:	4a8f      	ldr	r2, [pc, #572]	; (a70c <__aeabi_dadd+0x388>)
    a4d0:	0524      	lsls	r4, r4, #20
    a4d2:	431c      	orrs	r4, r3
    a4d4:	4014      	ands	r4, r2
    a4d6:	0533      	lsls	r3, r6, #20
    a4d8:	4323      	orrs	r3, r4
    a4da:	005b      	lsls	r3, r3, #1
    a4dc:	07ed      	lsls	r5, r5, #31
    a4de:	085b      	lsrs	r3, r3, #1
    a4e0:	432b      	orrs	r3, r5
    a4e2:	0038      	movs	r0, r7
    a4e4:	0019      	movs	r1, r3
    a4e6:	bc3c      	pop	{r2, r3, r4, r5}
    a4e8:	4690      	mov	r8, r2
    a4ea:	4699      	mov	r9, r3
    a4ec:	46a2      	mov	sl, r4
    a4ee:	46ab      	mov	fp, r5
    a4f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a4f2:	4664      	mov	r4, ip
    a4f4:	4304      	orrs	r4, r0
    a4f6:	d100      	bne.n	a4fa <__aeabi_dadd+0x176>
    a4f8:	e211      	b.n	a91e <__aeabi_dadd+0x59a>
    a4fa:	0004      	movs	r4, r0
    a4fc:	4667      	mov	r7, ip
    a4fe:	077b      	lsls	r3, r7, #29
    a500:	d1c6      	bne.n	a490 <__aeabi_dadd+0x10c>
    a502:	4645      	mov	r5, r8
    a504:	0760      	lsls	r0, r4, #29
    a506:	08ff      	lsrs	r7, r7, #3
    a508:	4307      	orrs	r7, r0
    a50a:	08e4      	lsrs	r4, r4, #3
    a50c:	4b7d      	ldr	r3, [pc, #500]	; (a704 <__aeabi_dadd+0x380>)
    a50e:	429e      	cmp	r6, r3
    a510:	d030      	beq.n	a574 <__aeabi_dadd+0x1f0>
    a512:	0324      	lsls	r4, r4, #12
    a514:	0576      	lsls	r6, r6, #21
    a516:	0b24      	lsrs	r4, r4, #12
    a518:	0d76      	lsrs	r6, r6, #21
    a51a:	e7d4      	b.n	a4c6 <__aeabi_dadd+0x142>
    a51c:	1a33      	subs	r3, r6, r0
    a51e:	469a      	mov	sl, r3
    a520:	2b00      	cmp	r3, #0
    a522:	dd78      	ble.n	a616 <__aeabi_dadd+0x292>
    a524:	2800      	cmp	r0, #0
    a526:	d031      	beq.n	a58c <__aeabi_dadd+0x208>
    a528:	4876      	ldr	r0, [pc, #472]	; (a704 <__aeabi_dadd+0x380>)
    a52a:	4286      	cmp	r6, r0
    a52c:	d0ae      	beq.n	a48c <__aeabi_dadd+0x108>
    a52e:	2080      	movs	r0, #128	; 0x80
    a530:	0400      	lsls	r0, r0, #16
    a532:	4301      	orrs	r1, r0
    a534:	4653      	mov	r3, sl
    a536:	2b38      	cmp	r3, #56	; 0x38
    a538:	dc00      	bgt.n	a53c <__aeabi_dadd+0x1b8>
    a53a:	e0e9      	b.n	a710 <__aeabi_dadd+0x38c>
    a53c:	430a      	orrs	r2, r1
    a53e:	1e51      	subs	r1, r2, #1
    a540:	418a      	sbcs	r2, r1
    a542:	2100      	movs	r1, #0
    a544:	19d2      	adds	r2, r2, r7
    a546:	42ba      	cmp	r2, r7
    a548:	41bf      	sbcs	r7, r7
    a54a:	1909      	adds	r1, r1, r4
    a54c:	427c      	negs	r4, r7
    a54e:	0017      	movs	r7, r2
    a550:	190c      	adds	r4, r1, r4
    a552:	0223      	lsls	r3, r4, #8
    a554:	d5d3      	bpl.n	a4fe <__aeabi_dadd+0x17a>
    a556:	4b6b      	ldr	r3, [pc, #428]	; (a704 <__aeabi_dadd+0x380>)
    a558:	3601      	adds	r6, #1
    a55a:	429e      	cmp	r6, r3
    a55c:	d100      	bne.n	a560 <__aeabi_dadd+0x1dc>
    a55e:	e13a      	b.n	a7d6 <__aeabi_dadd+0x452>
    a560:	2001      	movs	r0, #1
    a562:	4b69      	ldr	r3, [pc, #420]	; (a708 <__aeabi_dadd+0x384>)
    a564:	401c      	ands	r4, r3
    a566:	087b      	lsrs	r3, r7, #1
    a568:	4007      	ands	r7, r0
    a56a:	431f      	orrs	r7, r3
    a56c:	07e0      	lsls	r0, r4, #31
    a56e:	4307      	orrs	r7, r0
    a570:	0864      	lsrs	r4, r4, #1
    a572:	e78b      	b.n	a48c <__aeabi_dadd+0x108>
    a574:	0023      	movs	r3, r4
    a576:	433b      	orrs	r3, r7
    a578:	d100      	bne.n	a57c <__aeabi_dadd+0x1f8>
    a57a:	e1cb      	b.n	a914 <__aeabi_dadd+0x590>
    a57c:	2280      	movs	r2, #128	; 0x80
    a57e:	0312      	lsls	r2, r2, #12
    a580:	4314      	orrs	r4, r2
    a582:	0324      	lsls	r4, r4, #12
    a584:	0b24      	lsrs	r4, r4, #12
    a586:	e79e      	b.n	a4c6 <__aeabi_dadd+0x142>
    a588:	002e      	movs	r6, r5
    a58a:	e77f      	b.n	a48c <__aeabi_dadd+0x108>
    a58c:	0008      	movs	r0, r1
    a58e:	4310      	orrs	r0, r2
    a590:	d100      	bne.n	a594 <__aeabi_dadd+0x210>
    a592:	e0b4      	b.n	a6fe <__aeabi_dadd+0x37a>
    a594:	1e58      	subs	r0, r3, #1
    a596:	2800      	cmp	r0, #0
    a598:	d000      	beq.n	a59c <__aeabi_dadd+0x218>
    a59a:	e0de      	b.n	a75a <__aeabi_dadd+0x3d6>
    a59c:	18ba      	adds	r2, r7, r2
    a59e:	42ba      	cmp	r2, r7
    a5a0:	419b      	sbcs	r3, r3
    a5a2:	1864      	adds	r4, r4, r1
    a5a4:	425b      	negs	r3, r3
    a5a6:	18e4      	adds	r4, r4, r3
    a5a8:	0017      	movs	r7, r2
    a5aa:	2601      	movs	r6, #1
    a5ac:	0223      	lsls	r3, r4, #8
    a5ae:	d5a6      	bpl.n	a4fe <__aeabi_dadd+0x17a>
    a5b0:	2602      	movs	r6, #2
    a5b2:	e7d5      	b.n	a560 <__aeabi_dadd+0x1dc>
    a5b4:	2d00      	cmp	r5, #0
    a5b6:	d16e      	bne.n	a696 <__aeabi_dadd+0x312>
    a5b8:	1c70      	adds	r0, r6, #1
    a5ba:	0540      	lsls	r0, r0, #21
    a5bc:	0d40      	lsrs	r0, r0, #21
    a5be:	2801      	cmp	r0, #1
    a5c0:	dc00      	bgt.n	a5c4 <__aeabi_dadd+0x240>
    a5c2:	e0f9      	b.n	a7b8 <__aeabi_dadd+0x434>
    a5c4:	1ab8      	subs	r0, r7, r2
    a5c6:	4684      	mov	ip, r0
    a5c8:	4287      	cmp	r7, r0
    a5ca:	4180      	sbcs	r0, r0
    a5cc:	1ae5      	subs	r5, r4, r3
    a5ce:	4240      	negs	r0, r0
    a5d0:	1a2d      	subs	r5, r5, r0
    a5d2:	0228      	lsls	r0, r5, #8
    a5d4:	d400      	bmi.n	a5d8 <__aeabi_dadd+0x254>
    a5d6:	e089      	b.n	a6ec <__aeabi_dadd+0x368>
    a5d8:	1bd7      	subs	r7, r2, r7
    a5da:	42ba      	cmp	r2, r7
    a5dc:	4192      	sbcs	r2, r2
    a5de:	1b1c      	subs	r4, r3, r4
    a5e0:	4252      	negs	r2, r2
    a5e2:	1aa5      	subs	r5, r4, r2
    a5e4:	46d8      	mov	r8, fp
    a5e6:	e729      	b.n	a43c <__aeabi_dadd+0xb8>
    a5e8:	4645      	mov	r5, r8
    a5ea:	2400      	movs	r4, #0
    a5ec:	2700      	movs	r7, #0
    a5ee:	e76a      	b.n	a4c6 <__aeabi_dadd+0x142>
    a5f0:	4c45      	ldr	r4, [pc, #276]	; (a708 <__aeabi_dadd+0x384>)
    a5f2:	1af6      	subs	r6, r6, r3
    a5f4:	402c      	ands	r4, r5
    a5f6:	e749      	b.n	a48c <__aeabi_dadd+0x108>
    a5f8:	003d      	movs	r5, r7
    a5fa:	3828      	subs	r0, #40	; 0x28
    a5fc:	4085      	lsls	r5, r0
    a5fe:	2700      	movs	r7, #0
    a600:	e72e      	b.n	a460 <__aeabi_dadd+0xdc>
    a602:	0038      	movs	r0, r7
    a604:	f7fb fdca 	bl	619c <__clzsi2>
    a608:	3020      	adds	r0, #32
    a60a:	e71d      	b.n	a448 <__aeabi_dadd+0xc4>
    a60c:	430a      	orrs	r2, r1
    a60e:	1e51      	subs	r1, r2, #1
    a610:	418a      	sbcs	r2, r1
    a612:	2100      	movs	r1, #0
    a614:	e707      	b.n	a426 <__aeabi_dadd+0xa2>
    a616:	2b00      	cmp	r3, #0
    a618:	d000      	beq.n	a61c <__aeabi_dadd+0x298>
    a61a:	e0f3      	b.n	a804 <__aeabi_dadd+0x480>
    a61c:	1c70      	adds	r0, r6, #1
    a61e:	0543      	lsls	r3, r0, #21
    a620:	0d5b      	lsrs	r3, r3, #21
    a622:	2b01      	cmp	r3, #1
    a624:	dc00      	bgt.n	a628 <__aeabi_dadd+0x2a4>
    a626:	e0ad      	b.n	a784 <__aeabi_dadd+0x400>
    a628:	4b36      	ldr	r3, [pc, #216]	; (a704 <__aeabi_dadd+0x380>)
    a62a:	4298      	cmp	r0, r3
    a62c:	d100      	bne.n	a630 <__aeabi_dadd+0x2ac>
    a62e:	e0d1      	b.n	a7d4 <__aeabi_dadd+0x450>
    a630:	18ba      	adds	r2, r7, r2
    a632:	42ba      	cmp	r2, r7
    a634:	41bf      	sbcs	r7, r7
    a636:	1864      	adds	r4, r4, r1
    a638:	427f      	negs	r7, r7
    a63a:	19e4      	adds	r4, r4, r7
    a63c:	07e7      	lsls	r7, r4, #31
    a63e:	0852      	lsrs	r2, r2, #1
    a640:	4317      	orrs	r7, r2
    a642:	0864      	lsrs	r4, r4, #1
    a644:	0006      	movs	r6, r0
    a646:	e721      	b.n	a48c <__aeabi_dadd+0x108>
    a648:	482e      	ldr	r0, [pc, #184]	; (a704 <__aeabi_dadd+0x380>)
    a64a:	4285      	cmp	r5, r0
    a64c:	d100      	bne.n	a650 <__aeabi_dadd+0x2cc>
    a64e:	e093      	b.n	a778 <__aeabi_dadd+0x3f4>
    a650:	001d      	movs	r5, r3
    a652:	e6d0      	b.n	a3f6 <__aeabi_dadd+0x72>
    a654:	0029      	movs	r1, r5
    a656:	3e1f      	subs	r6, #31
    a658:	40f1      	lsrs	r1, r6
    a65a:	2b20      	cmp	r3, #32
    a65c:	d100      	bne.n	a660 <__aeabi_dadd+0x2dc>
    a65e:	e08d      	b.n	a77c <__aeabi_dadd+0x3f8>
    a660:	2240      	movs	r2, #64	; 0x40
    a662:	1ad3      	subs	r3, r2, r3
    a664:	409d      	lsls	r5, r3
    a666:	432f      	orrs	r7, r5
    a668:	1e7d      	subs	r5, r7, #1
    a66a:	41af      	sbcs	r7, r5
    a66c:	2400      	movs	r4, #0
    a66e:	430f      	orrs	r7, r1
    a670:	2600      	movs	r6, #0
    a672:	e744      	b.n	a4fe <__aeabi_dadd+0x17a>
    a674:	002b      	movs	r3, r5
    a676:	0008      	movs	r0, r1
    a678:	3b20      	subs	r3, #32
    a67a:	40d8      	lsrs	r0, r3
    a67c:	0003      	movs	r3, r0
    a67e:	2d20      	cmp	r5, #32
    a680:	d100      	bne.n	a684 <__aeabi_dadd+0x300>
    a682:	e07d      	b.n	a780 <__aeabi_dadd+0x3fc>
    a684:	2040      	movs	r0, #64	; 0x40
    a686:	1b45      	subs	r5, r0, r5
    a688:	40a9      	lsls	r1, r5
    a68a:	430a      	orrs	r2, r1
    a68c:	1e51      	subs	r1, r2, #1
    a68e:	418a      	sbcs	r2, r1
    a690:	2100      	movs	r1, #0
    a692:	431a      	orrs	r2, r3
    a694:	e6c7      	b.n	a426 <__aeabi_dadd+0xa2>
    a696:	2e00      	cmp	r6, #0
    a698:	d050      	beq.n	a73c <__aeabi_dadd+0x3b8>
    a69a:	4e1a      	ldr	r6, [pc, #104]	; (a704 <__aeabi_dadd+0x380>)
    a69c:	42b0      	cmp	r0, r6
    a69e:	d057      	beq.n	a750 <__aeabi_dadd+0x3cc>
    a6a0:	2680      	movs	r6, #128	; 0x80
    a6a2:	426b      	negs	r3, r5
    a6a4:	4699      	mov	r9, r3
    a6a6:	0436      	lsls	r6, r6, #16
    a6a8:	4334      	orrs	r4, r6
    a6aa:	464b      	mov	r3, r9
    a6ac:	2b38      	cmp	r3, #56	; 0x38
    a6ae:	dd00      	ble.n	a6b2 <__aeabi_dadd+0x32e>
    a6b0:	e0d6      	b.n	a860 <__aeabi_dadd+0x4dc>
    a6b2:	2b1f      	cmp	r3, #31
    a6b4:	dd00      	ble.n	a6b8 <__aeabi_dadd+0x334>
    a6b6:	e135      	b.n	a924 <__aeabi_dadd+0x5a0>
    a6b8:	2620      	movs	r6, #32
    a6ba:	1af5      	subs	r5, r6, r3
    a6bc:	0026      	movs	r6, r4
    a6be:	40ae      	lsls	r6, r5
    a6c0:	46b2      	mov	sl, r6
    a6c2:	003e      	movs	r6, r7
    a6c4:	40de      	lsrs	r6, r3
    a6c6:	46ac      	mov	ip, r5
    a6c8:	0035      	movs	r5, r6
    a6ca:	4656      	mov	r6, sl
    a6cc:	432e      	orrs	r6, r5
    a6ce:	4665      	mov	r5, ip
    a6d0:	40af      	lsls	r7, r5
    a6d2:	1e7d      	subs	r5, r7, #1
    a6d4:	41af      	sbcs	r7, r5
    a6d6:	40dc      	lsrs	r4, r3
    a6d8:	4337      	orrs	r7, r6
    a6da:	1bd7      	subs	r7, r2, r7
    a6dc:	42ba      	cmp	r2, r7
    a6de:	4192      	sbcs	r2, r2
    a6e0:	1b0c      	subs	r4, r1, r4
    a6e2:	4252      	negs	r2, r2
    a6e4:	1aa4      	subs	r4, r4, r2
    a6e6:	0006      	movs	r6, r0
    a6e8:	46d8      	mov	r8, fp
    a6ea:	e6a3      	b.n	a434 <__aeabi_dadd+0xb0>
    a6ec:	4664      	mov	r4, ip
    a6ee:	4667      	mov	r7, ip
    a6f0:	432c      	orrs	r4, r5
    a6f2:	d000      	beq.n	a6f6 <__aeabi_dadd+0x372>
    a6f4:	e6a2      	b.n	a43c <__aeabi_dadd+0xb8>
    a6f6:	2500      	movs	r5, #0
    a6f8:	2600      	movs	r6, #0
    a6fa:	2700      	movs	r7, #0
    a6fc:	e706      	b.n	a50c <__aeabi_dadd+0x188>
    a6fe:	001e      	movs	r6, r3
    a700:	e6c4      	b.n	a48c <__aeabi_dadd+0x108>
    a702:	46c0      	nop			; (mov r8, r8)
    a704:	000007ff 	.word	0x000007ff
    a708:	ff7fffff 	.word	0xff7fffff
    a70c:	800fffff 	.word	0x800fffff
    a710:	2b1f      	cmp	r3, #31
    a712:	dc63      	bgt.n	a7dc <__aeabi_dadd+0x458>
    a714:	2020      	movs	r0, #32
    a716:	1ac3      	subs	r3, r0, r3
    a718:	0008      	movs	r0, r1
    a71a:	4098      	lsls	r0, r3
    a71c:	469c      	mov	ip, r3
    a71e:	4683      	mov	fp, r0
    a720:	4653      	mov	r3, sl
    a722:	0010      	movs	r0, r2
    a724:	40d8      	lsrs	r0, r3
    a726:	0003      	movs	r3, r0
    a728:	4658      	mov	r0, fp
    a72a:	4318      	orrs	r0, r3
    a72c:	4663      	mov	r3, ip
    a72e:	409a      	lsls	r2, r3
    a730:	1e53      	subs	r3, r2, #1
    a732:	419a      	sbcs	r2, r3
    a734:	4653      	mov	r3, sl
    a736:	4302      	orrs	r2, r0
    a738:	40d9      	lsrs	r1, r3
    a73a:	e703      	b.n	a544 <__aeabi_dadd+0x1c0>
    a73c:	0026      	movs	r6, r4
    a73e:	433e      	orrs	r6, r7
    a740:	d006      	beq.n	a750 <__aeabi_dadd+0x3cc>
    a742:	43eb      	mvns	r3, r5
    a744:	4699      	mov	r9, r3
    a746:	2b00      	cmp	r3, #0
    a748:	d0c7      	beq.n	a6da <__aeabi_dadd+0x356>
    a74a:	4e94      	ldr	r6, [pc, #592]	; (a99c <__aeabi_dadd+0x618>)
    a74c:	42b0      	cmp	r0, r6
    a74e:	d1ac      	bne.n	a6aa <__aeabi_dadd+0x326>
    a750:	000c      	movs	r4, r1
    a752:	0017      	movs	r7, r2
    a754:	0006      	movs	r6, r0
    a756:	46d8      	mov	r8, fp
    a758:	e698      	b.n	a48c <__aeabi_dadd+0x108>
    a75a:	4b90      	ldr	r3, [pc, #576]	; (a99c <__aeabi_dadd+0x618>)
    a75c:	459a      	cmp	sl, r3
    a75e:	d00b      	beq.n	a778 <__aeabi_dadd+0x3f4>
    a760:	4682      	mov	sl, r0
    a762:	e6e7      	b.n	a534 <__aeabi_dadd+0x1b0>
    a764:	2800      	cmp	r0, #0
    a766:	d000      	beq.n	a76a <__aeabi_dadd+0x3e6>
    a768:	e09e      	b.n	a8a8 <__aeabi_dadd+0x524>
    a76a:	0018      	movs	r0, r3
    a76c:	4310      	orrs	r0, r2
    a76e:	d100      	bne.n	a772 <__aeabi_dadd+0x3ee>
    a770:	e0e9      	b.n	a946 <__aeabi_dadd+0x5c2>
    a772:	001c      	movs	r4, r3
    a774:	0017      	movs	r7, r2
    a776:	46d8      	mov	r8, fp
    a778:	4e88      	ldr	r6, [pc, #544]	; (a99c <__aeabi_dadd+0x618>)
    a77a:	e687      	b.n	a48c <__aeabi_dadd+0x108>
    a77c:	2500      	movs	r5, #0
    a77e:	e772      	b.n	a666 <__aeabi_dadd+0x2e2>
    a780:	2100      	movs	r1, #0
    a782:	e782      	b.n	a68a <__aeabi_dadd+0x306>
    a784:	0023      	movs	r3, r4
    a786:	433b      	orrs	r3, r7
    a788:	2e00      	cmp	r6, #0
    a78a:	d000      	beq.n	a78e <__aeabi_dadd+0x40a>
    a78c:	e0ab      	b.n	a8e6 <__aeabi_dadd+0x562>
    a78e:	2b00      	cmp	r3, #0
    a790:	d100      	bne.n	a794 <__aeabi_dadd+0x410>
    a792:	e0e7      	b.n	a964 <__aeabi_dadd+0x5e0>
    a794:	000b      	movs	r3, r1
    a796:	4313      	orrs	r3, r2
    a798:	d100      	bne.n	a79c <__aeabi_dadd+0x418>
    a79a:	e677      	b.n	a48c <__aeabi_dadd+0x108>
    a79c:	18ba      	adds	r2, r7, r2
    a79e:	42ba      	cmp	r2, r7
    a7a0:	41bf      	sbcs	r7, r7
    a7a2:	1864      	adds	r4, r4, r1
    a7a4:	427f      	negs	r7, r7
    a7a6:	19e4      	adds	r4, r4, r7
    a7a8:	0223      	lsls	r3, r4, #8
    a7aa:	d400      	bmi.n	a7ae <__aeabi_dadd+0x42a>
    a7ac:	e0f2      	b.n	a994 <__aeabi_dadd+0x610>
    a7ae:	4b7c      	ldr	r3, [pc, #496]	; (a9a0 <__aeabi_dadd+0x61c>)
    a7b0:	0017      	movs	r7, r2
    a7b2:	401c      	ands	r4, r3
    a7b4:	0006      	movs	r6, r0
    a7b6:	e669      	b.n	a48c <__aeabi_dadd+0x108>
    a7b8:	0020      	movs	r0, r4
    a7ba:	4338      	orrs	r0, r7
    a7bc:	2e00      	cmp	r6, #0
    a7be:	d1d1      	bne.n	a764 <__aeabi_dadd+0x3e0>
    a7c0:	2800      	cmp	r0, #0
    a7c2:	d15b      	bne.n	a87c <__aeabi_dadd+0x4f8>
    a7c4:	001c      	movs	r4, r3
    a7c6:	4314      	orrs	r4, r2
    a7c8:	d100      	bne.n	a7cc <__aeabi_dadd+0x448>
    a7ca:	e0a8      	b.n	a91e <__aeabi_dadd+0x59a>
    a7cc:	001c      	movs	r4, r3
    a7ce:	0017      	movs	r7, r2
    a7d0:	46d8      	mov	r8, fp
    a7d2:	e65b      	b.n	a48c <__aeabi_dadd+0x108>
    a7d4:	0006      	movs	r6, r0
    a7d6:	2400      	movs	r4, #0
    a7d8:	2700      	movs	r7, #0
    a7da:	e697      	b.n	a50c <__aeabi_dadd+0x188>
    a7dc:	4650      	mov	r0, sl
    a7de:	000b      	movs	r3, r1
    a7e0:	3820      	subs	r0, #32
    a7e2:	40c3      	lsrs	r3, r0
    a7e4:	4699      	mov	r9, r3
    a7e6:	4653      	mov	r3, sl
    a7e8:	2b20      	cmp	r3, #32
    a7ea:	d100      	bne.n	a7ee <__aeabi_dadd+0x46a>
    a7ec:	e095      	b.n	a91a <__aeabi_dadd+0x596>
    a7ee:	2340      	movs	r3, #64	; 0x40
    a7f0:	4650      	mov	r0, sl
    a7f2:	1a1b      	subs	r3, r3, r0
    a7f4:	4099      	lsls	r1, r3
    a7f6:	430a      	orrs	r2, r1
    a7f8:	1e51      	subs	r1, r2, #1
    a7fa:	418a      	sbcs	r2, r1
    a7fc:	464b      	mov	r3, r9
    a7fe:	2100      	movs	r1, #0
    a800:	431a      	orrs	r2, r3
    a802:	e69f      	b.n	a544 <__aeabi_dadd+0x1c0>
    a804:	2e00      	cmp	r6, #0
    a806:	d130      	bne.n	a86a <__aeabi_dadd+0x4e6>
    a808:	0026      	movs	r6, r4
    a80a:	433e      	orrs	r6, r7
    a80c:	d067      	beq.n	a8de <__aeabi_dadd+0x55a>
    a80e:	43db      	mvns	r3, r3
    a810:	469a      	mov	sl, r3
    a812:	2b00      	cmp	r3, #0
    a814:	d01c      	beq.n	a850 <__aeabi_dadd+0x4cc>
    a816:	4e61      	ldr	r6, [pc, #388]	; (a99c <__aeabi_dadd+0x618>)
    a818:	42b0      	cmp	r0, r6
    a81a:	d060      	beq.n	a8de <__aeabi_dadd+0x55a>
    a81c:	4653      	mov	r3, sl
    a81e:	2b38      	cmp	r3, #56	; 0x38
    a820:	dd00      	ble.n	a824 <__aeabi_dadd+0x4a0>
    a822:	e096      	b.n	a952 <__aeabi_dadd+0x5ce>
    a824:	2b1f      	cmp	r3, #31
    a826:	dd00      	ble.n	a82a <__aeabi_dadd+0x4a6>
    a828:	e09f      	b.n	a96a <__aeabi_dadd+0x5e6>
    a82a:	2620      	movs	r6, #32
    a82c:	1af3      	subs	r3, r6, r3
    a82e:	0026      	movs	r6, r4
    a830:	409e      	lsls	r6, r3
    a832:	469c      	mov	ip, r3
    a834:	46b3      	mov	fp, r6
    a836:	4653      	mov	r3, sl
    a838:	003e      	movs	r6, r7
    a83a:	40de      	lsrs	r6, r3
    a83c:	0033      	movs	r3, r6
    a83e:	465e      	mov	r6, fp
    a840:	431e      	orrs	r6, r3
    a842:	4663      	mov	r3, ip
    a844:	409f      	lsls	r7, r3
    a846:	1e7b      	subs	r3, r7, #1
    a848:	419f      	sbcs	r7, r3
    a84a:	4653      	mov	r3, sl
    a84c:	40dc      	lsrs	r4, r3
    a84e:	4337      	orrs	r7, r6
    a850:	18bf      	adds	r7, r7, r2
    a852:	4297      	cmp	r7, r2
    a854:	4192      	sbcs	r2, r2
    a856:	1864      	adds	r4, r4, r1
    a858:	4252      	negs	r2, r2
    a85a:	18a4      	adds	r4, r4, r2
    a85c:	0006      	movs	r6, r0
    a85e:	e678      	b.n	a552 <__aeabi_dadd+0x1ce>
    a860:	4327      	orrs	r7, r4
    a862:	1e7c      	subs	r4, r7, #1
    a864:	41a7      	sbcs	r7, r4
    a866:	2400      	movs	r4, #0
    a868:	e737      	b.n	a6da <__aeabi_dadd+0x356>
    a86a:	4e4c      	ldr	r6, [pc, #304]	; (a99c <__aeabi_dadd+0x618>)
    a86c:	42b0      	cmp	r0, r6
    a86e:	d036      	beq.n	a8de <__aeabi_dadd+0x55a>
    a870:	2680      	movs	r6, #128	; 0x80
    a872:	425b      	negs	r3, r3
    a874:	0436      	lsls	r6, r6, #16
    a876:	469a      	mov	sl, r3
    a878:	4334      	orrs	r4, r6
    a87a:	e7cf      	b.n	a81c <__aeabi_dadd+0x498>
    a87c:	0018      	movs	r0, r3
    a87e:	4310      	orrs	r0, r2
    a880:	d100      	bne.n	a884 <__aeabi_dadd+0x500>
    a882:	e603      	b.n	a48c <__aeabi_dadd+0x108>
    a884:	1ab8      	subs	r0, r7, r2
    a886:	4684      	mov	ip, r0
    a888:	4567      	cmp	r7, ip
    a88a:	41ad      	sbcs	r5, r5
    a88c:	1ae0      	subs	r0, r4, r3
    a88e:	426d      	negs	r5, r5
    a890:	1b40      	subs	r0, r0, r5
    a892:	0205      	lsls	r5, r0, #8
    a894:	d400      	bmi.n	a898 <__aeabi_dadd+0x514>
    a896:	e62c      	b.n	a4f2 <__aeabi_dadd+0x16e>
    a898:	1bd7      	subs	r7, r2, r7
    a89a:	42ba      	cmp	r2, r7
    a89c:	4192      	sbcs	r2, r2
    a89e:	1b1c      	subs	r4, r3, r4
    a8a0:	4252      	negs	r2, r2
    a8a2:	1aa4      	subs	r4, r4, r2
    a8a4:	46d8      	mov	r8, fp
    a8a6:	e5f1      	b.n	a48c <__aeabi_dadd+0x108>
    a8a8:	0018      	movs	r0, r3
    a8aa:	4310      	orrs	r0, r2
    a8ac:	d100      	bne.n	a8b0 <__aeabi_dadd+0x52c>
    a8ae:	e763      	b.n	a778 <__aeabi_dadd+0x3f4>
    a8b0:	08f8      	lsrs	r0, r7, #3
    a8b2:	0767      	lsls	r7, r4, #29
    a8b4:	4307      	orrs	r7, r0
    a8b6:	2080      	movs	r0, #128	; 0x80
    a8b8:	08e4      	lsrs	r4, r4, #3
    a8ba:	0300      	lsls	r0, r0, #12
    a8bc:	4204      	tst	r4, r0
    a8be:	d008      	beq.n	a8d2 <__aeabi_dadd+0x54e>
    a8c0:	08dd      	lsrs	r5, r3, #3
    a8c2:	4205      	tst	r5, r0
    a8c4:	d105      	bne.n	a8d2 <__aeabi_dadd+0x54e>
    a8c6:	08d2      	lsrs	r2, r2, #3
    a8c8:	0759      	lsls	r1, r3, #29
    a8ca:	4311      	orrs	r1, r2
    a8cc:	000f      	movs	r7, r1
    a8ce:	002c      	movs	r4, r5
    a8d0:	46d8      	mov	r8, fp
    a8d2:	0f7b      	lsrs	r3, r7, #29
    a8d4:	00e4      	lsls	r4, r4, #3
    a8d6:	431c      	orrs	r4, r3
    a8d8:	00ff      	lsls	r7, r7, #3
    a8da:	4e30      	ldr	r6, [pc, #192]	; (a99c <__aeabi_dadd+0x618>)
    a8dc:	e5d6      	b.n	a48c <__aeabi_dadd+0x108>
    a8de:	000c      	movs	r4, r1
    a8e0:	0017      	movs	r7, r2
    a8e2:	0006      	movs	r6, r0
    a8e4:	e5d2      	b.n	a48c <__aeabi_dadd+0x108>
    a8e6:	2b00      	cmp	r3, #0
    a8e8:	d038      	beq.n	a95c <__aeabi_dadd+0x5d8>
    a8ea:	000b      	movs	r3, r1
    a8ec:	4313      	orrs	r3, r2
    a8ee:	d100      	bne.n	a8f2 <__aeabi_dadd+0x56e>
    a8f0:	e742      	b.n	a778 <__aeabi_dadd+0x3f4>
    a8f2:	08f8      	lsrs	r0, r7, #3
    a8f4:	0767      	lsls	r7, r4, #29
    a8f6:	4307      	orrs	r7, r0
    a8f8:	2080      	movs	r0, #128	; 0x80
    a8fa:	08e4      	lsrs	r4, r4, #3
    a8fc:	0300      	lsls	r0, r0, #12
    a8fe:	4204      	tst	r4, r0
    a900:	d0e7      	beq.n	a8d2 <__aeabi_dadd+0x54e>
    a902:	08cb      	lsrs	r3, r1, #3
    a904:	4203      	tst	r3, r0
    a906:	d1e4      	bne.n	a8d2 <__aeabi_dadd+0x54e>
    a908:	08d2      	lsrs	r2, r2, #3
    a90a:	0749      	lsls	r1, r1, #29
    a90c:	4311      	orrs	r1, r2
    a90e:	000f      	movs	r7, r1
    a910:	001c      	movs	r4, r3
    a912:	e7de      	b.n	a8d2 <__aeabi_dadd+0x54e>
    a914:	2700      	movs	r7, #0
    a916:	2400      	movs	r4, #0
    a918:	e5d5      	b.n	a4c6 <__aeabi_dadd+0x142>
    a91a:	2100      	movs	r1, #0
    a91c:	e76b      	b.n	a7f6 <__aeabi_dadd+0x472>
    a91e:	2500      	movs	r5, #0
    a920:	2700      	movs	r7, #0
    a922:	e5f3      	b.n	a50c <__aeabi_dadd+0x188>
    a924:	464e      	mov	r6, r9
    a926:	0025      	movs	r5, r4
    a928:	3e20      	subs	r6, #32
    a92a:	40f5      	lsrs	r5, r6
    a92c:	464b      	mov	r3, r9
    a92e:	002e      	movs	r6, r5
    a930:	2b20      	cmp	r3, #32
    a932:	d02d      	beq.n	a990 <__aeabi_dadd+0x60c>
    a934:	2540      	movs	r5, #64	; 0x40
    a936:	1aed      	subs	r5, r5, r3
    a938:	40ac      	lsls	r4, r5
    a93a:	4327      	orrs	r7, r4
    a93c:	1e7c      	subs	r4, r7, #1
    a93e:	41a7      	sbcs	r7, r4
    a940:	2400      	movs	r4, #0
    a942:	4337      	orrs	r7, r6
    a944:	e6c9      	b.n	a6da <__aeabi_dadd+0x356>
    a946:	2480      	movs	r4, #128	; 0x80
    a948:	2500      	movs	r5, #0
    a94a:	0324      	lsls	r4, r4, #12
    a94c:	4e13      	ldr	r6, [pc, #76]	; (a99c <__aeabi_dadd+0x618>)
    a94e:	2700      	movs	r7, #0
    a950:	e5dc      	b.n	a50c <__aeabi_dadd+0x188>
    a952:	4327      	orrs	r7, r4
    a954:	1e7c      	subs	r4, r7, #1
    a956:	41a7      	sbcs	r7, r4
    a958:	2400      	movs	r4, #0
    a95a:	e779      	b.n	a850 <__aeabi_dadd+0x4cc>
    a95c:	000c      	movs	r4, r1
    a95e:	0017      	movs	r7, r2
    a960:	4e0e      	ldr	r6, [pc, #56]	; (a99c <__aeabi_dadd+0x618>)
    a962:	e593      	b.n	a48c <__aeabi_dadd+0x108>
    a964:	000c      	movs	r4, r1
    a966:	0017      	movs	r7, r2
    a968:	e590      	b.n	a48c <__aeabi_dadd+0x108>
    a96a:	4656      	mov	r6, sl
    a96c:	0023      	movs	r3, r4
    a96e:	3e20      	subs	r6, #32
    a970:	40f3      	lsrs	r3, r6
    a972:	4699      	mov	r9, r3
    a974:	4653      	mov	r3, sl
    a976:	2b20      	cmp	r3, #32
    a978:	d00e      	beq.n	a998 <__aeabi_dadd+0x614>
    a97a:	2340      	movs	r3, #64	; 0x40
    a97c:	4656      	mov	r6, sl
    a97e:	1b9b      	subs	r3, r3, r6
    a980:	409c      	lsls	r4, r3
    a982:	4327      	orrs	r7, r4
    a984:	1e7c      	subs	r4, r7, #1
    a986:	41a7      	sbcs	r7, r4
    a988:	464b      	mov	r3, r9
    a98a:	2400      	movs	r4, #0
    a98c:	431f      	orrs	r7, r3
    a98e:	e75f      	b.n	a850 <__aeabi_dadd+0x4cc>
    a990:	2400      	movs	r4, #0
    a992:	e7d2      	b.n	a93a <__aeabi_dadd+0x5b6>
    a994:	0017      	movs	r7, r2
    a996:	e5b2      	b.n	a4fe <__aeabi_dadd+0x17a>
    a998:	2400      	movs	r4, #0
    a99a:	e7f2      	b.n	a982 <__aeabi_dadd+0x5fe>
    a99c:	000007ff 	.word	0x000007ff
    a9a0:	ff7fffff 	.word	0xff7fffff

0000a9a4 <__aeabi_dcmpun>:
    a9a4:	b570      	push	{r4, r5, r6, lr}
    a9a6:	4e0e      	ldr	r6, [pc, #56]	; (a9e0 <__aeabi_dcmpun+0x3c>)
    a9a8:	030d      	lsls	r5, r1, #12
    a9aa:	031c      	lsls	r4, r3, #12
    a9ac:	0049      	lsls	r1, r1, #1
    a9ae:	005b      	lsls	r3, r3, #1
    a9b0:	0b2d      	lsrs	r5, r5, #12
    a9b2:	0d49      	lsrs	r1, r1, #21
    a9b4:	0b24      	lsrs	r4, r4, #12
    a9b6:	0d5b      	lsrs	r3, r3, #21
    a9b8:	42b1      	cmp	r1, r6
    a9ba:	d004      	beq.n	a9c6 <__aeabi_dcmpun+0x22>
    a9bc:	4908      	ldr	r1, [pc, #32]	; (a9e0 <__aeabi_dcmpun+0x3c>)
    a9be:	2000      	movs	r0, #0
    a9c0:	428b      	cmp	r3, r1
    a9c2:	d008      	beq.n	a9d6 <__aeabi_dcmpun+0x32>
    a9c4:	bd70      	pop	{r4, r5, r6, pc}
    a9c6:	4305      	orrs	r5, r0
    a9c8:	2001      	movs	r0, #1
    a9ca:	2d00      	cmp	r5, #0
    a9cc:	d1fa      	bne.n	a9c4 <__aeabi_dcmpun+0x20>
    a9ce:	4904      	ldr	r1, [pc, #16]	; (a9e0 <__aeabi_dcmpun+0x3c>)
    a9d0:	2000      	movs	r0, #0
    a9d2:	428b      	cmp	r3, r1
    a9d4:	d1f6      	bne.n	a9c4 <__aeabi_dcmpun+0x20>
    a9d6:	4314      	orrs	r4, r2
    a9d8:	0020      	movs	r0, r4
    a9da:	1e44      	subs	r4, r0, #1
    a9dc:	41a0      	sbcs	r0, r4
    a9de:	e7f1      	b.n	a9c4 <__aeabi_dcmpun+0x20>
    a9e0:	000007ff 	.word	0x000007ff

0000a9e4 <u8g2_font_Terminal_tr>:
    a9e4:	0303005f 04010404 000c0c05 09fe09fe     _...............
    a9f4:	036d0100 20770402 02b10005 b1940c21     ..m...w ....!...
    aa04:	48387246 000922c4 dd350722 2322c242     Fr8H."..".5.B."#
    aa14:	43919b17 849132a4 48c9a12e 248a9222     ...C.2.....H"..$
    aa24:	241c9076 0f240107 464aefb6 254eb111     v..$..$...JF..N%
    aa34:	26849222 b8132502 a11c272f b152c485     "..&.%../'....R.
    aa44:	85952c54 0008e12a b16c0d26 74d21887     T,..*...&.l....t
    aa54:	11b48b38 32062707 2800c27d 4ab19409     8....'.2}..(...J
    aa64:	029ba4a2 b1940a29 8ba4a642 072a0012     ....)...B.....*.
    aa74:	92229d33 560a2b03 32284af7 2c004509     3."..+.V.J(2.E.,
    aa84:	66af3407 062d0252 00c2fb16 9123062e     .4.fR.-.......#.
    aa94:	0c2f00c2 494ed185 64899226 0f300032     ../...NI&..d2.0.
    aaa4:	22a71197 112c5523 a926894b 96093100     ..."#U,.K.&..1..
    aab4:	d4442ef1 0c320327 2286f196 3a650922     ..D.'.2...."".e:
    aac4:	0e33021d 2286f196 854d2a12 00050924     ..3....".*M.$...
    aad4:	11970e34 49233853 a9472494 0d350090     4...S8#I.$G...5.
    aae4:	10e2f196 490aac54 36000a12 4af1960d     ....T..I...6...J
    aaf4:	88ac28a6 00142498 11970c37 49a320e3     .(...$..7.... .I
    ab04:	00d55a85 f1960e38 92622286 124c4450     .Z..8...."b.PDL.
    ab14:	0e39000a 2286f196 84d49262 0008d932     ..9...."b...2...
    ab24:	9163063a 093b6cc2 1d66af74 3c012934     :.c..l;.t.f.4).<
    ab34:	2eb17409 0b535124 f546073d 3e350ec2     .t..$QS.=.F...5>
    ab44:	22b17409 062945a6 f1960e3f ca122286     .t.".E).?...."..
    ab54:	a130e514 0e400008 1887b16c 260ec916     ..0...@.l......&
    ab64:	03444dbd f1960c41 3111464a 024c461d     .MD.A...JF.1.FL.
    ab74:	11971142 9222a4c3 15252488 88744491     B....."..$%..Dt.
    ab84:	970e4300 a2248b11 4449b551 44000a22     .C....$.Q.ID"..D
    ab94:	c3119713 889222a4 48892224 0e889222     ....."..$".H"...
    aba4:	12450011 22e31197 9222c892 93124d18     ..E....".."..M..
    abb4:	01074445 11971146 c89222e3 4d189222     ED..F....".."..M
    abc4:	690a9312 970e4700 a2248b11 126a9551     ...i.G....$.Q.j.
    abd4:	4800a891 42f1960a e230e9c4 94094924     ...H...B..0.$I..
    abe4:	d22282b1 0f4a0217 288f1197 889222d5     .."...J....(."..
    abf4:	09112224 97124b00 11246311 22249449     $"...K...c$.I.$"
    ac04:	1124449a 4c024a89 8311970b 445bd528     .D$..J.L....(.[D
    ac14:	0d4d1074 56431197 112a1c39 4e01371a     t.M...CV9.*..7.N
    ac24:	4311970d 28592b46 009b1aa6 11970c4f     ...CF+Y(....O...
    ac34:	e351266b 0236a24d 11970f50 9222a4c3     k&Q.M.6.P.....".
    ac44:	a9252488 51000d22 6b0db70d 69e35126     .$%."..Q...k&Q.i
    ac54:	090aa352 11971052 9222a4c3 89252488     R...R....."..$%.
    ac64:	12544548 f1960e53 9d622286 0924444a     HET.S...."b.JD$.
    ac74:	0b540005 22e2f196 46f50909 960a5501     ..T...."...F.U..
    ac84:	9fc442f1 56001424 42f1960b 9a124fc4     .B..$..V...B.O..
    ac94:	0f570008 c6431197 d112844b 24491124     ..W...C.K...$.I$
    aca4:	970d5800 26c64311 d4499b51 0c5904d8     .X...C.&Q.I...Y.
    acb4:	c442f196 aa134249 0e5a0051 20e31197     ..B.IB..Q.Z.... 
    acc4:	aa854922 0041d9b2 b194085b 044fa4c2     "I....A.[.....O.
    acd4:	d1850c5c 09942642 00994265 b194085d     \...B&..eB..]...
    ace4:	064fa482 1b47095e a8933a2f 16065f09     ..O.^.G./:..._..
    acf4:	6000c2ed c27d3206 670d6100 aa2c8711     ...`.2}..a.g..,.
    ad04:	d1222488 0f620044 aa631197 4911525a     .$".D.b...c.ZR.I
    ad14:	65111244 660b6302 222286f1 0028492a     D..e.c.f..""*I(.
    ad24:	11971064 1154aa6f 91124449 089a2444     d...o.T.ID..D$..
    ad34:	f1660c65 0c3a2286 000a1245 f1960d66     e.f..":.E...f...
    ad44:	9451246a 246a8495 87106700 9242670d     j$Q...j$.g...gB.
    ad54:	51222488 91122255 970f6800 45aa6311     .$"QU"...h...c.E
    ad64:	88925134 0092a224 b1940969 e91d2446     4Q..$...i...F$..
    ad74:	b60d6a42 341d52ed 492248d4 0f6b0028     Bj...R.4.H"I(.k.
    ad84:	aa631197 49a25124 92a22a44 94086c00     ..c.$Q.ID*...l..
    ad94:	5fa462b1 670e6d08 8922c311 08942250     .b._.m.g..".P"..
    ada4:	6e134225 a2f16609 0049e222 f1660a6f     %B.n.f..".I.o.f.
    adb4:	24e22286 107000a1 32430d87 44491152     .".$..p...C2R.ID
    adc4:	24a49112 0f7101a4 42670d87 22248892     ...$..q...gB..$"
    add4:	15544889 670c7212 92226311 690aa8ac     .HT..r.g.c"....i
    ade4:	660d7300 922286f1 09222588 0c740005     .s.f.."..%"...t.
    adf4:	282af186 88b508b3 0f750026 24431167     ..*(....&.u.g.C$
    ae04:	12444911 9a244491 660a7608 49c442f1     .ID..D$..v.f.B.I
    ae14:	77011342 4311670d 44a112c6 00244934     B..w.g.C...D4I$.
    ae24:	11670c78 1b512643 026a24ce 0d870f79     x.g.C&Q..$j.y...
    ae34:	49112447 a8911244 7a0344a8 e2f16609     G$.ID....D.z.f..
    ae44:	1d9324a6 d1950b7b 1226a44e 7c0a84ca     .$..{...N.&....|
    ae54:	e2719207 0c7d0081 a842d195 44c91426     ..q...}...B.&..D
    ae64:	0a7e006a 44673738 00269091 04000000     j.~.87gD..&.....
    ae74:	0000ffff                                ....

0000ae78 <u8g2_font_courR08_tr>:
    ae78:	0202005f 04030403 000a0604 07fe06fe     _...............
    ae88:	023001fe 20a90374 03a60005 a3390721     ..0.t.. ....!.9.
    ae98:	22005433 93b29b07 0e2300ac a6579ec5     3T."......#...W.
    aea8:	d2995434 004a6550 9ec40c24 1a46471b     4T..PeJ.$....GF.
    aeb8:	0013a4c9 a23e0d25 599c53b3 565311a7     ....%.>..S.Y..SV
    aec8:	360b2600 d433aba2 02b8e931 b3190527     .&.6..3.1...'...
    aed8:	4b0a2833 8a629b9b 2901cc75 939acb0a     3(.K..b.u..)....
    aee8:	4c558e63 25092a11 cc951bae 0a2b0129     c.UL.*.%....).+.
    aef8:	519ba62d 08a3321c 9a9a072c 2d001497     -..Q.2..,......-
    af08:	33ae8c06 11052e02 112f23a3 330f9e4e     ...3.....#/.N..3
    af18:	8cc328ca c328cc32 3004328c a7a2bc09     .(..2.(..2.0....
    af28:	005267a2 a2bc0831 08d7769b a2bc0932     .gR.1....v..2...
    af38:	ed8e62a7 bc0b3311 4e62a7a2 00a4c91a     .b...3....bN....
    af48:	a23d0c34 d32a659f 002519d0 a2bc0a35     4.=..e*...%.5...
    af58:	28de7433 0a36048f 7237a2bc 0526515e     3t.(..6...7r^Q&.
    af68:	a2bc0a37 398e6433 0b3808e6 a2a7a2bc     7...3d.9..8.....
    af78:	a4ca2a4c bc0a3900 4ca2a7a2 3a048f3b     L*...9.....L;..:
    af88:	a3a32906 b2073b04 0527579a a6ab073c     .)...;...W'.<...
    af98:	3d02ea9b 33aa9c08 3e011a32 93a72b07     ...=...32..>.+..
    afa8:	093f12ab 62a7a2b4 40008a9b 3b9e460c     ..?....b...@.F.;
    afb8:	cfa91cb3 4102f195 b7a2360b 588e5951     .......A.6..QY.X
    afc8:	0b420149 6233a235 1438ab35 b4094300     I.B.5.3b5.8..C..
    afd8:	2ea2a7a2 0c440293 6233a235 714c5315     ......D.5.3b.SLq
    afe8:	0b450028 5433a235 38a3334c 350b4606     (.E.5.3TL3.8.F.5
    aff8:	4c5433a2 013cc533 a2b40a47 334ea2a7     .3TL3.<.G.....N3
    b008:	0b480029 5523a236 4976238c b50c4901     ).H.6.#U.#vI.I..
    b018:	466433a2 87146519 b50b4a00 467237a2     .3dF.e...J...7rF
    b028:	02518a65 a2360c4b 1aca64a3 00cd31d5     e.Q.K.6..d...1..
    b038:	a2b50b4c 28ca33b3 4d0638a3 93a2b50a     L....3.(.8.M....
    b048:	e92a4ad7 360c4e25 8c56a3a2 c959262a     .J*.%N.6..V.*&Y.
    b058:	b4094f04 33a2a7a2 0a500029 6233a2b5     .O.....3).P...3b
    b068:	13ccd315 9ebc0951 c933a2a7 360b5201     ....Q.....3..R.6
    b078:	6c7233a2 006698ee a2b40a53 48d23237     .3rl..f.S...72.H
    b088:	0b54048e 9573a235 17946519 36095500     ..T.5.s..e...U.6
    b098:	ec5523a2 0d5604b7 46a3a236 9ca7298e     .#U...V.6..F.)..
    b0a8:	5700ca32 a3a2360c a67d4e46 5800229c     2..W.6..FN}..".X
    b0b8:	a3a2b50b 4e519d54 0a5900c9 76a3a2b5     ....T.QN..Y....v
    b0c8:	0bca33aa a2b4085a 10e76433 9b4a075b     .3..Z...3d..[.J.
    b0d8:	5c12fab3 939ecd0f 65198651 19865198     ...\....Q..e.Q..
    b0e8:	075d1865 faa39b4a 9d075e1a 1d539bb2     e.].J....^....S.
    b0f8:	9a0e055f 92066073 610313ba a7a22d0a     _...s`.....a.-..
    b108:	aa315c61 3d0c6200 4651a3a2 0e298ab3     a\1..b.=..QF..).
    b118:	ac096305 8ea2a7a2 0c640149 51aba2bd     .c......I.d....Q
    b128:	14c5315c 0a650aa3 e2a7a2ac 00293148     \1....e.....H1).
    b138:	a2bc0a66 b948e2ab 0c67011c a6679abd     f.....H...g...g.
    b148:	28dc6298 0b68004d 61a3a23e 5af63b86     .b.(M.h.>..a.;.Z
    b158:	bd0c6902 8d499ba2 0e28ca32 cb086a01     .i....I.2.(..j..
    b168:	e7679b9a 3d0c6b02 4651a3a2 253a9549     ..g..k.=..QFI.:%
    b178:	bd0d6c03 4651a7a2 51946519 096d021c     .l....QF.e.Q..m.
    b188:	62a3a22e 6e04bfea 93a22e09 04b5ec74     ...b...n....t...
    b198:	a2ac096f 1499a2a7 3d0c7000 1564939a     o........p.=..d.
    b1a8:	8f334c53 bd0b7104 98a6679a 0f28dc62     SL3..q...g..b.(.
    b1b8:	a2ad0b72 19465693 730091e5 37a2ac0a     r....VF....s...7
    b1c8:	2468d232 bd0d7400 1e5197a2 628ca331     2.h$.t....Q.1..b
    b1d8:	08750054 64a3a22e 0c762adf 5523a22e     T.u....d.*v...#U
    b1e8:	8ca7298e 0b770022 d293a22e 8a7299ea     .)..".w.......r.
    b1f8:	2d097800 5d54a3a2 0c790325 54a39a3d     .x.-..T]%.y.=..T
    b208:	a8c5314c 087a06a3 6233a2ac 097b0873     L1....z...3bs.{.
    b218:	629b9b4b 7c1d6395 f39b4906 4b0a7d00     K..b.c.|.I...}.K
    b228:	9d63939b 7e011562 97ae9407 00000254     ..c.b..~....T...
    b238:	ffff0400 00000000                       ........

0000b240 <u8g2_cb_mirror_vertical>:
    b240:	00000e3f 00000ebb 00000ee1 000010b4     ?...............
    b250:	0000108a 0000109c 000010ae 000010b4     ................
    b260:	000010b4                                ....

0000b264 <u8x8_d_st7565_powersave0_seq>:
    b264:	15a41518 00ff19af                       ........

0000b26c <u8x8_d_st7565_powersave1_seq>:
    b26c:	15ae1518 00ff19a5                       ........

0000b274 <u8x8_d_st7565_zflip0_seq>:
    b274:	15a11518 00ff19c8                       ........

0000b27c <u8x8_d_st7565_zflip1_seq>:
    b27c:	15a01518 00ff19c0                       ........

0000b284 <u8x8_d_st7565_zolen_128x64_init_seq>:
    b284:	15e21518 154015ae 15c815a1 15a215a6     ......@.........
    b294:	16f8152f 15271500 15071681 19a515ae     /.....'.........
    b2a4:	000000ff                                ....

0000b2a8 <u8x8_st7565_128x64_display_info>:
    b2a8:	32960100 78320101 003d0900 50280400     ...2..2x..=...(P
    b2b8:	04000810 00400080 682f2e2e 732f6c61     ......@.../hal/s
    b2c8:	682f6372 695f6c61 6d5f6332 6e79735f     rc/hal_i2c_m_syn
    b2d8:	00632e63 682f2e2e 732f6c61 682f6372     c.c.../hal/src/h
    b2e8:	695f6c61 00632e6f 682f2e2e 732f6c61     al_io.c.../hal/s
    b2f8:	682f6372 735f6c61 6d5f6970 6e79735f     rc/hal_spi_m_syn
    b308:	00632e63 682f2e2e 732f6c61 682f6372     c.c.../hal/src/h
    b318:	755f6c61 74726173 6e79735f 00632e63     al_usart_sync.c.
    b328:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    b338:	632e6369 00000000                       ic.c....

0000b340 <_map>:
    b340:	00000001 00000021 00000008 00000028     ....!.......(...
    b350:	0000000a 0000000a 0000000e 0000003e     ............>...
    b360:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    b370:	65735f6c 6d6f6372 0000632e              l_sercom.c..

0000b37c <_i2cms>:
    b37c:	00000002 00200014 00000100 000000ea     ...... .........
    b38c:	000000d7 02dc6c00 00000004 00200014     .....l........ .
    b39c:	00000100 00003736 000000d7 02dc6c00     ....67.......l..

0000b3ac <_usarts>:
    b3ac:	00000003 40100004 00030000 0000f62b     .......@....+...

0000b3bc <sercomspi_regs>:
    b3bc:	0020000c 00020000 00000000 000000ef     .. .............
    b3cc:	0020000c 00020000 00000000 010000fe     .. .............
    b3dc:	1001000c 00020000 00000000 050000fe     ................
    b3ec:	00002bba 00002be6 00002be6 00002bae     .+...+...+...+..
    b3fc:	00002bd2 00002bdc 00002be6 00002be6     .+...+...+...+..
    b40c:	00002be6 00002be6 00002be6 00002be6     .+...+...+...+..
    b41c:	00002bc4 00003360 00003346 00003316     .+..`3..F3...3..
    b42c:	000032ee 000032c6 656d6954 2074756f     .2...2..Timeout 
    b43c:	74696177 20676e69 20726f66 65646f4d     waiting for Mode
    b44c:	64616552 000a0d79 656d6954 2074756f     Ready...Timeout 
    b45c:	74696177 20676e69 20726f66 6b636150     waiting for Pack
    b46c:	65537465 0a0d746e 00000000 5f474552     etSent......REG_
    b47c:	46515249 5347414c 30253a3d 203b5832     IRQFLAGS=:%02X; 
    b48c:	58323025 000a0d20 00ff0706 00ffff02     %02X ...........
    b49c:	20706553 32203033 00343230 323a3232     Sep 30 2024.22:2
    b4ac:	35323a32 00000000 206e6f4d 20706553     2:25....Mon Sep 
    b4bc:	32203033 32323a32 2034323a 34323032     30 22:22:24 2024
    b4cc:	00000000 64343025 00000000 6265647c     ....%04d....|deb
    b4dc:	007c6775 64323025 3230253a 30253a64     ug|.%02d:%02d:%0
    b4ec:	00006432 64353025 2020566d 64353025     2d..%05dmV  %05d
    b4fc:	0000416d 312e3325 20205766 332e3325     mA..%3.1fW  %3.3
    b50c:	00685766 3a706143 32302520 20252564     fWh.Cap: %02d%% 
    b51c:	3a727245 2e322520 68576631 00000000     Err: %2.1fWh....
    b52c:	312e3225 252c5666 66312e32 33252c41     %2.1fV,%2.1fA,%3
    b53c:	5766312e 20202020 00002020 68576425     .1fW      ..%dWh
    b54c:	2564252c 00000025 000046c0 00004610     ,%d%%....F...F..
    b55c:	00004610 0000460e 000046b2 000046b2     .F...F...F...F..
    b56c:	000046a8 0000460e 000046b2 000046a8     .F...F...F...F..
    b57c:	000046b2 0000460e 000046b8 000046b8     .F...F...F...F..
    b58c:	000046b8 00004748 00004e70 00004e52     .F..HG..pN..RN..
    b59c:	00004e0c 00004d2a 00004e0c 00004e44     .N..*M...N..DN..
    b5ac:	00004e0c 00004d2a 00004e52 00004e52     .N..*M..RN..RN..
    b5bc:	00004e44 00004d2a 00004d22 00004d22     DN..*M.."M.."M..
    b5cc:	00004d22 00005088 000054d0 00005390     "M...P...T...S..
    b5dc:	00005390 0000538c 000054a8 000054a8     .S...S...T...T..
    b5ec:	0000549a 0000538c 000054a8 0000549a     .T...S...T...T..
    b5fc:	000054a8 0000538c 000054b0 000054b0     .T...S...T...T..
    b60c:	000054b0 000056b4                       .T...V..

0000b614 <_global_impure_ptr>:
    b614:	20000020 00006c94 00006d08 00006d08      .. .l...m...m..
    b624:	00006c78 00006d08 00006d08 00006d08     xl...m...m...m..
    b634:	00006d08 00006d08 00006d08 00006c80     .m...m...m...l..
    b644:	00006762 00006d08 0000671c 0000676c     bg...m...g..lg..
    b654:	00006d08 000067b8 000069a2 000069a2     .m...g...i...i..
    b664:	000069a2 000069a2 000069a2 000069a2     .i...i...i...i..
    b674:	000069a2 000069a2 000069a2 00006d08     .i...i...i...m..
    b684:	00006d08 00006d08 00006d08 00006d08     .m...m...m...m..
    b694:	00006d08 00006d08 00006d08 00006d08     .m...m...m...m..
    b6a4:	00006d08 000067c0 00006908 00006d08     .m...g...i...m..
    b6b4:	00006908 00006d08 00006d08 00006d08     .i...m...m...m..
    b6c4:	00006d08 000069d2 00006d08 00006d08     .m...i...m...m..
    b6d4:	000069da 00006d08 00006d08 00006d08     .i...m...m...m..
    b6e4:	00006d08 00006d08 00006a7c 00006d08     .m...m..|j...m..
    b6f4:	00006d08 00006aae 00006d08 00006d08     .m...j...m...m..
    b704:	00006d08 00006d08 00006d08 00006d08     .m...m...m...m..
    b714:	00006d08 00006d08 00006d08 00006d08     .m...m...m...m..
    b724:	00006ba8 00006bdc 00006908 00006908     .k...k...i...i..
    b734:	00006908 00006bee 00006bdc 00006d08     .i...k...k...m..
    b744:	00006d08 00006bf6 00006d08 00006b10     .m...k...m...k..
    b754:	00006cd6 00006c4c 00006b46 00006d08     .l..Ll..Fk...m..
    b764:	00006b4e 00006d08 00006ca4 00006d08     Nk...m...l...m..
    b774:	00006d08 00006c06 00464e49 00666e69     .m...l..INF.inf.
    b784:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
    b794:	42413938 46454443 00000000 33323130     89ABCDEF....0123
    b7a4:	37363534 62613938 66656463 00000000     456789abcdef....
    b7b4:	6c756e28 0000296c 00000030              (null)..0...

0000b7c0 <blanks.7223>:
    b7c0:	20202020 20202020 20202020 20202020                     

0000b7d0 <zeroes.7224>:
    b7d0:	30303030 30303030 30303030 30303030     0000000000000000
    b7e0:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

0000b7f0 <__mprec_bigtens>:
    b7f0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    b800:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    b810:	7f73bf3c 75154fdd                       <.s..O.u

0000b818 <__mprec_tens>:
    b818:	00000000 3ff00000 00000000 40240000     .......?......$@
    b828:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    b838:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    b848:	00000000 412e8480 00000000 416312d0     .......A......cA
    b858:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    b868:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    b878:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    b888:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    b898:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    b8a8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    b8b8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    b8c8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    b8d8:	79d99db4 44ea7843                       ...yCx.D

0000b8e0 <p05.6055>:
    b8e0:	00000005 00000019 0000007d 00000043     ........}...C...
    b8f0:	49534f50 00000058 0000002e              POSIX.......

0000b8fc <_ctype_>:
    b8fc:	20202000 20202020 28282020 20282828     .         ((((( 
    b90c:	20202020 20202020 20202020 20202020                     
    b91c:	10108820 10101010 10101010 10101010      ...............
    b92c:	04040410 04040404 10040404 10101010     ................
    b93c:	41411010 41414141 01010101 01010101     ..AAAAAA........
    b94c:	01010101 01010101 01010101 10101010     ................
    b95c:	42421010 42424242 02020202 02020202     ..BBBBBB........
    b96c:	02020202 02020202 02020202 10101010     ................
    b97c:	00000020 00000000 00000000 00000000      ...............
	...

0000ba00 <_init>:
    ba00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ba02:	46c0      	nop			; (mov r8, r8)
    ba04:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ba06:	bc08      	pop	{r3}
    ba08:	469e      	mov	lr, r3
    ba0a:	4770      	bx	lr

0000ba0c <__init_array_start>:
    ba0c:	00007c41 	.word	0x00007c41

0000ba10 <__frame_dummy_init_array_entry>:
    ba10:	000000cd                                ....

0000ba14 <_fini>:
    ba14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ba16:	46c0      	nop			; (mov r8, r8)
    ba18:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ba1a:	bc08      	pop	{r3}
    ba1c:	469e      	mov	lr, r3
    ba1e:	4770      	bx	lr

0000ba20 <__fini_array_start>:
    ba20:	000000a5 	.word	0x000000a5
